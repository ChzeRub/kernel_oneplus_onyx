	.cpu cortex-a15
	.fpu softvfp
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 2
	.eabi_attribute 30, 2
	.eabi_attribute 34, 1
	.eabi_attribute 18, 4
	.file	"android.c"
#APP
	.macro	it, cond
	.endm
	.macro	itt, cond
	.endm
	.macro	ite, cond
	.endm
	.macro	ittt, cond
	.endm
	.macro	itte, cond
	.endm
	.macro	itet, cond
	.endm
	.macro	itee, cond
	.endm
	.macro	itttt, cond
	.endm
	.macro	ittte, cond
	.endm
	.macro	ittet, cond
	.endm
	.macro	ittee, cond
	.endm
	.macro	itett, cond
	.endm
	.macro	itete, cond
	.endm
	.macro	iteet, cond
	.endm
	.macro	iteee, cond
	.endm

	.text
	.align	2
	.type	composite_setup_complete, %function
composite_setup_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	composite_setup_complete, .-composite_setup_complete
	.align	2
	.type	f_midi_disable, %function
f_midi_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	bx	r3
	.fnend
	.size	f_midi_disable, .-f_midi_disable
	.align	2
	.type	f_midi_snd_free, %function
f_midi_snd_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_snd_free, .-f_midi_snd_free
	.align	2
	.type	f_midi_in_open, %function
f_midi_in_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #28]
	ldr	r3, [r0, #12]
	ldr	r2, [r2, #200]
	add	r3, r2, r3, asl #2
	ldr	r1, [r3, #224]
	cmp	r1, #0
	beq	.L7
	str	r0, [r3, #96]
	ldr	r3, [r0, #12]
	mov	r1, #0
	mov	r0, r1
	add	r3, r3, #56
	ldr	r3, [r2, r3, asl #2]
	strb	r1, [r3, #9]
.L6:
	bx	lr
.L7:
	mvn	r0, #21
	b	.L6
	.fnend
	.size	f_midi_in_open, .-f_midi_in_open
	.align	2
	.type	f_midi_in_close, %function
f_midi_in_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_in_close, .-f_midi_in_close
	.align	2
	.type	f_midi_out_open, %function
f_midi_out_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r1, [r0, #28]
	mov	r2, r0
	ldr	r3, [r0, #12]
	ldr	r1, [r1, #200]
	cmp	r3, #15
	addle	r3, r3, #40
	movle	r0, #0
	mvngt	r0, #21
	strle	r2, [r1, r3, asl #2]
	bx	lr
	.fnend
	.size	f_midi_out_open, .-f_midi_out_open
	.align	2
	.type	f_midi_out_close, %function
f_midi_out_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_out_close, .-f_midi_out_close
	.align	2
	.type	debug_reset_stats, %function
debug_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	lr, .L25
.LPIC0:
	add	lr, pc, lr
	ldr	r3, [lr]
	cmp	lr, r3
	sub	r3, r3, #4
	beq	.L23
	mov	ip, #0
.L17:
	ldr	r1, [r3, #20]
	cmp	r1, #0
	beq	.L16
	str	ip, [r1, #120]
	str	ip, [r1, #124]
	str	ip, [r1, #128]
.L16:
	ldr	r3, [r3, #4]
	cmp	lr, r3
	sub	r3, r3, #4
	bne	.L17
.L23:
	mov	r0, r2
	ldr	pc, [sp], #4
.L26:
	.align	2
.L25:
	.word	.LANCHOR0-(.LPIC0+8)
	.fnend
	.size	debug_reset_stats, .-debug_reset_stats
	.align	2
	.type	debug_open, %function
debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_open, .-debug_open
	.align	2
	.type	rmnet_smd_debug_open, %function
rmnet_smd_debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #348]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	rmnet_smd_debug_open, .-rmnet_smd_debug_open
	.align	2
	.type	rmnet_sdio_set_modem_cbits_w, %function
rmnet_sdio_set_modem_cbits_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #-12]
	bx	lr
	.fnend
	.size	rmnet_sdio_set_modem_cbits_w, .-rmnet_sdio_set_modem_cbits_w
	.align	2
	.type	rmnet_sdio_disconnect_work, %function
rmnet_sdio_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	rmnet_sdio_disconnect_work, .-rmnet_sdio_disconnect_work
	.align	2
	.type	rmnet_sdio_reset_stats, %function
rmnet_sdio_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #124]
	mov	r1, #0
	mov	r0, r2
	str	r1, [r3, #344]
	str	r1, [r3, #348]
	str	r1, [r3, #356]
	str	r1, [r3, #360]
	str	r1, [r3, #316]
	str	r1, [r3, #352]
	bx	lr
	.fnend
	.size	rmnet_sdio_reset_stats, .-rmnet_sdio_reset_stats
	.align	2
	.type	debug_rmnet_sdio_open, %function
debug_rmnet_sdio_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #348]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	debug_rmnet_sdio_open, .-debug_rmnet_sdio_open
	.section	.text.unlikely,"ax",%progbits
	.align	2
	.type	xport_to_str, %function
xport_to_str:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	sub	r0, r0, #1
	cmp	r0, #9
	addls	pc, pc, r0, asl #2
	b	.L34
.L36:
	b	.L46
	b	.L37
	b	.L38
	b	.L39
	b	.L40
	b	.L41
	b	.L42
	b	.L43
	b	.L44
	b	.L45
	.p2align 1
.L37:
	ldr	r0, .L47
.LPIC4:
	add	r0, pc, r0
	bx	lr
.L38:
	ldr	r0, .L47+4
.LPIC5:
	add	r0, pc, r0
	bx	lr
.L39:
	ldr	r0, .L47+8
.LPIC6:
	add	r0, pc, r0
	bx	lr
.L40:
	ldr	r0, .L47+12
.LPIC7:
	add	r0, pc, r0
	bx	lr
.L41:
	ldr	r0, .L47+16
.LPIC8:
	add	r0, pc, r0
	bx	lr
.L42:
	ldr	r0, .L47+20
.LPIC9:
	add	r0, pc, r0
	bx	lr
.L43:
	ldr	r0, .L47+24
.LPIC10:
	add	r0, pc, r0
	bx	lr
.L44:
	ldr	r0, .L47+28
.LPIC11:
	add	r0, pc, r0
	bx	lr
.L45:
	ldr	r0, .L47+32
.LPIC12:
	add	r0, pc, r0
	bx	lr
.L34:
	ldr	r0, .L47+36
.LPIC13:
	add	r0, pc, r0
	bx	lr
.L46:
	ldr	r0, .L47+40
.LPIC3:
	add	r0, pc, r0
	bx	lr
.L48:
	.align	2
.L47:
	.word	.LC1-(.LPIC4+8)
	.word	.LC2-(.LPIC5+8)
	.word	.LC3-(.LPIC6+8)
	.word	.LC4-(.LPIC7+8)
	.word	.LC5-(.LPIC8+8)
	.word	.LC6-(.LPIC9+8)
	.word	.LC7-(.LPIC10+8)
	.word	.LC8-(.LPIC11+8)
	.word	.LC9-(.LPIC12+8)
	.word	.LC10-(.LPIC13+8)
	.word	.LC0-(.LPIC3+8)
	.fnend
	.size	xport_to_str, .-xport_to_str
	.text
	.align	2
	.type	rmnet_mux_suspend, %function
rmnet_mux_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #360]
	cmp	r3, #0
	beq	.L49
	ldr	r3, [r0, #340]
	bic	r3, r3, #2
	str	r3, [r0, #340]
.L49:
	bx	lr
	.fnend
	.size	rmnet_mux_suspend, .-rmnet_mux_suspend
	.align	2
	.type	rmnet_mux_unbind, %function
rmnet_mux_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #0
	str	r3, [r1, #164]
	bx	lr
	.fnend
	.size	rmnet_mux_unbind, .-rmnet_mux_unbind
	.align	2
	.type	rmnet_mux_reset_stats, %function
rmnet_mux_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #124]
	mov	r1, #0
	mov	r0, r2
	str	r1, [r3, #396]
	str	r1, [r3, #404]
	str	r1, [r3, #408]
	str	r1, [r3, #392]
	str	r1, [r3, #388]
	str	r1, [r3, #300]
	str	r1, [r3, #400]
	str	r1, [r3, #412]
	bx	lr
	.fnend
	.size	rmnet_mux_reset_stats, .-rmnet_mux_reset_stats
	.align	2
	.type	dbg_rmnet_mux_open, %function
dbg_rmnet_mux_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #348]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	dbg_rmnet_mux_open, .-dbg_rmnet_mux_open
	.align	2
	.type	audio_control_complete, %function
audio_control_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	audio_control_complete, .-audio_control_complete
	.align	2
	.type	audio_pcm_prepare, %function
audio_pcm_prepare:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	ip, r0
	str	lr, [sp, #4]
	ldr	r1, [r0, #164]
	mov	lr, #0
	mov	r0, lr
	ldr	r4, [r1, #88]
	ldr	r2, [r1, #68]
	ldr	r3, [r1, #208]
	mul	r2, r2, r4
	str	lr, [r3, #120]
	mov	r2, r2, lsr #3
	str	r2, [r3, #116]
	ldr	r2, [r1, #548]
	str	r2, [r3, #104]
	ldr	r1, [ip, #164]
	ldr	ip, [r1, #88]
	ldr	r1, [r1, #76]
	str	r2, [r3, #112]
	mul	r1, r1, ip
	add	r2, r2, r1, lsr #3
	str	r2, [r3, #108]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_prepare, .-audio_pcm_prepare
	.align	2
	.type	audio_pcm_pointer, %function
audio_pcm_pointer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #164]
	ldr	r2, [r3, #208]
	ldr	r0, [r3, #88]
	ldr	r3, [r2, #112]
	ldr	r2, [r2, #104]
	rsb	r3, r2, r3
	mov	r3, r3, asl #3
	udiv	r0, r3, r0
	bx	lr
	.fnend
	.size	audio_pcm_pointer, .-audio_pcm_pointer
	.align	2
	.type	ffs_ep0_ioctl, %function
ffs_ep0_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #124]
	movw	r0, #26496
	cmp	r1, r0
	ldr	r0, [r3]
	beq	.L73
	cmp	r0, #0
	beq	.L69
	ldr	r3, [r0]
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L69
	bx	r3
.L73:
	ldr	r3, [r3, #136]
	cmp	r3, #0
	beq	.L66
	.save {lr}
	str	lr, [sp, #-4]!
	mov	ip, r2
	ldr	r2, [r3, #8]
	ldr	lr, [r3, #44]
	ldrh	r1, [r2, #182]
	cmp	r1, #0
	beq	.L67
	uxtb	ip, ip
	mov	r2, lr
.L65:
	mov	r0, r2
	ldrh	r3, [r2], #2
	sxth	r3, r3
	cmp	r3, #0
	blt	.L64
	cmp	r3, ip
	beq	.L74
.L64:
	subs	r1, r1, #1
	bne	.L65
.L67:
	mvn	r0, #32
	ldr	pc, [sp], #4
.L74:
	rsb	r0, lr, r0
	mov	r0, r0, asr #1
	ldr	pc, [sp], #4
.L66:
	mvn	r0, #18
	bx	lr
.L69:
	mvn	r0, #24
	bx	lr
	.fnend
	.size	ffs_ep0_ioctl, .-ffs_ep0_ioctl
	.align	2
	.type	fsg_lun_release, %function
fsg_lun_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	fsg_lun_release, .-fsg_lun_release
	.align	2
	.type	serial_debug_open, %function
serial_debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #348]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	serial_debug_open, .-serial_debug_open
	.align	2
	.type	debug_sdio_open, %function
debug_sdio_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_sdio_open, .-debug_sdio_open
	.align	2
	.type	debug_smd_open, %function
debug_smd_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_smd_open, .-debug_smd_open
	.align	2
	.type	gbam_endless_rx_complete, %function
gbam_endless_rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gbam_endless_rx_complete, .-gbam_endless_rx_complete
	.align	2
	.type	gbam_endless_tx_complete, %function
gbam_endless_tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gbam_endless_tx_complete, .-gbam_endless_tx_complete
	.align	2
	.type	gbam_wake_cb, %function
gbam_wake_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #16]
	ldr	r3, [r3, #120]
	ldr	r0, [r3]
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L82
	bx	r3
.L82:
	mvn	r0, #94
	bx	lr
	.fnend
	.size	gbam_wake_cb, .-gbam_wake_cb
	.align	2
	.type	ghsic_ctrl_receive, %function
ghsic_ctrl_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxeq	lr
	ldr	r3, [r0, #52]
	cmp	r3, #0
	beq	.L86
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #8]
	blx	r3
	ldr	r3, [r4, #100]
	add	r3, r3, #1
	str	r3, [r4, #100]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L86:
	mov	r0, r3
	bx	lr
	.fnend
	.size	ghsic_ctrl_receive, .-ghsic_ctrl_receive
	.align	2
	.type	ghsic_ctrl_status, %function
ghsic_ctrl_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #8]
	str	r1, [r0, #92]
	cmp	r3, #0
	beq	.L89
	ldr	r2, [r3, #128]
	cmp	r2, #0
	beq	.L89
	mov	r0, r3
	bx	r2
.L89:
	bx	lr
	.fnend
	.size	ghsic_ctrl_status, .-ghsic_ctrl_status
	.align	2
	.global	gser_get_dtr
	.type	gser_get_dtr, %function
gser_get_dtr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrh	r0, [r0, #168]
	and	r0, r0, #1
	bx	lr
	.fnend
	.size	gser_get_dtr, .-gser_get_dtr
	.align	2
	.global	gser_get_rts
	.type	gser_get_rts, %function
gser_get_rts:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrh	r0, [r0, #168]
	ubfx	r0, r0, #1, #1
	bx	lr
	.fnend
	.size	gser_get_rts, .-gser_get_rts
	.align	2
	.type	ccid_bulk_release, %function
ccid_bulk_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #124]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #144]
	bx	lr
	.fnend
	.size	ccid_bulk_release, .-ccid_bulk_release
	.align	2
	.type	ccid_ctrl_release, %function
ccid_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #124]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #108]
	bx	lr
	.fnend
	.size	ccid_ctrl_release, .-ccid_ctrl_release
	.align	2
	.type	acc_hid_start, %function
acc_hid_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	acc_hid_start, .-acc_hid_start
	.align	2
	.type	acc_hid_stop, %function
acc_hid_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	acc_hid_stop, .-acc_hid_stop
	.align	2
	.type	acc_hid_open, %function
acc_hid_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	acc_hid_open, .-acc_hid_open
	.align	2
	.type	acc_hid_close, %function
acc_hid_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	acc_hid_close, .-acc_hid_close
	.align	2
	.type	rndis_response_available, %function
rndis_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #168
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #164]
	ldr	ip, [r1]
#APP
@ 61 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L116
.L105:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L116:
	ldr	r2, [r0, #160]
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L105
	mov	r4, r0
	mov	r0, #0
	str	r3, [ip]
	mov	r2, #32
	str	r0, [ip, #4]
	ldr	r0, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L105
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	b	.L105
	.fnend
	.size	rndis_response_available, .-rndis_response_available
	.align	2
	.type	rndis_response_complete, %function
rndis_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, [r1, #32]
	str	r6, [sp, #8]
	ldr	r2, [r1, #44]
	str	lr, [sp, #12]
	ldr	r3, [r4, #20]
	cmp	r3, #0
	beq	.L117
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L117
	cmn	r2, #108
	beq	.L122
	cmn	r2, #104
	beq	.L122
	ldr	r3, [r4, #160]
	cmp	r3, r0
	beq	.L140
.L117:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L122:
	mov	r3, #0
	str	r3, [r4, #168]
	b	.L117
.L140:
	add	r5, r4, #168
#APP
@ 99 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #0
	beq	.L117
	ldr	r0, [r4, #160]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L117
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	b	.L117
	.fnend
	.size	rndis_response_complete, .-rndis_response_complete
	.align	2
	.type	ecm_qc_get_alt, %function
ecm_qc_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #112]	@ zero_extendqisi2
	cmp	r3, r1
	moveq	r0, #0
	beq	.L142
	ldr	r3, [r0, #80]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
.L142:
	bx	lr
	.fnend
	.size	ecm_qc_get_alt, .-ecm_qc_get_alt
	.align	2
	.type	mbim_get_alt, %function
mbim_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #188]	@ zero_extendqisi2
	cmp	r3, r1
	moveq	r0, #0
	beq	.L145
	ldrb	r3, [r0, #189]	@ zero_extendqisi2
	cmp	r3, r1
	ldreqb	r0, [r0, #190]	@ zero_extendqisi2
	mvnne	r0, #21
.L145:
	bx	lr
	.fnend
	.size	mbim_get_alt, .-mbim_get_alt
	.align	2
	.type	bam_data_endless_rx_complete, %function
bam_data_endless_rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	bam_data_endless_rx_complete, .-bam_data_endless_rx_complete
	.align	2
	.type	bam_data_endless_tx_complete, %function
bam_data_endless_tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	bam_data_endless_tx_complete, .-bam_data_endless_tx_complete
	.align	2
	.type	ecm_notify_complete, %function
ecm_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, [r1, #32]
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	cmn	r3, #108
	beq	.L152
	cmn	r3, #104
	beq	.L152
.L151:
	ldr	r3, [r5, #20]
	cmp	r1, #0
	str	r1, [r5, #160]
	ldr	r0, [r3, #24]
	beq	.L150
	ldrb	r2, [r5, #164]	@ zero_extendqisi2
	ldr	r3, [r1]
	cmp	r2, #1
	beq	.L156
	bcc	.L150
	cmp	r2, #2
	bne	.L155
	mov	r2, #0
	mov	ip, #8
	mov	r4, #42
	mov	lr, #16
	strb	r2, [r3, #2]
	strb	r4, [r3, #1]
	strb	r2, [r3, #3]
	strb	r2, [r3, #7]
	strb	ip, [r3, #6]
	ldr	ip, [r1]
	str	lr, [r1, #4]
	ldr	r2, [r0]
	ldr	r0, [r2, #20]
	cmp	r0, #4
	bhi	.L173
	cmp	r0, #2
	movls	r2, #28672
	movtls	r2, 148
	bls	.L159
	ldr	r2, [r2, #16]
.L160:
	mov	r0, #28672
	mov	lr, #0
	cmp	r2, #3
	movt	r0, 148
	movt	lr, 6500
	movne	r2, r0
	moveq	r2, lr
.L159:
	mov	r0, #0
	str	r2, [ip, #8]
	str	r2, [ip, #12]
	strb	r0, [r5, #164]
.L155:
	mvn	r0, #94
	mov	ip, #0
	mov	r2, #32
	mov	r4, r1
	strb	r0, [r3]
	ldrb	r0, [r5, #140]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r5, #156]
	str	ip, [r5, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r4, [r5, #160]
.L150:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L152:
	mov	r3, #0
	strb	r3, [r5, #164]
	b	.L151
.L156:
	mov	r2, #0
	mov	ip, #8
	mov	r0, #2
	strb	r2, [r3, #1]
	ldrb	lr, [r5, #165]	@ zero_extendqisi2
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	strh	lr, [r3, #2]	@ unaligned
	str	ip, [r1, #4]
	strb	r0, [r5, #164]
	b	.L155
.L173:
	ldr	r2, [r2, #16]
	cmp	r2, #5
	bne	.L160
	mov	r2, #0
	movt	r2, 13000
	b	.L159
	.fnend
	.size	ecm_notify_complete, .-ecm_notify_complete
	.align	2
	.type	ecm_get_alt, %function
ecm_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, r1
	moveq	r0, #0
	beq	.L175
	ldr	r3, [r0, #80]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
.L175:
	bx	lr
	.fnend
	.size	ecm_get_alt, .-ecm_get_alt
	.align	2
	.type	prealloc, %function
prealloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	beq	.L202
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0]
	cmp	r0, r3
	sub	r3, r3, #36
	beq	.L179
	sub	r2, r2, #1
	b	.L180
.L182:
	cmp	r2, #0
	mov	r2, r1
	beq	.L204
.L180:
	ldr	r3, [r3, #36]
	sub	r1, r2, #1
	cmp	r5, r3
	sub	r3, r3, #36
	bne	.L182
	ldr	r3, [r6, #28]
	cmp	r2, #0
	mov	r4, r1
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	mov	r3, r3, lsr #7
	beq	.L203
.L183:
	cmp	r3, #0
	bne	.L185
	ldr	r7, .L206
.LPIC22:
	add	r7, pc, r7
	b	.L187
.L205:
	str	r7, [r0, #28]
	ldr	r2, [r5]
	cmp	r4, #0
	mov	r4, r1
	str	r3, [r2, #4]
	str	r2, [r0, #36]
	str	r5, [r0, #40]
	str	r3, [r5]
	beq	.L203
.L187:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	sub	r1, r4, #1
	add	r3, r0, #36
	bne	.L205
.L186:
	ldr	r3, [r5]
	cmp	r5, r3
	beq	.L178
.L203:
	mov	r0, #0
.L200:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L204:
	mov	r8, #256
	mov	r7, #512
.L181:
	ldr	r4, [r3, #36]
	mov	r1, r3
	mov	r0, r6
	ldr	r2, [r3, #40]
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r8, [r3, #36]
	str	r7, [r3, #40]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r4, r5
	sub	r3, r4, #36
	bne	.L181
	b	.L203
.L185:
	ldr	r7, .L206+4
.LPIC23:
	add	r7, pc, r7
	b	.L190
.L189:
	str	r7, [r0, #28]
	ldr	r2, [r5]
	cmp	r4, #0
	mov	r4, r1
	str	r3, [r2, #4]
	str	r2, [r0, #36]
	str	r5, [r0, #40]
	str	r3, [r5]
	beq	.L203
.L190:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	sub	r1, r4, #1
	add	r3, r0, #36
	bne	.L189
	b	.L186
.L179:
	ldr	r3, [r1, #28]
	sub	r4, r2, #1
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	mov	r3, r3, lsr #7
	b	.L183
.L202:
	mvn	r0, #11
	bx	lr
.L178:
	mvn	r0, #11
	b	.L200
.L207:
	.align	2
.L206:
	.word	rx_complete-(.LPIC22+8)
	.word	tx_complete-(.LPIC23+8)
	.fnend
	.size	prealloc, .-prealloc
	.align	2
	.type	eth_qc_start_xmit, %function
eth_qc_start_xmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	eth_qc_start_xmit, .-eth_qc_start_xmit
	.align	2
	.type	f_audio_get_alt, %function
f_audio_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L214
.LPIC25:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldrb	r2, [r3, #8]	@ zero_extendqisi2
	cmp	r2, r1
	beq	.L213
	ldrb	r3, [r3, #9]	@ zero_extendqisi2
	cmp	r3, r1
	ldreqb	r0, [r0, #241]	@ zero_extendqisi2
	movne	r0, #0
	bx	lr
.L213:
	ldrb	r0, [r0, #240]	@ zero_extendqisi2
	bx	lr
.L215:
	.align	2
.L214:
	.word	uac1_ac_header_desc(GOT_PREL)+(.-(.LPIC25+8))
	.fnend
	.size	f_audio_get_alt, .-f_audio_get_alt
	.align	2
	.type	generic_set_cmd, %function
generic_set_cmd:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	add	r1, r1, #4
	str	r2, [r0, r1, asl #2]
	mov	r0, #0
	bx	lr
	.fnend
	.size	generic_set_cmd, .-generic_set_cmd
	.align	2
	.type	generic_get_cmd, %function
generic_get_cmd:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	add	r1, r1, #4
	ldr	r0, [r0, r1, asl #2]
	bx	lr
	.fnend
	.size	generic_get_cmd, .-generic_get_cmd
	.align	2
	.type	ncm_ep0out_complete, %function
ncm_ep0out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	mov	r2, #0
	ldr	ip, [r1, #32]
	str	r2, [r1, #32]
	cmp	r3, r2
	bne	.L223
	ldr	r2, [r1, #48]
	ldr	r3, [r1, #4]
	cmp	r2, r3
	beq	.L224
.L223:
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	bx	r3
.L224:
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r1, [r1]
	ldrb	r3, [r1, #2]	@ zero_extendqisi2
	ldrb	lr, [r1, #1]	@ zero_extendqisi2
	ldrb	r2, [r1]	@ zero_extendqisi2
	ldrb	r1, [r1, #3]	@ zero_extendqisi2
	mov	r3, r3, asl #16
	orr	r3, r3, lr, asl #8
	orr	r3, r3, r2
	orr	r3, r3, r1, asl #24
	cmp	r3, #2048
	bcc	.L219
	ldr	r2, .L225
.LPIC26:
	add	r2, pc, r2
	ldr	r2, [r2, #4]
	cmp	r2, r3
	strcs	r3, [ip, #104]
	bcs	.L221
.L219:
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	lr, [sp], #4
	ldr	r3, [r3, #24]
	bx	r3
.L221:
	ldr	pc, [sp], #4
.L226:
	.align	2
.L225:
	.word	.LANCHOR1-(.LPIC26+8)
	.fnend
	.size	ncm_ep0out_complete, .-ncm_ep0out_complete
	.align	2
	.type	ncm_get_alt, %function
ncm_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, r1
	moveq	r0, #0
	beq	.L228
	ldr	r3, [r0, #80]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
.L228:
	bx	lr
	.fnend
	.size	ncm_get_alt, .-ncm_get_alt
	.align	2
	.type	charger_disable, %function
charger_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #-4]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	charger_disable, .-charger_disable
	.align	2
	.type	qdss_function_init, %function
qdss_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	qdss_function_init, .-qdss_function_init
	.align	2
	.type	ptp_function_init, %function
ptp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ptp_function_init, .-ptp_function_init
	.align	2
	.type	ptp_function_cleanup, %function
ptp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	ptp_function_cleanup, .-ptp_function_cleanup
	.align	2
	.type	audio_source_function_unbind_config, %function
audio_source_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mvn	r2, #0
	str	r2, [r3]
	str	r2, [r3, #4]
	bx	lr
	.fnend
	.size	audio_source_function_unbind_config, .-audio_source_function_unbind_config
	.align	2
	.type	uasp_function_init, %function
uasp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	uasp_function_init, .-uasp_function_init
	.align	2
	.type	uasp_function_cleanup, %function
uasp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	uasp_function_cleanup, .-uasp_function_cleanup
	.align	2
	.type	uasp_function_bind_config, %function
uasp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mvn	r0, #18
	bx	lr
	.fnend
	.size	uasp_function_bind_config, .-uasp_function_bind_config
	.align	2
	.type	android_unbind_config, %function
android_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L255
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #24]
.LPIC27:
	add	r1, pc, r1
	ldr	r3, [r1]
	cmp	r1, r3
	sub	r2, r3, #168
	bne	.L243
	b	.L240
.L254:
	ldr	r3, [r2, #168]
	cmp	r1, r3
	sub	r2, r3, #168
	beq	.L240
.L243:
	ldr	r3, [r3, #-160]
	cmp	r0, r3
	bne	.L254
.L240:
	mov	r6, r5
	ldr	r4, [r6, #112]!
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L239
.L246:
	ldr	r0, [r4]
	mov	r1, r5
	ldr	r3, [r0, #44]
	cmp	r3, #0
	beq	.L245
	blx	r3
.L245:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L246
.L239:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L256:
	.align	2
.L255:
	.word	.LANCHOR2-(.LPIC27+8)
	.fnend
	.size	android_unbind_config, .-android_unbind_config
	.align	2
	.type	audio_set_endpoint_complete, %function
audio_set_endpoint_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #44]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [r1, #32]
	str	r3, [sp, #4]
	cmp	r5, r3
	bne	.L257
	ldr	r6, [r4, #264]
	cmp	r6, r3
	beq	.L257
	ldmia	r1, {r1, r2}
	add	r0, sp, #4
	bl	memcpy(PLT)
	ldr	r2, [sp, #4]
	mov	r0, r6
	ldr	r3, [r6, #36]
	ldrb	r1, [r4, #260]	@ zero_extendqisi2
	blx	r3
	str	r5, [r4, #264]
.L257:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_set_endpoint_complete, .-audio_set_endpoint_complete
	.align	2
	.type	midi_alloc_ep_req, %function
midi_alloc_ep_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r1, #32
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L264
	str	r5, [r4, #4]
	mov	r0, r5
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L269
.L264:
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L269:
	ldr	r2, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L264
	.fnend
	.size	midi_alloc_ep_req, .-midi_alloc_ep_req
	.align	2
	.type	ncm_function_init, %function
ncm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L277
.LPIC31:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L271
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #32976
	mov	r4, r0
	mov	r0, r3
	str	lr, [sp, #4]
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r3, #11
	movne	r3, #0
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L271:
	mov	r2, #16
	str	r2, [r0, #4]
	mov	r0, r3
	bx	lr
.L278:
	.align	2
.L277:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC31+8))
	.fnend
	.size	ncm_function_init, .-ncm_function_init
	.align	2
	.type	ecm_function_init, %function
ecm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L286
.LPIC33:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L280
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #32976
	mov	r4, r0
	mov	r0, r3
	str	lr, [sp, #4]
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r3, #11
	movne	r3, #0
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L280:
	mov	r2, #16
	str	r2, [r0, #4]
	mov	r0, r3
	bx	lr
.L287:
	.align	2
.L286:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC33+8))
	.fnend
	.size	ecm_function_init, .-ecm_function_init
	.align	2
	.type	rndis_function_init, %function
rndis_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L295
.LPIC35:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L289
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #32976
	mov	r4, r0
	mov	r0, r3
	str	lr, [sp, #4]
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r3, #11
	movne	r3, #0
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L289:
	mov	r2, #16
	str	r2, [r0, #4]
	mov	r0, r3
	bx	lr
.L296:
	.align	2
.L295:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC35+8))
	.fnend
	.size	rndis_function_init, .-rndis_function_init
	.align	2
	.type	audio_source_function_init, %function
audio_source_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L305
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
.LPIC37:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L300
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r3, r0, #0
	beq	.L304
.L298:
	mvn	r2, #0
	mov	r0, #0
	str	r2, [r3]
	str	r2, [r3, #4]
	str	r3, [r4, #4]
.L299:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L300:
	mov	r3, #16
	b	.L298
.L304:
	mvn	r0, #11
	b	.L299
.L306:
	.align	2
.L305:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC37+8))
	.fnend
	.size	audio_source_function_init, .-audio_source_function_init
	.align	2
	.type	midi_function_init, %function
midi_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L314
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC39:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L308
	mov	r4, r0
	movw	r1, #32976
	mov	r0, r3
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4, #4]
	beq	.L311
.L310:
	mvn	r2, #0
	mov	r0, #0
	str	r2, [r3]
	str	r2, [r3, #4]
.L312:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L308:
	mov	r2, #16
	mov	r3, r2
	str	r2, [r0, #4]
	b	.L310
.L311:
	mvn	r0, #11
	b	.L312
.L315:
	.align	2
.L314:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC39+8))
	.fnend
	.size	midi_function_init, .-midi_function_init
	.align	2
	.type	ccid_function_unbind, %function
ccid_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L317
	ldr	r0, [r1, #12]
	bl	kfree(PLT)
.L317:
	ldr	r0, [r4, #8]
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
	.fnend
	.size	ccid_function_unbind, .-ccid_function_unbind
	.align	2
	.type	ghsuart_ctrl_receive, %function
ghsuart_ctrl_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	beq	.L321
	ldr	r3, [r5, #68]
	cmp	r3, #0
	moveq	r4, r3
	beq	.L320
	ldr	r0, [r5, #12]
	blx	r3
	ldr	r3, [r5, #100]
	mov	r4, r0
	add	r3, r3, #1
	str	r3, [r5, #100]
.L320:
	mov	r0, r6
	bl	kfree(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L321:
	mov	r4, r5
	b	.L320
	.fnend
	.size	ghsuart_ctrl_receive, .-ghsuart_ctrl_receive
	.align	2
	.type	charger_unbind, %function
charger_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	ldr	r0, [r1, #-4]
	str	r6, [sp, #8]
	mov	r4, r1
	sub	r6, r1, #4
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L328
.L325:
	cmp	r3, #2
	bls	.L326
	ldr	r0, [r4, #12]
	bl	kfree(PLT)
.L326:
	ldr	r0, [r4, #8]
	bl	kfree(PLT)
	ldrd	r4, [sp]
	mov	r0, r6
	ldr	lr, [sp, #12]
	ldr	r6, [sp, #8]
	add	sp, sp, #16
	b	kfree(PLT)
.L328:
	ldr	r0, [r4, #16]
	bl	kfree(PLT)
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L325
	.fnend
	.size	charger_unbind, .-charger_unbind
	.align	2
	.type	midi_function_cleanup, %function
midi_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #4]
	b	kfree(PLT)
	.fnend
	.size	midi_function_cleanup, .-midi_function_cleanup
	.align	2
	.type	audio_source_function_cleanup, %function
audio_source_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #4]
	b	kfree(PLT)
	.fnend
	.size	audio_source_function_cleanup, .-audio_source_function_cleanup
	.align	2
	.type	mass_storage_function_cleanup, %function
mass_storage_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	mass_storage_function_cleanup, .-mass_storage_function_cleanup
	.align	2
	.type	ncm_function_cleanup, %function
ncm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_function_cleanup, .-ncm_function_cleanup
	.align	2
	.type	ecm_function_cleanup, %function
ecm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_function_cleanup, .-ecm_function_cleanup
	.align	2
	.type	rndis_function_cleanup, %function
rndis_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_function_cleanup, .-rndis_function_cleanup
	.align	2
	.type	gps_function_cleanup, %function
gps_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L340
.LPIC40:
	add	r3, pc, r3
	ldr	r0, [r3, #12]
	b	kfree(PLT)
.L341:
	.align	2
.L340:
	.word	.LANCHOR2-(.LPIC40+8)
	.fnend
	.size	gps_function_cleanup, .-gps_function_cleanup
	.align	2
	.type	rmnet_smd_notify_complete, %function
rmnet_smd_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r5, [r1, #32]
	cmn	r2, #104
	ldr	r7, [r5, #76]
	beq	.L344
	cmp	r2, #0
	mov	r6, r0
	mov	r4, r1
	beq	.L345
	cmn	r2, #108
	beq	.L344
	ldr	r0, [r7]
	ldr	r1, .L367
	add	r0, r0, #32
.LPIC41:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L345:
	ldr	r3, [r5, #88]
	cmp	r3, r6
	beq	.L366
.L342:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L344:
	mov	r3, #0
	str	r3, [r5, #164]
	b	.L342
.L366:
	add	r6, r5, #164
#APP
@ 99 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #0
	beq	.L342
	ldr	r0, [r5, #88]
	mov	r2, #32
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L342
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L367+4
	ldr	r0, [r7]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
.LPIC42:
	add	r1, pc, r1
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err(PLT)
.L368:
	.align	2
.L367:
	.word	.LC11-(.LPIC41+8)
	.word	.LC12-(.LPIC42+8)
	.fnend
	.size	rmnet_smd_notify_complete, .-rmnet_smd_notify_complete
	.align	2
	.type	rmnet_sdio_notify_complete, %function
rmnet_sdio_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r1, #32]
	cmn	r2, #104
	ldr	r7, [r4, #76]
	beq	.L371
	cmp	r2, #0
	mov	r5, r1
	beq	.L372
	cmn	r2, #108
	beq	.L371
	ldr	r0, [r7]
	ldr	r1, .L394
	add	r0, r0, #32
.LPIC43:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L372:
	ldr	r3, [r4, #312]
	tst	r3, #2
	beq	.L369
	add	r6, r4, #188
#APP
@ 99 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #0
	bne	.L393
.L369:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L371:
	mov	r3, #0
	str	r3, [r4, #188]
	b	.L369
.L393:
	ldr	r0, [r4, #88]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L369
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L394+4
	ldr	r0, [r7]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
.LPIC44:
	add	r1, pc, r1
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err(PLT)
.L395:
	.align	2
.L394:
	.word	.LC13-(.LPIC43+8)
	.word	.LC14-(.LPIC44+8)
	.fnend
	.size	rmnet_sdio_notify_complete, .-rmnet_sdio_notify_complete
	.align	2
	.type	gser_setup, %function
gser_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r2, #8482
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r6, [r1]	@ zero_extendqisi2
	ldr	r4, [r0, #20]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	ldrh	lr, [r1, #2]	@ unaligned
	ldrh	ip, [r1, #6]	@ unaligned
	orr	r3, r3, r6, asl #8
	ldr	r6, [r4, #24]
	cmp	r3, r2
	ldr	r4, [r6, #4]
	beq	.L398
	movw	r2, #41249
	cmp	r3, r2
	beq	.L399
	movw	r2, #8480
	cmp	r3, r2
	beq	.L409
.L404:
	mvn	r4, #94
.L407:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L409:
	cmp	ip, #7
	bne	.L404
	ldr	r2, [r6]
	mov	r7, ip
	ldr	r3, .L410
	ldr	r2, [r2, #4]
.LPIC45:
	add	r3, pc, r3
	str	r0, [r2]
	str	r3, [r4, #28]
	b	.L401
.L399:
	cmp	ip, #7
	ldr	r0, [r4]
	add	r1, r5, #160
	movcc	r7, ip
	movcs	r7, #7
	mov	r2, r7
	bl	memcpy(PLT)
.L401:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r7, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r4, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L407
	ldr	r0, [r6]
	mov	r3, r4
	ldr	r1, .L410+4
	ldrb	r2, [r5, #137]	@ zero_extendqisi2
	add	r0, r0, #32
.LPIC47:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L407
.L398:
	ldr	ip, [r0, #132]
	strh	lr, [r0, #168]	@ movhi
	cmp	ip, #0
	moveq	r7, ip
	beq	.L401
	mov	r2, lr
	ldrb	lr, [r0, #137]	@ zero_extendqisi2
	mov	r7, #0
	ldr	r3, .L410+8
	mov	r1, lr, asl #4
.LPIC46:
	add	r3, pc, r3
	sub	r1, r1, lr, asl #2
	add	r3, r3, r1
	ldrb	r1, [r3, #24]	@ zero_extendqisi2
	blx	ip
	b	.L401
.L411:
	.align	2
.L410:
	.word	gser_complete_set_line_coding-(.LPIC45+8)
	.word	.LC15-(.LPIC47+8)
	.word	.LANCHOR2-(.LPIC46+8)
	.fnend
	.size	gser_setup, .-gser_setup
	.align	2
	.type	acm_setup, %function
acm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r2, #8482
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r6, [r1]	@ zero_extendqisi2
	ldr	r4, [r0, #20]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	ldrh	lr, [r1, #2]	@ unaligned
	ldrh	ip, [r1, #6]	@ unaligned
	orr	r3, r3, r6, asl #8
	ldr	r6, [r4, #24]
	cmp	r3, r2
	ldr	r4, [r6, #4]
	beq	.L414
	movw	r2, #41249
	cmp	r3, r2
	beq	.L415
	movw	r2, #8480
	cmp	r3, r2
	beq	.L425
.L420:
	mvn	r4, #94
.L423:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L425:
	cmp	ip, #7
	bne	.L420
	ldr	r2, [r6]
	mov	r7, ip
	ldr	r3, .L426
	ldr	r2, [r2, #4]
.LPIC48:
	add	r3, pc, r3
	str	r0, [r2]
	str	r3, [r4, #28]
	b	.L417
.L415:
	cmp	ip, #7
	ldr	r0, [r4]
	add	r1, r5, #160
	movcc	r7, ip
	movcs	r7, #7
	mov	r2, r7
	bl	memcpy(PLT)
.L417:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r7, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r4, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L423
	ldr	r0, [r6]
	mov	r3, r4
	ldr	r1, .L426+4
	ldrb	r2, [r5, #138]	@ zero_extendqisi2
	add	r0, r0, #32
.LPIC50:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L423
.L414:
	ldr	ip, [r0, #132]
	strh	lr, [r0, #168]	@ movhi
	cmp	ip, #0
	moveq	r7, ip
	beq	.L417
	mov	r2, lr
	ldrb	lr, [r0, #138]	@ zero_extendqisi2
	mov	r7, #0
	ldr	r3, .L426+8
	mov	r1, lr, asl #4
.LPIC49:
	add	r3, pc, r3
	sub	r1, r1, lr, asl #2
	add	r3, r3, r1
	ldrb	r1, [r3, #60]	@ zero_extendqisi2
	blx	ip
	b	.L417
.L427:
	.align	2
.L426:
	.word	acm_complete_set_line_coding-(.LPIC48+8)
	.word	.LC16-(.LPIC50+8)
	.word	.LANCHOR2-(.LPIC49+8)
	.fnend
	.size	acm_setup, .-acm_setup
	.align	2
	.type	ecm_setup, %function
ecm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r2, #8515
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	lr, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrb	ip, [r1]	@ zero_extendqisi2
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	ldrh	r4, [r1, #4]	@ unaligned
	ldr	r5, [lr, #24]
	ldrh	lr, [r1, #2]	@ unaligned
	orr	r3, r3, ip, asl #8
	ldrh	ip, [r1, #6]	@ unaligned
	cmp	r3, r2
	ldr	r3, [r5, #4]
	bne	.L433
	cmp	ip, #0
	beq	.L436
.L433:
	mvn	r6, #94
.L429:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L436:
	ldrb	r2, [r0, #140]	@ zero_extendqisi2
	cmp	r2, r4
	bne	.L433
	strh	lr, [r0, #90]	@ movhi
	ldrb	r0, [r3, #26]	@ zero_extendqisi2
	mov	r4, r1
	str	ip, [r3, #4]
	mov	r1, r3
	mov	r2, #32
	bfi	r0, ip, #1, #1
	strb	r0, [r3, #26]
	ldr	r3, [r5]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bge	.L429
	ldr	r0, [r5]
	str	r6, [sp]
	ldr	r1, .L437
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	add	r0, r0, #32
.LPIC51:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L429
.L438:
	.align	2
.L437:
	.word	.LC17-(.LPIC51+8)
	.fnend
	.size	ecm_setup, .-ecm_setup
	.align	2
	.type	ncm_setup, %function
ncm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r1
	movw	r2, #8586
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldrb	r1, [r1]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	ip, [r0, #20]
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrh	lr, [r4, #2]	@ unaligned
	ldrh	r7, [r4, #4]	@ unaligned
	ldr	r6, [ip, #24]
	orr	r3, r3, r1, asl #8
	ldrh	r1, [r4, #6]	@ unaligned
	cmp	r3, r2
	ldr	r5, [r6, #4]
	beq	.L441
	ble	.L484
	movw	r2, #41347
	cmp	r3, r2
	beq	.L446
	ble	.L485
	movw	r2, #41349
	cmp	r3, r2
	beq	.L449
	movw	r2, #41353
	cmp	r3, r2
	bne	.L480
	cmp	r1, #1
	movhi	r1, #0
	movls	r1, #1
	cmp	lr, #0
	moveq	ip, r1
	orrne	ip, r1, #1
	cmp	ip, #0
	bne	.L480
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L480
	ldrb	r2, [r0, #172]	@ zero_extendqisi2
	mov	r7, #2
	ldr	r3, [r5]
	strb	r2, [r3]
	strb	ip, [r3, #1]
.L451:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r7, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L481
	ldr	r0, [r6]
	str	r5, [sp]
	ldr	r1, .L487
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	add	r0, r0, #32
.LPIC57:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L481
.L484:
	movw	r2, #8580
	cmp	r3, r2
	beq	.L443
	movw	r2, #8582
	cmp	r3, r2
	beq	.L444
	movw	r2, #8515
	cmp	r3, r2
	beq	.L486
.L480:
	mvn	r5, #94
.L481:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L444:
	cmp	r1, #4
	cmpeq	lr, #0
	bne	.L480
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L480
	ldr	r3, .L487+4
	str	r0, [r5, #32]
	mov	r7, #4
.LPIC53:
	add	r3, pc, r3
	str	r3, [r5, #28]
	b	.L451
.L449:
	cmp	r1, #3
	movhi	r1, #0
	movls	r1, #1
	cmp	lr, #0
	moveq	ip, r1
	orrne	ip, r1, #1
	cmp	ip, #0
	bne	.L480
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L480
	ldr	r2, [r0, #104]
	mov	r7, #4
	ldr	r3, [r5]
	mov	r1, r2, lsr #16
	ubfx	r0, r2, #8, #8
	strb	r2, [r3]
	mov	r2, r1, lsr #8
	strb	r0, [r3, #1]
	strb	r1, [r3, #2]
	strb	r2, [r3, #3]
	b	.L451
.L485:
	movw	r2, #41344
	cmp	r3, r2
	bne	.L480
	clz	r3, r1
	mov	r3, r3, lsr #5
	cmp	lr, #0
	orrne	r3, r3, #1
	cmp	r3, #0
	bne	.L480
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L480
	cmp	r1, #28
	ldr	r0, [r5]
	movcc	r7, r1
	ldr	r1, .L487+8
	movcs	r7, #28
	mov	r2, r7
.LPIC52:
	add	r1, pc, r1
	bl	memcpy(PLT)
	b	.L451
.L443:
	cmp	r1, #0
	bne	.L480
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L480
	cmp	lr, #0
	beq	.L453
	cmp	lr, #1
	bne	.L480
	ldr	r3, .L487+12
	mov	r7, r1
.LPIC56:
	add	r3, pc, r3
	add	r3, r3, #72
	str	r3, [r0, #168]
	b	.L451
.L486:
	cmp	r1, #0
	bne	.L480
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, r7
	moveq	r7, r1
	streqh	lr, [r0, #90]	@ movhi
	bne	.L480
	b	.L451
.L446:
	cmp	r1, #1
	movhi	r1, #0
	movls	r1, #1
	cmp	lr, #0
	moveq	ip, r1
	orrne	ip, r1, #1
	cmp	ip, #0
	bne	.L480
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L480
	ldr	r3, .L487+16
	mov	r7, #2
	ldr	r2, [r0, #168]
	ldr	r1, [r5]
.LPIC54:
	add	r3, pc, r3
	add	r3, r3, #28
	subs	r3, r2, r3
	strb	ip, [r1, #1]
	movne	r3, #1
	strb	r3, [r1]
	b	.L451
.L441:
	cmp	r1, #0
	bne	.L480
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L480
	cmp	lr, #0
	beq	.L455
	cmp	lr, #1
	bne	.L480
	mov	r3, #16777216
	strb	lr, [r0, #172]
.L457:
	ldr	r1, [r0, #168]
	mov	r7, #0
	ldr	r2, [r1, #4]
	bic	r2, r2, #16777216
	str	r2, [r1, #4]
	ldr	r2, [r0, #168]
	ldr	r1, [r2, #4]
	orr	r3, r1, r3
	str	r3, [r2, #4]
	b	.L451
.L455:
	strb	lr, [r0, #172]
	mov	r3, lr
	b	.L457
.L453:
	ldr	r3, .L487+20
	mov	r7, lr
.LPIC55:
	add	r3, pc, r3
	add	r3, r3, #28
	str	r3, [r0, #168]
	b	.L451
.L488:
	.align	2
.L487:
	.word	.LC18-(.LPIC57+8)
	.word	ncm_ep0out_complete-(.LPIC53+8)
	.word	.LANCHOR1-(.LPIC52+8)
	.word	.LANCHOR1-(.LPIC56+8)
	.word	.LANCHOR1-(.LPIC54+8)
	.word	.LANCHOR1-(.LPIC55+8)
	.fnend
	.size	ncm_setup, .-ncm_setup
	.align	2
	.type	rmnet_mux_notify_complete, %function
rmnet_mux_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r1, #32]
	cmn	r2, #104
	ldr	r7, [r4, #76]
	beq	.L491
	cmp	r2, #0
	mov	r5, r1
	beq	.L492
	cmn	r2, #108
	beq	.L491
	ldr	r0, [r7]
	ldr	r1, .L511
	add	r0, r0, #32
.LPIC58:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L492:
	add	r6, r4, #364
#APP
@ 99 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #0
	bne	.L510
.L489:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L510:
	ldr	r0, [r4, #88]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L489
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L511+4
	ldr	r0, [r7]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
.LPIC59:
	add	r1, pc, r1
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err(PLT)
.L491:
	mov	r3, #0
	str	r3, [r4, #364]
	b	.L489
.L512:
	.align	2
.L511:
	.word	.LC19-(.LPIC58+8)
	.word	.LC14-(.LPIC59+8)
	.fnend
	.size	rmnet_mux_notify_complete, .-rmnet_mux_notify_complete
	.align	2
	.type	composite_suspend, %function
composite_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	add	r0, r0, #32
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L517
	ldr	r4, [r3, #36]!
	cmp	r3, r4
	sub	r4, r4, #64
	beq	.L517
.L519:
	ldr	r2, [r4, #48]
	mov	r0, r4
	cmp	r2, #0
	beq	.L518
	blx	r2
	ldr	r3, [r6, #12]
	add	r3, r3, #36
.L518:
	ldr	r4, [r4, #64]
	cmp	r3, r4
	sub	r4, r4, #64
	bne	.L519
.L517:
	ldr	r3, .L526
.LPIC60:
	add	r3, pc, r3
	ldr	r3, [r3, #88]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L516
	mov	r0, r6
	blx	r3
.L516:
	ldrb	r3, [r6, #16]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #16]
	ldr	r3, [r5]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L513
	mov	r0, r5
	ldr	r6, [sp, #8]
	mov	r1, #2
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L513:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L527:
	.align	2
.L526:
	.word	.LANCHOR2-(.LPIC60+8)
	.fnend
	.size	composite_suspend, .-composite_suspend
	.align	2
	.type	composite_resume, %function
composite_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	lr, [sp, #12]
	bl	dev_get_drvdata(PLT)
	ldr	r3, .L549
	mov	r5, r0
.LPIC61:
	add	r3, pc, r3
	ldr	r3, [r3, #88]
	ldr	r3, [r3, #40]
	cmp	r3, #0
	beq	.L529
	blx	r3
.L529:
	ldr	r1, [r5, #12]
	cmp	r1, #0
	beq	.L531
	mov	r2, r1
	ldr	r4, [r2, #36]!
	cmp	r2, r4
	sub	r4, r4, #64
	beq	.L532
.L534:
	ldr	r3, [r4, #52]
	mov	r0, r4
	cmp	r3, #0
	beq	.L533
	blx	r3
	ldr	r1, [r5, #12]
	add	r2, r1, #36
.L533:
	ldr	r4, [r4, #64]
	cmp	r2, r4
	sub	r4, r4, #64
	bne	.L534
.L532:
	ldrb	r1, [r1, #23]	@ zero_extendqisi2
	cmp	r1, #0
	ldrne	r3, [r5, #64]
	moveq	r1, #500
	mulne	r1, r3, r1
	ldr	r3, [r6]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L531
	mov	r0, r6
	blx	r3
.L531:
	ldrb	r3, [r5, #16]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r5, #16]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L550:
	.align	2
.L549:
	.word	.LANCHOR2-(.LPIC61+8)
	.fnend
	.size	composite_resume, .-composite_resume
	.align	2
	.type	diag_read_complete, %function
diag_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	str	r8, [sp, #16]
	ldr	r3, [r1, #48]
	ldr	r6, [r1, #32]
	ldr	r4, [r0]
	str	r3, [r6, #8]
	ldr	r3, [r1, #44]
	add	r7, r4, #100
	mov	r0, r7
	str	r3, [r6, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #88]
	add	r2, r5, #36
	add	ip, r4, #84
	mov	r1, r0
	mov	r0, r7
	str	r2, [r4, #88]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #124]
	ldr	r2, [r4, #116]
	add	r3, r3, #1
	cmp	r2, #0
	str	r3, [r4, #124]
	beq	.L551
	ldr	r3, [r2, #12]
	cmp	r3, #0
	beq	.L551
	ldr	r0, [r2, #16]
	mov	r1, #3
	mov	r2, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L551:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	diag_read_complete, .-diag_read_complete
	.align	2
	.type	diag_write_complete, %function
diag_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	ldr	r7, [r1, #32]
	ldr	ip, [r5, #128]
	sub	r3, ip, #1
	str	r3, [r5, #128]
	ldr	r3, [r1, #44]
	cmp	r3, #0
	bne	.L561
	ldrh	r3, [r0, #20]
	ldr	r2, [r1, #4]
	cmp	r2, r3
	bcc	.L561
	udiv	r0, r2, r3
	mls	r3, r3, r0, r2
	cmp	r3, #0
	beq	.L574
.L561:
	add	r6, r5, #100
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r5, #96]
	add	r3, r5, #92
	mov	r1, r0
	add	r0, r4, #36
	str	r0, [r5, #96]
	str	r3, [r4, #36]
	str	r2, [r4, #40]
	str	r0, [r2]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L575
.L562:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r5, #116]
	cmp	r3, #0
	beq	.L560
	ldr	ip, [r3, #12]
	cmp	ip, #0
	beq	.L560
	mov	r2, r7
	ldrd	r4, [sp]
	mov	r1, #2
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r0, [r3, #16]
	bx	ip	@ indirect register sibling call
.L575:
	ldr	r3, [r4, #48]
	str	r3, [r7, #8]
	ldr	r3, [r4, #44]
	str	r3, [r7, #12]
	b	.L562
.L560:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L574:
	str	ip, [r5, #128]
	ldr	r0, [r1, #48]
	mov	r2, #32
	str	r3, [r1, #4]
	str	r0, [r7, #8]
	ldr	r3, [r1, #44]
	str	r3, [r7, #12]
	ldr	r0, [r5, #80]
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	r3, [r0, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #16]
	bx	r3
	.fnend
	.size	diag_write_complete, .-diag_write_complete
	.align	2
	.type	diag_function_disable, %function
diag_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #100
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r0, r5
	mov	r6, #0
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r6, [r4, #104]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #116]
	cmp	r3, r6
	beq	.L577
	ldr	ip, [r3, #12]
	cmp	ip, r6
	beq	.L577
	ldr	r0, [r3, #16]
	mov	r2, r6
	mov	r1, #1
	blx	ip
.L577:
	ldr	r0, [r4, #80]
	mov	r5, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #80]
	str	r5, [r3]
	ldr	r0, [r4, #76]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #76]
	str	r5, [r3]
	ldr	r3, [r4, #116]
	cmp	r3, r5
	strne	r5, [r3, #20]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	diag_function_disable, .-diag_function_disable
	.align	2
	.type	qdss_ctrl_read_complete, %function
qdss_ctrl_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	str	r8, [sp, #16]
	ldr	r3, [r1, #48]
	ldr	r6, [r1, #32]
	ldr	r5, [r0]
	str	r3, [r6, #8]
	ldr	r3, [r1, #44]
	add	r7, r5, #180
	mov	r0, r7
	str	r3, [r6, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #136]
	add	ip, r5, #132
	add	r2, r4, #36
	mov	r1, r0
	mov	r0, r7
	str	r2, [r5, #136]
	str	ip, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	ip, [r5, #116]
	cmp	ip, #0
	beq	.L589
	ldr	r0, [r5, #120]
	mov	r2, r6
	mov	r1, #2
	ldrd	r4, [sp]
	mov	r3, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	ip	@ indirect register sibling call
.L589:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	qdss_ctrl_read_complete, .-qdss_ctrl_read_complete
	.align	2
	.type	qdss_ctrl_write_complete, %function
qdss_ctrl_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #44]
	ldr	r5, [r0]
	ldr	r6, [r1, #32]
	cmp	r3, #0
	bne	.L593
	ldrh	r3, [r0, #20]
	ldr	r2, [r1, #4]
	cmp	r2, r3
	bcc	.L593
	udiv	r0, r2, r3
	mls	r3, r3, r0, r2
	cmp	r3, #0
	beq	.L600
.L593:
	add	r7, r5, #180
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r5, #144]
	add	r3, r5, #140
	mov	r1, r0
	add	r0, r4, #36
	str	r0, [r5, #144]
	str	r3, [r4, #36]
	str	r2, [r4, #40]
	str	r0, [r2]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L601
.L594:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	ip, [r5, #116]
	cmp	ip, #0
	beq	.L592
	ldr	r0, [r5, #120]
	mov	r2, r6
	mov	r1, #4
	ldrd	r4, [sp]
	mov	r3, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	ip	@ indirect register sibling call
.L601:
	ldr	r3, [r4, #48]
	str	r3, [r6, #8]
	ldr	r3, [r4, #44]
	str	r3, [r6, #12]
	b	.L594
.L592:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L600:
	ldr	r0, [r1, #48]
	str	r3, [r1, #4]
	mov	r2, #32
	str	r0, [r6, #8]
	ldr	r3, [r1, #44]
	str	r3, [r6, #12]
	ldr	r0, [r5, #96]
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	r3, [r0, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #16]
	bx	r3
	.fnend
	.size	qdss_ctrl_write_complete, .-qdss_ctrl_write_complete
	.align	2
	.type	rmnet_smd_debug_reset_stats, %function
rmnet_smd_debug_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	add	r5, r4, #156
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, #0
	mov	r1, r0
	mov	r0, r5
	str	r3, [r4, #416]
	str	r3, [r4, #420]
	str	r3, [r4, #424]
	str	r3, [r4, #428]
	str	r3, [r4, #432]
	str	r3, [r4, #436]
	str	r3, [r4, #440]
	str	r3, [r4, #444]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r4, [sp]
	mov	r0, r6
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_smd_debug_reset_stats, .-rmnet_smd_debug_reset_stats
	.align	2
	.type	rmnet_smd_start_rx, %function
rmnet_smd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #156
	add	r7, r0, #140
	strd	r8, [sp, #16]
	mov	r9, #256
	mov	r8, #512
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #76]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r6
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	fp, r0
	b	.L605
.L607:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r5, #80]
	sub	r1, r4, #36
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r10, #0
	mov	fp, r0
	bne	.L611
.L605:
	ldr	r4, [r5, #140]
	mov	r1, fp
	mov	r0, r6
	cmp	r7, r4
	bne	.L607
.L606:
	mov	r0, r6
	mov	r1, fp
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L611:
	ldr	r3, [sp, #4]
	mov	r2, r10
	ldr	r1, .L612
	ldr	r0, [r3]
.LPIC62:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r3, [r5, #144]
	str	r4, [r5, #144]
	str	r7, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	b	.L606
.L613:
	.align	2
.L612:
	.word	.LC20-(.LPIC62+8)
	.fnend
	.size	rmnet_smd_start_rx, .-rmnet_smd_start_rx
	.align	2
	.type	rmnet_sdio_control_rx_work, %function
rmnet_sdio_control_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r8, [sp, #16]
	sub	r8, r0, #112
	mov	r9, #512
	strd	r6, [sp, #8]
	sub	r6, r0, #32
	strd	r10, [sp, #24]
	mov	r10, #256
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	fp, [r0, #-136]
	b	.L617
.L620:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	ldr	r3, [r5, #-104]
	sub	r3, r3, #1
	str	r3, [r5, #-104]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #-4]
	cmn	r3, #19
	bne	.L619
	ldr	r3, [r5, #148]
	add	r3, r3, #1
	str	r3, [r5, #148]
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r7
	bl	kfree(PLT)
.L617:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #-112]
	mov	r3, r0
	mov	r0, r6
	mov	r1, r3
	cmp	r4, r8
	sub	r7, r4, #8
	bne	.L620
	mov	r0, r6
	mov	r1, r3
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L619:
	ldr	r0, [fp]
	ldr	r1, .L621
	add	r0, r0, #32
.LPIC63:
	add	r1, pc, r1
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	dev_err(PLT)
.L622:
	.align	2
.L621:
	.word	.LC21-(.LPIC63+8)
	.fnend
	.size	rmnet_sdio_control_rx_work, .-rmnet_sdio_control_rx_work
	.align	2
	.global	usb_rmnet_mux_ctrl_release
	.type	usb_rmnet_mux_ctrl_release, %function
usb_rmnet_mux_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	mov	r4, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #124]
	add	r7, r6, #356
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r4, [r6, #344]
	mov	r0, r7
	str	r4, [r5, #124]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	usb_rmnet_mux_ctrl_release, .-usb_rmnet_mux_ctrl_release
	.align	2
	.type	audio_pcm_close, %function
audio_pcm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #8]
	add	r6, r5, #100
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r4, [r5, #84]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_close, .-audio_pcm_close
	.align	2
	.type	debug_write_reset, %function
debug_write_reset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, #0
	mov	r1, r0
	mov	r0, r4
	str	r3, [r4, #140]
	str	r3, [r4, #136]
	str	r3, [r4, #132]
	str	r3, [r4, #128]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	debug_write_reset, .-debug_write_reset
	.align	2
	.type	gs_chars_in_buffer, %function
gs_chars_in_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r0, #280]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r4, #92]
	mov	r1, r0
	mov	r0, r4
	ldr	r2, [r4, #104]
	ldr	r3, [r4, #100]
	add	r2, r2, ip
	rsb	r3, r3, r2
	udiv	r4, r3, ip
	mls	r4, ip, r4, r3
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gs_chars_in_buffer, .-gs_chars_in_buffer
	.align	2
	.type	gs_write_room, %function
gs_write_room:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #280]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #4]
	mov	r1, r0
	cmp	r3, #0
	beq	.L633
	ldr	r5, [r4, #92]
	ldr	r3, [r4, #100]
	ldr	r2, [r4, #104]
	add	r3, r3, r5
	rsb	r3, r2, r3
	sub	r3, r3, #1
	udiv	r2, r3, r5
	mls	r5, r5, r2, r3
.L632:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L633:
	mov	r5, r3
	b	.L632
	.fnend
	.size	gs_write_room, .-gs_write_room
	.align	2
	.type	debug_sdio_reset_stats, %function
debug_sdio_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	ldr	r8, .L642
	strd	r10, [sp, #24]
	mov	r10, r2
	strd	r6, [sp, #8]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.LPIC72:
	add	r8, pc, r8
	ldr	r3, [r8, #92]
	cmp	r3, #0
	beq	.L640
	mov	r5, #0
	add	fp, r8, #96
	mov	r6, r5
	mov	r9, r5
.L636:
	add	r3, fp, r5
	add	r6, r6, #1
	ldr	r4, [r3, #24]
	add	r5, r5, #108
	add	r7, r4, #4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r9, [r4, #180]
	mov	r0, r7
	str	r9, [r4, #184]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r8, #92]
	cmp	r6, r3
	bcc	.L636
.L640:
	mov	r0, r10
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L643:
	.align	2
.L642:
	.word	.LANCHOR2-(.LPIC72+8)
	.fnend
	.size	debug_sdio_reset_stats, .-debug_sdio_reset_stats
	.align	2
	.type	debug_smd_reset_stats, %function
debug_smd_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	ldr	r8, .L651
	strd	r10, [sp, #24]
	mov	r10, r2
	strd	r6, [sp, #8]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.LPIC75:
	add	r8, pc, r8
	ldr	r3, [r8, #312]
	cmp	r3, #0
	beq	.L649
	mov	r5, #0
	add	fp, r8, #316
	mov	r6, r5
	mov	r9, r5
.L645:
	add	r3, fp, r5
	add	r6, r6, #1
	ldr	r4, [r3, #24]
	add	r5, r5, #108
	add	r7, r4, #4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r9, [r4, #168]
	mov	r0, r7
	str	r9, [r4, #164]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r8, #312]
	cmp	r6, r3
	bcc	.L645
.L649:
	mov	r0, r10
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L652:
	.align	2
.L651:
	.word	.LANCHOR2-(.LPIC75+8)
	.fnend
	.size	debug_smd_reset_stats, .-debug_smd_reset_stats
	.align	2
	.type	gsmd_ctrl_reset_stats, %function
gsmd_ctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, #0
	strd	r8, [sp, #16]
	ldr	r8, .L661
	mov	r9, r2
	strd	r6, [sp, #8]
	mov	r7, r5
	str	r10, [sp, #24]
	str	lr, [sp, #28]
.LPIC78:
	add	r8, pc, r8
.L655:
	add	r3, r8, #532
	ldr	r4, [r5, r3]
	add	r5, r5, #84
	cmp	r4, #0
	add	r6, r4, #108
	mov	r0, r6
	beq	.L654
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r7, [r4, #96]
	mov	r0, r6
	str	r7, [r4, #92]
	bl	_raw_spin_unlock_irqrestore(PLT)
.L654:
	cmp	r5, #504
	bne	.L655
	mov	r0, r9
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L662:
	.align	2
.L661:
	.word	.LANCHOR2-(.LPIC78+8)
	.fnend
	.size	gsmd_ctrl_reset_stats, .-gsmd_ctrl_reset_stats
	.align	2
	.type	rmnet_ctrl_release, %function
rmnet_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, #0
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r4, [r1, #124]
	add	r6, r4, #52
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	strb	r5, [r4, #4]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r3, r4, #16
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_ctrl_release, .-rmnet_ctrl_release
	.align	2
	.type	gctrl_reset_stats, %function
gctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	str	r10, [sp, #24]
	ldr	r10, .L676
	strd	r8, [sp, #16]
	mov	r9, r2
	strd	r6, [sp, #8]
	str	lr, [sp, #28]
.LPIC79:
	add	r10, pc, r10
	ldr	r3, [r10, #1036]
	cmp	r3, #0
	beq	.L674
	mov	r5, #0
	mov	r6, r5
	mov	r8, r5
.L668:
	add	r4, r10, #1040
	add	r6, r6, #1
	ldr	r4, [r5, r4]
	add	r5, r5, #104
	cmp	r4, #0
	add	r7, r4, #4
	mov	r0, r7
	beq	.L667
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r8, [r4, #100]
	mov	r0, r7
	str	r8, [r4, #96]
	str	r8, [r4, #104]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r10, #1036]
.L667:
	cmp	r6, r3
	bcc	.L668
.L674:
	mov	r0, r9
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L677:
	.align	2
.L676:
	.word	.LANCHOR2-(.LPIC79+8)
	.fnend
	.size	gctrl_reset_stats, .-gctrl_reset_stats
	.align	2
	.type	ghsic_data_reset_stats, %function
ghsic_data_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	ldr	r9, .L689
	strd	r10, [sp, #24]
	mov	r10, r2
	strd	r6, [sp, #8]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.LPIC82:
	add	r9, pc, r9
	ldr	r3, [r9, #1456]
	cmp	r3, #0
	beq	.L687
	mov	r6, #0
	mov	r7, r6
	mov	r5, r6
.L681:
	add	r4, r9, #1456
	add	r7, r7, #1
	add	r4, r4, #4
	ldr	r4, [r6, r4]
	add	r6, r6, #104
	cmp	r4, #0
	add	r8, r4, #80
	add	fp, r4, #48
	mov	r0, r8
	beq	.L680
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r5, [r4, #188]
	mov	r0, r8
	str	r5, [r4, #212]
	str	r5, [r4, #204]
	str	r5, [r4, #208]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, fp
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r5, [r4, #192]
	mov	r0, fp
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #216]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r9, #1456]
.L680:
	cmp	r7, r3
	bcc	.L681
.L687:
	mov	r0, r10
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L690:
	.align	2
.L689:
	.word	.LANCHOR2-(.LPIC82+8)
	.fnend
	.size	ghsic_data_reset_stats, .-ghsic_data_reset_stats
	.align	2
	.type	ghsuart_ctrl_reset_stats, %function
ghsuart_ctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L702
	strd	r8, [sp, #16]
	mov	r8, r2
	str	r10, [sp, #24]
	str	lr, [sp, #28]
.LPIC85:
	add	r6, pc, r6
	ldr	r3, [r6, #1876]
	cmp	r3, #0
	beq	.L700
	mov	r5, #0
	mov	r7, r5
	mov	r9, r5
.L694:
	add	r4, r6, #1872
	add	r7, r7, #1
	add	r4, r4, #8
	ldr	r4, [r5, r4]
	add	r5, r5, #84
	cmp	r4, #0
	add	r10, r4, #8
	mov	r0, r10
	beq	.L693
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r9, [r4, #100]
	mov	r0, r10
	str	r9, [r4, #96]
	str	r9, [r4, #104]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r6, #1876]
.L693:
	cmp	r7, r3
	bcc	.L694
.L700:
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L703:
	.align	2
.L702:
	.word	.LANCHOR2-(.LPIC85+8)
	.fnend
	.size	ghsuart_ctrl_reset_stats, .-ghsuart_ctrl_reset_stats
	.align	2
	.type	ghsuart_data_reset_stats, %function
ghsuart_data_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L715
	strd	r8, [sp, #16]
	mov	r9, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.LPIC88:
	add	r6, pc, r6
	ldr	r3, [r6, #2048]
	cmp	r3, #0
	beq	.L713
	mov	r5, #0
	mov	r7, r5
	mov	r8, r5
.L707:
	add	r4, r6, #2048
	add	r7, r7, #1
	add	r4, r4, #4
	ldr	r4, [r5, r4]
	add	r5, r5, #84
	cmp	r4, #0
	add	fp, r4, #104
	add	r10, r4, #72
	mov	r0, fp
	beq	.L706
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r8, [r4, #204]
	mov	r0, fp
	str	r8, [r4, #212]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r10
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r8, [r4, #208]
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r6, #2048]
.L706:
	cmp	r7, r3
	bcc	.L707
.L713:
	mov	r0, r9
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L716:
	.align	2
.L715:
	.word	.LANCHOR2-(.LPIC88+8)
	.fnend
	.size	ghsuart_data_reset_stats, .-ghsuart_data_reset_stats
	.align	2
	.type	ueth_change_mtu, %function
ueth_change_mtu:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #1216
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #1220]
	mov	r1, r0
	cmp	r3, #0
	mvnne	r4, #15
	bne	.L718
	sub	r0, r6, #15
	movw	r2, #1499
	cmp	r0, r2
	mvnhi	r4, #33
	strls	r6, [r4, #316]
	movls	r4, r3
.L718:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ueth_change_mtu, .-ueth_change_mtu
	.align	2
	.type	ueth_qc_change_mtu, %function
ueth_qc_change_mtu:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #1216
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #1220]
	mov	r1, r0
	cmp	r3, #0
	mvnne	r4, #15
	bne	.L723
	sub	r0, r6, #15
	movw	r2, #1499
	cmp	r0, r2
	mvnhi	r4, #33
	strls	r6, [r4, #316]
	movls	r4, r3
.L723:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ueth_qc_change_mtu, .-ueth_qc_change_mtu
	.align	2
	.type	ccid_ctrl_open, %function
ccid_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L732
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC91:
	add	r3, pc, r3
	ldr	r4, [r3, #2220]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L729
	ldr	r6, [r4, #108]
	cmp	r6, #0
	bne	.L730
	mov	r3, #1
	add	r7, r4, #84
	mov	r5, r1
	mov	r0, r7
	str	r3, [r4, #108]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r4, [r5, #124]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
.L728:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L730:
	mvn	r6, #15
	b	.L728
.L729:
	mvn	r6, #18
	b	.L728
.L733:
	.align	2
.L732:
	.word	.LANCHOR2-(.LPIC91+8)
	.fnend
	.size	ccid_ctrl_open, .-ccid_ctrl_open
	.align	2
	.type	ccid_bulk_open, %function
ccid_bulk_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L739
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC92:
	add	r3, pc, r3
	ldr	r4, [r3, #2220]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L736
	ldr	r5, [r4, #144]
	cmp	r5, #0
	bne	.L737
	mov	r3, #1
	add	r7, r4, #84
	str	r5, [r4, #140]
	mov	r6, r1
	mov	r0, r7
	str	r3, [r4, #144]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r4, [r6, #124]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
.L735:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L737:
	mvn	r5, #15
	b	.L735
.L736:
	mvn	r5, #18
	b	.L735
.L740:
	.align	2
.L739:
	.word	.LANCHOR2-(.LPIC92+8)
	.fnend
	.size	ccid_bulk_open, .-ccid_bulk_open
	.align	2
	.type	rmnet_mux_smd_start_rx, %function
rmnet_mux_smd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #356
	add	r7, r0, #104
	strd	r8, [sp, #16]
	mov	r9, #256
	mov	r8, #512
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #76]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r6
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	fp, r0
	b	.L742
.L744:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r5, #80]
	sub	r1, r4, #36
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r10, #0
	mov	fp, r0
	bne	.L748
.L742:
	ldr	r4, [r5, #104]
	mov	r1, fp
	mov	r0, r6
	cmp	r7, r4
	bne	.L744
.L743:
	mov	r0, r6
	mov	r1, fp
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L748:
	ldr	r3, [sp, #4]
	mov	r2, r10
	ldr	r1, .L749
	ldr	r0, [r3]
.LPIC93:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r3, [r5, #108]
	str	r4, [r5, #108]
	str	r7, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	b	.L743
.L750:
	.align	2
.L749:
	.word	.LC20-(.LPIC93+8)
	.fnend
	.size	rmnet_mux_smd_start_rx, .-rmnet_mux_smd_start_rx
	.align	2
	.type	audio_pcm_hw_params, %function
audio_pcm_hw_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, [r1, #296]
	movw	r2, #44100
	ldr	r3, [r1, #284]
	cmp	r3, #2
	cmpeq	ip, r2
	bne	.L757
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r3, [r0]
	.pad #12
	sub	sp, sp, #12
	ldr	r2, [r3]
	ldr	r2, [r2, #500]
	add	r2, r2, #256
	ldrd	r6, [r2]
	orrs	r0, r6, r7
	beq	.L763
.L753:
	mov	r0, #2
	mov	ip, #0
	add	r2, r4, #140
	str	r0, [r4, #128]
	ldr	r0, [r3]
	ldr	r0, [r0, #500]
	str	ip, [r4, #148]
	str	r0, [r4, #132]
	ldr	r3, [r3]
	ldr	lr, [r1, #380]
	ldr	r0, [r3, #500]
	cmp	r0, ip
	beq	.L754
	ldr	ip, [r0, #284]
	cmp	ip, #0
	beq	.L754
.L755:
	mov	r6, #0
	mov	r5, r1
	mov	r3, #208
	mov	r1, lr
	str	r6, [sp]
	ldr	ip, [ip]
	blx	ip
	cmp	r0, r6
	str	r0, [r4, #136]
	beq	.L758
	ldr	r1, [r5, #380]
	adds	r2, r4, #128
	ldr	r3, [r4, #164]
	str	r1, [r4, #144]
	str	r2, [r3, #560]
	beq	.L756
	ldr	r2, [r4, #136]
	mov	r0, r6
	str	r2, [r3, #548]
	ldr	r2, [r4, #140]
	str	r2, [r3, #552]
	ldr	r2, [r4, #144]
	str	r2, [r3, #556]
.L752:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L763:
	mvn	r6, #0
	mov	r7, #0
	strd	r6, [r2]
	ldr	r3, [r4]
	b	.L753
.L754:
	ldr	ip, .L764
.LPIC95:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	b	.L755
.L756:
	mov	r0, r2
	str	r2, [r3, #548]
	str	r2, [r3, #552]
	str	r2, [r3, #556]
	b	.L752
.L757:
	mvn	r0, #21
	bx	lr
.L758:
	mvn	r0, #11
	b	.L752
.L765:
	.align	2
.L764:
	.word	arm_dma_ops(GOT_PREL)+(.-(.LPIC95+8))
	.fnend
	.size	audio_pcm_hw_params, .-audio_pcm_hw_params
	.align	2
	.type	ffs_ep0_open, %function
ffs_ep0_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #348]
	ldr	r2, [r3, #96]
	cmp	r2, #3
	beq	.L768
	str	r3, [r1, #124]
	add	r2, r3, #88
#APP
@ 45 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	add	r2, r3, #92
#APP
@ 45 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	mov	r0, #0
	bx	lr
.L768:
	mvn	r0, #15
	bx	lr
	.fnend
	.size	ffs_ep0_open, .-ffs_ep0_open
	.align	2
	.type	rmnet_txcommand_complete, %function
rmnet_txcommand_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	add	r5, r4, #156
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #432]
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #432]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock(PLT)
	.fnend
	.size	rmnet_txcommand_complete, .-rmnet_txcommand_complete
	.align	2
	.type	ncm_notify_complete, %function
ncm_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	add	r6, r4, #176
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L773
	cmn	r3, #104
	beq	.L773
.L772:
	ldr	r3, [r4, #20]
	cmp	r5, #0
	str	r5, [r4, #160]
	ldr	r1, [r3, #24]
	beq	.L775
	ldrb	r2, [r4, #164]	@ zero_extendqisi2
	ldr	r3, [r5]
	cmp	r2, #1
	beq	.L777
	bcc	.L775
	cmp	r2, #2
	bne	.L776
	mov	r2, #0
	mov	r0, #8
	mov	lr, #42
	mov	ip, #16
	strb	r2, [r3, #2]
	strb	lr, [r3, #1]
	strb	r2, [r3, #3]
	strb	r2, [r3, #7]
	strb	r0, [r3, #6]
	ldr	r0, [r5]
	str	ip, [r5, #4]
	ldr	r2, [r1]
	ldr	r1, [r2, #20]
	cmp	r1, #2
	movls	r2, #28672
	movtls	r2, 148
	bhi	.L790
.L779:
	mov	r1, #1
	str	r2, [r0, #8]
	str	r2, [r0, #12]
	strb	r1, [r4, #164]
.L776:
	mvn	r1, #94
	mov	r2, #0
	mov	r0, r6
	strb	r1, [r3]
	ldrb	r1, [r4, #140]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	str	r2, [r4, #160]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4, #156]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	cmp	r7, #0
	strlt	r5, [r4, #160]
.L775:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L773:
	mov	r3, #0
	strb	r3, [r4, #164]
	b	.L772
.L777:
	mov	r2, #0
	mov	r1, #8
	strb	r2, [r3, #1]
	ldrb	r0, [r4, #165]	@ zero_extendqisi2
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	strh	r0, [r3, #2]	@ unaligned
	str	r1, [r5, #4]
	strb	r2, [r4, #164]
	b	.L776
.L790:
	ldr	ip, [r2, #16]
	mov	r1, #28672
	mov	r2, #0
	movt	r1, 148
	movt	r2, 6500
	cmp	ip, #3
	movne	r2, r1
	b	.L779
	.fnend
	.size	ncm_notify_complete, .-ncm_notify_complete
	.align	2
	.type	rmnet_mux_setup, %function
rmnet_mux_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	ip, [r0, #20]
	ldr	r2, [r0, #360]
	ldrh	r3, [r1, #2]	@ unaligned
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r7, [ip, #24]
	cmp	r2, #0
	ldr	r5, [r7, #4]
	beq	.L800
	mov	r4, r0
	ldrb	r0, [r1]	@ zero_extendqisi2
	movw	r2, #8482
	ldrb	r1, [r1, #1]	@ zero_extendqisi2
	orr	r1, r1, r0, asl #8
	cmp	r1, r2
	beq	.L793
	movw	r2, #41217
	cmp	r1, r2
	beq	.L794
	cmp	r1, #8448
	beq	.L806
.L802:
	mvn	r0, #94
.L804:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L794:
	cmp	r3, #0
	bne	.L802
	add	r9, r4, #356
	mov	r0, r9
	bl	_raw_spin_lock(PLT)
	mov	r3, r4
	ldr	r8, [r3, #328]!
	cmp	r8, r3
	beq	.L807
	ldr	r3, [r8, #4]
	mov	ip, #256
	mov	r1, #512
	ldr	r2, [r8]
	mov	r0, r9
	mov	r9, r8
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r8]
	str	r1, [r8, #4]
	ldr	r3, [r4, #336]
	sub	r3, r3, #1
	str	r3, [r4, #336]
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r8, #-4]
	ldr	r1, [r8, #-8]
	ldr	r0, [r5]
	cmp	r6, r3
	movcs	r8, r3
	movcc	r8, r6
	mov	r2, r8
	bl	memcpy(PLT)
	ldr	r3, .L808
	str	r4, [r5, #32]
.LPIC97:
	add	r3, pc, r3
	str	r3, [r5, #28]
	ldr	r0, [r9, #-8]!
	bl	kfree(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	ldr	r3, [r4, #404]
	cmp	r6, r8
	mov	r6, r8
	movle	ip, #0
	movgt	ip, #1
	add	r3, r3, #1
	str	r3, [r4, #404]
	b	.L796
.L806:
	ldr	r3, .L808+4
	mov	ip, #0
	str	r4, [r5, #32]
.LPIC96:
	add	r3, pc, r3
	str	r3, [r5, #28]
.L796:
	ldrb	r0, [r5, #26]	@ zero_extendqisi2
	str	r6, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r0, ip, #1, #1
	strb	r0, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L799
	mov	r0, r4
	b	.L804
.L793:
	ands	r3, r3, #1
	beq	.L798
	ldr	r3, [r4, #340]
	adds	ip, r6, #0
	mov	r6, #0
	movne	ip, #1
	orr	r3, r3, #2
	str	r3, [r4, #340]
	b	.L796
.L798:
	ldr	r2, [r4, #340]
	adds	ip, r6, #0
	mov	r6, r3
	movne	ip, #1
	bic	r2, r2, #2
	str	r2, [r4, #340]
	b	.L796
.L799:
	ldr	r0, [r7]
	mov	r2, r4
	ldr	r1, .L808+8
	add	r0, r0, #32
.LPIC98:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r4
	b	.L804
.L800:
	mvn	r0, #106
	b	.L804
.L807:
	mov	r0, r9
	bl	_raw_spin_unlock(PLT)
	mvn	r0, #94
	b	.L804
.L809:
	.align	2
.L808:
	.word	rmnet_mux_response_complete-(.LPIC97+8)
	.word	rmnet_mux_command_complete-(.LPIC96+8)
	.word	.LC22-(.LPIC98+8)
	.fnend
	.size	rmnet_mux_setup, .-rmnet_mux_setup
	.align	2
	.type	gbam_reset_stats, %function
gbam_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L819
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC99:
	add	r3, pc, r3
	ldr	r2, [r3, #2224]
	cmp	r2, #0
	ble	.L815
	ldr	r4, [r3, #2228]
	cmp	r4, #0
	beq	.L815
	add	r5, r4, #4
	add	r6, r4, #8
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #264]
	str	r3, [r4, #260]
	str	r3, [r4, #240]
	str	r3, [r4, #244]
	str	r3, [r4, #248]
	str	r3, [r4, #268]
	str	r3, [r4, #272]
	str	r3, [r4, #276]
	str	r3, [r4, #280]
	bl	_raw_spin_unlock(PLT)
	mov	r0, r5
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
.L815:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L820:
	.align	2
.L819:
	.word	.LANCHOR2-(.LPIC99+8)
	.fnend
	.size	gbam_reset_stats, .-gbam_reset_stats
	.align	2
	.type	hid_setup, %function
hid_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #33030
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #20]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	ldrb	r0, [r1]	@ zero_extendqisi2
	ldrh	r6, [r1, #2]	@ unaligned
	ldr	r7, [r2, #24]
	ldrh	r2, [r1, #6]	@ unaligned
	orr	r3, r3, r0, asl #8
	cmp	r3, r4
	ldr	r4, [r7, #4]
	beq	.L823
	movw	r1, #41217
	cmp	r3, r1
	bne	.L822
	ldr	r3, .L840
	ldr	r0, [r4]
.LPIC101:
	add	r3, pc, r3
	ldrh	r1, [r3, #123]	@ unaligned
	cmp	r1, r2
	movcs	r1, r2
	cmp	r1, #0
	uxth	r5, r1
	bne	.L839
.L825:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r5, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r4, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L837
	ldr	r0, [r7]
	mov	r2, r6
	ldr	r1, .L840+4
	add	r0, r0, #32
.LPIC106:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L837
.L823:
	mov	r3, r6, lsr #8
	cmp	r3, #33
	beq	.L826
	cmp	r3, #34
	beq	.L827
.L822:
	ldr	r0, [r7]
	mvn	r4, #94
	ldr	r1, .L840+8
	add	r0, r0, #32
.LPIC107:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L837:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L827:
	ldr	r3, .L840+12
	ldr	r1, .L840+16
	ldr	r0, [r4]
.LPIC104:
	add	r3, pc, r3
	ldrh	r3, [r3, #123]	@ unaligned
.LPIC105:
	add	r1, pc, r1
	cmp	r2, r3
	movcc	r5, r2
	movcs	r5, r3
	mov	r2, r5
	bl	memcpy(PLT)
	b	.L825
.L826:
	ldr	r1, .L840+20
	ldr	r0, [r4]
.LPIC102:
	add	r1, pc, r1
	ldrb	r3, [r1, #116]!	@ zero_extendqisi2
	cmp	r2, r3
	movcc	r5, r2
	movcs	r5, r3
	mov	r2, r5
	uxth	r5, r5
	bl	memcpy(PLT)
	b	.L825
.L839:
	bl	__memzero(PLT)
	b	.L825
.L841:
	.align	2
.L840:
	.word	.LANCHOR1-(.LPIC101+8)
	.word	.LC23-(.LPIC106+8)
	.word	.LC24-(.LPIC107+8)
	.word	.LANCHOR1-(.LPIC104+8)
	.word	.LANCHOR3-(.LPIC105+8)
	.word	.LANCHOR1-(.LPIC102+8)
	.fnend
	.size	hid_setup, .-hid_setup
	.align	2
	.type	do_mode_sense, %function
do_mode_sense:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r0, #77]	@ zero_extendqisi2
	ldr	r5, [r1]
	ldr	r7, [r0, #104]
	ldrb	r6, [r0, #76]	@ zero_extendqisi2
	tst	r3, #247
	bne	.L852
	ldrb	r1, [r0, #78]	@ zero_extendqisi2
	mov	r8, r1, lsr #6
	and	r10, r1, #63
	cmp	r8, #3
	moveq	r3, #14592
	mvneq	r0, #21
	movteq	r3, 5
	streq	r3, [r7, #28]
	beq	.L844
	mov	r0, r5
	mov	r1, #8
	bl	__memzero(PLT)
	cmp	r6, #26
	sub	r2, r10, #63
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	clz	r2, r2
	mov	r2, r2, lsr #5
	beq	.L860
	and	r3, r3, #2
	add	r4, r5, #8
	cmp	r3, #0
	movw	r9, #65535
	movne	r3, #128
	moveq	r3, #0
	strb	r3, [r5, #3]
.L848:
	cmp	r10, #8
	movne	r3, r2
	orreq	r3, r2, #1
	cmp	r3, #0
	bne	.L850
.L852:
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [r7, #28]
.L844:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L850:
	mov	r3, #10
	mov	r2, #8
	mov	r1, r3
	add	r0, r4, #2
	strb	r2, [r4]
	strb	r3, [r4, #1]
	bl	__memzero(PLT)
	cmp	r8, #1
	beq	.L851
	mvn	r3, #0
	mov	r2, #4
	strb	r3, [r4, #4]
	strb	r2, [r4, #2]
	strb	r3, [r4, #5]
	strb	r3, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	strb	r3, [r4, #11]
.L851:
	add	r4, r4, #12
	rsb	r0, r5, r4
	cmp	r9, r0
	blt	.L852
	cmp	r6, #26
	subeq	r3, r0, #1
	streqb	r3, [r5]
	beq	.L844
	sub	r3, r0, #2
	uxth	r3, r3
	mov	r2, r3, lsr #8
	strb	r3, [r5, #1]
	strb	r2, [r5]
	b	.L844
.L860:
	and	r3, r3, #2
	add	r4, r5, #4
	cmp	r3, #0
	mov	r9, #255
	movne	r3, #128
	moveq	r3, #0
	strb	r3, [r5, #2]
	b	.L848
	.fnend
	.size	do_mode_sense, .-do_mode_sense
	.align	2
	.global	usb_rmnet_mux_ctrl_open
	.type	usb_rmnet_mux_ctrl_open, %function
usb_rmnet_mux_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L866
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC108:
	add	r3, pc, r3
	ldr	r5, [r3, #2312]
	add	r6, r5, #356
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #344]
	mov	r1, r0
	cmp	r4, #0
	bne	.L865
	mov	r3, #1
	mov	r0, r6
	str	r3, [r5, #344]
	str	r5, [r7, #124]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
.L863:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L865:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, .L866+4
	ldr	r0, .L866+8
.LPIC110:
	add	r1, pc, r1
.LPIC109:
	add	r0, pc, r0
	add	r1, r1, #36
	bl	printk(PLT)
	mvn	r0, #15
	b	.L863
.L867:
	.align	2
.L866:
	.word	.LANCHOR2-(.LPIC108+8)
	.word	.LANCHOR3-(.LPIC110+8)
	.word	.LC25-(.LPIC109+8)
	.fnend
	.size	usb_rmnet_mux_ctrl_open, .-usb_rmnet_mux_ctrl_open
	.align	2
	.type	audio_setup, %function
audio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #20]
	ldrb	r2, [r1]	@ zero_extendqisi2
	ldr	r0, [r3, #24]
	cmp	r2, #34
	ldr	r3, [r0, #4]
	beq	.L870
	cmp	r2, #162
	beq	.L871
.L879:
	mvn	r4, #94
.L881:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L871:
	ldrh	r2, [r1, #2]	@ unaligned
	ldr	ip, [r3]
	cmp	r2, #256
	bne	.L879
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	sub	r2, r2, #129
	cmp	r2, #3
	bhi	.L879
	mov	r4, #68
	mvn	lr, #83
	mov	r1, #0
	mov	r2, #3
	strb	r4, [ip]
	strb	lr, [ip, #1]
	strb	r1, [ip, #2]
.L873:
	ldrb	lr, [r3, #26]	@ zero_extendqisi2
	str	r2, [r3, #4]
	mov	r1, r3
	ldr	ip, .L883
	mov	r2, #32
	bfc	lr, #1, #1
.LPIC112:
	add	ip, pc, ip
	strb	lr, [r3, #26]
	str	ip, [r3, #28]
	ldr	r3, [r0]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L881
	ldr	r0, .L883+4
	mov	r1, r4
.LPIC111:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L881
.L870:
	ldrb	ip, [r1, #1]	@ zero_extendqisi2
	ldrh	r2, [r1, #6]	@ unaligned
	sub	ip, ip, #1
	cmp	ip, #3
	bhi	.L879
	b	.L873
.L884:
	.align	2
.L883:
	.word	audio_control_complete-(.LPIC112+8)
	.word	.LC26-(.LPIC111+8)
	.fnend
	.size	audio_setup, .-audio_setup
	.align	2
	.type	gsmd_start_rx, %function
gsmd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L899
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r5, r0, #4
	strd	r10, [sp, #24]
	mov	fp, r0
	mov	r0, r5
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [fp, #68]
	mov	ip, r0
	cmp	r3, #0
	beq	.L887
	ldr	r6, [r3, #84]
	add	r7, fp, #12
	mov	r10, #256
	mov	r9, #512
	b	.L888
.L901:
	ldr	r4, [fp, #12]
	cmp	r7, r4
	beq	.L887
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r3, #2048
	str	r10, [r4]
	str	r3, [r4, #-32]
	str	r9, [r4, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r6, #8]
	sub	r1, r4, #36
	mov	r2, #208
	mov	r0, r6
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r8, #0
	mov	ip, r0
	bne	.L900
.L888:
	ldr	r3, [fp, #72]
	mov	r1, ip
	mov	r0, r5
	ldr	r3, [r3, #8]
	tst	r3, #1
	bne	.L901
.L887:
	mov	r0, r5
	mov	r1, ip
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L900:
	ldr	r1, .L902
	str	r0, [sp, #4]
	mov	r2, fp
	ldr	r0, .L902+4
	ldr	r3, [fp]
.LPIC116:
	add	r1, pc, r1
.LPIC115:
	add	r0, pc, r0
	add	r1, r1, #60
	bl	printk(PLT)
	ldr	r3, [fp, #16]
	str	r4, [fp, #16]
	ldr	ip, [sp, #4]
	str	r7, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	b	.L887
.L899:
	ldr	r1, .L902+8
	ldr	r0, .L902+12
.LPIC114:
	add	r1, pc, r1
.LPIC113:
	add	r0, pc, r0
	add	r1, r1, #60
	b	printk(PLT)
.L903:
	.align	2
.L902:
	.word	.LANCHOR3-(.LPIC116+8)
	.word	.LC28-(.LPIC115+8)
	.word	.LANCHOR3-(.LPIC114+8)
	.word	.LC27-(.LPIC113+8)
	.fnend
	.size	gsmd_start_rx, .-gsmd_start_rx
	.align	2
	.type	gbam_stop, %function
gbam_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L918
	add	r5, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L919
	ldr	r0, [r3, #76]
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	cmp	r0, #0
	bne	.L920
.L909:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock(PLT)
.L918:
	add	r5, r0, #4
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L921
	ldr	r0, [r3, #80]
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	cmp	r0, #0
	beq	.L909
	ldr	r1, .L922
	mov	r2, r0
	ldr	r0, .L922+4
.LPIC120:
	add	r1, pc, r1
	add	r1, r1, #76
.LPIC119:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L909
.L920:
	ldr	r1, .L922+8
	mov	r2, r0
	ldr	r0, .L922+12
.LPIC124:
	add	r1, pc, r1
	add	r1, r1, #100
.LPIC123:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L909
.L919:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L922+16
	ldr	r0, .L922+20
.LPIC122:
	add	r1, pc, r1
.LPIC121:
	add	r0, pc, r0
	add	r1, r1, #100
.L917:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk(PLT)
.L921:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L922+24
	ldr	r0, .L922+28
.LPIC118:
	add	r1, pc, r1
.LPIC117:
	add	r0, pc, r0
	add	r1, r1, #76
	b	.L917
.L923:
	.align	2
.L922:
	.word	.LANCHOR3-(.LPIC120+8)
	.word	.LC30-(.LPIC119+8)
	.word	.LANCHOR3-(.LPIC124+8)
	.word	.LC30-(.LPIC123+8)
	.word	.LANCHOR3-(.LPIC122+8)
	.word	.LC29-(.LPIC121+8)
	.word	.LANCHOR3-(.LPIC118+8)
	.word	.LC29-(.LPIC117+8)
	.fnend
	.size	gbam_stop, .-gbam_stop
	.align	2
	.type	ghsic_send_cpkt_tomodem, %function
ghsic_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L934
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC125:
	add	r3, pc, r3
	ldr	r2, [r3, #1036]
	cmp	r0, r2
	bcs	.L931
	mov	r2, #104
	mla	r0, r2, r0, r3
	ldr	r4, [r0, #1040]
	cmp	r4, #0
	beq	.L932
	mov	r6, r1
	mov	r0, r5
	mov	r1, #32
	bl	__kmalloc(PLT)
	subs	r7, r0, #0
	beq	.L929
	mov	r2, r5
	mov	r1, r6
	bl	memcpy(PLT)
	ldr	r2, [r4, #84]
	ands	r5, r2, #1
	beq	.L933
	ldr	r3, [r4, #96]
	mov	r5, #0
	add	r3, r3, #1
	str	r3, [r4, #96]
.L926:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L933:
	ldr	r3, [r4, #104]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #104]
	bl	kfree(PLT)
	b	.L926
.L929:
	mvn	r5, #11
	b	.L926
.L932:
	ldr	r1, .L934+4
	mvn	r5, #18
	ldr	r0, .L934+8
.LPIC130:
	add	r1, pc, r1
	add	r1, r1, #124
.LPIC129:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L926
.L931:
	ldr	r1, .L934+12
	mov	r2, r0
	mvn	r5, #18
	ldr	r0, .L934+16
.LPIC127:
	add	r1, pc, r1
	add	r1, r1, #124
.LPIC126:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L926
.L935:
	.align	2
.L934:
	.word	.LANCHOR2-(.LPIC125+8)
	.word	.LANCHOR3-(.LPIC130+8)
	.word	.LC27-(.LPIC129+8)
	.word	.LANCHOR3-(.LPIC127+8)
	.word	.LC31-(.LPIC126+8)
	.fnend
	.size	ghsic_send_cpkt_tomodem, .-ghsic_send_cpkt_tomodem
	.align	2
	.type	ecm_qc_setup, %function
ecm_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r2, #8515
	str	lr, [sp, #8]
	ldrb	ip, [r1]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	lr, [r0, #20]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	ldrh	r4, [r1, #4]	@ unaligned
	ldrh	r5, [r1, #2]	@ unaligned
	ldr	lr, [lr, #24]
	orr	r3, r3, ip, asl #8
	ldrh	ip, [r1, #6]	@ unaligned
	cmp	r3, r2
	ldr	r3, [lr, #4]
	bne	.L941
	cmp	ip, #0
	beq	.L944
.L941:
	mvn	r5, #94
.L937:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L944:
	ldrb	r2, [r0, #112]	@ zero_extendqisi2
	cmp	r2, r4
	bne	.L941
	strh	r5, [r0, #90]	@ movhi
	ldrb	r0, [r3, #26]	@ zero_extendqisi2
	mov	r4, r1
	str	ip, [r3, #4]
	mov	r1, r3
	mov	r2, #32
	bfi	r0, ip, #1, #1
	strb	r0, [r3, #26]
	ldr	r3, [lr]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L937
	ldr	r1, .L945
	str	r5, [sp]
	ldr	r0, .L945+4
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
.LPIC132:
	add	r1, pc, r1
	add	r1, r1, #148
.LPIC131:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L937
.L946:
	.align	2
.L945:
	.word	.LANCHOR3-(.LPIC132+8)
	.word	.LC32-(.LPIC131+8)
	.fnend
	.size	ecm_qc_setup, .-ecm_qc_setup
	.align	2
	.type	mbim_ep0out_complete, %function
mbim_ep0out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #0
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
	ldr	r4, [r1, #32]
	str	r3, [r1, #32]
	cmp	r2, r3
	bne	.L948
	ldr	r3, [r1, #48]
	ldr	r0, [r1, #4]
	cmp	r3, r0
	bne	.L948
	cmp	r3, #4
	beq	.L960
	cmp	r3, #8
	bne	.L954
	ldr	r0, [r1]
	ldrb	r3, [r0, #2]	@ zero_extendqisi2
	ldrb	ip, [r0, #1]	@ zero_extendqisi2
	ldrb	r1, [r0]	@ zero_extendqisi2
	ldrb	r2, [r0, #3]	@ zero_extendqisi2
	mov	r3, r3, asl #16
	orr	r3, r3, ip, asl #8
	orr	r3, r3, r1
	orr	r2, r3, r2, asl #24
	cmp	r2, #2048
	bcc	.L955
	ldr	r3, .L961
.LPIC138:
	add	r3, pc, r3
	ldr	r3, [r3, #132]
	cmp	r3, r2
	bcc	.L955
	ldrb	r1, [r0, #5]	@ zero_extendqisi2
	ldrb	r3, [r0, #4]	@ zero_extendqisi2
	orr	r3, r3, r1, asl #8
	strh	r3, [r4, #220]	@ movhi
.L953:
	str	r2, [r4, #216]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L960:
	ldr	r2, [r1]
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	ldrb	r0, [r2, #1]	@ zero_extendqisi2
	ldrb	r1, [r2]	@ zero_extendqisi2
	ldrb	r2, [r2, #3]	@ zero_extendqisi2
	mov	r3, r3, asl #16
	orr	r3, r3, r0, asl #8
	orr	r3, r3, r1
	orr	r2, r3, r2, asl #24
	cmp	r2, #2048
	bcc	.L952
	ldr	r3, .L961+4
.LPIC135:
	add	r3, pc, r3
	ldr	r3, [r3, #132]
	cmp	r3, r2
	bcs	.L953
.L952:
	ldr	r1, .L961+8
	ldr	r0, .L961+12
.LPIC137:
	add	r1, pc, r1
.LPIC136:
	add	r0, pc, r0
	add	r1, r1, #164
	bl	printk(PLT)
.L950:
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	ldr	r1, .L961+16
	mov	r2, r4
	ldr	r0, .L961+20
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
.LPIC144:
	add	r1, pc, r1
	ldr	lr, [sp, #12]
	add	sp, sp, #16
.LPIC143:
	add	r0, pc, r0
	add	r1, r1, #164
	b	printk(PLT)
.L948:
	ldr	r1, .L961+24
	ldr	r0, .L961+28
.LPIC134:
	add	r1, pc, r1
	add	r1, r1, #164
.LPIC133:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L950
.L955:
	ldr	r1, .L961+32
	ldr	r0, .L961+36
.LPIC140:
	add	r1, pc, r1
	add	r1, r1, #164
.LPIC139:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L950
.L954:
	ldr	r1, .L961+40
	ldr	r0, .L961+44
.LPIC142:
	add	r1, pc, r1
	add	r1, r1, #164
.LPIC141:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L950
.L962:
	.align	2
.L961:
	.word	.LANCHOR1-(.LPIC138+8)
	.word	.LANCHOR1-(.LPIC135+8)
	.word	.LANCHOR3-(.LPIC137+8)
	.word	.LC34-(.LPIC136+8)
	.word	.LANCHOR3-(.LPIC144+8)
	.word	.LC36-(.LPIC143+8)
	.word	.LANCHOR3-(.LPIC134+8)
	.word	.LC33-(.LPIC133+8)
	.word	.LANCHOR3-(.LPIC140+8)
	.word	.LC34-(.LPIC139+8)
	.word	.LANCHOR3-(.LPIC142+8)
	.word	.LC35-(.LPIC141+8)
	.fnend
	.size	mbim_ep0out_complete, .-mbim_ep0out_complete
	.align	2
	.type	bam_data_stop, %function
bam_data_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	beq	.L979
	cmp	r3, #0
	beq	.L963
	ldr	r3, [r3, #8]
	ldr	r1, [r0, #40]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #20]
	blx	r3
	cmp	r0, #0
	bne	.L980
.L963:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L979:
	cmp	r3, #0
	beq	.L963
	ldr	r3, [r3, #12]
	ldr	r1, [r0, #36]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #20]
	blx	r3
	cmp	r0, #0
	beq	.L963
	ldr	r1, .L981
	mov	r3, r0
	ldr	r0, .L981+4
.LPIC146:
	add	r1, pc, r1
.LPIC145:
	add	r0, pc, r0
	add	r1, r1, #188
	b	.L978
.L980:
	ldr	r1, .L981+8
	mov	r3, r0
	ldr	r0, .L981+12
.LPIC149:
	add	r1, pc, r1
.LPIC148:
	add	r0, pc, r0
	add	r1, r1, #216
.L978:
	ldr	r4, [sp]
	mov	r2, r1
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk(PLT)
.L982:
	.align	2
.L981:
	.word	.LANCHOR3-(.LPIC146+8)
	.word	.LC37-(.LPIC145+8)
	.word	.LANCHOR3-(.LPIC149+8)
	.word	.LC37-(.LPIC148+8)
	.fnend
	.size	bam_data_stop, .-bam_data_stop
	.align	2
	.type	rndis_qc_response_complete, %function
rndis_qc_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r4, [r5, #20]
	cmp	r4, #0
	beq	.L984
	ldr	r2, [r4, #24]
	cmp	r2, #0
	beq	.L984
	cmn	r3, #104
	beq	.L987
	cmp	r3, #0
	mov	r6, r0
	mov	r4, r1
	beq	.L988
	cmn	r3, #108
	beq	.L987
	ldr	r1, .L1013
	ldr	r2, [r0, #4]
	ldr	lr, [r4, #48]
	ldr	ip, [r4, #4]
	ldr	r0, .L1013+4
.LPIC155:
	add	r1, pc, r1
	add	r1, r1, #244
	str	lr, [sp]
	str	ip, [sp, #4]
.LPIC154:
	add	r0, pc, r0
	bl	printk(PLT)
.L988:
	ldr	r3, [r5, #148]
	cmp	r3, r6
	beq	.L1012
.L983:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L987:
	mov	r3, #0
	str	r3, [r5, #156]
	b	.L983
.L1012:
	add	r6, r5, #156
#APP
@ 99 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #0
	beq	.L983
	ldr	r0, [r5, #148]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L983
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	b	.L983
.L984:
	ldr	r1, .L1013+8
	ldr	r0, .L1013+12
.LPIC152:
	add	r1, pc, r1
	add	r1, r1, #244
.LPIC151:
	add	r0, pc, r0
	mov	r2, r1
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk(PLT)
.L1014:
	.align	2
.L1013:
	.word	.LANCHOR3-(.LPIC155+8)
	.word	.LC39-(.LPIC154+8)
	.word	.LANCHOR3-(.LPIC152+8)
	.word	.LC38-(.LPIC151+8)
	.fnend
	.size	rndis_qc_response_complete, .-rndis_qc_response_complete
	.align	2
	.type	rndis_qc_response_available, %function
rndis_qc_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #156
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #152]
	ldr	ip, [r1]
#APP
@ 61 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L1023
.L1015:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1023:
	mov	r4, r0
	mov	r0, #0
	str	r3, [ip]
	mov	r2, #32
	str	r0, [ip, #4]
	ldr	r0, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L1015
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L1024
	mov	r2, r0
	ldr	r0, .L1024+4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
.LPIC157:
	add	r1, pc, r1
	ldr	lr, [sp, #12]
	add	sp, sp, #16
.LPIC156:
	add	r0, pc, r0
	add	r1, r1, #272
	b	printk(PLT)
.L1025:
	.align	2
.L1024:
	.word	.LANCHOR3-(.LPIC157+8)
	.word	.LC40-(.LPIC156+8)
	.fnend
	.size	rndis_qc_response_available, .-rndis_qc_response_available
	.align	2
	.type	f_audio_buffer_alloc, %function
f_audio_buffer_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L1036
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC163:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L1027
	movw	r1, #32800
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L1034
.L1030:
	mov	r0, r5
	movw	r1, #32800
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r4]
	movne	r0, r4
	beq	.L1035
.L1032:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1027:
	mov	r4, #16
	b	.L1030
.L1035:
	ldr	r1, .L1036+4
	ldr	r0, .L1036+8
.LPIC162:
	add	r1, pc, r1
	add	r1, r1, #300
.LPIC161:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	mvn	r0, #11
	b	.L1032
.L1034:
	ldr	r1, .L1036+12
	ldr	r0, .L1036+16
.LPIC160:
	add	r1, pc, r1
.LPIC159:
	add	r0, pc, r0
	add	r1, r1, #300
	bl	printk(PLT)
	mvn	r0, #11
	b	.L1032
.L1037:
	.align	2
.L1036:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC163+8))
	.word	.LANCHOR3-(.LPIC162+8)
	.word	.LC42-(.LPIC161+8)
	.word	.LANCHOR3-(.LPIC160+8)
	.word	.LC41-(.LPIC159+8)
	.fnend
	.size	f_audio_buffer_alloc, .-f_audio_buffer_alloc
	.align	2
	.type	f_audio_setup, %function
f_audio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #20]
	.pad #24
	sub	sp, sp, #24
	ldrb	r2, [r1]	@ zero_extendqisi2
	ldrh	r0, [r1, #4]	@ unaligned
	ldrh	ip, [r1, #2]	@ unaligned
	ldr	r5, [r3, #24]
	cmp	r2, #34
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r4, [r5, #4]
	beq	.L1040
	bls	.L1112
	cmp	r2, #161
	beq	.L1043
	cmp	r2, #162
	bne	.L1039
	ldr	r3, [r7, #252]!
	and	r0, r0, #127
	mov	ip, ip, lsr #8
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	cmp	r3, r7
	beq	.L1088
	ldrb	r1, [r3, #16]	@ zero_extendqisi2
	cmp	r1, r0
	beq	.L1078
.L1077:
	ldr	r3, [r3]
	cmp	r7, r3
	beq	.L1088
	ldrb	lr, [r3, #16]	@ zero_extendqisi2
	cmp	lr, r0
	bne	.L1077
.L1078:
	ldr	r7, [r3, #8]!
	cmp	r7, r3
	beq	.L1088
.L1083:
	ldrb	r1, [r7, #12]	@ zero_extendqisi2
	cmp	r1, ip
	beq	.L1082
	ldr	r7, [r7]
	cmp	r3, r7
	bne	.L1083
.L1088:
	ldr	r1, .L1116
	mvn	r4, #94
	ldr	r0, .L1116+4
.LPIC174:
	add	r1, pc, r1
	add	r1, r1, #348
.LPIC173:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1093
.L1043:
	mov	r2, r7
	mvn	r8, #94
	ldrb	lr, [r1, #1]	@ zero_extendqisi2
	ldr	r3, [r2, #244]!
	mov	r0, r0, lsr #8
	str	r8, [sp, #20]
	cmp	r3, r2
	bne	.L1061
.L1055:
	ldr	r3, .L1116+8
	str	r7, [r4, #32]
	add	r1, sp, #20
	ldr	r0, [r4]
	mov	r2, r6
.LPIC165:
	add	r3, pc, r3
	str	r3, [r4, #28]
	bl	memcpy(PLT)
.L1085:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r6, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	orr	r3, r3, #2
	strb	r3, [r4, #26]
	ldr	r3, [r5]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L1113
.L1093:
	mov	r0, r4
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1058:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L1055
.L1061:
	ldrb	r1, [r3, #16]	@ zero_extendqisi2
	cmp	r1, r0
	bne	.L1058
	ldr	r0, [r3, #8]!
	cmp	r0, r3
	beq	.L1055
	mov	ip, ip, lsr #8
	b	.L1060
.L1059:
	ldr	r0, [r0]
	cmp	r3, r0
	beq	.L1055
.L1060:
	ldrb	r2, [r0, #12]	@ zero_extendqisi2
	cmp	r2, ip
	bne	.L1059
	ldr	r2, [r0, #40]
	cmp	r2, #0
	beq	.L1059
	and	r1, lr, #15
	blx	r2
	str	r0, [sp, #20]
	b	.L1055
.L1112:
	cmp	r2, #33
	bne	.L1039
	mov	r2, r7
	ldrb	lr, [r1, #1]	@ zero_extendqisi2
	mov	r0, r0, lsr #8
	ldr	r3, [r2, #244]!
	and	lr, lr, #15
	cmp	r3, r2
	bne	.L1053
.L1045:
	ldr	r3, .L1116+12
	strb	lr, [r7, #260]
	str	r7, [r4, #32]
.LPIC164:
	add	r3, pc, r3
	str	r3, [r4, #28]
	b	.L1085
.L1048:
	ldr	r3, [r3]
	cmp	r3, r2
	beq	.L1045
.L1053:
	ldrb	r1, [r3, #16]	@ zero_extendqisi2
	cmp	r1, r0
	bne	.L1048
	ldr	r0, [r3, #8]!
	cmp	r0, r3
	beq	.L1045
	ldrb	r2, [r0, #12]	@ zero_extendqisi2
	mov	ip, ip, lsr #8
	cmp	r2, ip
	bne	.L1051
	b	.L1049
.L1052:
	ldrb	r2, [r0, #12]	@ zero_extendqisi2
	cmp	r2, ip
	beq	.L1049
.L1051:
	ldr	r0, [r0]
	cmp	r0, r3
	bne	.L1052
	b	.L1045
.L1040:
	mov	r2, r7
	and	r0, r0, #127
	ldrb	lr, [r1, #1]	@ zero_extendqisi2
	ldr	r3, [r2, #252]!
	mov	ip, ip, lsr #8
	cmp	r3, r2
	beq	.L1088
	ldrb	r1, [r3, #16]	@ zero_extendqisi2
	cmp	r1, r0
	beq	.L1065
.L1114:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L1088
	ldrb	r1, [r3, #16]	@ zero_extendqisi2
	cmp	r1, r0
	bne	.L1114
.L1065:
	ldr	r0, [r3, #8]!
	cmp	r0, r3
	beq	.L1088
	ldrb	r2, [r0, #12]	@ zero_extendqisi2
	cmp	r2, ip
	beq	.L1069
.L1115:
	ldr	r0, [r0]
	cmp	r0, r3
	beq	.L1088
	ldrb	r2, [r0, #12]	@ zero_extendqisi2
	cmp	r2, ip
	bne	.L1115
.L1069:
	ands	lr, lr, #15
	beq	.L1071
	cmp	lr, #4
	bls	.L1072
	cmp	lr, #5
	beq	.L1088
.L1071:
	ldr	r1, .L1116+16
	ldr	r0, .L1116+20
.LPIC168:
	add	r1, pc, r1
	add	r1, r1, #324
.LPIC167:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1088
.L1039:
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	stmib	sp, {r0, r6}
	ldr	r1, .L1116+24
	str	ip, [sp]
	ldr	r0, .L1116+28
.LPIC170:
	add	r1, pc, r1
	add	r1, r1, #348
.LPIC169:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1088
.L1082:
	and	r2, r2, #15
	sub	r3, r2, #1
	cmp	r3, #3
	bhi	.L1088
	add	r2, r2, #4
	add	r1, sp, #24
	ldr	r0, [r4]
	ldr	r3, [r7, r2, asl #2]
	mov	r2, r6
	str	r3, [r1, #-4]!
	bl	memcpy(PLT)
	b	.L1085
.L1072:
	ldr	r3, .L1116+32
	str	r0, [r7, #264]
	strb	lr, [r7, #260]
	str	r7, [r4, #32]
.LPIC166:
	add	r3, pc, r3
	str	r3, [r4, #28]
	b	.L1085
.L1049:
	str	r0, [r7, #264]
	b	.L1045
.L1113:
	ldr	r1, .L1116+36
	mov	r2, r4
	ldr	r0, .L1116+40
.LPIC172:
	add	r1, pc, r1
	add	r1, r1, #348
.LPIC171:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1093
.L1117:
	.align	2
.L1116:
	.word	.LANCHOR3-(.LPIC174+8)
	.word	.LC46-(.LPIC173+8)
	.word	f_audio_complete-(.LPIC165+8)
	.word	f_audio_complete-(.LPIC164+8)
	.word	.LANCHOR3-(.LPIC168+8)
	.word	.LC43-(.LPIC167+8)
	.word	.LANCHOR3-(.LPIC170+8)
	.word	.LC44-(.LPIC169+8)
	.word	audio_set_endpoint_complete-(.LPIC166+8)
	.word	.LANCHOR3-(.LPIC172+8)
	.word	.LC45-(.LPIC171+8)
	.fnend
	.size	f_audio_setup, .-f_audio_setup
	.align	2
	.type	android_bind_config, %function
android_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L1144
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r0, #24]
.LPIC175:
	add	r1, pc, r1
	ldr	r3, [r1]
	cmp	r1, r3
	sub	r2, r3, #168
	bne	.L1122
	b	.L1119
.L1141:
	ldr	r3, [r2, #168]
	cmp	r1, r3
	sub	r2, r3, #168
	beq	.L1119
.L1122:
	ldr	r3, [r3, #-160]
	cmp	r0, r3
	bne	.L1141
.L1119:
	mov	r5, r6
	ldr	r4, [r5, #112]!
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L1131
.L1130:
	ldr	r0, [r4]
	mov	r1, r6
	ldr	r3, [r0, #40]
	blx	r3
	subs	r7, r0, #0
	bne	.L1142
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L1130
.L1131:
	mov	r0, #0
.L1139:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1142:
	ldr	r1, .L1144+4
	add	r8, r6, #36
	mov	r5, #256
	ldr	r3, [r4]
	mov	r4, #512
	ldr	r0, .L1144+8
.LPIC179:
	add	r1, pc, r1
	add	r1, r1, #364
	ldr	r3, [r3]
	mov	r2, r1
.LPIC178:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1127
.L1128:
	ldrd	r2, [r1]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r3, [r1, #-36]
	str	r5, [r1]
	str	r4, [r1, #4]
	cmp	r3, #0
	bne	.L1143
.L1127:
	ldr	r1, [r6, #36]
	cmp	r1, r8
	bne	.L1128
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L1129
	mov	r0, r6
	blx	r3
.L1129:
	mov	r0, r7
	b	.L1139
.L1143:
	sub	r1, r1, #64
	mov	r0, r6
	blx	r3
	b	.L1127
.L1145:
	.align	2
.L1144:
	.word	.LANCHOR2-(.LPIC175+8)
	.word	.LANCHOR3-(.LPIC179+8)
	.word	.LC47-(.LPIC178+8)
	.fnend
	.size	android_bind_config, .-android_bind_config
	.align	2
	.type	android_enable_function, %function
android_enable_function:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L1161
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r10, [sp, #24]
	mov	r10, r2
	mov	fp, r0
	strd	r8, [sp, #16]
.LPIC182:
	add	r5, pc, r5
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	add	r2, r5, #396
	ldr	r1, [r0, #8]
	ldr	r3, [r0, #4]
	str	r2, [sp, #12]
	ldr	r2, .L1161+4
	ldr	r6, [r0, #52]
	sub	r5, r3, #4
.LPIC181:
	add	r2, pc, r2
	str	r2, [sp, #8]
	ldr	r2, [r1]
	str	r2, [sp, #4]
.L1147:
	ldr	r4, [r5, #4]!
	mov	r0, r10
	cmp	r4, #0
	beq	.L1158
	ldr	r9, [r4]
	mov	r1, r9
	bl	strcmp(PLT)
	subs	r8, r0, #0
	bne	.L1147
	ldr	r1, [r4, #20]
	cmp	fp, r1
	cmpne	r1, #0
	bne	.L1159
	ldr	r3, .L1161+8
.LPIC186:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L1155
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	beq	.L1160
.L1150:
	mov	r3, r0
	str	fp, [r4, #20]
	add	r1, r7, #112
	str	r4, [r3], #4
	ldr	r2, [r7, #116]
	str	r3, [r7, #116]
	stmib	r0, {r1, r2}
	str	r3, [r2]
	ldr	r5, [r6, #44]
	ldr	r7, [r4]
	cmp	r5, #0
	ble	.L1151
	mov	r3, r5, asl #3
	add	r4, r6, #11
	add	r5, r3, r5, asl #1
	add	r5, r5, #11
	add	r5, r6, r5
	b	.L1153
.L1152:
	cmp	r4, r5
	beq	.L1151
.L1153:
	mov	r1, r4
	mov	r0, r7
	bl	strcmp(PLT)
	cmp	r0, #0
	add	r4, r4, #10
	bne	.L1152
	ldr	r2, [sp, #4]
	mov	r3, #1
	mov	r8, r0
	strb	r3, [r2, #386]
.L1151:
	mov	r0, r8
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1155:
	mov	r0, #16
	b	.L1150
.L1158:
	mvn	r8, #21
	b	.L1151
.L1159:
	mov	r2, r9
	ldrd	r0, [sp, #8]
	bl	printk(PLT)
	b	.L1147
.L1160:
	ldr	r1, .L1161+12
	mvn	r8, #11
	ldr	r0, .L1161+16
.LPIC185:
	add	r1, pc, r1
	add	r1, r1, #396
.LPIC184:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1151
.L1162:
	.align	2
.L1161:
	.word	.LANCHOR3-(.LPIC182+8)
	.word	.LC48-(.LPIC181+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC186+8))
	.word	.LANCHOR3-(.LPIC185+8)
	.word	.LC49-(.LPIC184+8)
	.fnend
	.size	android_enable_function, .-android_enable_function
	.align	2
	.type	acc_complete_set_string, %function
acc_complete_set_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r3, [r0]
	ldr	r5, [r1, #48]
	cmp	r2, #0
	bne	.L1179
	ldr	r2, [r3, #1632]
	cmp	r2, #5
	addls	pc, pc, r2, asl #2
	b	.L1165
.L1167:
	b	.L1166
	b	.L1168
	b	.L1169
	b	.L1170
	b	.L1171
	b	.L1172
	.p2align 1
.L1172:
	add	r7, r3, #1360
	add	r7, r7, #13
.L1173:
	cmp	r7, #0
	beq	.L1165
	add	r4, r3, #80
	mov	r6, r1
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r5, #255
	mov	r8, r0
	ldr	r1, [r6]
	movge	r5, #255
	mov	r0, r7
	mov	r2, r5
	bl	memcpy(PLT)
	mov	r3, #0
	mov	r0, r4
	mov	r1, r8
	strb	r3, [r7, r5]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L1166:
	add	r7, r3, #93
	b	.L1173
.L1168:
	add	r7, r3, #348
	add	r7, r7, #1
	b	.L1173
.L1169:
	add	r7, r3, #604
	add	r7, r7, #1
	b	.L1173
.L1170:
	add	r7, r3, #860
	add	r7, r7, #1
	b	.L1173
.L1171:
	add	r7, r3, #1104
	add	r7, r7, #13
	b	.L1173
.L1179:
	ldr	r0, .L1180
	mov	r1, r2
.LPIC187:
	add	r0, pc, r0
.L1178:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk(PLT)
.L1165:
	ldr	r0, .L1180+4
	mov	r1, r2
.LPIC188:
	add	r0, pc, r0
	b	.L1178
.L1181:
	.align	2
.L1180:
	.word	.LC50-(.LPIC187+8)
	.word	.LC51-(.LPIC188+8)
	.fnend
	.size	acc_complete_set_string, .-acc_complete_set_string
	.align	2
	.type	acc_release, %function
acc_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1186
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC189:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, .L1186+4
.LPIC190:
	add	r3, pc, r3
	ldr	r3, [r3, #2316]
	add	r3, r3, #1632
	add	r3, r3, #12
#APP
@ 37 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	mov	r2, #0
#APP
@ 52 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	@	__xchg4
1:	ldrex	r1, [r3]
	strex	r0, r2, [r3]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 98 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r1, r2
	beq	.L1185
.L1183:
	ldr	r3, .L1186+8
	mov	r0, #0
.LPIC192:
	add	r3, pc, r3
	ldr	r3, [r3, #2316]
	ldrb	r2, [r3, #92]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #92]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1185:
	ldr	r0, .L1186+12
	movw	r1, #801
.LPIC191:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L1183
.L1187:
	.align	2
.L1186:
	.word	.LC52-(.LPIC189+8)
	.word	.LANCHOR2-(.LPIC190+8)
	.word	.LANCHOR2-(.LPIC192+8)
	.word	.LC53-(.LPIC191+8)
	.fnend
	.size	acc_release, .-acc_release
	.align	2
	.type	acc_open, %function
acc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1192
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
.LPIC193:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	ip, .L1192+4
.LPIC194:
	add	ip, pc, ip
	ldr	r3, [ip, #2316]
	add	r3, r3, #1632
	add	r3, r3, #12
#APP
@ 37 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	mov	r0, #1
#APP
@ 52 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	@	__xchg4
1:	ldrex	r2, [r3]
	strex	r1, r0, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 98 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	bne	.L1190
	ldr	r3, [ip, #2316]
	mov	r0, r2
	ldrb	ip, [r3, #92]	@ zero_extendqisi2
	bfi	ip, r2, #1, #1
	strb	ip, [r3, #92]
	str	r3, [r4, #124]
.L1189:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1190:
	mvn	r0, #15
	b	.L1189
.L1193:
	.align	2
.L1192:
	.word	.LC54-(.LPIC193+8)
	.word	.LANCHOR2-(.LPIC194+8)
	.fnend
	.size	acc_open, .-acc_open
	.align	2
	.type	rndis_qc_release_dev, %function
rndis_qc_release_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L1196
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L1196+4
	str	lr, [sp, #4]
	ldr	r4, [r1, #124]
.LPIC197:
	add	r3, pc, r3
	add	r1, r3, #420
.LPIC196:
	add	r0, pc, r0
	bl	printk(PLT)
	add	r3, r4, #144
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
.L1197:
	.align	2
.L1196:
	.word	.LANCHOR3-(.LPIC197+8)
	.word	.LC55-(.LPIC196+8)
	.fnend
	.size	rndis_qc_release_dev, .-rndis_qc_release_dev
	.align	2
	.type	mtp_release, %function
mtp_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1200
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC198:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, .L1200+4
.LPIC199:
	add	r3, pc, r3
	ldr	r3, [r3, #2320]
	add	r2, r3, #100
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
.L1201:
	.align	2
.L1200:
	.word	.LC56-(.LPIC198+8)
	.word	.LANCHOR2-(.LPIC199+8)
	.fnend
	.size	mtp_release, .-mtp_release
	.align	2
	.type	ccid_notify_complete, %function
ccid_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r1, [r1, #44]
	cmn	r1, #104
	beq	.L1202
	cmp	r1, #0
	beq	.L1202
	cmn	r1, #108
	beq	.L1202
	ldr	r0, .L1214
.LPIC200:
	add	r0, pc, r0
	b	printk(PLT)
.L1202:
	bx	lr
.L1215:
	.align	2
.L1214:
	.word	.LC57-(.LPIC200+8)
	.fnend
	.size	ccid_notify_complete, .-ccid_notify_complete
	.align	2
	.type	gps_setup, %function
gps_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r0, #112]
	ldr	r6, [r0, #120]
	ldrh	r2, [r1, #2]	@ unaligned
	ldrh	r5, [r1, #6]	@ unaligned
	cmp	ip, #0
	ldr	r4, [r6, #4]
	beq	.L1225
	ldrb	lr, [r1]	@ zero_extendqisi2
	movw	ip, #8482
	mov	r7, r0
	ldrb	r1, [r1, #1]	@ zero_extendqisi2
	orr	r1, r1, lr, asl #8
	cmp	r1, ip
	beq	.L1218
	movw	r0, #41217
	cmp	r1, r0
	beq	.L1219
	cmp	r1, #8448
	beq	.L1231
.L1227:
	mvn	r0, #94
.L1229:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1219:
	cmp	r2, #0
	bne	.L1227
	add	r8, r3, #124
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	mov	r3, r7
	ldr	r7, [r3, #136]!
	cmp	r7, r3
	beq	.L1232
	ldr	r3, [r7, #4]
	mov	ip, #256
	mov	r1, #512
	ldr	r2, [r7]
	mov	r0, r8
	mov	r8, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r7]
	str	r1, [r7, #4]
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r7, #-4]
	ldr	r1, [r7, #-8]
	ldr	r0, [r4]
	cmp	r5, r3
	movcc	r7, r5
	movcs	r7, r3
	mov	r2, r7
	bl	memcpy(PLT)
	ldr	r0, [r8, #-8]!
	bl	kfree(PLT)
	mov	r0, r8
	bl	kfree(PLT)
	cmp	r5, r7
	mov	r5, r7
	movle	r0, #0
	movgt	r0, #1
	b	.L1221
.L1231:
	ldr	r2, .L1233
	mov	r0, #0
	str	r3, [r4, #32]
.LPIC201:
	add	r2, pc, r2
	str	r2, [r4, #28]
.L1221:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r5, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfi	r3, r0, #1, #1
	strb	r3, [r4, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L1224
	mov	r0, r4
	b	.L1229
.L1218:
	ldr	ip, [r0, #92]
	cmp	ip, #0
	beq	.L1223
	ldrb	r1, [r0, #104]	@ zero_extendqisi2
	blx	ip
	adds	r0, r5, #0
	mov	r5, #0
	movne	r0, #1
	b	.L1221
.L1223:
	adds	r0, r5, #0
	mov	r5, ip
	movne	r0, #1
	b	.L1221
.L1224:
	ldr	r0, [r6]
	mov	r2, r4
	ldr	r1, .L1233+4
	add	r0, r0, #32
.LPIC204:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r4
	b	.L1229
.L1225:
	mvn	r0, #106
	b	.L1229
.L1232:
	ldr	r1, .L1233+8
	ldr	r0, .L1233+12
.LPIC203:
	add	r1, pc, r1
	add	r1, r1, #444
.LPIC202:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r8
	bl	_raw_spin_unlock(PLT)
	mvn	r0, #94
	b	.L1229
.L1234:
	.align	2
.L1233:
	.word	gps_cmd_complete-(.LPIC201+8)
	.word	.LC59-(.LPIC204+8)
	.word	.LANCHOR3-(.LPIC203+8)
	.word	.LC58-(.LPIC202+8)
	.fnend
	.size	gps_setup, .-gps_setup
	.align	2
	.type	gps_notify_complete, %function
gps_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #44]
	ldr	r5, [r1, #32]
	cmn	r3, #104
	beq	.L1237
	cmp	r3, #0
	mov	r4, r1
	beq	.L1238
	cmn	r3, #108
	beq	.L1237
	ldr	r0, .L1261
	mov	r1, r3
.LPIC205:
	add	r0, pc, r0
	bl	printk(PLT)
.L1238:
	ldr	r3, [r5, #116]
	cmp	r3, #0
	beq	.L1235
	add	r6, r5, #144
#APP
@ 99 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #0
	bne	.L1260
.L1235:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1237:
	mov	r3, #0
	str	r3, [r5, #144]
	b	.L1235
.L1260:
	ldr	r0, [r5, #128]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L1235
	add	r4, r5, #124
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #136]
	add	r2, r5, #136
	mov	r7, r0
	cmp	r3, r2
	beq	.L1242
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r6]
	sub	r2, r2, #1
	strex	r1, r2, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r0, [r3]
	mov	ip, #256
	mov	r1, #512
	ldr	r2, [r3, #4]
	mov	r5, r3
	str	r2, [r0, #4]
	str	r0, [r2]
	str	ip, [r3]
	str	r1, [r3, #4]
	ldr	r0, [r5, #-8]!
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
.L1242:
	mov	r0, r4
	mov	r1, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L1262:
	.align	2
.L1261:
	.word	.LC60-(.LPIC205+8)
	.fnend
	.size	gps_notify_complete, .-gps_notify_complete
	.align	2
	.type	frmnet_setup, %function
frmnet_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	str	lr, [sp, #32]
	mov	lr, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	ldr	ip, [r0, #112]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r0, #120]
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	r8, [r1, #2]	@ unaligned
	cmp	ip, #0
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r5, [r7, #4]
	beq	.L1272
	ldrb	r2, [r1]	@ zero_extendqisi2
	movw	r3, #8482
	mov	r4, r0
	ldrb	ip, [r1, #1]	@ zero_extendqisi2
	orr	ip, ip, r2, asl #8
	cmp	ip, r3
	beq	.L1265
	movw	r3, #41217
	cmp	ip, r3
	beq	.L1266
	cmp	ip, #8448
	beq	.L1278
.L1274:
	mvn	r0, #94
.L1276:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1266:
	cmp	r8, #0
	bne	.L1274
	add	fp, r0, #124
	str	r1, [sp, #12]
	mov	r0, fp
	bl	_raw_spin_lock(PLT)
	ldr	r10, [r4, #136]!
	ldr	r1, [sp, #12]
	cmp	r10, r4
	beq	.L1279
	ldr	r3, [r10, #4]
	mov	ip, #256
	mov	r1, #512
	ldr	r2, [r10]
	mov	r0, fp
	mov	r4, r10
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r10]
	str	r1, [r10, #4]
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r10, #-4]
	ldr	r1, [r10, #-8]
	ldr	r0, [r5]
	cmp	r6, r3
	movcc	r8, r6
	movcs	r8, r3
	mov	r2, r8
	bl	memcpy(PLT)
	ldr	r0, [r4, #-8]!
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	cmp	r6, r8
	mov	r6, r8
	movle	r4, #0
	movgt	r4, #1
	b	.L1268
.L1278:
	ldr	r3, .L1280
	mov	r4, #0
	str	r0, [r5, #32]
.LPIC206:
	add	r3, pc, r3
	str	r3, [r5, #28]
.L1268:
	ldrb	ip, [r5, #26]	@ zero_extendqisi2
	str	r6, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	ip, r4, #1, #1
	strb	ip, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L1271
	mov	r0, r4
	b	.L1276
.L1265:
	ldr	r3, [r0, #92]
	cmp	r3, #0
	beq	.L1270
	ldrb	lr, [r0, #108]	@ zero_extendqisi2
	mov	r2, r8
	ldr	ip, .L1280+4
	mov	r1, lr, asl #5
.LPIC208:
	add	ip, pc, ip
	sub	r1, r1, lr, asl #3
	add	ip, ip, r1
	ldrb	r1, [ip, #2336]	@ zero_extendqisi2
	blx	r3
	adds	r4, r6, #0
	mov	r6, #0
	movne	r4, #1
	b	.L1268
.L1270:
	adds	r4, r6, #0
	mov	r6, r3
	movne	r4, #1
	b	.L1268
.L1271:
	ldr	r0, [r7]
	mov	r2, r4
	ldr	r1, .L1280+8
	add	r0, r0, #32
.LPIC209:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r4
	b	.L1276
.L1272:
	mvn	r0, #106
	b	.L1276
.L1279:
	ldrb	ip, [r1]	@ zero_extendqisi2
	mov	r3, r8
	str	r9, [sp]
	ldr	r0, .L1280+12
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	str	r6, [sp, #4]
	mov	r1, ip
.LPIC207:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, fp
	bl	_raw_spin_unlock(PLT)
	mvn	r0, #94
	b	.L1276
.L1281:
	.align	2
.L1280:
	.word	frmnet_cmd_complete-(.LPIC206+8)
	.word	.LANCHOR2-(.LPIC208+8)
	.word	.LC62-(.LPIC209+8)
	.word	.LC61-(.LPIC207+8)
	.fnend
	.size	frmnet_setup, .-frmnet_setup
	.align	2
	.type	frmnet_notify_complete, %function
frmnet_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r1, #44]
	ldr	r4, [r5, #32]
	cmn	r1, #104
	beq	.L1284
	cmp	r1, #0
	beq	.L1285
	cmn	r1, #108
	beq	.L1284
	ldr	r0, .L1309
.LPIC210:
	add	r0, pc, r0
	bl	printk(PLT)
.L1285:
	ldr	r3, [r4, #116]
	cmp	r3, #0
	bne	.L1308
.L1282:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1308:
	add	r6, r4, #124
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #144]
	mov	r1, r0
	cmp	r3, #0
	beq	.L1288
	sub	r3, r3, #1
	mov	r0, r6
	cmp	r3, #0
	str	r3, [r4, #144]
	beq	.L1307
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #128]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L1282
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r2, r4
	mov	r7, r0
	ldr	r3, [r2, #136]!
	cmp	r3, r2
	beq	.L1291
	ldr	r2, [r4, #144]
	cmp	r2, #0
	beq	.L1292
	sub	r2, r2, #1
	mov	ip, #256
	mov	r0, #512
	mov	r5, r3
	str	r2, [r4, #144]
	ldmia	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	ip, [r3]
	str	r0, [r3, #4]
	ldr	r0, [r5, #-8]!
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
.L1291:
	mov	r0, r6
	mov	r1, r7
	b	.L1307
.L1284:
	add	r5, r4, #124
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	mov	r3, #0
	mov	r0, r5
	str	r3, [r4, #144]
.L1307:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L1288:
	mov	r0, r6
	b	.L1307
.L1292:
	ldr	r1, .L1309+4
	ldr	r0, .L1309+8
.LPIC212:
	add	r1, pc, r1
	add	r1, r1, #456
.LPIC211:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1291
.L1310:
	.align	2
.L1309:
	.word	.LC63-(.LPIC210+8)
	.word	.LANCHOR3-(.LPIC212+8)
	.word	.LC64-(.LPIC211+8)
	.fnend
	.size	frmnet_notify_complete, .-frmnet_notify_complete
	.align	2
	.type	mbim_function_ctrlrequest, %function
mbim_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r1, #12]
	ldrh	ip, [r2, #4]	@ unaligned
	ldrh	lr, [r2, #2]	@ unaligned
	ldrh	r5, [r2, #6]	@ unaligned
	cmp	r0, #0
	bne	.L1326
	ldr	r3, .L1331
.LPIC213:
	add	r3, pc, r3
	ldrb	r3, [r3, #182]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L1326
	ldrb	r3, [r2]	@ zero_extendqisi2
	mov	r4, r1
	cmp	r3, #128
	beq	.L1329
	cmp	r3, #192
	beq	.L1330
.L1326:
	mvn	r5, #94
.L1327:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1330:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #165
	cmpeq	ip, #4
	bne	.L1326
	cmp	r5, #39
	movls	r7, r0
	movls	r6, r5
	bls	.L1318
	mov	r6, #40
	cmp	r5, r6
	mov	r5, r6
	movle	r7, #0
	movgt	r7, #1
.L1318:
	ldr	r1, .L1331+4
	mov	r2, r6
	ldr	r3, [r4, #4]
.LPIC215:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r1, r1, #156
	bl	memcpy(PLT)
.L1316:
	ldr	r3, [r4, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfi	r1, r7, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r4, #4]
	str	r6, [r3, #4]
	ldr	r3, [r4]
	ldr	r1, [r4, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bge	.L1327
	ldr	r1, .L1331+8
	mov	r2, r0
	ldr	r0, .L1331+12
.LPIC217:
	add	r1, pc, r1
	add	r1, r1, #480
.LPIC216:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1327
.L1329:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #6
	bne	.L1326
	mov	r3, lr, lsr #8
	cmp	r3, #3
	bne	.L1326
	uxtb	lr, lr
	cmp	lr, #238
	bne	.L1326
	cmp	r5, #17
	movls	r7, r0
	movls	r6, r5
	bls	.L1315
	mov	r6, #18
	cmp	r5, r6
	mov	r5, r6
	movle	r7, #0
	movgt	r7, #1
.L1315:
	ldr	r1, .L1331+16
	mov	r2, r6
	ldr	r3, [r4, #4]
.LPIC214:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r1, r1, #196
	bl	memcpy(PLT)
	b	.L1316
.L1332:
	.align	2
.L1331:
	.word	.LANCHOR1-(.LPIC213+8)
	.word	.LANCHOR1-(.LPIC215+8)
	.word	.LANCHOR3-(.LPIC217+8)
	.word	.LC65-(.LPIC216+8)
	.word	.LANCHOR1-(.LPIC214+8)
	.fnend
	.size	mbim_function_ctrlrequest, .-mbim_function_ctrlrequest
	.align	2
	.type	mbim_release, %function
mbim_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L1335
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L1335+4
	str	lr, [sp, #4]
.LPIC219:
	add	r1, pc, r1
	add	r1, r1, #500
.LPIC218:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, .L1335+8
.LPIC220:
	add	r3, pc, r3
	ldr	r3, [r3, #2396]
	add	r2, r3, #84
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
.L1336:
	.align	2
.L1335:
	.word	.LANCHOR3-(.LPIC219+8)
	.word	.LC66-(.LPIC218+8)
	.word	.LANCHOR2-(.LPIC220+8)
	.fnend
	.size	mbim_release, .-mbim_release
	.align	2
	.type	gsdio_open_work, %function
gsdio_open_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	ip, [r0, #-4]
	sub	r2, r0, #124
	ldr	r1, .L1339
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r0, #-124]
	ldr	r0, .L1339+4
	ldr	ip, [ip]
.LPIC222:
	add	r1, pc, r1
	add	r1, r1, #516
.LPIC221:
	add	r0, pc, r0
	str	ip, [sp]
	bl	printk(PLT)
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L1340:
	.align	2
.L1339:
	.word	.LANCHOR3-(.LPIC222+8)
	.word	.LC67-(.LPIC221+8)
	.fnend
	.size	gsdio_open_work, .-gsdio_open_work
	.align	2
	.type	remote_wakeup_show, %function
remote_wakeup_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #164]
	cmp	r3, #0
	bne	.L1344
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L1344:
	ldr	r3, [r0, #156]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L1345
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrb	r3, [r3, #-98]	@ zero_extendqisi2
.LPIC223:
	add	r2, pc, r2
	ubfx	r3, r3, #5, #1
	b	snprintf(PLT)
.L1346:
	.align	2
.L1345:
	.word	.LC68-(.LPIC223+8)
	.fnend
	.size	remote_wakeup_show, .-remote_wakeup_show
	.align	2
	.type	state_show, %function
state_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata(PLT)
	ldr	r4, [r0, #8]
	mov	r6, r0
	cmp	r4, #0
	beq	.L1350
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #12]
	mov	r1, r0
	cmp	r3, #0
	beq	.L1354
	ldr	r4, .L1355
.LPIC224:
	add	r4, pc, r4
.L1349:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
.L1348:
	ldr	r2, .L1355+4
	mov	r0, r7
	mov	r3, r4
	ldrd	r6, [sp, #8]
	mov	r1, #4096
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC228:
	add	r2, pc, r2
	add	sp, sp, #24
	b	snprintf(PLT)
.L1350:
	ldr	r4, .L1355+8
.LPIC227:
	add	r4, pc, r4
	b	.L1348
.L1354:
	ldrb	r3, [r6, #56]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L1352
	ldr	r4, .L1355+12
.LPIC226:
	add	r4, pc, r4
	b	.L1349
.L1352:
	ldr	r4, .L1355+16
.LPIC225:
	add	r4, pc, r4
	b	.L1349
.L1356:
	.align	2
.L1355:
	.word	.LC69-(.LPIC224+8)
	.word	.LC72-(.LPIC228+8)
	.word	.LC70-(.LPIC227+8)
	.word	.LC71-(.LPIC226+8)
	.word	.LC70-(.LPIC225+8)
	.fnend
	.size	state_show, .-state_show
	.align	2
	.type	pm_qos_show, %function
pm_qos_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r2, .L1359
	add	r3, r0, #60
	mov	r1, #4096
	mov	r0, r4
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
.LPIC229:
	add	r2, pc, r2
	b	snprintf(PLT)
.L1360:
	.align	2
.L1359:
	.word	.LC72-(.LPIC229+8)
	.fnend
	.size	pm_qos_show, .-pm_qos_show
	.align	2
	.type	enable_show, %function
enable_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r2, .L1363
	mov	r1, #4096
	ldrb	r3, [r0, #20]	@ zero_extendqisi2
	mov	r0, r4
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
.LPIC230:
	add	r2, pc, r2
	b	snprintf(PLT)
.L1364:
	.align	2
.L1363:
	.word	.LC68-(.LPIC230+8)
	.fnend
	.size	enable_show, .-enable_show
	.align	2
	.type	iSerial_show, %function
iSerial_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L1366
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L1366+4
.LPIC232:
	add	r3, pc, r3
.LPIC231:
	add	r2, pc, r2
	add	r3, r3, #2400
	b	snprintf(PLT)
.L1367:
	.align	2
.L1366:
	.word	.LANCHOR2-(.LPIC232+8)
	.word	.LC73-(.LPIC231+8)
	.fnend
	.size	iSerial_show, .-iSerial_show
	.align	2
	.type	iProduct_show, %function
iProduct_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L1369
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L1369+4
.LPIC234:
	add	r3, pc, r3
.LPIC233:
	add	r2, pc, r2
	add	r3, r3, #2656
	b	snprintf(PLT)
.L1370:
	.align	2
.L1369:
	.word	.LANCHOR2-(.LPIC234+8)
	.word	.LC73-(.LPIC233+8)
	.fnend
	.size	iProduct_show, .-iProduct_show
	.align	2
	.type	iManufacturer_show, %function
iManufacturer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L1372
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L1372+4
.LPIC236:
	add	r3, pc, r3
.LPIC235:
	add	r2, pc, r2
	add	r3, r3, #2912
	b	snprintf(PLT)
.L1373:
	.align	2
.L1372:
	.word	.LANCHOR2-(.LPIC236+8)
	.word	.LC73-(.LPIC235+8)
	.fnend
	.size	iManufacturer_show, .-iManufacturer_show
	.align	2
	.type	bDeviceProtocol_show, %function
bDeviceProtocol_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L1375
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L1375+4
.LPIC238:
	add	r3, pc, r3
.LPIC237:
	add	r2, pc, r2
	ldrb	r3, [r3, #222]	@ zero_extendqisi2
	b	snprintf(PLT)
.L1376:
	.align	2
.L1375:
	.word	.LANCHOR1-(.LPIC238+8)
	.word	.LC68-(.LPIC237+8)
	.fnend
	.size	bDeviceProtocol_show, .-bDeviceProtocol_show
	.align	2
	.type	bDeviceSubClass_show, %function
bDeviceSubClass_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L1378
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L1378+4
.LPIC240:
	add	r3, pc, r3
.LPIC239:
	add	r2, pc, r2
	ldrb	r3, [r3, #221]	@ zero_extendqisi2
	b	snprintf(PLT)
.L1379:
	.align	2
.L1378:
	.word	.LANCHOR1-(.LPIC240+8)
	.word	.LC68-(.LPIC239+8)
	.fnend
	.size	bDeviceSubClass_show, .-bDeviceSubClass_show
	.align	2
	.type	bDeviceClass_show, %function
bDeviceClass_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L1381
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L1381+4
.LPIC242:
	add	r3, pc, r3
.LPIC241:
	add	r2, pc, r2
	ldrb	r3, [r3, #220]	@ zero_extendqisi2
	b	snprintf(PLT)
.L1382:
	.align	2
.L1381:
	.word	.LANCHOR1-(.LPIC242+8)
	.word	.LC68-(.LPIC241+8)
	.fnend
	.size	bDeviceClass_show, .-bDeviceClass_show
	.align	2
	.type	bcdDevice_show, %function
bcdDevice_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L1384
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L1384+4
.LPIC244:
	add	r3, pc, r3
.LPIC243:
	add	r2, pc, r2
	ldrh	r3, [r3, #228]
	b	snprintf(PLT)
.L1385:
	.align	2
.L1384:
	.word	.LANCHOR1-(.LPIC244+8)
	.word	.LC74-(.LPIC243+8)
	.fnend
	.size	bcdDevice_show, .-bcdDevice_show
	.align	2
	.type	idProduct_show, %function
idProduct_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L1387
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L1387+4
.LPIC246:
	add	r3, pc, r3
.LPIC245:
	add	r2, pc, r2
	ldrh	r3, [r3, #226]
	b	snprintf(PLT)
.L1388:
	.align	2
.L1387:
	.word	.LANCHOR1-(.LPIC246+8)
	.word	.LC74-(.LPIC245+8)
	.fnend
	.size	idProduct_show, .-idProduct_show
	.align	2
	.type	idVendor_show, %function
idVendor_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L1390
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L1390+4
.LPIC248:
	add	r3, pc, r3
.LPIC247:
	add	r2, pc, r2
	ldrh	r3, [r3, #224]
	b	snprintf(PLT)
.L1391:
	.align	2
.L1390:
	.word	.LANCHOR1-(.LPIC248+8)
	.word	.LC74-(.LPIC247+8)
	.fnend
	.size	idVendor_show, .-idVendor_show
	.align	2
	.type	audio_source_pcm_show, %function
audio_source_pcm_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	ldr	ip, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L1394
	ldmia	ip, {r3, ip}
.LPIC249:
	add	r2, pc, r2
	str	ip, [sp]
	bl	snprintf(PLT)
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1395:
	.align	2
.L1394:
	.word	.LC75-(.LPIC249+8)
	.fnend
	.size	audio_source_pcm_show, .-audio_source_pcm_show
	.align	2
	.type	mass_storage_inquiry_show, %function
mass_storage_inquiry_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L1398
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #96]
.LPIC250:
	add	r2, pc, r2
	add	r3, r3, #180
	b	snprintf(PLT)
.L1399:
	.align	2
.L1398:
	.word	.LC72-(.LPIC250+8)
	.fnend
	.size	mass_storage_inquiry_show, .-mass_storage_inquiry_show
	.align	2
	.type	ncm_ethaddr_show, %function
ncm_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata(PLT)
	ldr	ip, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L1402
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
.LPIC251:
	add	r2, pc, r2
	str	lr, [sp]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	ip, [ip, #5]	@ zero_extendqisi2
	str	ip, [sp, #16]
	bl	snprintf(PLT)
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1403:
	.align	2
.L1402:
	.word	.LC76-(.LPIC251+8)
	.fnend
	.size	ncm_ethaddr_show, .-ncm_ethaddr_show
	.align	2
	.type	ecm_ethaddr_show, %function
ecm_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata(PLT)
	ldr	ip, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L1406
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
.LPIC252:
	add	r2, pc, r2
	str	lr, [sp]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	ip, [ip, #5]	@ zero_extendqisi2
	str	ip, [sp, #16]
	bl	snprintf(PLT)
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1407:
	.align	2
.L1406:
	.word	.LC76-(.LPIC252+8)
	.fnend
	.size	ecm_ethaddr_show, .-ecm_ethaddr_show
	.align	2
	.type	ecm_transports_show, %function
ecm_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L1409
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L1409+4
.LPIC254:
	add	r3, pc, r3
.LPIC253:
	add	r2, pc, r2
	add	r3, r3, #3168
	b	snprintf(PLT)
.L1410:
	.align	2
.L1409:
	.word	.LANCHOR2-(.LPIC254+8)
	.word	.LC72-(.LPIC253+8)
	.fnend
	.size	ecm_transports_show, .-ecm_transports_show
	.align	2
	.type	rndis_max_pkt_per_xfer_show, %function
rndis_max_pkt_per_xfer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L1413
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrb	r3, [r3, #12]	@ zero_extendqisi2
.LPIC255:
	add	r2, pc, r2
	b	snprintf(PLT)
.L1414:
	.align	2
.L1413:
	.word	.LC68-(.LPIC255+8)
	.fnend
	.size	rndis_max_pkt_per_xfer_show, .-rndis_max_pkt_per_xfer_show
	.align	2
	.type	rndis_vendorID_show, %function
rndis_vendorID_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L1417
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #8]
.LPIC256:
	add	r2, pc, r2
	b	snprintf(PLT)
.L1418:
	.align	2
.L1417:
	.word	.LC74-(.LPIC256+8)
	.fnend
	.size	rndis_vendorID_show, .-rndis_vendorID_show
	.align	2
	.type	rndis_ethaddr_show, %function
rndis_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata(PLT)
	ldr	ip, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L1421
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
.LPIC257:
	add	r2, pc, r2
	str	lr, [sp]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	ip, [ip, #5]	@ zero_extendqisi2
	str	ip, [sp, #16]
	bl	snprintf(PLT)
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1422:
	.align	2
.L1421:
	.word	.LC76-(.LPIC257+8)
	.fnend
	.size	rndis_ethaddr_show, .-rndis_ethaddr_show
	.align	2
	.type	rndis_wceis_show, %function
rndis_wceis_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L1425
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrb	r3, [r3, #269]	@ zero_extendqisi2
.LPIC258:
	add	r2, pc, r2
	b	snprintf(PLT)
.L1426:
	.align	2
.L1425:
	.word	.LC68-(.LPIC258+8)
	.fnend
	.size	rndis_wceis_show, .-rndis_wceis_show
	.align	2
	.type	rndis_manufacturer_show, %function
rndis_manufacturer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L1429
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	add	r3, r3, #13
.LPIC259:
	add	r2, pc, r2
	b	snprintf(PLT)
.L1430:
	.align	2
.L1429:
	.word	.LC72-(.LPIC259+8)
	.fnend
	.size	rndis_manufacturer_show, .-rndis_manufacturer_show
	.align	2
	.type	serial_xport_names_show, %function
serial_xport_names_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L1432
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L1432+4
.LPIC261:
	add	r3, pc, r3
	add	r3, r3, #3216
.LPIC260:
	add	r2, pc, r2
	add	r3, r3, #4
	b	snprintf(PLT)
.L1433:
	.align	2
.L1432:
	.word	.LANCHOR2-(.LPIC261+8)
	.word	.LC72-(.LPIC260+8)
	.fnend
	.size	serial_xport_names_show, .-serial_xport_names_show
	.align	2
	.type	rmnet_xport_names_show, %function
rmnet_xport_names_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L1435
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L1435+4
.LPIC263:
	add	r3, pc, r3
	add	r3, r3, #3248
.LPIC262:
	add	r2, pc, r2
	add	r3, r3, #4
	b	snprintf(PLT)
.L1436:
	.align	2
.L1435:
	.word	.LANCHOR2-(.LPIC263+8)
	.word	.LC72-(.LPIC262+8)
	.fnend
	.size	rmnet_xport_names_show, .-rmnet_xport_names_show
	.align	2
	.type	rmnet_transports_show, %function
rmnet_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L1438
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L1438+4
.LPIC265:
	add	r3, pc, r3
	add	r3, r3, #3296
.LPIC264:
	add	r2, pc, r2
	add	r3, r3, #8
	b	snprintf(PLT)
.L1439:
	.align	2
.L1438:
	.word	.LANCHOR2-(.LPIC265+8)
	.word	.LC72-(.LPIC264+8)
	.fnend
	.size	rmnet_transports_show, .-rmnet_transports_show
	.align	2
	.type	mbim_transports_show, %function
mbim_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L1441
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L1441+4
.LPIC267:
	add	r3, pc, r3
	add	r3, r3, #3344
.LPIC266:
	add	r2, pc, r2
	add	r3, r3, #12
	b	snprintf(PLT)
.L1442:
	.align	2
.L1441:
	.word	.LANCHOR2-(.LPIC267+8)
	.word	.LC72-(.LPIC266+8)
	.fnend
	.size	mbim_transports_show, .-mbim_transports_show
	.align	2
	.type	rmnet_sdio_response_complete, %function
rmnet_sdio_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	ldr	r2, [r1, #32]
	cmn	r3, #104
	ldr	r2, [r2, #76]
	bxeq	lr
	cmp	r3, #0
	bxeq	lr
	cmn	r3, #108
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r2]
	.pad #8
	sub	sp, sp, #8
	ldr	lr, [r1, #48]
	ldr	ip, [r1, #4]
	ldr	r1, .L1457
	ldr	r2, [r0, #4]
	add	r0, r4, #32
	str	lr, [sp]
	str	ip, [sp, #4]
.LPIC268:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1458:
	.align	2
.L1457:
	.word	.LC77-(.LPIC268+8)
	.fnend
	.size	rmnet_sdio_response_complete, .-rmnet_sdio_response_complete
	.align	2
	.type	rmnet_mux_response_complete, %function
rmnet_mux_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	ldr	r2, [r1, #32]
	cmn	r3, #104
	ldr	r2, [r2, #76]
	bxeq	lr
	cmp	r3, #0
	bxeq	lr
	cmn	r3, #108
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r2]
	.pad #8
	sub	sp, sp, #8
	ldr	lr, [r1, #48]
	ldr	ip, [r1, #4]
	ldr	r1, .L1473
	ldr	r2, [r0, #4]
	add	r0, r4, #32
	str	lr, [sp]
	str	ip, [sp, #4]
.LPIC269:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1474:
	.align	2
.L1473:
	.word	.LC78-(.LPIC269+8)
	.fnend
	.size	rmnet_mux_response_complete, .-rmnet_mux_response_complete
	.align	2
	.type	composite_show_suspended, %function
composite_show_suspended:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldrb	r2, [r0, #16]	@ zero_extendqisi2
	mov	r0, r4
	ldr	r1, .L1477
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	and	r2, r2, #1
.LPIC270:
	add	r1, pc, r1
	b	sprintf(PLT)
.L1478:
	.align	2
.L1477:
	.word	.LC68-(.LPIC270+8)
	.fnend
	.size	composite_show_suspended, .-composite_show_suspended
	.align	2
	.type	midi_alsa_show, %function
midi_alsa_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r0, r4
	ldr	r1, .L1481
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrd	r2, [r3]
.LPIC271:
	add	r1, pc, r1
	b	sprintf(PLT)
.L1482:
	.align	2
.L1481:
	.word	.LC75-(.LPIC271+8)
	.fnend
	.size	midi_alsa_show, .-midi_alsa_show
	.align	2
	.type	fsg_show_ro, %function
fsg_show_ro:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r1, [r0, #-48]
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	mov	r0, r2
	cmp	r1, #0
	ldr	r1, .L1486
	ubfxne	r3, r3, #1, #1
	andeq	r3, r3, #1
	mov	r2, r3
.LPIC272:
	add	r1, pc, r1
	b	sprintf(PLT)
.L1487:
	.align	2
.L1486:
	.word	.LC68-(.LPIC272+8)
	.fnend
	.size	fsg_show_ro, .-fsg_show_ro
	.align	2
	.type	fsg_show_nofua, %function
fsg_show_nofua:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	mov	r0, r2
	ldr	r1, .L1489
	mov	r2, r3, lsr #7
.LPIC273:
	add	r1, pc, r1
	b	sprintf(PLT)
.L1490:
	.align	2
.L1489:
	.word	.LC79-(.LPIC273+8)
	.fnend
	.size	fsg_show_nofua, .-fsg_show_nofua
	.align	2
	.type	fsg_show_cdrom, %function
fsg_show_cdrom:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	mov	r0, r2
	ldr	r1, .L1492
	ubfx	r2, r3, #3, #1
.LPIC274:
	add	r1, pc, r1
	b	sprintf(PLT)
.L1493:
	.align	2
.L1492:
	.word	.LC68-(.LPIC274+8)
	.fnend
	.size	fsg_show_cdrom, .-fsg_show_cdrom
	.align	2
	.type	check_command, %function
check_command:
	.fnstart
	@ args = 8, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r5, r3
	strd	r6, [sp, #8]
	ldr	r6, .L1545
	mov	r0, #0
	str	r8, [sp, #16]
	mov	r7, r1
	mov	r8, r2
	str	lr, [sp, #20]
	ldr	ip, [r4, #120]
	.pad #24
	sub	sp, sp, #24
.LPIC286:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	strb	r0, [sp]
	cmp	ip, r0
	ldr	r3, [r6]
	str	r3, [sp, #20]
	bne	.L1539
.L1495:
	ldr	r2, [r4, #128]
	ldr	r3, [r4, #124]
	cmp	r2, #0
	beq	.L1496
	cmp	r2, r3
	bls	.L1497
	ldrb	r2, [r4, #144]	@ zero_extendqisi2
	cmp	r8, ip
	str	r3, [r4, #128]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	orr	r2, r2, #4
	strb	r2, [r4, #144]
	beq	.L1498
	cmp	r3, #0
	bne	.L1501
.L1498:
	ldr	r0, [r4, #72]
	cmp	r0, r7
	beq	.L1513
.L1543:
	blt	.L1501
	ldr	ip, [r4, #104]
	cmp	ip, #0
	beq	.L1502
.L1544:
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	r3, #3
	beq	.L1503
	ldrb	r2, [ip, #24]	@ zero_extendqisi2
	mov	r3, #0
	ldr	r1, [ip, #36]
	str	r3, [ip, #28]
	str	r3, [ip, #32]
	bfi	r2, r3, #6, #1
	cmp	r1, r3
	strb	r2, [ip, #24]
	bne	.L1504
.L1503:
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	cmp	r0, #1
	and	r3, r3, #31
	strb	r3, [r4, #77]
	ble	.L1509
.L1511:
	mov	r3, #1
	add	r2, r4, #76
	mov	lr, r3
.L1508:
	ldrb	r1, [r2, #1]!	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L1506
	ands	r1, r5, lr, asl r3
	beq	.L1540
.L1506:
	add	r3, r3, #1
	cmp	r0, r3
	bgt	.L1508
	cmp	ip, #0
	beq	.L1510
.L1509:
	ldr	r3, [sp, #48]
	ldr	r2, [ip]
	adds	r3, r3, #0
	movne	r3, #1
	cmp	r2, #0
	movne	r3, #0
	cmp	r3, #0
	bne	.L1541
.L1510:
	mov	r0, #0
.L1499:
	ldr	r2, [sp, #20]
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L1542
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1496:
	ldr	r0, [r4, #72]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	cmp	r0, r7
	bne	.L1543
.L1513:
	ldr	ip, [r4, #104]
	mov	r0, r7
	cmp	ip, #0
	bne	.L1544
.L1502:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	ldrb	r2, [r4, #76]	@ zero_extendqisi2
	bfi	r3, ip, #4, #1
	cmp	r2, #3
	cmpne	r2, #18
	strb	r3, [r4, #144]
	bne	.L1507
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	cmp	r0, #1
	and	r3, r3, #31
	strb	r3, [r4, #77]
	bgt	.L1511
	b	.L1510
.L1504:
	ldrb	r2, [r4, #76]	@ zero_extendqisi2
	cmp	r2, #18
	cmpne	r2, #3
	mvnne	r0, #21
	strne	r1, [ip, #28]
	strne	r3, [ip, #36]
	beq	.L1503
	b	.L1499
.L1540:
	cmp	ip, #0
	beq	.L1507
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [ip, #28]
	b	.L1499
.L1539:
	ldr	r2, .L1545+4
	mov	r0, sp
	ldr	r1, .L1545+8
	ldr	r3, [r4, #124]
.LPIC285:
	add	r2, pc, r2
	add	ip, r2, ip
.LPIC284:
	add	r1, pc, r1
	ldrb	r2, [ip, #532]	@ zero_extendqisi2
	bl	sprintf(PLT)
	ldr	ip, [r4, #120]
	b	.L1495
.L1497:
	cmp	r8, ip
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	beq	.L1498
.L1501:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #21
	orr	r3, r3, #4
	strb	r3, [r4, #144]
	b	.L1499
.L1507:
	mvn	r0, #21
	b	.L1499
.L1541:
	mov	r3, #14848
	mvn	r0, #21
	movt	r3, 2
	str	r3, [ip, #28]
	b	.L1499
.L1542:
	bl	__stack_chk_fail(PLT)
.L1546:
	.align	2
.L1545:
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC286+8))
	.word	.LANCHOR3-(.LPIC285+8)
	.word	.LC80-(.LPIC284+8)
	.fnend
	.size	check_command, .-check_command
	.align	2
	.type	composite_unbind, %function
composite_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #32
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r0, [sp, #4]
	mov	r0, r8
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #12]
	mov	r6, r0
	cmp	r3, #0
	bne	.L1571
.L1548:
	add	r7, r6, #36
	mov	r10, #256
.L1553:
	ldr	r4, [r6, #36]
	cmp	r4, r7
	beq	.L1572
.L1554:
	ldr	r1, [r4, #4]
	mov	r3, #512
	sub	r9, r4, #28
	ldr	r0, [r4]
	mov	fp, r3
	add	r5, r4, #8
	str	r1, [r0, #4]
	str	r0, [r1]
	str	r10, [r4]
	str	r3, [r4, #4]
	b	.L1551
.L1552:
	ldmia	r1, {r0, r3}
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r3, [r1, #-36]
	strd	r10, [r1]
	cmp	r3, #0
	bne	.L1573
.L1551:
	ldr	r1, [r4, #8]
	cmp	r1, r5
	bne	.L1552
	ldr	r3, [r4, #-16]
	cmp	r3, #0
	beq	.L1553
	mov	r0, r9
	blx	r3
	ldr	r4, [r6, #36]
	cmp	r4, r7
	bne	.L1554
.L1572:
	ldr	r3, .L1574
.LPIC288:
	add	r3, pc, r3
	ldr	r3, [r3, #88]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L1555
	mov	r0, r6
	blx	r3
.L1555:
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L1556
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldr	r3, [sp, #4]
	ldr	r1, [r6, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L1556:
	ldr	r1, .L1574+4
	mov	r0, r8
.LPIC289:
	add	r1, pc, r1
	add	r1, r1, #8
	bl	device_remove_file(PLT)
	mov	r0, r6
	bl	kfree(PLT)
	mov	r0, r8
	mov	r1, #0
	bl	dev_set_drvdata(PLT)
	ldr	r3, .L1574+8
	mov	r2, #0
.LPIC290:
	add	r3, pc, r3
	str	r2, [r3, #88]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1573:
	sub	r1, r1, #64
	mov	r0, r9
	blx	r3
	b	.L1551
.L1571:
	ldr	r0, .L1574+12
	movw	r1, #1454
.LPIC287:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L1548
.L1575:
	.align	2
.L1574:
	.word	.LANCHOR2-(.LPIC288+8)
	.word	.LANCHOR0-(.LPIC289+8)
	.word	.LANCHOR2-(.LPIC290+8)
	.word	.LC81-(.LPIC287+8)
	.fnend
	.size	composite_unbind, .-composite_unbind
	.align	2
	.type	eth_qc_stop, %function
eth_qc_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r0, #576]
	ldr	r6, [r0, #1220]
	cmp	r1, #0
	beq	.L1587
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit(PLT)
.L1578:
	add	r5, r4, #1216
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #1220]
	mov	r7, r0
	cmp	r3, #0
	beq	.L1579
	ldr	r3, [r6, #108]
	cmp	r3, #0
	beq	.L1579
	mov	r0, r6
	blx	r3
.L1579:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1587:
	ldr	r0, .L1588
	movw	r1, #1847
.LPIC291:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r0, .L1588+4
.LPIC292:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1578
.L1589:
	.align	2
.L1588:
	.word	.LC82-(.LPIC291+8)
	.word	.LC83-(.LPIC292+8)
	.fnend
	.size	eth_qc_stop, .-eth_qc_stop
	.align	2
	.type	f_midi_transmit, %function
f_midi_transmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r10, [sp, #24]
	mov	r10, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldr	r3, [r0, #80]
	.pad #20
	sub	sp, sp, #20
	cmp	r3, #0
	str	r3, [sp, #4]
	beq	.L1590
	cmp	r1, #0
	mov	r9, r1
	beq	.L1636
.L1592:
	ldr	r3, .L1641
	mov	r2, #0
	add	r6, r10, #92
	mov	r1, r2
	add	fp, r10, #220
	add	r8, r10, #156
	add	r7, sp, #15
	str	r2, [r9, #4]
.LPIC294:
	add	r3, pc, r3
	str	r3, [r9, #28]
.L1624:
	ldr	r4, [fp, #4]!
	ldr	r5, [r6, #4]!
	cmp	r4, #0
	beq	.L1593
	ldr	r3, [r4, #4]
	cmp	r3, #0
	cmpne	r5, #0
	beq	.L1593
	ldr	r2, [r10, #328]
	add	r3, r1, #3
	cmp	r2, r3
	bls	.L1593
	str	r6, [sp]
.L1623:
	mov	r0, r5
	mov	r1, r7
	mov	r2, #1
	bl	snd_rawmidi_transmit(PLT)
	cmp	r0, #1
	bne	.L1637
	ldrb	r3, [r4, #8]	@ zero_extendqisi2
	ldrb	r2, [sp, #15]	@ zero_extendqisi2
	mov	r3, r3, asl #4
	cmp	r2, #247
	uxtb	r3, r3
	bhi	.L1638
	cmp	r2, #239
	bls	.L1597
	sub	r1, r2, #241
	cmp	r1, #6
	addls	pc, pc, r1, asl #2
	b	.L1598
.L1600:
	b	.L1599
	b	.L1601
	b	.L1599
	b	.L1605
	b	.L1605
	b	.L1603
	b	.L1604
	.p2align 1
.L1607:
	ldr	r2, [r9, #4]
	orr	r3, r3, #7
	mvn	r6, #8
	ldr	lr, [r9]
	ldrb	ip, [r4, #10]	@ zero_extendqisi2
	ldrb	r0, [r4, #11]	@ zero_extendqisi2
	add	r1, r2, #4
	strb	r3, [lr, r2]
	add	r2, lr, r2
	strb	ip, [r2, #1]
	strb	r0, [r2, #2]
	strb	r6, [r2, #3]
	str	r1, [r9, #4]
.L1605:
	mov	r3, #0
	strb	r3, [r4, #9]
	ldr	r1, [r9, #4]
.L1596:
	ldr	r3, [r10, #328]
	add	r2, r1, #3
	cmp	r2, r3
	bcc	.L1623
	ldr	r6, [sp]
.L1593:
	cmp	r6, r8
	bne	.L1624
	cmp	r1, #0
	bne	.L1639
	ldr	r0, [r9]
	bl	kfree(PLT)
	ldr	r0, [sp, #4]
	mov	r1, r9
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L1590:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1601:
	mvn	r2, #13
	mov	r3, #2
	strb	r2, [r4, #10]
	strb	r3, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L1596
.L1599:
	mov	r3, #1
	strb	r2, [r4, #10]
	strb	r3, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L1596
.L1598:
	mvn	r2, #15
	mov	r3, #5
	strb	r2, [r4, #10]
	strb	r3, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L1596
.L1603:
	ldr	r1, [r9, #4]
	orr	r3, r3, #5
	mov	r2, #0
	ldr	lr, [r9]
	mvn	ip, #9
	add	r0, r1, #4
	strb	r3, [lr, r1]
	add	r3, lr, r1
	strb	ip, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	str	r0, [r9, #4]
	strb	r2, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L1596
.L1638:
	ldr	r0, [r9, #4]
	orr	r3, r3, #15
	mov	ip, #0
	ldr	lr, [r9]
	add	r1, r0, #4
	strb	r3, [lr, r0]
	add	r3, lr, r0
	strb	r2, [r3, #1]
	strb	ip, [r3, #2]
	strb	ip, [r3, #3]
	str	r1, [r9, #4]
	b	.L1596
.L1597:
	tst	r2, #128
	bne	.L1640
	ldrb	r1, [r4, #9]	@ zero_extendqisi2
	sub	r1, r1, #1
	cmp	r1, #5
	addls	pc, pc, r1, asl #2
	b	.L1635
.L1613:
	b	.L1612
	b	.L1614
	b	.L1615
	b	.L1616
	b	.L1617
	b	.L1618
	.p2align 1
.L1640:
	add	r3, r2, #64
	strb	r2, [r4, #10]
	uxtb	r3, r3
	cmp	r3, #31
	movhi	r3, #2
	strlsb	r0, [r4, #9]
	strhib	r3, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L1596
.L1618:
	ldr	r0, [r9, #4]
	orr	r3, r3, #4
	ldr	r1, [r9]
	ldrb	r6, [r4, #10]	@ zero_extendqisi2
	ldrb	lr, [r4, #11]	@ zero_extendqisi2
	add	ip, r0, #4
	strb	r3, [r1, r0]
	add	r1, r1, r0
	mov	r3, #4
	strb	r6, [r1, #1]
	strb	lr, [r1, #2]
	strb	r2, [r1, #3]
	str	ip, [r9, #4]
	strb	r3, [r4, #9]
.L1635:
	ldr	r1, [r9, #4]
	b	.L1596
.L1637:
	mov	r3, #0
	ldr	r6, [sp]
	str	r3, [r4, #4]
	ldr	r1, [r9, #4]
	b	.L1593
.L1604:
	ldrb	r2, [r4, #9]	@ zero_extendqisi2
	cmp	r2, #5
	beq	.L1606
	cmp	r2, #6
	beq	.L1607
	cmp	r2, #4
	bne	.L1605
	ldr	r2, [r9, #4]
	orr	r3, r3, #5
	mov	r1, #0
	ldr	lr, [r9]
	mvn	ip, #8
	add	r0, r2, #4
	strb	r3, [lr, r2]
	add	r3, lr, r2
	strb	ip, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	str	r0, [r9, #4]
	b	.L1605
.L1617:
	mov	r3, #6
	strb	r2, [r4, #11]
	strb	r3, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L1596
.L1616:
	mov	r3, #5
	strb	r2, [r4, #10]
	strb	r3, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L1596
.L1615:
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	ldrb	r6, [r4, #11]	@ zero_extendqisi2
	cmp	lr, #239
	movls	r1, #2
	movhi	r1, #0
	orrls	r3, r3, lr, lsr #4
	orrhi	r3, r3, #3
	strb	r1, [r4, #9]
	ldmia	r9, {r0, ip}
	strb	r3, [r0, ip]
	add	r1, ip, #4
	add	r0, r0, ip
	strb	lr, [r0, #1]
	strb	r6, [r0, #2]
	strb	r2, [r0, #3]
	str	r1, [r9, #4]
	b	.L1596
.L1614:
	mov	r3, #3
	strb	r2, [r4, #11]
	strb	r3, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L1596
.L1612:
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	mov	r6, #0
	cmp	lr, #239
	movhi	r1, #0
	orrls	r3, r3, lr, lsr #4
	orrhi	r3, r3, #2
	strhib	r1, [r4, #9]
	ldr	ip, [r9, #4]
	ldr	r0, [r9]
	add	r1, ip, #4
	strb	r3, [r0, ip]
	add	r0, r0, ip
	strb	lr, [r0, #1]
	strb	r2, [r0, #2]
	strb	r6, [r0, #3]
	str	r1, [r9, #4]
	b	.L1596
.L1606:
	ldr	r1, [r9, #4]
	orr	r3, r3, #6
	mvn	r6, #8
	ldr	r2, [r9]
	mov	ip, #0
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	add	r0, r1, #4
	strb	r3, [r2, r1]
	add	r2, r2, r1
	strb	lr, [r2, #1]
	strb	r6, [r2, #2]
	strb	ip, [r2, #3]
	str	r0, [r9, #4]
	b	.L1605
.L1639:
	ldr	r0, [sp, #4]
	mov	r1, r9
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	b	.L1590
.L1636:
	mov	r0, r3
	ldr	r1, [r10, #328]
	bl	midi_alloc_ep_req(PLT)
	subs	r9, r0, #0
	bne	.L1592
	ldr	r0, [r10, #76]
	ldr	r1, .L1641+4
	add	r0, r0, #32
.LPIC293:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L1590
.L1642:
	.align	2
.L1641:
	.word	f_midi_complete-(.LPIC294+8)
	.word	.LC84-(.LPIC293+8)
	.fnend
	.size	f_midi_transmit, .-f_midi_transmit
	.align	2
	.type	f_midi_in_tasklet, %function
f_midi_in_tasklet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r1, #0
	b	f_midi_transmit(PLT)
	.fnend
	.size	f_midi_in_tasklet, .-f_midi_in_tasklet
	.align	2
	.type	f_midi_out_trigger, %function
f_midi_out_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #28]
	cmp	r1, #0
	ldr	r0, [r0, #12]
	ldr	r1, [r3, #200]
	add	r1, r1, #288
	bne	.L1646
	b	_clear_bit(PLT)
.L1646:
	b	_set_bit(PLT)
	.fnend
	.size	f_midi_out_trigger, .-f_midi_out_trigger
	.align	2
	.type	gctrl_disconnect_w, %function
gctrl_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #52]
	tst	r3, #1
	bne	.L1649
	bx	lr
.L1649:
	add	r1, r0, #52
	mov	r0, #0
	b	_clear_bit(PLT)
	.fnend
	.size	gctrl_disconnect_w, .-gctrl_disconnect_w
	.align	2
	.type	ghsic_data_disconnect_w, %function
ghsic_data_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #76]
	tst	r3, #1
	bne	.L1652
	bx	lr
.L1652:
	add	r1, r0, #76
	mov	r0, #0
	b	_clear_bit(PLT)
	.fnend
	.size	ghsic_data_disconnect_w, .-ghsic_data_disconnect_w
	.align	2
	.type	ghsuart_ctrl_remove, %function
ghsuart_ctrl_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L1662
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #84
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0, #4]
.LPIC295:
	add	r3, pc, r3
	mla	r3, r1, r2, r3
	ldr	r4, [r3, #1880]
	add	r6, r4, #8
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #12]
	mov	r1, r0
	mov	r0, r6
	cmp	r5, #0
	beq	.L1661
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L1656
	mov	r0, r5
	blx	r3
.L1656:
	add	r4, r4, #88
	mov	r0, #0
	mov	r1, r4
	bl	_clear_bit(PLT)
	mov	r1, r4
	mov	r0, #2
	bl	_clear_bit(PLT)
.L1655:
	mov	r1, r4
	mov	r0, #1
	bl	_clear_bit(PLT)
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1661:
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r4, r4, #88
	b	.L1655
.L1663:
	.align	2
.L1662:
	.word	.LANCHOR2-(.LPIC295+8)
	.fnend
	.size	ghsuart_ctrl_remove, .-ghsuart_ctrl_remove
	.align	2
	.type	f_midi_in_trigger, %function
f_midi_in_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r0, #28]
	ldr	r3, [r0, #12]
	ldr	r2, [r2, #200]
	add	r3, r3, #56
	ldr	r3, [r2, r3, asl #2]
	cmp	r3, #0
	bxeq	lr
	cmp	r1, #0
	str	r1, [r3, #4]
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, #0
	add	r1, r2, #296
	str	lr, [sp, #4]
	add	r4, r2, #292
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	beq	.L1673
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1673:
	mov	r0, r4
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	__tasklet_hi_schedule(PLT)
	.fnend
	.size	f_midi_in_trigger, .-f_midi_in_trigger
	.align	2
	.type	ghsuart_send_cpkt_tomodem, %function
ghsuart_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L1689
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC296:
	add	r3, pc, r3
	ldr	r2, [r3, #1876]
	cmp	r0, r2
	bcs	.L1685
	mov	r2, #84
	mla	r0, r2, r0, r3
	ldr	r4, [r0, #1880]
	cmp	r4, #0
	beq	.L1686
	ldr	r0, [r4, #88]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	beq	.L1687
	mov	r6, r1
	mov	r0, r5
	mov	r1, #32
	bl	__kmalloc(PLT)
	subs	r7, r0, #0
	mvneq	r0, #11
	beq	.L1676
	mov	r2, r5
	mov	r1, r6
	ldr	r5, .L1689+4
	bl	memcpy(PLT)
	ldr	r0, .L1689+8
.LPIC303:
	add	r5, pc, r5
	add	r5, r5, #536
.LPIC302:
	add	r0, pc, r0
	mov	r1, r5
	add	r0, r0, #236
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L1688
.L1679:
	ldr	r3, [r4, #104]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #104]
	bl	kfree(PLT)
	mvn	r0, #18
.L1676:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1687:
	ldr	r3, [r4, #104]
	add	r3, r3, #1
	str	r3, [r4, #104]
	b	.L1676
.L1686:
	ldr	r1, .L1689+12
	ldr	r0, .L1689+16
.LPIC301:
	add	r1, pc, r1
.LPIC300:
	add	r0, pc, r0
	add	r1, r1, #536
	bl	printk(PLT)
	mvn	r0, #18
	b	.L1676
.L1685:
	ldr	r1, .L1689+20
	mov	r2, r0
	ldr	r0, .L1689+24
.LPIC298:
	add	r1, pc, r1
.LPIC297:
	add	r0, pc, r0
	add	r1, r1, #536
	bl	printk(PLT)
	mvn	r0, #18
	b	.L1676
.L1688:
	ldr	r0, .L1689+28
	mov	r1, r5
	mvn	r2, #18
.LPIC304:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1679
.L1690:
	.align	2
.L1689:
	.word	.LANCHOR2-(.LPIC296+8)
	.word	.LANCHOR3-(.LPIC303+8)
	.word	.LANCHOR1-(.LPIC302+8)
	.word	.LANCHOR3-(.LPIC301+8)
	.word	.LC27-(.LPIC300+8)
	.word	.LANCHOR3-(.LPIC298+8)
	.word	.LC31-(.LPIC297+8)
	.word	.LC85-(.LPIC304+8)
	.fnend
	.size	ghsuart_send_cpkt_tomodem, .-ghsuart_send_cpkt_tomodem
	.align	2
	.type	rmnet_smd_disable, %function
rmnet_smd_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	mov	r3, #0
	str	lr, [sp, #4]
	ldr	r0, [r0, #88]
	str	r3, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1692
	blx	r2
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
.L1692:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1693
	blx	r2
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
.L1693:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1694
	blx	r2
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
.L1694:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	lr, [sp, #4]
	add	r1, r4, #400
	ldr	r0, [r4, #380]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	queue_work(PLT)
	.fnend
	.size	rmnet_smd_disable, .-rmnet_smd_disable
	.align	2
	.type	rmnet_smd_ch_probe, %function
rmnet_smd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L1707
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC306:
	add	r3, pc, r3
	ldr	r1, [r3, #3408]
	ldr	r0, [r1, #380]
	add	r1, r1, #384
	bl	queue_work(PLT)
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
.L1708:
	.align	2
.L1707:
	.word	.LANCHOR2-(.LPIC306+8)
	.fnend
	.size	rmnet_smd_ch_probe, .-rmnet_smd_ch_probe
	.align	2
	.type	rmnet_sdio_setup, %function
rmnet_sdio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #184]
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	r8, [r1, #2]	@ unaligned
	ldr	r7, [r2, #24]
	cmp	r3, #0
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r5, [r7, #4]
	beq	.L1719
	mov	r4, r0
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	movw	r2, #8482
	ldrb	r0, [r1]	@ zero_extendqisi2
	orr	r3, r3, r0, asl #8
	cmp	r3, r2
	beq	.L1711
	movw	r2, #41217
	cmp	r3, r2
	beq	.L1712
	cmp	r3, #8448
	beq	.L1725
.L1721:
	mvn	r0, #94
.L1723:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1712:
	cmp	r8, #0
	bne	.L1721
	add	fp, r4, #180
	str	r1, [sp, #20]
	mov	r0, fp
	bl	_raw_spin_lock(PLT)
	mov	r3, r4
	ldr	r1, [sp, #20]
	ldr	r10, [r3, #112]!
	cmp	r10, r3
	beq	.L1726
	ldr	r3, [r10, #4]
	mov	ip, #256
	mov	r1, #512
	ldr	r2, [r10]
	mov	r0, fp
	mov	r9, r10
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r10]
	str	r1, [r10, #4]
	ldr	r3, [r4, #120]
	sub	r3, r3, #1
	str	r3, [r4, #120]
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r10, #-4]
	ldr	r1, [r10, #-8]
	ldr	r0, [r5]
	cmp	r6, r3
	movcs	r8, r3
	movcc	r8, r6
	mov	r2, r8
	bl	memcpy(PLT)
	ldr	r3, .L1727
	str	r4, [r5, #32]
.LPIC309:
	add	r3, pc, r3
	str	r3, [r5, #28]
	ldr	r0, [r9, #-8]!
	bl	kfree(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	ldr	r3, [r4, #356]
	cmp	r8, r6
	mov	r6, r8
	movge	ip, #0
	movlt	ip, #1
	add	r3, r3, #1
	str	r3, [r4, #356]
	b	.L1714
.L1725:
	ldr	r3, .L1727+4
	mov	ip, #0
	str	r4, [r5, #32]
.LPIC307:
	add	r3, pc, r3
	str	r3, [r5, #28]
.L1714:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r6, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r3, ip, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L1718
	mov	r0, r4
	b	.L1723
.L1711:
	ldr	r3, [r4, #320]
	tst	r8, #1
	add	r1, r4, #324
	ldr	r0, [r4, #192]
	orrne	r3, r3, #2
	biceq	r3, r3, #2
	str	r3, [r4, #320]
	bl	queue_work(PLT)
	adds	ip, r6, #0
	mov	r6, #0
	movne	ip, #1
	b	.L1714
.L1718:
	ldr	r0, [r7]
	mov	r2, r4
	ldr	r1, .L1727+8
	add	r0, r0, #32
.LPIC310:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r4
	b	.L1723
.L1719:
	mvn	r0, #106
	b	.L1723
.L1726:
	ldr	r0, [r7]
	str	r8, [sp]
	ldrb	r2, [r1]	@ zero_extendqisi2
	str	r9, [sp, #4]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	str	r6, [sp, #8]
	ldr	r1, .L1727+12
	add	r0, r0, #32
.LPIC308:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	mov	r0, fp
	bl	_raw_spin_unlock(PLT)
	mvn	r0, #94
	b	.L1723
.L1728:
	.align	2
.L1727:
	.word	rmnet_sdio_response_complete-(.LPIC309+8)
	.word	rmnet_sdio_command_complete-(.LPIC307+8)
	.word	.LC62-(.LPIC310+8)
	.word	.LC86-(.LPIC308+8)
	.fnend
	.size	rmnet_sdio_setup, .-rmnet_sdio_setup
	.align	2
	.type	gs_unthrottle, %function
gs_unthrottle:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #280]
	cmp	r4, #0
	beq	.L1729
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #4]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1731
	ldr	r3, .L1736
	add	r1, r4, #60
.LPIC311:
	add	r3, pc, r3
	ldr	r0, [r3, #3412]
	bl	queue_work(PLT)
.L1731:
	mov	r0, r4
	mov	r1, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L1729:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1737:
	.align	2
.L1736:
	.word	.LANCHOR2-(.LPIC311+8)
	.fnend
	.size	gs_unthrottle, .-gs_unthrottle
	.align	2
	.type	gs_read_complete, %function
gs_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	mov	r0, r4
	add	r7, r4, #48
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	ldr	r3, [r4, #128]
	add	lr, r5, #36
	ldr	r0, [r5, #48]
	add	r1, r4, #60
	ldr	r2, .L1740
	ldr	ip, [r4, #52]
	str	lr, [r4, #52]
	add	r3, r3, r0
.LPIC312:
	add	r2, pc, r2
	str	r3, [r4, #128]
	ldr	r0, [r2, #3412]
	str	r7, [r5, #36]
	str	ip, [r5, #40]
	str	lr, [ip]
	bl	queue_work(PLT)
	ldr	r8, [sp, #16]
	mov	r0, r4
	mov	r1, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L1741:
	.align	2
.L1740:
	.word	.LANCHOR2-(.LPIC312+8)
	.fnend
	.size	gs_read_complete, .-gs_read_complete
	.align	2
	.global	gsdio_write_complete
	.type	gsdio_write_complete, %function
gsdio_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	cmp	r4, #0
	beq	.L1754
	add	r7, r4, #4
	mov	r6, r0
	mov	r0, r7
	mov	r5, r1
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, r4
	add	r2, r5, #36
	ldr	r1, [r3, #52]!
	mov	r8, r0
	str	r2, [r1, #4]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	ldr	r3, [r4, #76]
	str	r2, [r4, #52]
	add	r3, r3, #1
	str	r3, [r4, #76]
	ldr	r1, [r5, #44]
	cmn	r1, #108
	beq	.L1745
	cmp	r1, #0
	bne	.L1755
.L1746:
	ldr	r3, .L1756
	add	r1, r4, #60
.LPIC317:
	add	r3, pc, r3
	ldr	r0, [r3, #3416]
	bl	queue_work(PLT)
.L1745:
	mov	r0, r7
	mov	r1, r8
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L1755:
	ldr	ip, [r6, #4]
	mov	r2, r4
	ldr	r3, [r4]
	str	r1, [sp, #4]
	ldr	r1, .L1756+4
	ldr	r0, .L1756+8
	str	ip, [sp]
.LPIC316:
	add	r1, pc, r1
	add	r1, r1, #564
.LPIC315:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1746
.L1754:
	ldr	r1, .L1756+12
	ldr	r0, .L1756+16
.LPIC314:
	add	r1, pc, r1
.LPIC313:
	add	r0, pc, r0
	add	r1, r1, #564
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk(PLT)
.L1757:
	.align	2
.L1756:
	.word	.LANCHOR2-(.LPIC317+8)
	.word	.LANCHOR3-(.LPIC316+8)
	.word	.LC87-(.LPIC315+8)
	.word	.LANCHOR3-(.LPIC314+8)
	.word	.LC27-(.LPIC313+8)
	.fnend
	.size	gsdio_write_complete, .-gsdio_write_complete
	.align	2
	.global	gsdio_ctrl_notify_modem
	.type	gsdio_ctrl_notify_modem, %function
gsdio_ctrl_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L1776
.LPIC318:
	add	ip, pc, ip
	ldr	r3, [ip, #92]
	cmp	r1, r3
	bcs	.L1773
	cmp	r0, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	mov	lr, r0
	beq	.L1774
	mov	r4, #108
	tst	r2, #1
	movne	r3, #2
	moveq	r3, #0
	mla	r1, r4, r1, ip
	ldr	r4, [r1, #120]
	ldr	r2, [r4, #176]
	cmp	r3, r2
	beq	.L1758
	ldr	r2, [r4, #108]
	str	r3, [r4, #176]
	cmp	r2, #0
	beq	.L1775
	cmp	r3, #0
	beq	.L1764
	ldr	r3, [r0, #128]
	cmp	r3, #0
	beq	.L1764
	ldr	r1, [r4, #172]
	blx	r3
.L1764:
	ldr	r3, .L1776+4
	add	r1, r4, #80
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
.LPIC326:
	add	r3, pc, r3
	ldr	r0, [r3, #3416]
	b	queue_work(PLT)
.L1758:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1773:
	ldr	r3, .L1776+8
	mov	r2, r1
	ldr	r0, .L1776+12
.LPIC320:
	add	r3, pc, r3
.LPIC319:
	add	r0, pc, r0
	add	r1, r3, #588
	b	printk(PLT)
.L1774:
	ldr	r1, .L1776+16
	ldr	r0, .L1776+20
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC322:
	add	r1, pc, r1
.LPIC321:
	add	r0, pc, r0
	add	r1, r1, #588
	b	printk(PLT)
.L1775:
	ldr	r1, .L1776+24
	mov	r2, r4
	ldr	r0, .L1776+28
	ldr	r3, [r4]
	ldr	lr, [sp, #4]
.LPIC325:
	add	r1, pc, r1
	ldr	r4, [sp]
	add	sp, sp, #8
.LPIC324:
	add	r0, pc, r0
	add	r1, r1, #588
	b	printk(PLT)
.L1777:
	.align	2
.L1776:
	.word	.LANCHOR2-(.LPIC318+8)
	.word	.LANCHOR2-(.LPIC326+8)
	.word	.LANCHOR3-(.LPIC320+8)
	.word	.LC88-(.LPIC319+8)
	.word	.LANCHOR3-(.LPIC322+8)
	.word	.LC89-(.LPIC321+8)
	.word	.LANCHOR3-(.LPIC325+8)
	.word	.LC90-(.LPIC324+8)
	.fnend
	.size	gsdio_ctrl_notify_modem, .-gsdio_ctrl_notify_modem
	.align	2
	.type	ghsuart_ctrl_probe, %function
ghsuart_ctrl_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L1784
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #84
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0, #4]
	mov	r0, #1
.LPIC327:
	add	r3, pc, r3
	mla	r3, r1, r2, r3
	ldr	r4, [r3, #1880]
	add	r1, r4, #88
	add	r5, r4, #8
	bl	_set_bit(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L1779
	ldr	r0, [r4, #32]
	add	r1, r4, #36
	bl	queue_work(PLT)
.L1779:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1785:
	.align	2
.L1784:
	.word	.LANCHOR2-(.LPIC327+8)
	.fnend
	.size	ghsuart_ctrl_probe, .-ghsuart_ctrl_probe
	.align	2
	.type	ghsuart_data_probe, %function
ghsuart_data_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L1794
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r0, #4]
.LPIC328:
	add	r3, pc, r3
	ldr	r1, [r3, #2048]
	cmp	r2, r1
	bcs	.L1793
	mov	r1, #84
	mov	r0, #1
	mla	r2, r1, r2, r3
	ldr	r4, [r2, #2052]
	add	r1, r4, #188
	bl	_set_bit(PLT)
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L1788
	ldr	r0, [r4, #108]
	add	r1, r4, #112
	bl	queue_work(PLT)
	mov	r0, #0
.L1788:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1793:
	ldr	r1, .L1794+4
	ldr	r0, .L1794+8
.LPIC330:
	add	r1, pc, r1
.LPIC329:
	add	r0, pc, r0
	add	r1, r1, #612
	bl	printk(PLT)
	mvn	r0, #21
	b	.L1788
.L1795:
	.align	2
.L1794:
	.word	.LANCHOR2-(.LPIC328+8)
	.word	.LANCHOR3-(.LPIC330+8)
	.word	.LC91-(.LPIC329+8)
	.fnend
	.size	ghsuart_data_probe, .-ghsuart_data_probe
	.align	2
	.type	rmnet_smd_debug_read_stats, %function
rmnet_smd_debug_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 184
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L1804
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #260
	sub	sp, sp, #260
	str	r1, [sp, #84]
	strd	r2, [sp, #88]
	add	r7, r4, #252
	ldrd	r2, [r4, #252]
	add	r6, r4, #316
	ldrd	r0, [r7, #8]
	ldrd	r8, [r7, #16]
	ldrd	r10, [r7, #24]
	strd	r2, [sp, #128]
	ldrd	r2, [r7, #32]
	strd	r0, [sp, #136]
	ldrd	r0, [r7, #40]
	strd	r8, [sp, #144]
	ldrd	r8, [r7, #48]
	strd	r10, [sp, #152]
	ldrd	r10, [r7, #56]
	strd	r2, [sp, #160]
	ldrd	r2, [r6]
	strd	r0, [sp, #168]
	ldrd	r0, [r6, #8]
	strd	r8, [sp, #176]
	ldrd	r8, [r6, #16]
	strd	r10, [sp, #184]
	ldrd	r10, [r6, #24]
	strd	r2, [sp, #192]
	ldrd	r2, [r6, #32]
	strd	r0, [sp, #200]
	ldrd	r0, [r6, #40]
	strd	r8, [sp, #208]
	ldrd	r8, [r6, #48]
.LPIC334:
	ldr	r5, [pc, r5]		@ tls_load_dot_plus_eight
	strd	r10, [sp, #216]
	ldrd	r6, [r6, #56]
	strd	r2, [sp, #224]
	strd	r0, [sp, #232]
	strd	r8, [sp, #240]
	ldr	r0, [r5, #36]
	strd	r6, [sp, #248]
	cmp	r0, #0
	beq	.L1799
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r5, r0, #0
	beq	.L1803
.L1797:
	add	r10, r4, #156
	mov	r0, r10
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	fp, [r4, #420]
	str	r0, [sp, #96]
	ldr	r9, [r4, #416]
	ldr	r3, [r4, #432]
	ldr	ip, [r4, #444]
	ldr	r1, [r4, #160]
	rsb	r2, r9, fp
	ldr	lr, [sp, #236]
	str	r3, [sp, #72]
	ldr	r3, [sp, #172]
	str	r2, [sp, #108]
	ldr	r2, [r4, #440]
	ldr	r0, [r4, #252]
	str	ip, [sp, #80]
	ldr	r6, [r4, #436]
	str	lr, [sp, #100]
	str	r3, [sp, #124]
	ldr	r7, [r4, #428]
	str	r2, [sp, #76]
	ldr	r8, [r4, #424]
	str	r1, [sp, #104]
	bl	smd_read_avail(PLT)
	str	r0, [sp, #120]
	ldr	r0, [r4, #252]
	bl	smd_write_avail(PLT)
	str	r0, [sp, #112]
	ldr	r0, [r4, #316]
	bl	smd_read_avail(PLT)
	str	r0, [sp, #116]
	ldr	r0, [r4, #316]
	rsb	r4, r7, r8
	bl	smd_write_avail(PLT)
	ldr	r3, [sp, #72]
	str	r6, [sp, #32]
	mov	r1, #512
	ldr	r2, [sp, #120]
	str	r7, [sp, #24]
	ldr	ip, [sp, #80]
	str	r0, [sp, #68]
	mov	r0, r5
	ldr	r7, [sp, #112]
	str	r4, [sp, #28]
	rsb	lr, r3, r6
	ldr	r6, [sp, #72]
	str	r9, [sp, #12]
	str	r2, [sp, #56]
	ldr	r2, [sp, #76]
	str	lr, [sp, #40]
	ldr	lr, [sp, #100]
	str	r7, [sp, #60]
	ldr	r7, [sp, #116]
	str	r6, [sp, #36]
	ldr	r6, [sp, #76]
	rsb	ip, ip, r2
	ldr	r2, .L1804+4
	str	r8, [sp, #20]
	ldr	r3, [sp, #124]
	str	lr, [sp]
	str	ip, [sp, #52]
	ldr	ip, [sp, #104]
	str	r6, [sp, #44]
	ldr	r6, [sp, #80]
.LPIC333:
	add	r2, pc, r2
	str	r7, [sp, #64]
	str	fp, [sp, #8]
	str	ip, [sp, #4]
	str	r6, [sp, #48]
	ldr	r6, [sp, #108]
	str	r6, [sp, #16]
	bl	scnprintf(PLT)
	mov	r4, r0
	ldr	r1, [sp, #96]
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	str	r4, [sp]
	ldrd	r0, [sp, #84]
	mov	r3, r5
	ldr	r2, [sp, #92]
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r4
.L1798:
	add	sp, sp, #260
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1799:
	mov	r5, #16
	b	.L1797
.L1803:
	mvn	r0, #11
	b	.L1798
.L1805:
	.align	2
.L1804:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC334+8))
	.word	.LC92-(.LPIC333+8)
	.fnend
	.size	rmnet_smd_debug_read_stats, .-rmnet_smd_debug_read_stats
	.align	2
	.type	rmnet_sdio_read_stats, %function
rmnet_sdio_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L1814
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r8, [sp, #16]
	mov	r9, r1
	mov	r8, r2
	strd	r6, [sp, #8]
	mov	r7, r3
	str	r10, [sp, #24]
.LPIC337:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	str	lr, [sp, #28]
	.pad #64
	sub	sp, sp, #64
	ldr	r4, [r0, #124]
	ldr	r0, [ip, #40]
	cmp	r0, #0
	beq	.L1809
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r5, r0, #0
	beq	.L1813
.L1807:
	add	r6, r4, #180
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r4, #132]
	mov	r10, r0
	mov	r1, #4096
	ldr	lr, [r4, #188]
	mov	r0, r5
	ldr	r3, [r4, #344]
	ldr	r2, .L1814+4
	str	ip, [sp]
	ldr	ip, [r4, #144]
.LPIC336:
	add	r2, pc, r2
	str	ip, [sp, #4]
	ldr	ip, [r4, #352]
	str	ip, [sp, #8]
	ldr	ip, [r4, #348]
	str	ip, [sp, #12]
	ldr	ip, [r4, #160]
	str	ip, [sp, #16]
	ldr	ip, [r4, #172]
	str	ip, [sp, #20]
	ldr	ip, [r4, #316]
	str	ip, [sp, #24]
	ldr	ip, [r4, #360]
	str	ip, [sp, #28]
	ldr	ip, [r4, #108]
	str	ip, [sp, #32]
	ldr	ip, [r4, #320]
	str	ip, [sp, #36]
	ldr	ip, [r4, #356]
	str	ip, [sp, #40]
	ldr	ip, [r4, #120]
	str	lr, [sp, #48]
	str	ip, [sp, #44]
	ldr	ip, [r4, #308]
	str	ip, [sp, #52]
	ldr	ip, [r4, #312]
	str	ip, [sp, #56]
	bl	scnprintf(PLT)
	mov	r4, r0
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	str	r4, [sp]
	mov	r1, r8
	mov	r2, r7
	mov	r3, r5
	mov	r0, r9
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r4
.L1808:
	add	sp, sp, #64
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1809:
	mov	r5, #16
	b	.L1807
.L1813:
	mvn	r0, #11
	b	.L1808
.L1815:
	.align	2
.L1814:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC337+8))
	.word	.LC93-(.LPIC336+8)
	.fnend
	.size	rmnet_sdio_read_stats, .-rmnet_sdio_read_stats
	.align	2
	.type	debug_read_status, %function
debug_read_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L1834
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	mov	r9, r2
	mov	r8, r3
	strd	r10, [sp, #24]
	mov	r10, r1
	strd	r6, [sp, #8]
.LPIC347:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r4, [r0, #124]
	ldr	r0, [ip, #36]
	ldrd	r6, [r4, #4]
	cmp	r0, #0
	beq	.L1822
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r5, r0, #0
	beq	.L1833
.L1817:
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, .L1834+4
	str	r0, [sp, #12]
	mov	r1, #512
	ldr	r3, [r4, #128]
	mov	r0, r5
.LPIC339:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	ldr	r2, .L1834+8
	mov	fp, r0
	add	r0, r5, r0
	rsb	r1, fp, #512
	ldr	r3, [r4, #132]
.LPIC340:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	ldr	lr, [r4, #128]
	add	fp, fp, r0
	ldr	r3, [r4, #132]
	rsb	r1, fp, #512
	add	r0, r5, fp
	ldr	r2, .L1834+12
	rsb	r3, r3, lr
.LPIC341:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	ldr	r2, .L1834+16
	add	fp, r0, fp
	rsb	r1, fp, #512
	add	r0, r5, fp
	ldr	r3, [r4, #136]
.LPIC342:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	ldr	r2, .L1834+20
	add	fp, r0, fp
	rsb	r1, fp, #512
	add	r0, r5, fp
	ldr	r3, [r4, #140]
.LPIC343:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	ldr	lr, [r4, #136]
	add	fp, r0, fp
	ldr	r3, [r4, #140]
	add	r0, r5, fp
	rsb	r1, fp, #512
	ldr	r2, .L1834+24
	rsb	r3, r3, lr
.LPIC344:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	cmp	r7, #0
	add	fp, r0, fp
	beq	.L1819
	ldr	r2, .L1834+28
	add	r0, r5, fp
	rsb	r1, fp, #512
	ldr	r3, [r7, #164]
.LPIC345:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	add	fp, fp, r0
.L1819:
	ldr	r3, [r6, #100]
	cmp	r3, #0
	beq	.L1820
	mov	r0, r6
	blx	r3
	ldr	r2, .L1834+32
	cmp	r0, #0
	rsb	r1, fp, #512
	add	r0, r5, fp
	movne	r3, #2
	moveq	r3, #0
.LPIC346:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	add	fp, fp, r0
.L1820:
	mov	r0, r4
	ldr	r1, [sp, #12]
	bl	_raw_spin_unlock_irqrestore(PLT)
	str	fp, [sp]
	mov	r1, r9
	mov	r2, r8
	mov	r3, r5
	mov	r0, r10
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r4
.L1818:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1822:
	mov	r5, #16
	b	.L1817
.L1833:
	mvn	r0, #11
	b	.L1818
.L1835:
	.align	2
.L1834:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC347+8))
	.word	.LC94-(.LPIC339+8)
	.word	.LC95-(.LPIC340+8)
	.word	.LC96-(.LPIC341+8)
	.word	.LC97-(.LPIC342+8)
	.word	.LC98-(.LPIC343+8)
	.word	.LC99-(.LPIC344+8)
	.word	.LC100-(.LPIC345+8)
	.word	.LC101-(.LPIC346+8)
	.fnend
	.size	debug_read_status, .-debug_read_status
	.align	2
	.type	debug_sdio_read_stats, %function
debug_sdio_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1850
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC353:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #76
	sub	sp, sp, #76
	str	r1, [sp, #60]
	strd	r2, [sp, #64]
	ldr	r0, [r0, #40]
	cmp	r0, #0
	beq	.L1841
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r10, r0, #0
	beq	.L1849
.L1837:
	ldr	r9, .L1850+4
.LPIC349:
	add	r9, pc, r9
	ldr	r5, [r9, #92]
	cmp	r5, #0
	beq	.L1839
	ldr	r3, .L1850+8
	mov	r7, #0
	mov	r5, r7
	mov	r6, r7
.LPIC351:
	add	r3, pc, r3
	str	r3, [sp, #56]
	add	r3, r9, #96
	str	r3, [sp, #52]
.L1840:
	ldr	r3, [sp, #52]
	add	r3, r3, r7
	add	r7, r7, #108
	ldr	r4, [r3, #24]
	add	r8, r4, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	str	r4, [sp]
	ldr	lr, [r4, #180]
	mov	r3, r6
	rsb	r1, r5, #4096
	mov	fp, r0
	ldr	r2, [sp, #56]
	add	r0, r10, r5
	add	r6, r6, #1
	str	lr, [sp, #4]
	ldr	lr, [r4, #184]
	str	lr, [sp, #8]
	ldr	lr, [r4, #176]
	str	lr, [sp, #12]
	ldr	lr, [r4, #172]
	str	lr, [sp, #16]
	ldr	lr, [r4, #44]
	str	lr, [sp, #20]
	ldr	lr, [r4, #48]
	str	lr, [sp, #24]
	ldr	lr, [r4, #76]
	str	lr, [sp, #28]
	ldr	lr, [r4, #8]
	str	lr, [sp, #32]
	ldr	lr, [r4, #108]
	str	lr, [sp, #36]
	ldr	lr, [r4, #112]
	str	lr, [sp, #40]
	bl	scnprintf(PLT)
	add	r5, r5, r0
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r9, #92]
	cmp	r6, r3
	bcc	.L1840
.L1839:
	ldrd	r0, [sp, #60]
	mov	r3, r10
	str	r5, [sp]
	ldr	r2, [sp, #68]
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r10
	bl	kfree(PLT)
	mov	r0, r4
.L1838:
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1841:
	mov	r10, #16
	b	.L1837
.L1849:
	mvn	r0, #11
	b	.L1838
.L1851:
	.align	2
.L1850:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC353+8))
	.word	.LANCHOR2-(.LPIC349+8)
	.word	.LC102-(.LPIC351+8)
	.fnend
	.size	debug_sdio_read_stats, .-debug_sdio_read_stats
	.align	2
	.type	debug_smd_read_stats, %function
debug_smd_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1869
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC359:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #100
	sub	sp, sp, #100
	str	r1, [sp, #84]
	strd	r2, [sp, #88]
	ldr	r0, [r0, #36]
	cmp	r0, #0
	beq	.L1858
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r7, r0, #0
	beq	.L1868
.L1853:
	ldr	r3, .L1869+4
.LPIC355:
	add	r3, pc, r3
	ldr	lr, [r3, #312]
	cmp	lr, #0
	beq	.L1855
	ldr	r2, .L1869+8
	mov	r10, #0
	str	r7, [sp, #72]
	mov	fp, r10
	mov	r8, r10
	mov	r9, r3
	mov	r7, r10
.LPIC357:
	add	r2, pc, r2
	str	r2, [sp, #76]
	add	r2, r3, #316
	str	r2, [sp, #80]
.L1857:
	ldr	r3, [sp, #80]
	ldr	r2, [sp, #72]
	add	r3, r3, r7
	ldr	r4, [r3, #24]
	rsb	r3, r8, #512
	add	r10, r2, r8
	str	r3, [sp, #48]
	add	r6, r4, #4
	ldr	r5, [r4, #72]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #168]
	str	r0, [sp, #44]
	ldr	r3, [r5]
	str	r2, [sp, #52]
	ldr	r2, [r4, #164]
	subs	r0, r3, #0
	str	r2, [sp, #56]
	ldr	r2, [r4, #156]
	str	r2, [sp, #60]
	ldr	r2, [r4, #160]
	str	r2, [sp, #64]
	ldr	r2, [r4, #8]
	str	r2, [sp, #68]
	beq	.L1860
	bl	smd_read_avail(PLT)
	ldr	ip, [r5]
	mov	r4, r0
	cmp	ip, #0
	mov	r0, ip
	beq	.L1856
	bl	smd_write_avail(PLT)
	mov	ip, r0
.L1856:
	mov	r0, r10
	ldr	r10, [sp, #60]
	add	r7, r7, #108
	ldr	lr, [r5, #8]
	ldr	r3, [sp, #52]
	ldr	r5, [r5, #8]
	str	ip, [sp, #24]
	str	r10, [sp, #8]
	ldr	r10, [sp, #64]
	and	lr, lr, #1
	ldr	r1, [sp, #48]
	str	r4, [sp, #20]
	str	r3, [sp]
	ldr	r3, [sp, #56]
	ubfx	r5, r5, #1, #1
	ldr	r2, [sp, #76]
	str	lr, [sp, #28]
	str	r10, [sp, #12]
	ldr	r10, [sp, #68]
	str	r5, [sp, #32]
	str	r3, [sp, #4]
	mov	r3, fp
	add	fp, fp, #1
	str	r10, [sp, #16]
	bl	scnprintf(PLT)
	add	r8, r8, r0
	ldr	r1, [sp, #44]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r9, #312]
	cmp	fp, r3
	bcc	.L1857
	ldr	r7, [sp, #72]
	mov	lr, r8
.L1855:
	str	lr, [sp]
	ldrd	r0, [sp, #84]
	mov	r3, r7
	ldr	r2, [sp, #92]
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r7
	bl	kfree(PLT)
	mov	r0, r4
.L1854:
	add	sp, sp, #100
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1860:
	mov	r4, r3
	mov	ip, r3
	b	.L1856
.L1858:
	mov	r7, #16
	b	.L1853
.L1868:
	mvn	r0, #11
	b	.L1854
.L1870:
	.align	2
.L1869:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC359+8))
	.word	.LANCHOR2-(.LPIC355+8)
	.word	.LC103-(.LPIC357+8)
	.fnend
	.size	debug_smd_read_stats, .-debug_smd_read_stats
	.align	2
	.type	gbam_read_stats, %function
gbam_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1883
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	mov	r9, r2
	mov	r8, r3
	strd	r10, [sp, #24]
	mov	r10, r1
	strd	r6, [sp, #8]
.LPIC364:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #76
	sub	sp, sp, #76
	ldr	r0, [r0, #40]
	cmp	r0, #0
	beq	.L1876
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r5, r0, #0
	beq	.L1882
.L1872:
	ldr	r3, .L1883+4
.LPIC361:
	add	r3, pc, r3
	ldr	r2, [r3, #2224]
	cmp	r2, #0
	movle	r4, #0
	ble	.L1874
	ldr	r4, [r3, #2228]
	cmp	r4, #0
	beq	.L1874
	add	r6, r4, #4
	add	r7, r4, #8
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	ldr	lr, [r4, #20]
	add	r3, r4, #20
	mov	r1, #1024
	ldr	ip, [r4, #20]
	str	r4, [sp]
	mov	r0, r5
	str	r3, [sp, #4]
	ldr	r2, [r4, #264]
	mov	r3, #0
	ubfx	lr, lr, #1, #1
	ubfx	ip, ip, #2, #1
	str	r2, [sp, #8]
	ldr	r2, .L1883+8
	str	ip, [sp, #68]
	ldr	ip, [r4, #260]
.LPIC363:
	add	r2, pc, r2
	str	ip, [sp, #12]
	ldr	ip, [r4, #240]
	str	ip, [sp, #16]
	ldr	ip, [r4, #244]
	str	ip, [sp, #20]
	ldr	ip, [r4, #248]
	str	ip, [sp, #24]
	ldr	ip, [r4, #268]
	str	ip, [sp, #28]
	ldr	ip, [r4, #272]
	str	ip, [sp, #32]
	ldr	ip, [r4, #276]
	str	ip, [sp, #36]
	ldr	ip, [r4, #280]
	str	ip, [sp, #40]
	ldr	ip, [r4, #44]
	str	ip, [sp, #44]
	ldr	ip, [sp, #68]
	ldr	r4, [r4, #68]
	str	lr, [sp, #52]
	str	ip, [sp, #56]
	str	r4, [sp, #48]
	bl	scnprintf(PLT)
	mov	r4, r0
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	mov	r0, r6
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
.L1874:
	str	r4, [sp]
	mov	r1, r9
	mov	r2, r8
	mov	r3, r5
	mov	r0, r10
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r4
.L1873:
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1876:
	mov	r5, #16
	b	.L1872
.L1882:
	mvn	r0, #11
	b	.L1873
.L1884:
	.align	2
.L1883:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC364+8))
	.word	.LANCHOR2-(.LPIC361+8)
	.word	.LC104-(.LPIC363+8)
	.fnend
	.size	gbam_read_stats, .-gbam_read_stats
	.align	2
	.type	gsmd_ctrl_read_stats, %function
gsmd_ctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1904
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC370:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #100
	sub	sp, sp, #100
	str	r1, [sp, #84]
	strd	r2, [sp, #88]
	ldr	r0, [r0, #40]
	cmp	r0, #0
	beq	.L1892
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r3, r0, #0
	str	r3, [sp, #60]
	beq	.L1903
.L1886:
	ldr	r3, .L1904+4
	mov	fp, #0
	mov	r9, fp
	mov	r10, fp
.LPIC368:
	add	r3, pc, r3
	str	r3, [sp, #64]
	ldr	r3, .L1904+8
.LPIC369:
	add	r3, pc, r3
	str	r3, [sp, #72]
	ldr	r3, .L1904+12
.LPIC365:
	add	r3, pc, r3
	str	r3, [sp, #76]
	ldr	r3, .L1904+16
.LPIC366:
	add	r3, pc, r3
	str	r3, [sp, #80]
.L1891:
	ldr	r3, [sp, #64]
	ldr	r2, [sp, #60]
	add	r3, r3, #532
	ldr	r8, [fp, r3]
	rsb	r3, r9, #1024
	add	r7, r2, r9
	str	r3, [sp, #40]
	cmp	r8, #0
	add	r6, r8, #108
	mov	r0, r6
	beq	.L1888
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r8, #88]
	str	r0, [sp, #48]
	ldr	r3, [r8, #96]
	ldr	ip, [r8]
	ldr	r5, [r8, #8]
	cmp	r2, #0
	ldr	r2, [sp, #80]
	str	r3, [sp, #52]
	ldr	r3, [sp, #76]
	ldr	r4, [r8, #8]
	mov	r0, ip
	and	r5, r5, #1
	moveq	r3, r2
	cmp	ip, #0
	moveq	lr, ip
	str	r3, [sp, #44]
	ldr	r3, [r8, #92]
	ubfx	r4, r4, #1, #1
	str	r3, [sp, #56]
	beq	.L1890
	bl	smd_read_avail(PLT)
	ldr	r2, [r8]
	mov	ip, r0
	cmp	r2, #0
	mov	r0, r2
	moveq	lr, r2
	beq	.L1890
	str	ip, [sp, #68]
	bl	smd_write_avail(PLT)
	ldr	ip, [sp, #68]
	mov	lr, r0
.L1890:
	mov	r0, r7
	ldr	r7, [sp, #52]
	str	r8, [sp]
	ldr	r1, [sp, #40]
	str	r8, [sp, #4]
	mov	r3, r10
	ldr	r2, [sp, #72]
	str	r5, [sp, #20]
	str	r4, [sp, #24]
	str	r7, [sp, #8]
	ldr	r7, [sp, #56]
	str	ip, [sp, #28]
	str	lr, [sp, #32]
	str	r7, [sp, #12]
	ldr	r7, [sp, #44]
	str	r7, [sp, #16]
	bl	scnprintf(PLT)
	add	r9, r9, r0
	ldr	r1, [sp, #48]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
.L1888:
	add	fp, fp, #84
	add	r10, r10, #1
	cmp	fp, #504
	bne	.L1891
	ldr	r5, [sp, #60]
	str	r9, [sp]
	ldrd	r0, [sp, #84]
	ldr	r2, [sp, #92]
	mov	r3, r5
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r4
.L1887:
	add	sp, sp, #100
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1892:
	mov	r3, #16
	str	r3, [sp, #60]
	b	.L1886
.L1903:
	mvn	r0, #11
	b	.L1887
.L1905:
	.align	2
.L1904:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC370+8))
	.word	.LANCHOR2-(.LPIC368+8)
	.word	.LC107-(.LPIC369+8)
	.word	.LC105-(.LPIC365+8)
	.word	.LC106-(.LPIC366+8)
	.fnend
	.size	gsmd_ctrl_read_stats, .-gsmd_ctrl_read_stats
	.align	2
	.type	gctrl_read_stats, %function
gctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1926
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC378:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #68
	sub	sp, sp, #68
	str	r1, [sp, #52]
	strd	r2, [sp, #56]
	ldr	r0, [r0, #40]
	cmp	r0, #0
	beq	.L1913
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r9, r0, #0
	beq	.L1925
.L1907:
	ldr	r5, .L1926+4
.LPIC374:
	add	r5, pc, r5
	ldr	r3, [r5, #1036]
	cmp	r3, #0
	beq	.L1909
	ldr	r2, .L1926+8
	mov	r7, #0
	add	r5, r5, #1040
	ldr	fp, .L1926+12
	mov	r6, r7
.LPIC377:
	add	r2, pc, r2
.LPIC376:
	add	fp, pc, fp
	str	r2, [sp, #36]
	ldr	r2, .L1926+16
	str	fp, [sp, #48]
.LPIC371:
	add	r2, pc, r2
	str	r2, [sp, #40]
	ldr	r2, .L1926+20
.LPIC372:
	add	r2, pc, r2
	str	r2, [sp, #44]
.L1912:
	ldr	r4, [r5]
	cmp	r4, #0
	add	r8, r4, #4
	mov	r0, r8
	beq	.L1910
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	lr, [r4, #88]
	mov	r10, r0
	add	r0, r9, r7
	ldr	ip, [r4, #84]
	ldr	fp, [r4, #104]
	ldr	r3, [r5, #24]
	ldr	r2, [r4, #84]
	cmp	lr, #0
	ldr	r1, [r4, #100]
	and	ip, ip, #1
	ldr	lr, [r4, #96]
	str	fp, [sp, #16]
	ldr	fp, [sp, #44]
	str	ip, [sp, #24]
	ldr	ip, [sp, #40]
	ubfx	r2, r2, #1, #1
	str	r6, [sp]
	str	r1, [sp, #8]
	rsb	r1, r7, #1024
	str	r2, [sp, #28]
	ldr	r2, [sp, #48]
	moveq	ip, fp
	str	lr, [sp, #12]
	str	r4, [sp, #4]
	str	ip, [sp, #20]
	bl	scnprintf(PLT)
	add	r7, r7, r0
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [sp, #36]
	ldr	r3, [r3, #1036]
.L1910:
	add	r6, r6, #1
	add	r5, r5, #104
	cmp	r6, r3
	bcc	.L1912
	mov	r3, r7
.L1909:
	str	r3, [sp]
	ldrd	r0, [sp, #52]
	mov	r3, r9
	ldr	r2, [sp, #60]
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r9
	bl	kfree(PLT)
	mov	r0, r4
.L1908:
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1913:
	mov	r9, #16
	b	.L1907
.L1925:
	mvn	r0, #11
	b	.L1908
.L1927:
	.align	2
.L1926:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC378+8))
	.word	.LANCHOR2-(.LPIC374+8)
	.word	.LANCHOR2-(.LPIC377+8)
	.word	.LC108-(.LPIC376+8)
	.word	.LC105-(.LPIC371+8)
	.word	.LC106-(.LPIC372+8)
	.fnend
	.size	gctrl_read_stats, .-gctrl_read_stats
	.align	2
	.type	ghsic_data_read_stats, %function
ghsic_data_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1946
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC385:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #68
	sub	sp, sp, #68
	str	r1, [sp, #52]
	strd	r2, [sp, #56]
	ldr	r0, [r0, #48]
	cmp	r0, #0
	beq	.L1934
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r10, r0, #0
	beq	.L1945
.L1929:
	ldr	r6, .L1946+4
.LPIC380:
	add	r6, pc, r6
	ldr	r3, [r6, #1456]
	cmp	r3, #0
	beq	.L1931
	ldr	r2, .L1946+8
	add	r6, r6, #1456
	mov	r5, #0
	add	r6, r6, #4
	mov	r7, r5
.LPIC382:
	add	r2, pc, r2
	str	r2, [sp, #40]
	ldr	r2, .L1946+12
.LPIC383:
	add	r2, pc, r2
	str	r2, [sp, #44]
	ldr	r2, .L1946+16
.LPIC384:
	add	r2, pc, r2
	str	r2, [sp, #48]
.L1933:
	ldr	r4, [r6]
	cmp	r4, #0
	add	r8, r4, #80
	add	r9, r4, #48
	mov	r0, r8
	beq	.L1932
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r1, [r4, #180]
	mov	fp, r0
	add	r0, r10, r5
	ldr	r2, [r4, #180]
	ldr	r3, [r6, #24]
	ldr	lr, [r4, #164]
	str	r7, [sp]
	and	r1, r1, #1
	str	r4, [sp, #4]
	ubfx	r2, r2, #1, #1
	str	r1, [sp, #8]
	rsb	r1, r5, #4096
	str	r2, [sp, #12]
	ldr	ip, [r4, #188]
	ubfx	lr, lr, #1, #1
	ldr	r2, [sp, #40]
	str	ip, [sp, #16]
	ldr	ip, [r4, #212]
	str	ip, [sp, #20]
	ldr	ip, [r4, #72]
	str	ip, [sp, #24]
	ldr	ip, [r4, #204]
	str	ip, [sp, #28]
	ldr	ip, [r4, #208]
	str	lr, [sp, #36]
	str	ip, [sp, #32]
	bl	scnprintf(PLT)
	add	r5, r0, r5
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	lr, [r4, #40]
	rsb	r1, r5, #4096
	mov	r8, r0
	ldr	r3, [r4, #192]
	add	r0, r10, r5
	ldr	ip, [r4, #164]
	ldr	r2, [sp, #44]
	str	lr, [sp]
	ldr	lr, [r4, #196]
	ubfx	ip, ip, #2, #1
	str	lr, [sp, #4]
	ldr	lr, [r4, #200]
	str	lr, [sp, #8]
	ldr	lr, [r4, #216]
	str	ip, [sp, #16]
	str	lr, [sp, #12]
	bl	scnprintf(PLT)
	add	r5, r0, r5
	mov	r1, r8
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [sp, #48]
	ldr	r3, [r3, #1456]
.L1932:
	add	r7, r7, #1
	add	r6, r6, #104
	cmp	r7, r3
	bcc	.L1933
	mov	r3, r5
.L1931:
	str	r3, [sp]
	ldrd	r0, [sp, #52]
	mov	r3, r10
	ldr	r2, [sp, #60]
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r10
	bl	kfree(PLT)
	mov	r0, r4
.L1930:
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1934:
	mov	r10, #16
	b	.L1929
.L1945:
	mvn	r0, #11
	b	.L1930
.L1947:
	.align	2
.L1946:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC385+8))
	.word	.LANCHOR2-(.LPIC380+8)
	.word	.LC109-(.LPIC382+8)
	.word	.LC110-(.LPIC383+8)
	.word	.LANCHOR2-(.LPIC384+8)
	.fnend
	.size	ghsic_data_read_stats, .-ghsic_data_read_stats
	.align	2
	.type	ghsuart_ctrl_read_stats, %function
ghsuart_ctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1968
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC393:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #60
	sub	sp, sp, #60
	str	r1, [sp, #44]
	strd	r2, [sp, #48]
	ldr	r0, [r0, #40]
	cmp	r0, #0
	beq	.L1955
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r9, r0, #0
	beq	.L1967
.L1949:
	ldr	r8, .L1968+4
.LPIC389:
	add	r8, pc, r8
	ldr	r2, [r8, #1876]
	cmp	r2, #0
	beq	.L1951
	ldr	r3, .L1968+8
	mov	r5, #0
	mov	r6, r5
	mov	r4, r5
.LPIC391:
	add	r3, pc, r3
	str	r3, [sp, #28]
	ldr	r3, .L1968+12
.LPIC392:
	add	r3, pc, r3
	str	r3, [sp, #32]
	ldr	r3, .L1968+16
.LPIC386:
	add	r3, pc, r3
	str	r3, [sp, #36]
	ldr	r3, .L1968+20
.LPIC387:
	add	r3, pc, r3
	str	r3, [sp, #40]
.L1954:
	add	r3, r8, #1872
	add	r3, r3, #8
	ldr	fp, [r5, r3]
	add	r5, r5, #84
	cmp	fp, #0
	add	r7, fp, #8
	mov	r0, r7
	beq	.L1952
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [fp, #92]
	rsb	r1, r6, #1024
	mov	r10, r0
	ldr	ip, [sp, #40]
	add	r0, r9, r6
	ldr	lr, [fp, #100]
	ldr	r2, [fp, #96]
	cmp	r3, #0
	ldr	r3, [fp, #104]
	stmia	sp, {fp, lr}
	str	r2, [sp, #8]
	ldr	r2, [sp, #28]
	str	r3, [sp, #12]
	ldr	r3, [sp, #36]
	moveq	r3, ip
	str	r3, [sp, #16]
	mov	r3, r4
	bl	scnprintf(PLT)
	add	r6, r6, r0
	mov	r1, r10
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [sp, #32]
	ldr	r2, [r3, #1876]
.L1952:
	add	r4, r4, #1
	cmp	r4, r2
	bcc	.L1954
	mov	r2, r6
.L1951:
	str	r2, [sp]
	ldrd	r0, [sp, #44]
	mov	r3, r9
	ldr	r2, [sp, #52]
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r9
	bl	kfree(PLT)
	mov	r0, r4
.L1950:
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1955:
	mov	r9, #16
	b	.L1949
.L1967:
	mvn	r0, #11
	b	.L1950
.L1969:
	.align	2
.L1968:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC393+8))
	.word	.LANCHOR2-(.LPIC389+8)
	.word	.LC111-(.LPIC391+8)
	.word	.LANCHOR2-(.LPIC392+8)
	.word	.LC105-(.LPIC386+8)
	.word	.LC106-(.LPIC387+8)
	.fnend
	.size	ghsuart_ctrl_read_stats, .-ghsuart_ctrl_read_stats
	.align	2
	.type	ghsuart_data_read_stats, %function
ghsuart_data_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1988
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC401:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #76
	sub	sp, sp, #76
	str	r1, [sp, #60]
	strd	r2, [sp, #64]
	ldr	r0, [r0, #40]
	cmp	r0, #0
	beq	.L1976
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r8, r0, #0
	beq	.L1987
.L1971:
	ldr	r0, .L1988+4
.LPIC395:
	add	r0, pc, r0
	ldr	r2, [r0, #2048]
	cmp	r2, #0
	beq	.L1973
	ldr	r1, .L1988+8
	mov	r6, #0
	add	fp, r0, #2048
	mov	r5, r6
	add	fp, fp, #4
	str	r0, [sp, #48]
	mov	r7, r6
.LPIC397:
	add	r1, pc, r1
	str	r1, [sp, #52]
	ldr	r1, .L1988+12
.LPIC399:
	add	r1, pc, r1
	str	r1, [sp, #56]
.L1975:
	ldr	r4, [r6, fp]
	cmp	r4, #0
	add	r9, r4, #104
	add	r10, r4, #72
	mov	r0, r9
	beq	.L1974
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r1, [r4, #188]
	add	r3, fp, r6
	str	r0, [sp, #44]
	ldr	r2, [r4, #188]
	add	r0, r8, r5
	ldr	lr, [r4, #188]
	ldr	r3, [r3, #24]
	and	r1, r1, #1
	ldr	ip, [r4, #184]
	str	r7, [sp]
	ubfx	r2, r2, #1, #1
	str	r4, [sp, #4]
	ubfx	lr, lr, #2, #1
	str	r1, [sp, #8]
	rsb	r1, r5, #1024
	str	r2, [sp, #12]
	ldr	r2, [sp, #52]
	str	lr, [sp, #16]
	ldr	lr, [r4, #204]
	ubfx	ip, ip, #1, #1
	str	lr, [sp, #20]
	ldr	lr, [r4, #212]
	str	lr, [sp, #24]
	ldr	lr, [r4, #96]
	str	ip, [sp, #32]
	str	lr, [sp, #28]
	bl	scnprintf(PLT)
	add	r5, r0, r5
	ldr	r1, [sp, #44]
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r10
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r4, #184]
	rsb	r1, r5, #1024
	mov	r9, r0
	ldr	lr, [r4, #64]
	add	r0, r8, r5
	ldr	r3, [r4, #208]
	ldr	r2, [sp, #56]
	ubfx	ip, ip, #2, #1
	str	lr, [sp]
	str	ip, [sp, #4]
	bl	scnprintf(PLT)
	add	r5, r0, r5
	mov	r1, r9
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [sp, #48]
	ldr	r2, [r3, #2048]
.L1974:
	add	r7, r7, #1
	add	r6, r6, #84
	cmp	r7, r2
	bcc	.L1975
	mov	r2, r5
.L1973:
	str	r2, [sp]
	ldrd	r0, [sp, #60]
	mov	r3, r8
	ldr	r2, [sp, #68]
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r8
	bl	kfree(PLT)
	mov	r0, r4
.L1972:
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1976:
	mov	r8, #16
	b	.L1971
.L1987:
	mvn	r0, #11
	b	.L1972
.L1989:
	.align	2
.L1988:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC401+8))
	.word	.LANCHOR2-(.LPIC395+8)
	.word	.LC112-(.LPIC397+8)
	.word	.LC113-(.LPIC399+8)
	.fnend
	.size	ghsuart_data_read_stats, .-ghsuart_data_read_stats
	.align	2
	.type	debug_read_stats, %function
debug_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L2000
	strd	r8, [sp, #16]
	mov	r9, r2
	mov	r8, r3
	strd	r10, [sp, #24]
	mov	r10, r1
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
.LPIC402:
	add	r6, pc, r6
	ldr	r4, [r6]
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L1994
	ldr	r5, .L2000+4
	mov	fp, #0
	ldr	r7, .L2000+8
.LPIC404:
	add	r5, pc, r5
	add	r5, r5, #3408
.LPIC405:
	add	r7, pc, r7
	add	r5, r5, #12
.L1993:
	ldr	ip, [r4, #20]
	add	r0, r5, fp
	rsb	r1, fp, #4096
	mov	r2, r7
	cmp	ip, #0
	beq	.L1992
	ldr	lr, [ip, #80]
	ldr	r3, [r4]
	ldr	lr, [lr, #4]
	str	lr, [sp]
	ldr	lr, [ip, #76]
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	lr, [ip, #120]
	str	lr, [sp, #8]
	ldr	lr, [ip, #124]
	str	lr, [sp, #12]
	ldr	ip, [ip, #128]
	str	ip, [sp, #16]
	bl	scnprintf(PLT)
	add	fp, fp, r0
.L1992:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L1993
.L1991:
	ldr	r3, .L2000+12
	str	fp, [sp]
	mov	r0, r10
	mov	r1, r9
	mov	r2, r8
.LPIC407:
	add	r3, pc, r3
	add	r3, r3, #3408
	add	r3, r3, #12
	bl	simple_read_from_buffer(PLT)
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1994:
	mov	fp, #0
	b	.L1991
.L2001:
	.align	2
.L2000:
	.word	.LANCHOR0-(.LPIC402+8)
	.word	.LANCHOR2-(.LPIC404+8)
	.word	.LC114-(.LPIC405+8)
	.word	.LANCHOR2-(.LPIC407+8)
	.fnend
	.size	debug_read_stats, .-debug_read_stats
	.section	.exit.text,"ax",%progbits
	.align	2
	.type	gether_exit, %function
gether_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L2003
.LPIC408:
	add	r3, pc, r3
	ldr	r0, [r3, #-668]
	b	destroy_workqueue(PLT)
.L2004:
	.align	2
.L2003:
	.word	.LANCHOR4-(.LPIC408+8)
	.fnend
	.size	gether_exit, .-gether_exit
	.text
	.align	2
	.type	qdss_function_cleanup, %function
qdss_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	ldr	r7, .L2013
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
.LPIC409:
	add	r7, pc, r7
	ldr	r5, [r7, #24]!
	cmp	r5, r7
	ldr	r4, [r5]
	beq	.L2005
	ldr	r8, .L2013+4
.LPIC411:
	add	r8, pc, r8
	sub	r8, r8, #664
	mov	r9, r8
	b	.L2008
.L2010:
	mov	r4, r3
.L2008:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	ldr	r0, [r5, #80]
	bl	destroy_workqueue(PLT)
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L2012
.L2007:
	mov	r1, r6
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r4, r7
	ldr	r3, [r4]
	mov	r5, r4
	bne	.L2010
.L2005:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2012:
	ldr	r3, [r5, #4]
	mov	ip, #256
	mov	r1, #512
	ldr	r2, [r5]
	sub	r0, r5, #108
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r5]
	str	r1, [r5, #4]
	bl	kfree(PLT)
	b	.L2007
.L2014:
	.align	2
.L2013:
	.word	.LANCHOR0-(.LPIC409+8)
	.word	.LANCHOR4-(.LPIC411+8)
	.fnend
	.size	qdss_function_cleanup, .-qdss_function_cleanup
	.align	2
	.type	rmnet_smd_command_complete, %function
rmnet_smd_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r1, #32]
	cmp	r2, #0
	ldr	r8, [r4, #76]
	blt	.L2023
	add	r7, r4, #156
	mov	r6, r1
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #440]
	ldr	r2, [r4, #300]
	add	r3, r3, #1
	cmp	r2, #0
	str	r3, [r4, #440]
	beq	.L2024
.L2017:
	mov	r3, r4
	ldr	r5, [r3, #100]!
	cmp	r5, r3
	beq	.L2025
	ldr	r3, [r5, #4]
	mov	ip, #256
	mov	r1, #512
	ldr	r2, [r5]
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r5]
	str	r1, [r5, #4]
	bl	_raw_spin_unlock(PLT)
	ldr	r2, [r6, #48]
	ldr	r1, [r6]
	ldr	r0, [r5, #-8]
	bl	memcpy(PLT)
	ldr	r3, [r6, #48]
	mov	r0, r7
	str	r3, [r5, #-4]
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #120]
	add	r2, r4, #116
	mov	r0, r7
	str	r5, [r4, #120]
	strd	r2, [r5]
	str	r5, [r3]
.L2022:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L2024:
	ldr	r0, [r4, #252]
	bl	smd_write_avail(PLT)
	ldr	r3, [r6, #48]
	cmp	r0, r3
	strcc	r3, [r4, #300]
	bcc	.L2017
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4, #252]
	ldr	r1, [r6]
	ldr	r2, [r6, #48]
	bl	smd_write(PLT)
	ldr	r3, [r6, #48]
	cmp	r0, r3
	beq	.L2019
	ldr	r0, [r8]
	ldr	r1, .L2026
	add	r0, r0, #32
.LPIC415:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L2019:
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #444]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #444]
	b	.L2022
.L2023:
	ldr	r0, [r8]
	ldr	r1, .L2026+4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
.LPIC414:
	add	r1, pc, r1
	add	sp, sp, #24
	b	dev_err(PLT)
.L2025:
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r8]
	ldr	r1, .L2026+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
.LPIC416:
	add	r1, pc, r1
	add	sp, sp, #24
	b	dev_err(PLT)
.L2027:
	.align	2
.L2026:
	.word	.LC116-(.LPIC415+8)
	.word	.LC115-(.LPIC414+8)
	.word	.LC117-(.LPIC416+8)
	.fnend
	.size	rmnet_smd_command_complete, .-rmnet_smd_command_complete
	.align	2
	.type	rmnet_smd_complete_epout, %function
rmnet_smd_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r3, [r1, #44]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r1, #32]
	cmn	r3, #104
	ldr	r6, [r4, #76]
	beq	.L2030
	cmp	r3, #0
	beq	.L2031
	cmn	r3, #108
	beq	.L2030
	ldr	r1, [r6]
	add	r6, r4, #156
	ldr	r2, [r0, #4]
	ldr	lr, [r5, #48]
	ldr	ip, [r5, #4]
	add	r0, r1, #32
	ldr	r1, .L2046
	str	lr, [sp]
	str	ip, [sp, #4]
.LPIC417:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L2044:
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	add	r2, r5, #36
	add	r1, r4, #140
	ldr	r3, [r4, #144]
	mov	r0, r6
	str	r2, [r4, #144]
.L2043:
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock(PLT)
.L2030:
	add	r6, r4, #156
	b	.L2044
.L2031:
	add	r7, r4, #156
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #424]
	ldr	r2, [r4, #364]
	add	r3, r3, #1
	cmp	r2, #0
	str	r3, [r4, #424]
	bne	.L2032
	ldr	r0, [r4, #316]
	bl	smd_write_avail(PLT)
	ldr	r3, [r5, #48]
	cmp	r0, r3
	strcc	r3, [r4, #364]
	bcs	.L2045
.L2032:
	add	r2, r5, #36
	ldr	r3, [r4, #152]
	add	r1, r4, #148
	mov	r0, r7
	str	r2, [r4, #152]
	b	.L2043
.L2045:
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4, #316]
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	smd_write(PLT)
	ldr	r3, [r5, #48]
	cmp	r0, r3
	beq	.L2034
	ldr	r0, [r6]
	ldr	r1, .L2046+4
	add	r0, r0, #32
.LPIC418:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L2034:
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #428]
	add	r1, r5, #36
	add	ip, r4, #140
	ldr	r2, [r4, #144]
	mov	r0, r7
	str	r1, [r4, #144]
	add	r3, r3, #1
	str	r3, [r4, #428]
	str	r2, [r5, #40]
	str	ip, [r5, #36]
	str	r1, [r2]
	bl	_raw_spin_unlock(PLT)
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	rmnet_smd_start_rx(PLT)
.L2047:
	.align	2
.L2046:
	.word	.LC118-(.LPIC417+8)
	.word	.LC119-(.LPIC418+8)
	.fnend
	.size	rmnet_smd_complete_epout, .-rmnet_smd_complete_epout
	.align	2
	.type	rmnet_data_rx_tlet, %function
rmnet_data_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #156
	add	r7, r0, #148
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #76]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r6
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #148]
	mov	fp, r0
	cmp	r7, r4
	addne	r3, r5, #140
	movne	r9, #256
	movne	r8, #512
	strne	r3, [sp]
	bne	.L2054
	b	.L2053
.L2051:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, [r4, #-36]
	ldr	r2, [r4, #12]
	ldr	r0, [r5, #316]
	bl	smd_write(PLT)
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #12]
	mov	fp, r0
	cmp	r10, r3
	bne	.L2056
	ldr	r3, [r5, #428]
	ldr	r1, [r5, #144]
	str	r4, [r5, #144]
	add	r3, r3, #1
	str	r3, [r5, #428]
	ldr	r3, [sp]
	str	r1, [r4, #4]
	str	r3, [r4]
	str	r4, [r1]
	ldr	r4, [r5, #148]
	cmp	r4, r7
	beq	.L2053
.L2054:
	ldr	r0, [r5, #316]
	bl	smd_write_avail(PLT)
	ldr	r3, [r4, #12]
	mov	r1, fp
	cmp	r0, r3
	mov	r0, r6
	bcs	.L2051
	str	r3, [r5, #364]
.L2050:
	mov	r0, r6
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	rmnet_smd_start_rx(PLT)
.L2053:
	mov	r3, #0
	str	r3, [r5, #364]
	b	.L2050
.L2056:
	ldr	r3, [sp, #4]
	ldr	r1, .L2057
	ldr	r0, [r3]
.LPIC419:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L2050
.L2058:
	.align	2
.L2057:
	.word	.LC120-(.LPIC419+8)
	.fnend
	.size	rmnet_data_rx_tlet, .-rmnet_data_rx_tlet
	.align	2
	.type	rmnet_control_rx_tlet, %function
rmnet_control_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #156
	add	r7, r0, #116
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #76]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r6
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #116]
	mov	fp, r0
	cmp	r7, r4
	addne	r3, r5, #100
	movne	r9, #256
	movne	r8, #512
	strne	r3, [sp]
	bne	.L2065
	b	.L2064
.L2062:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	ldr	r3, [r5, #440]
	add	r3, r3, #1
	str	r3, [r5, #440]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldmdb	r4, {r1, r2}
	ldr	r0, [r5, #252]
	bl	smd_write(PLT)
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r1, [r4, #-4]
	mov	fp, r0
	cmp	r1, r10
	bne	.L2067
	ldr	r3, [r5, #444]
	ldr	r1, [r5, #104]
	str	r4, [r5, #104]
	add	r3, r3, #1
	str	r3, [r5, #444]
	ldr	r3, [sp]
	str	r1, [r4, #4]
	str	r3, [r4]
	str	r4, [r1]
	ldr	r4, [r5, #116]
	cmp	r4, r7
	beq	.L2064
.L2065:
	ldr	r0, [r5, #252]
	bl	smd_write_avail(PLT)
	ldr	r3, [r4, #-4]
	mov	r1, fp
	cmp	r0, r3
	mov	r0, r6
	bge	.L2062
	str	r3, [r5, #300]
.L2061:
	mov	r0, r6
	mov	r1, fp
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L2064:
	mov	r3, #0
	str	r3, [r5, #300]
	b	.L2061
.L2067:
	ldr	r3, [sp, #4]
	ldr	r1, .L2068
	ldr	r0, [r3]
.LPIC420:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L2061
.L2069:
	.align	2
.L2068:
	.word	.LC116-(.LPIC420+8)
	.fnend
	.size	rmnet_control_rx_tlet, .-rmnet_control_rx_tlet
	.align	2
	.type	grmnet_ctrl_smd_write_w, %function
grmnet_ctrl_smd_write_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #16]
	.pad #4
	sub	sp, sp, #4
	add	r6, r6, #108
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	ldr	r0, [r5, #-68]
	cmp	r0, #0
	beq	.L2071
	ldr	r4, [r5, #-28]
	sub	r8, r5, #28
	cmp	r8, r4
	movne	r10, #256
	bne	.L2073
	b	.L2071
.L2082:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r3, #512
	str	r10, [r4]
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldmdb	r4, {r1, r2}
	ldr	r0, [r5, #-68]
	bl	smd_write(PLT)
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #-4]
	mov	r7, r0
	cmp	r3, r9
	bne	.L2081
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, fp
	bl	kfree(PLT)
	ldr	r3, [r5, #24]
	ldr	r0, [r5, #-68]
	add	r3, r3, #1
	cmp	r0, #0
	str	r3, [r5, #24]
	beq	.L2071
	ldr	r4, [r5, #-28]
	cmp	r4, r8
	beq	.L2071
.L2073:
	bl	smd_write_avail(PLT)
	ldr	r3, [r4, #-4]
	sub	fp, r4, #8
	mov	r1, r7
	cmp	r0, r3
	mov	r0, r6
	bge	.L2082
.L2071:
	mov	r0, r6
	mov	r1, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L2081:
	ldr	r1, .L2083
	mov	r2, r9
	ldr	r0, .L2083+4
.LPIC422:
	add	r1, pc, r1
	add	r1, r1, #632
.LPIC421:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, fp
	bl	kfree(PLT)
	b	.L2071
.L2084:
	.align	2
.L2083:
	.word	.LANCHOR3-(.LPIC422+8)
	.word	.LC121-(.LPIC421+8)
	.fnend
	.size	grmnet_ctrl_smd_write_w, .-grmnet_ctrl_smd_write_w
	.align	2
	.type	rmnet_mux_smd_data_rx_tlet, %function
rmnet_mux_smd_data_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #356
	strd	r10, [sp, #24]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldr	r3, [r0, #76]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r6
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #360]
	mov	fp, r0
	cmp	r3, #0
	beq	.L2086
	ldr	r4, [r5, #112]
	add	r7, r5, #112
	cmp	r7, r4
	addne	r3, r5, #104
	movne	r9, #256
	movne	r8, #512
	strne	r3, [sp]
	bne	.L2089
	b	.L2087
.L2090:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, [r4, #-36]
	ldr	r2, [r4, #12]
	ldr	r0, [r5, #120]
	bl	smd_write(PLT)
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #12]
	mov	fp, r0
	cmp	r10, r3
	bne	.L2099
	ldr	r3, [r5, #388]
	ldr	r1, [r5, #108]
	str	r4, [r5, #108]
	add	r3, r3, #1
	str	r3, [r5, #388]
	ldr	r3, [sp]
	str	r1, [r4, #4]
	str	r3, [r4]
	str	r4, [r1]
	ldr	r3, [r5, #360]
	cmp	r3, #0
	beq	.L2086
	ldr	r4, [r5, #112]
	cmp	r4, r7
	beq	.L2087
.L2089:
	ldr	r0, [r5, #120]
	bl	smd_write_avail(PLT)
	ldr	r3, [r4, #12]
	mov	r1, fp
	cmp	r0, r3
	mov	r0, r6
	bcs	.L2090
	str	r3, [r5, #168]
.L2086:
	mov	r0, r6
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	rmnet_mux_smd_start_rx(PLT)
.L2087:
	mov	r3, #0
	str	r3, [r5, #168]
	b	.L2086
.L2099:
	ldr	r3, [sp, #4]
	ldr	r1, .L2100
	ldr	r0, [r3]
.LPIC423:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L2086
.L2101:
	.align	2
.L2100:
	.word	.LC122-(.LPIC423+8)
	.fnend
	.size	rmnet_mux_smd_data_rx_tlet, .-rmnet_mux_smd_data_rx_tlet
	.align	2
	.type	rmnet_smd_complete_epin, %function
rmnet_smd_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r1, #32]
	cmn	r2, #104
	ldr	r3, [r4, #76]
	beq	.L2104
	cmp	r2, #0
	beq	.L2105
	cmn	r2, #108
	beq	.L2104
	ldr	r0, [r3]
	ldr	r1, .L2126
	add	r0, r0, #32
.LPIC424:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L2105:
	add	r6, r4, #156
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r2, [r4, #132]
	add	r3, r4, #132
	cmp	r2, r3
	beq	.L2125
	ldr	r2, [r4, #136]
	add	r1, r5, #36
	str	r1, [r4, #136]
	str	r3, [r5, #36]
	str	r2, [r5, #40]
	str	r1, [r2]
	ldr	r3, [r4, #416]
	add	r3, r3, #1
	str	r3, [r4, #416]
.L2109:
	mov	r0, r6
.L2122:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L2104:
	add	r6, r4, #156
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #136]
	add	r2, r5, #36
	add	r1, r4, #132
	mov	r0, r6
	str	r2, [r4, #136]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	b	.L2122
.L2125:
	ldr	r3, [r4, #136]
	add	ip, r5, #36
	mov	r0, #0
	add	r1, r4, #324
	add	r7, r4, #320
	str	ip, [r4, #136]
	strd	r2, [r5, #36]
	str	ip, [r3]
	ldr	r3, [r4, #416]
	add	r3, r3, #1
	str	r3, [r4, #416]
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	bne	.L2109
	mov	r0, r7
	bl	__tasklet_schedule(PLT)
	b	.L2109
.L2127:
	.align	2
.L2126:
	.word	.LC123-(.LPIC424+8)
	.fnend
	.size	rmnet_smd_complete_epin, .-rmnet_smd_complete_epin
	.align	2
	.type	rmnet_smd_setup, %function
rmnet_smd_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #160]
	ldrh	r10, [r1, #4]	@ unaligned
	ldrh	r7, [r1, #2]	@ unaligned
	ldr	r6, [r2, #24]
	cmp	r3, #0
	ldrh	r4, [r1, #6]	@ unaligned
	ldr	r5, [r6, #4]
	beq	.L2141
	mov	r8, r0
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	movw	r2, #8482
	ldrb	r0, [r1]	@ zero_extendqisi2
	orr	r3, r3, r0, asl #8
	cmp	r3, r2
	beq	.L2130
	movw	r2, #41217
	cmp	r3, r2
	beq	.L2131
	cmp	r3, #8448
	beq	.L2152
.L2143:
	mvn	r0, #94
.L2147:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2131:
	cmp	r7, #0
	bne	.L2143
	add	r9, r8, #156
	str	r1, [sp, #20]
	mov	r0, r9
	bl	_raw_spin_lock(PLT)
	mov	r3, r8
	ldr	r1, [sp, #20]
	ldr	fp, [r3, #124]!
	cmp	fp, r3
	beq	.L2153
	ldr	r3, [fp, #4]
	mov	ip, #256
	mov	r1, #512
	ldr	r2, [fp]
	mov	r0, r9
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [fp]
	str	r1, [fp, #4]
	bl	_raw_spin_unlock(PLT)
	ldmdb	fp, {r1, r2}
	ldr	r0, [r5]
	bl	memcpy(PLT)
	mov	r0, r9
	ldr	r4, [fp, #-4]
	bl	_raw_spin_lock(PLT)
	ldr	r2, [r8, #108]
	add	r3, r8, #108
	cmp	r2, r3
	beq	.L2154
	ldr	r2, [r8, #112]
	str	fp, [r8, #112]
	str	r3, [fp]
	str	r2, [fp, #4]
	str	fp, [r2]
.L2140:
	mov	r0, r9
	bl	_raw_spin_unlock(PLT)
	ldr	r3, .L2156
	str	r8, [r5, #32]
.LPIC427:
	add	r3, pc, r3
	str	r3, [r5, #28]
	b	.L2137
.L2152:
	ldr	r3, .L2156+4
	str	r8, [r5, #32]
.LPIC425:
	add	r3, pc, r3
	str	r3, [r5, #28]
.L2133:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r4, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L2155
.L2145:
	mov	r0, r4
	b	.L2147
.L2130:
	ands	r1, r7, #1
	ldr	r0, [r8, #252]
	movne	r1, #2
	movne	r2, #0
	moveq	r2, #2
	bl	smd_tiocmset(PLT)
	mov	r4, r0
.L2137:
	cmp	r4, #0
	bge	.L2133
	b	.L2145
.L2155:
	ldr	r0, [r6]
	mov	r2, r4
	ldr	r1, .L2156+8
	add	r0, r0, #32
.LPIC428:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r4
	b	.L2147
.L2141:
	mvn	r0, #106
	b	.L2147
.L2154:
	ldr	r3, [r8, #112]
	mov	r0, r7
	str	fp, [r8, #112]
	add	r1, r8, #260
	str	r2, [fp]
	add	r7, r8, #256
	str	r3, [fp, #4]
	str	fp, [r3]
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	bne	.L2140
	mov	r0, r7
	bl	__tasklet_schedule(PLT)
	b	.L2140
.L2153:
	ldr	r0, [r6]
	str	r7, [sp]
	ldrb	r2, [r1]	@ zero_extendqisi2
	str	r10, [sp, #4]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	str	r4, [sp, #8]
	ldr	r1, .L2156+12
	add	r0, r0, #32
.LPIC426:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	mov	r0, r9
	bl	_raw_spin_unlock(PLT)
	mvn	r0, #94
	b	.L2147
.L2157:
	.align	2
.L2156:
	.word	rmnet_txcommand_complete-(.LPIC427+8)
	.word	rmnet_smd_command_complete-(.LPIC425+8)
	.word	.LC62-(.LPIC428+8)
	.word	.LC86-(.LPIC426+8)
	.fnend
	.size	rmnet_smd_setup, .-rmnet_smd_setup
	.section	.exit.text
	.align	2
	.type	ghsuart_ctrl_exit, %function
ghsuart_ctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L2159
.LPIC429:
	add	r3, pc, r3
	ldr	r0, [r3, #-660]
	b	debugfs_remove_recursive(PLT)
.L2160:
	.align	2
.L2159:
	.word	.LANCHOR4-(.LPIC429+8)
	.fnend
	.size	ghsuart_ctrl_exit, .-ghsuart_ctrl_exit
	.align	2
	.type	ghsuart_data_exit, %function
ghsuart_data_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L2162
.LPIC430:
	add	r3, pc, r3
	ldr	r0, [r3, #-656]
	b	debugfs_remove_recursive(PLT)
.L2163:
	.align	2
.L2162:
	.word	.LANCHOR4-(.LPIC430+8)
	.fnend
	.size	ghsuart_data_exit, .-ghsuart_data_exit
	.text
	.align	2
	.type	diag_function_cleanup, %function
diag_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L2172
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	ldr	r7, .L2172+4
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
.LPIC437:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
.LPIC432:
	add	r7, pc, r7
	ldr	r0, [r3]
	bl	debugfs_remove_recursive(PLT)
	ldr	r5, [r7]
	cmp	r5, r7
	ldr	r4, [r5]
	beq	.L2164
	ldr	r6, .L2172+8
.LPIC434:
	add	r6, pc, r6
	sub	r6, r6, #652
	mov	r8, r6
	b	.L2167
.L2169:
	mov	r4, r3
.L2167:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #12]
	mov	r1, r0
	cmp	r3, #0
	beq	.L2171
.L2166:
	mov	r0, r8
	mov	r5, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r4, r7
	ldr	r3, [r4]
	bne	.L2169
.L2164:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2171:
	ldr	r3, [r5, #4]
	mov	lr, #256
	mov	ip, #512
	ldr	r2, [r5]
	str	r0, [sp, #4]
	sub	r0, r5, #4
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r5]
	str	ip, [r5, #4]
	bl	kfree(PLT)
	ldr	r1, [sp, #4]
	b	.L2166
.L2173:
	.align	2
.L2172:
	.word	dent_diag(GOT_PREL)+(.-(.LPIC437+8))
	.word	.LANCHOR0-(.LPIC432+8)
	.word	.LANCHOR4-(.LPIC434+8)
	.fnend
	.size	diag_function_cleanup, .-diag_function_cleanup
	.align	2
	.type	rmnet_data_tx_tlet, %function
rmnet_data_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #156
	add	r7, r0, #132
	strd	r8, [sp, #16]
	mov	r8, #256
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r9, [r0, #76]
	b	.L2178
.L2185:
	ldr	r0, [r5, #316]
	bl	smd_read_avail(PLT)
	cmp	r10, r0
	mov	r0, r6
	bgt	.L2174
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #132]
	mov	r3, r0
	mov	ip, #512
	mov	r0, r6
	mov	r1, r3
	cmp	r7, r4
	beq	.L2183
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	stmia	r4, {r8, ip}
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r2, r10
	ldr	r1, [r4, #-36]
	ldr	r0, [r5, #316]
	bl	smd_read(PLT)
	str	r0, [r4, #-32]
	ldr	r0, [r5, #84]
	mov	r2, #32
	sub	r1, r4, #36
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	mov	r0, r6
	bne	.L2184
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #420]
	mov	r1, r0
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r5, #420]
	bl	_raw_spin_unlock_irqrestore(PLT)
.L2178:
	ldr	r0, [r5, #316]
	bl	smd_cur_packet_size(PLT)
	subs	r10, r0, #0
	bne	.L2185
.L2174:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2184:
	ldr	r0, [r9]
	ldr	r1, .L2186
	add	r0, r0, #32
.LPIC438:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #136]
	mov	r1, r0
	mov	r0, r6
	str	r4, [r5, #136]
	str	r7, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
.L2183:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L2187:
	.align	2
.L2186:
	.word	.LC124-(.LPIC438+8)
	.fnend
	.size	rmnet_data_tx_tlet, .-rmnet_data_tx_tlet
	.align	2
	.type	rmnet_control_tx_tlet, %function
rmnet_control_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r10, [sp, #24]
	ldr	r10, .L2201
	strd	r6, [sp, #8]
	add	r6, r0, #156
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldr	r3, [r0, #76]
	.pad #12
	sub	sp, sp, #12
.LPIC440:
	add	r10, pc, r10
	str	r3, [sp]
.L2193:
	add	r9, r4, #108
.L2192:
	mov	r8, #256
.L2191:
	ldr	r0, [r4, #252]
	add	r5, r4, #164
	bl	smd_cur_packet_size(PLT)
	subs	r7, r0, #0
	beq	.L2188
	ldr	r0, [r4, #252]
	bl	smd_read_avail(PLT)
	cmp	r7, r0
	mov	r0, r6
	bgt	.L2188
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	fp, [r4, #108]
	mov	r2, r0
	mov	lr, #512
	mov	r0, r6
	mov	r1, r2
	cmp	fp, r9
	beq	.L2200
	ldr	ip, [fp]
	ldr	r2, [fp, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	stmia	fp, {r8, lr}
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r2, r7
	ldr	r1, [fp, #-8]
	ldr	r0, [r4, #252]
	bl	smd_read(PLT)
	str	r0, [fp, #-4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r4, #436]
	add	r2, r4, #124
	mov	r1, r0
	ldr	lr, [r4, #128]
	mov	r0, r6
	str	fp, [r4, #128]
	add	ip, ip, #1
	str	ip, [r4, #436]
	stmia	fp, {r2, lr}
	str	fp, [lr]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #92]
	ldr	r7, [r4, #76]
	ldr	r3, [r3]
#APP
@ 61 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r5]
	add	r2, r2, #1
	strex	r1, r2, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #1
	bne	.L2191
	mov	r1, #0
	mvn	r0, #94
	strb	r2, [r3, #1]
	mov	r2, #32
	strb	r0, [r3]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	r0, [r4, #96]	@ zero_extendqisi2
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	strh	r0, [r3, #4]	@ unaligned
	ldrd	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L2192
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r1, r3, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r0, [r7]
	mov	r1, r10
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L2193
.L2188:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2200:
	ldr	r3, [sp]
	str	r2, [sp, #4]
	ldr	r1, .L2201+4
	ldr	r0, [r3]
.LPIC439:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r2, [sp, #4]
	mov	r0, r6
	mov	r1, r2
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L2202:
	.align	2
.L2201:
	.word	.LC12-(.LPIC440+8)
	.word	.LC125-(.LPIC439+8)
	.fnend
	.size	rmnet_control_tx_tlet, .-rmnet_control_tx_tlet
	.align	2
	.type	rmnet_mux_smd_data_tx_tlet, %function
rmnet_mux_smd_data_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #360]
	ldr	r9, [r0, #76]
	cmp	r3, #0
	beq	.L2203
	mov	r5, r0
	add	r6, r0, #356
	add	r7, r0, #96
	mov	r8, #256
	b	.L2215
.L2219:
	ldr	r0, [r5, #120]
	bl	smd_read_avail(PLT)
	cmp	r10, r0
	mov	r0, r6
	bgt	.L2203
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #96]
	mov	r3, r0
	mov	ip, #512
	mov	r0, r6
	mov	r1, r3
	cmp	r7, r4
	beq	.L2217
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	stmia	r4, {r8, ip}
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r2, r10
	ldr	r1, [r4, #-36]
	ldr	r0, [r5, #120]
	bl	smd_read(PLT)
	str	r0, [r4, #-32]
	ldr	r0, [r5, #84]
	sub	r1, r4, #36
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L2218
	ldr	r3, [r5, #396]
	ldr	r2, [r5, #360]
	add	r3, r3, #1
	cmp	r2, #0
	str	r3, [r5, #396]
	beq	.L2203
.L2215:
	ldr	r0, [r5, #120]
	bl	smd_cur_packet_size(PLT)
	subs	r10, r0, #0
	bne	.L2219
.L2203:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2218:
	ldr	r3, [r9]
	mov	r2, r0
	ldr	r1, .L2220
	add	r0, r3, #32
.LPIC441:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #100]
	mov	r1, r0
	mov	r0, r6
	str	r4, [r5, #100]
	str	r7, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
.L2217:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L2221:
	.align	2
.L2220:
	.word	.LC124-(.LPIC441+8)
	.fnend
	.size	rmnet_mux_smd_data_tx_tlet, .-rmnet_mux_smd_data_tx_tlet
	.align	2
	.type	gsmd_disconnect_work, %function
gsmd_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #-52]
	ldr	r0, [r3]
	bl	smd_close(PLT)
	ldr	r3, [r4, #-52]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gsmd_disconnect_work, .-gsmd_disconnect_work
	.align	2
	.type	rmnet_smd_disconnect_work, %function
rmnet_smd_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	sub	r0, r0, #124
	str	lr, [sp, #12]
	mov	r5, #0
	str	r6, [sp, #8]
	bl	tasklet_kill(PLT)
	sub	r0, r4, #144
	bl	tasklet_kill(PLT)
	sub	r0, r4, #60
	bl	tasklet_kill(PLT)
	sub	r0, r4, #80
	bl	tasklet_kill(PLT)
	ldr	r0, [r4, #-148]
	bl	smd_close(PLT)
	str	r5, [r4, #-104]
	ldr	r0, [r4, #-84]
	bl	smd_close(PLT)
	mov	r0, r4
	str	r5, [r4, #-40]
	str	r5, [r4, #-236]
	ldr	r3, [r0, #-252]!
	cmp	r3, r0
	ldr	r2, [r3]
	subne	r5, r4, #260
	movne	lr, #256
	movne	ip, #512
	beq	.L2229
.L2228:
	ldr	r1, [r3, #4]
	cmp	r0, r2
	str	r1, [r2, #4]
	str	r2, [r1]
	str	lr, [r3]
	str	ip, [r3, #4]
	ldr	r1, [r4, #-256]
	str	r3, [r4, #-256]
	str	r5, [r3]
	str	r1, [r3, #4]
	str	r3, [r1]
	mov	r3, r2
	ldr	r2, [r2]
	bne	.L2228
.L2229:
	mov	r0, r4
	ldr	r3, [r0, #-284]!
	cmp	r3, r0
	ldr	r2, [r3]
	subne	r5, r4, #300
	movne	lr, #256
	movne	ip, #512
	beq	.L2227
.L2232:
	ldr	r1, [r3, #4]
	cmp	r0, r2
	str	r1, [r2, #4]
	str	r2, [r1]
	str	lr, [r3]
	str	ip, [r3, #4]
	ldr	r1, [r4, #-296]
	str	r3, [r4, #-296]
	str	r5, [r3]
	str	r1, [r3, #4]
	str	r3, [r1]
	mov	r3, r2
	ldr	r2, [r2]
	bne	.L2232
.L2227:
	mov	r0, r4
	ldr	r3, [r0, #-276]!
	cmp	r3, r0
	ldr	r2, [r3]
	subne	r5, r4, #292
	movne	lr, #256
	movne	ip, #512
	beq	.L2231
.L2235:
	ldr	r1, [r3, #4]
	cmp	r0, r2
	str	r1, [r2, #4]
	str	r2, [r1]
	str	lr, [r3]
	str	ip, [r3, #4]
	ldr	r1, [r4, #-288]
	str	r3, [r4, #-288]
	str	r5, [r3]
	str	r1, [r3, #4]
	str	r3, [r1]
	mov	r3, r2
	ldr	r2, [r2]
	bne	.L2235
.L2231:
	ldrb	r3, [r4, #-152]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L2224
	sub	r0, r4, #232
	bl	platform_driver_unregister(PLT)
	mov	r3, #0
	strb	r3, [r4, #-152]
.L2224:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_smd_disconnect_work, .-rmnet_smd_disconnect_work
	.align	2
	.type	grmnet_ctrl_smd_disconnect_w, %function
grmnet_ctrl_smd_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-160]
	cmp	r0, #0
	beq	.L2242
	bl	smd_close(PLT)
	mov	r3, #0
	str	r3, [r4, #-160]
.L2242:
	ldr	r3, [r4, #-152]
	tst	r3, #2
	bne	.L2243
	ldr	r3, [r4, #-152]
	tst	r3, #4
	beq	.L2241
.L2243:
	mov	r0, #2
	sub	r1, r4, #152
	bl	_clear_bit(PLT)
	ldr	r2, .L2249
	mov	r0, #84
	ldr	r3, [r4, #-60]
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
.LPIC442:
	add	r2, pc, r2
	mla	r0, r0, r3, r2
	add	r0, r0, #536
	b	platform_driver_unregister(PLT)
.L2241:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2250:
	.align	2
.L2249:
	.word	.LANCHOR2-(.LPIC442+8)
	.fnend
	.size	grmnet_ctrl_smd_disconnect_w, .-grmnet_ctrl_smd_disconnect_w
	.section	.exit.text
	.align	2
	.type	cleanup, %function
cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, .L2252
.LPIC443:
	add	r0, pc, r0
	add	r0, r0, #32
	b	platform_driver_unregister(PLT)
.L2253:
	.align	2
.L2252:
	.word	.LANCHOR0-(.LPIC443+8)
	.fnend
	.size	cleanup, .-cleanup
	.text
	.align	2
	.type	rmnet_smd_connect_work, %function
rmnet_smd_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L2270
	sub	r1, r0, #132
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	ldr	r3, .L2270+4
	strd	r6, [sp, #8]
	mov	r2, r1
	str	lr, [sp, #16]
	mov	r4, r0
	ldr	r7, [r0, #-308]
	.pad #28
	sub	sp, sp, #28
.LPIC444:
	add	ip, pc, ip
.LPIC445:
	add	r3, pc, r3
	ldr	r0, [ip, #112]
	bl	smd_open(PLT)
	subs	r2, r0, #0
	bne	.L2266
	ldr	r3, [r4, #-88]
	ands	r3, r3, #1
	bne	.L2258
	ldr	r2, .L2270+8
	mov	r1, sp
	str	r3, [sp, #4]
	bic	r1, r1, #8128
	add	r3, sp, #16
	bic	r1, r1, #63
	sub	r6, r4, #80
	ldr	r1, [r1, #12]
	add	r5, sp, #4
	str	r3, [sp, #16]
.LPIC453:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L2260
.L2267:
	bl	schedule(PLT)
.L2260:
	mov	r0, r6
	mov	r1, r5
	mov	r2, #2
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #-88]
	tst	r3, #1
	beq	.L2267
	mov	r0, r6
	mov	r1, r5
	bl	finish_wait(PLT)
.L2258:
	ldr	r0, .L2270+12
	sub	r1, r4, #68
	ldr	r3, .L2270+16
	mov	r2, r1
.LPIC449:
	add	r0, pc, r0
.LPIC450:
	add	r3, pc, r3
	ldr	r0, [r0, #116]
	bl	smd_open(PLT)
	cmp	r0, #0
	bne	.L2268
	ldr	r3, [r4, #-24]
	ands	r3, r3, #1
	bne	.L2262
	ldr	r2, .L2270+20
	mov	r1, sp
	str	r3, [sp, #4]
	bic	r1, r1, #8128
	add	r3, sp, #16
	bic	r1, r1, #63
	sub	r6, r4, #16
	ldr	r1, [r1, #12]
	add	r5, sp, #4
	str	r3, [sp, #16]
.LPIC452:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L2264
.L2269:
	bl	schedule(PLT)
.L2264:
	mov	r0, r6
	mov	r1, r5
	mov	r2, #2
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #-24]
	tst	r3, #1
	beq	.L2269
	mov	r0, r6
	mov	r1, r5
	bl	finish_wait(PLT)
.L2262:
	mov	r3, #1
	sub	r0, r4, #384
	str	r3, [r4, #-224]
	bl	rmnet_smd_start_rx(PLT)
.L2254:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L2266:
	ldr	r0, [r7]
	ldr	r1, .L2270+24
	add	r0, r0, #32
.LPIC446:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldrb	r3, [r4, #-136]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L2254
	sub	r0, r4, #216
	bl	platform_driver_register(PLT)
	subs	r3, r0, #0
	moveq	r3, #1
	streqb	r3, [r4, #-136]
	beq	.L2254
	ldr	r0, [r7]
	ldr	r1, .L2270+28
	ldr	r2, [r4, #-196]
	add	r0, r0, #32
.LPIC447:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L2254
.L2268:
	ldr	r0, [r7]
	ldr	r1, .L2270+32
	add	r0, r0, #32
.LPIC451:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldr	r0, [r4, #-132]
	bl	smd_close(PLT)
	b	.L2254
.L2271:
	.align	2
.L2270:
	.word	.LANCHOR0-(.LPIC444+8)
	.word	rmnet_smd_event_notify-(.LPIC445+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC453+8))
	.word	.LANCHOR0-(.LPIC449+8)
	.word	rmnet_smd_event_notify-(.LPIC450+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC452+8))
	.word	.LC126-(.LPIC446+8)
	.word	.LC127-(.LPIC447+8)
	.word	.LC128-(.LPIC451+8)
	.fnend
	.size	rmnet_smd_connect_work, .-rmnet_smd_connect_work
	.align	2
	.type	grmnet_ctrl_smd_read_w, %function
grmnet_ctrl_smd_read_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #32]
	.pad #36
	sub	sp, sp, #36
	str	r3, [sp, #4]
	add	r3, r3, #108
	mov	r0, r3
	str	r3, [sp]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r5, r0
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	beq	.L2273
	mov	r3, sp
	bic	r10, r3, #8128
	bic	r10, r10, #63
.L2285:
	bl	smd_cur_packet_size(PLT)
	subs	r8, r0, #0
	ble	.L2273
	mov	r1, r5
	ldr	r0, [sp]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r8
	mov	r1, #208
	bl	__kmalloc(PLT)
	subs	r9, r0, #0
	beq	.L2272
	mov	r7, #0
.L2283:
	ldr	r0, [r4, #-52]
	bl	smd_read_avail(PLT)
	subs	fp, r0, #0
	bne	.L2275
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	beq	.L2276
	ldr	r1, .L2310
	add	r3, sp, #24
	add	r5, sp, #12
	ldr	r0, [r10, #12]
	sub	r6, r4, #28
	str	fp, [sp, #12]
	str	r3, [sp, #24]
	str	r3, [sp, #28]
.LPIC461:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	strd	r0, [sp, #16]
	b	.L2278
.L2307:
	ldr	r3, [r4, #-52]
	cmp	r3, #0
	beq	.L2277
	bl	schedule(PLT)
.L2278:
	mov	r0, r6
	mov	r1, r5
	mov	r2, #2
	bl	prepare_to_wait(PLT)
	ldr	r0, [r4, #-52]
	bl	smd_read_avail(PLT)
	subs	fp, r0, #0
	beq	.L2307
.L2277:
	mov	r0, r6
	mov	r1, r5
	bl	finish_wait(PLT)
.L2275:
	cmp	fp, #0
	ldr	r0, [r4, #-52]
	blt	.L2276
	cmp	r0, #0
	beq	.L2276
	add	r3, fp, r7
	cmp	r8, r3
	blt	.L2308
	mov	r2, fp
	add	r1, r9, r7
	bl	smd_read(PLT)
	cmp	r0, #0
	ble	.L2309
	add	r7, r7, r0
	cmp	r8, r7
	bgt	.L2283
	ldr	r0, [sp]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp, #4]
	mov	r5, r0
	ldr	r0, [r3, #104]
	cmp	r0, #0
	beq	.L2284
	ldr	r3, [r0, #84]
	cmp	r3, #0
	beq	.L2284
	mov	r2, r8
	mov	r1, r9
	blx	r3
	ldr	r3, [r4, #44]
	add	r3, r3, #1
	str	r3, [r4, #44]
.L2284:
	mov	r0, r9
	bl	kfree(PLT)
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	bne	.L2285
.L2273:
	ldr	r0, [sp]
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
.L2272:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2276:
	ldr	r1, .L2310+4
	mov	r3, r0
	mov	r2, fp
	ldr	r0, .L2310+8
.LPIC456:
	add	r1, pc, r1
	add	r1, r1, #656
.LPIC455:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	b	.L2272
.L2309:
	ldr	r1, .L2310+12
	mov	r2, r0
	ldr	r0, .L2310+16
.LPIC460:
	add	r1, pc, r1
	add	r1, r1, #656
.LPIC459:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	b	.L2272
.L2308:
	ldr	r1, .L2310+20
	ldr	r0, .L2310+24
.LPIC458:
	add	r1, pc, r1
	add	r1, r1, #656
.LPIC457:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	b	.L2272
.L2311:
	.align	2
.L2310:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC461+8))
	.word	.LANCHOR3-(.LPIC456+8)
	.word	.LC129-(.LPIC455+8)
	.word	.LANCHOR3-(.LPIC460+8)
	.word	.LC131-(.LPIC459+8)
	.word	.LANCHOR3-(.LPIC458+8)
	.word	.LC130-(.LPIC457+8)
	.fnend
	.size	grmnet_ctrl_smd_read_w, .-grmnet_ctrl_smd_read_w
	.align	2
	.type	rmnet_smd_event_notify, %function
rmnet_smd_event_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #48]
	ldr	r3, [r0, #20]
	beq	.L2314
	cmp	r1, #3
	beq	.L2315
	cmp	r1, #1
	beq	.L2326
.L2312:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2326:
	ldr	r3, [r3, #160]
	cmp	r3, #0
	beq	.L2312
	cmp	r5, #0
	bne	.L2327
.L2319:
	ldr	r0, [r4]
	bl	smd_read_avail(PLT)
	cmp	r0, #0
	beq	.L2312
	add	r4, r4, #4
	mov	r0, #0
	add	r1, r4, #4
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	bne	.L2312
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__tasklet_schedule(PLT)
.L2315:
	add	r1, r0, #44
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_clear_bit(PLT)
.L2314:
	add	r1, r4, #44
	mov	r0, #0
	bl	_set_bit(PLT)
	ldr	r6, [sp, #8]
	add	r0, r4, #52
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up(PLT)
.L2327:
	ldr	r0, [r0]
	bl	smd_write_avail(PLT)
	cmp	r5, r0
	bgt	.L2319
	mov	r0, #0
	add	r1, r4, #28
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	add	r0, r4, #24
	bne	.L2319
	bl	__tasklet_schedule(PLT)
	b	.L2319
	.fnend
	.size	rmnet_smd_event_notify, .-rmnet_smd_event_notify
	.align	2
	.type	grmnet_ctrl_smd_notify, %function
grmnet_ctrl_smd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L2330
	cmp	r1, #3
	beq	.L2331
	cmp	r1, #1
	beq	.L2363
.L2329:
	add	r0, r5, #24
	ldrd	r6, [sp, #8]
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up(PLT)
.L2363:
	ldr	r0, [r0]
	bl	smd_read_avail(PLT)
	cmp	r0, #0
	beq	.L2333
	ldr	r2, [r5, #28]
	add	r3, r5, #28
	cmp	r2, r3
	beq	.L2364
.L2333:
	ldr	r0, [r5]
	bl	smd_write_avail(PLT)
	cmp	r0, #0
	beq	.L2329
	ldr	r3, .L2365
	add	r1, r5, #68
.LPIC463:
	add	r3, pc, r3
	ldr	r0, [r3, #-648]
	bl	queue_work(PLT)
	b	.L2329
.L2331:
	mov	r0, #0
	add	r1, r5, #8
	bl	_clear_bit(PLT)
	cmp	r5, #0
	beq	.L2336
	ldr	r0, [r5, #104]
	cmp	r0, #0
	beq	.L2336
	ldr	r3, [r0, #96]
	cmp	r3, #0
	beq	.L2336
	blx	r3
.L2336:
	add	r9, r5, #108
	add	r6, r5, #40
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #40]
	mov	r10, r0
	cmp	r6, r3
	movne	r8, #256
	movne	r7, #512
	beq	.L2339
.L2338:
	ldr	r2, [r3, #4]
	mov	r4, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r4, #-8]!
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r3, [r5, #40]
	cmp	r3, r6
	bne	.L2338
.L2339:
	mov	r0, r9
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L2329
.L2330:
	mov	r0, #0
	add	r1, r5, #8
	bl	_set_bit(PLT)
	cmp	r5, #0
	beq	.L2329
	ldr	r0, [r5, #104]
	cmp	r0, #0
	beq	.L2329
	ldr	r3, [r0, #100]
	cmp	r3, #0
	beq	.L2329
	blx	r3
	b	.L2329
.L2364:
	ldr	r3, .L2365+4
	add	r1, r5, #52
.LPIC462:
	add	r3, pc, r3
	ldr	r0, [r3, #-648]
	bl	queue_work(PLT)
	b	.L2333
.L2366:
	.align	2
.L2365:
	.word	.LANCHOR4-(.LPIC463+8)
	.word	.LANCHOR4-(.LPIC462+8)
	.fnend
	.size	grmnet_ctrl_smd_notify, .-grmnet_ctrl_smd_notify
	.align	2
	.type	acc_function_disable, %function
acc_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrb	r3, [r0, #92]	@ zero_extendqisi2
	ldr	r2, [r0, #84]
	and	r3, r3, #254
	orr	r3, r3, #2
	mov	r0, r2
	strb	r3, [r4, #92]
	ldr	r3, [r2, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	add	r0, r4, #1648
	ldr	lr, [sp, #4]
	mov	r1, #3
	ldr	r4, [sp]
	add	r0, r0, #8
	mov	r2, #1
	mov	r3, #0
	add	sp, sp, #8
	b	__wake_up(PLT)
	.fnend
	.size	acc_function_disable, .-acc_function_disable
	.align	2
	.type	acc_complete_out, %function
acc_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L2371
	mov	r2, #1
.LPIC464:
	add	r3, pc, r3
	ldr	r0, [r3, #2316]
	str	r2, [r0, #1688]
	ldr	r3, [r1, #44]
	cmn	r3, #108
	bne	.L2370
	ldrb	r3, [r0, #92]	@ zero_extendqisi2
	and	r3, r3, #254
	orr	r3, r3, #2
	strb	r3, [r0, #92]
.L2370:
	add	r0, r0, #1648
	mov	r1, #3
	add	r0, r0, #8
	mov	r2, #1
	mov	r3, #0
	b	__wake_up(PLT)
.L2372:
	.align	2
.L2371:
	.word	.LANCHOR2-(.LPIC464+8)
	.fnend
	.size	acc_complete_out, .-acc_complete_out
	.align	2
	.type	mtp_function_disable, %function
mtp_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r0, [r0, #84]
	str	r5, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r6, [sp, #8]
	add	r0, r4, #124
	mov	r3, r5
	ldr	lr, [sp, #12]
	mov	r1, #3
	mov	r2, #1
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	__wake_up(PLT)
	.fnend
	.size	mtp_function_disable, .-mtp_function_disable
	.align	2
	.type	mtp_complete_out, %function
mtp_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L2380
	mov	r2, #1
.LPIC465:
	add	r3, pc, r3
	ldr	r0, [r3, #2320]
	str	r2, [r0, #168]
	ldr	r3, [r1, #44]
	add	r0, r0, #124
	mov	r1, #3
	mov	r2, #1
	cmp	r3, #0
	movne	r3, #4
	strne	r3, [r0, #-28]
	mov	r3, #0
	b	__wake_up(PLT)
.L2381:
	.align	2
.L2380:
	.word	.LANCHOR2-(.LPIC465+8)
	.fnend
	.size	mtp_complete_out, .-mtp_complete_out
	.align	2
	.type	mtp_function_ctrlrequest, %function
mtp_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	ldr	r3, .L2414
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r1, [r2]	@ zero_extendqisi2
.LPIC466:
	add	r3, pc, r3
	ldrh	r0, [r2, #4]	@ unaligned
	ldrh	r6, [r2, #2]	@ unaligned
	ldrh	r5, [r2, #6]	@ unaligned
	cmp	r1, #128
	ldr	r7, [r3, #2320]
	beq	.L2408
	and	r3, r1, #96
	cmp	r3, #64
	beq	.L2409
	cmp	r3, #32
	bne	.L2404
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #100
	beq	.L2410
	cmp	r3, #103
	bne	.L2404
	orrs	r3, r6, r0
	bne	.L2404
	ldr	r2, [r4, #4]
	mov	r3, #4
	add	r10, r7, #80
	cmp	r5, r3
	mov	r0, r10
	mov	r6, r3
	movle	r8, #0
	movgt	r8, #1
	mov	r5, r3
	ldr	r9, [r2]
	strh	r3, [r9]	@ movhi
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r7, #96]
	movw	r2, #8217
	movw	r3, #8193
	mov	r1, r0
	mov	r0, r10
	cmp	ip, #3
	moveq	r3, r2
	strh	r3, [r9, #2]	@ movhi
	bl	_raw_spin_unlock_irqrestore(PLT)
.L2387:
	ldr	r3, [r4, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfi	r1, r8, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r4, #4]
	str	r6, [r3, #4]
	ldr	r3, [r4]
	ldr	r1, [r4, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bge	.L2406
	ldr	r2, .L2414+4
	ldr	r0, [r4]
	ldr	r1, .L2414+8
.LPIC470:
	add	r2, pc, r2
	add	r2, r2, #680
	add	r0, r0, #32
.LPIC469:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L2406
.L2408:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #6
	beq	.L2411
.L2404:
	mvn	r5, #94
.L2406:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2409:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #1
	bne	.L2404
	tst	r1, #128
	beq	.L2404
	sub	r0, r0, #4
	cmp	r0, #1
	bhi	.L2404
	cmp	r5, #39
	movls	r8, #0
	movls	r6, r5
	bhi	.L2412
.L2390:
	ldr	r3, [r4, #4]
	mov	r2, r6
	ldr	r1, .L2414+12
	ldr	r0, [r3]
.LPIC471:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	bl	memcpy(PLT)
	b	.L2387
.L2410:
	orrs	r6, r6, r0
	bne	.L2404
	add	r8, r7, #80
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r7, #96]
	mov	r9, r0
	cmp	r3, #2
	beq	.L2413
.L2392:
	mov	r0, r8
	mov	r1, r9
	mov	r8, #0
	mov	r6, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L2387
.L2412:
	mov	r6, #40
	cmp	r5, r6
	mov	r5, r6
	movle	r8, #0
	movgt	r8, #1
	b	.L2390
.L2411:
	mov	r3, r6, lsr #8
	cmp	r3, #3
	bne	.L2404
	uxtb	r6, r6
	cmp	r6, #238
	bne	.L2404
	cmp	r5, #17
	movls	r8, #0
	movls	r6, r5
	bls	.L2386
	mov	r6, #18
	cmp	r5, r6
	mov	r5, r6
	movle	r8, #0
	movgt	r8, #1
.L2386:
	ldr	r1, .L2414+16
	mov	r2, r6
	ldr	r3, [r4, #4]
.LPIC467:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r1, r1, #260
	bl	memcpy(PLT)
	b	.L2387
.L2413:
	mov	r10, #3
	add	r0, r7, #124
	mov	r1, r10
	mov	r3, r6
	mov	r2, #1
	str	r10, [r7, #96]
	bl	__wake_up(PLT)
	mov	r1, r10
	add	r0, r7, #136
	mov	r3, r6
	mov	r2, #1
	bl	__wake_up(PLT)
	b	.L2392
.L2415:
	.align	2
.L2414:
	.word	.LANCHOR2-(.LPIC466+8)
	.word	.LANCHOR3-(.LPIC470+8)
	.word	.LC132-(.LPIC469+8)
	.word	mtp_ext_config_desc(GOT_PREL)+(.-(.LPIC471+8))
	.word	.LANCHOR1-(.LPIC467+8)
	.fnend
	.size	mtp_function_ctrlrequest, .-mtp_function_ctrlrequest
	.align	2
	.type	ccid_function_setup, %function
ccid_function_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0, #20]
	ldr	r3, [r0, #88]
	ldrh	r6, [r1, #2]	@ unaligned
	ldrh	r4, [r1, #6]	@ unaligned
	ldr	lr, [r2, #24]
	cmp	r3, #0
	ldr	r2, [lr, #4]
	beq	.L2423
	ldrb	r5, [r1]	@ zero_extendqisi2
	mov	ip, r0
	movw	r0, #41218
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	orr	r3, r3, r5, asl #8
	cmp	r3, r0
	beq	.L2418
	movw	r1, #41219
	cmp	r3, r1
	beq	.L2419
	movw	r2, #8449
	cmp	r3, r2
	beq	.L2431
.L2427:
	mvn	r0, #94
.L2429:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2419:
	ldr	r3, [r2, #4]
	cmp	r4, r3
	bhi	.L2427
	ldr	r3, .L2432
	cmp	r4, #4
	ldr	r1, [r2]
	movcs	r4, #4
.LPIC473:
	add	r3, pc, r3
	ldr	r3, [r3, #299]	@ unaligned
	str	r3, [r1]
	b	.L2421
.L2431:
	cmp	r4, #0
	bne	.L2427
	mov	r3, r6, lsr #8
	mov	lr, #1
	strb	r6, [ip, #133]
	add	r0, ip, #120
	strb	r4, [ip, #135]
	mov	r2, lr
	strb	lr, [ip, #132]
	mov	r1, #3
	strb	r3, [ip, #134]
	mov	r3, r4
	str	lr, [ip, #136]
	bl	__wake_up(PLT)
	mov	r0, r4
	b	.L2429
.L2418:
	ldr	r3, [r2, #4]
	cmp	r4, r3
	bhi	.L2427
	ldr	r3, .L2432+4
	cmp	r4, #4
	ldr	r1, [r2]
	movcs	r4, #4
.LPIC472:
	add	r3, pc, r3
	ldr	r3, [r3, #290]	@ unaligned
	str	r3, [r1]
.L2421:
	str	r4, [r2, #4]
	ldr	r3, [lr]
	mov	r1, r2
	mov	r2, #32
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L2422
	mov	r0, r4
	b	.L2429
.L2423:
	mvn	r0, #106
	b	.L2429
.L2422:
	ldr	r0, .L2432+8
	mov	r1, r4
.LPIC474:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	b	.L2429
.L2433:
	.align	2
.L2432:
	.word	.LANCHOR1-(.LPIC473+8)
	.word	.LANCHOR1-(.LPIC472+8)
	.word	.LC133-(.LPIC474+8)
	.fnend
	.size	ccid_function_setup, .-ccid_function_setup
	.align	2
	.type	ccid_bulk_complete_out, %function
ccid_bulk_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L2439
	mov	ip, #1
	ldr	r2, [r1, #44]
	mov	r1, #3
.LPIC475:
	add	r3, pc, r3
	ldr	r3, [r3, #2220]
	cmp	r2, #0
	movne	r2, #1
	add	r0, r3, #152
	strne	r2, [r3, #140]
	mov	r2, ip
	str	ip, [r3, #180]
	mov	r3, #0
	b	__wake_up(PLT)
.L2440:
	.align	2
.L2439:
	.word	.LANCHOR2-(.LPIC475+8)
	.fnend
	.size	ccid_bulk_complete_out, .-ccid_bulk_complete_out
	.align	2
	.type	adb_function_disable, %function
adb_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r0, [r0, #84]
	mov	r6, #1
	strb	r5, [r4, #152]
	str	r6, [r4, #96]
	str	r5, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	lr, [sp, #12]
	add	r0, r4, #120
	mov	r2, r6
	mov	r3, r5
	ldr	r6, [sp, #8]
	mov	r1, #3
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	__wake_up(PLT)
	.fnend
	.size	adb_function_disable, .-adb_function_disable
	.align	2
	.type	adb_complete_out, %function
adb_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L2448
	mov	r2, #1
.LPIC476:
	add	r3, pc, r3
	ldr	r0, [r3, #-644]
	str	r2, [r0, #148]
	ldr	r3, [r1, #44]
	add	r0, r0, #120
	mov	r1, #3
	cmp	r3, #0
	cmnne	r3, #104
	mov	r3, #0
	strne	r2, [r0, #-24]
	mov	r2, #1
	b	__wake_up(PLT)
.L2449:
	.align	2
.L2448:
	.word	.LANCHOR4-(.LPIC476+8)
	.fnend
	.size	adb_complete_out, .-adb_complete_out
	.align	2
	.type	rmnet_mux_smd_notify, %function
rmnet_mux_smd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #168]
	beq	.L2452
	cmp	r1, #3
	beq	.L2453
	cmp	r1, #1
	beq	.L2464
.L2450:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2464:
	ldr	r3, [r0, #360]
	cmp	r3, #0
	beq	.L2450
	cmp	r5, #0
	bne	.L2465
.L2457:
	ldr	r0, [r4, #120]
	bl	smd_read_avail(PLT)
	cmp	r0, #0
	beq	.L2450
	mov	r0, #0
	add	r1, r4, #128
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	add	r0, r4, #124
	bne	.L2450
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__tasklet_schedule(PLT)
.L2453:
	add	r1, r0, #164
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_clear_bit(PLT)
.L2452:
	add	r1, r4, #164
	mov	r0, #0
	bl	_set_bit(PLT)
	ldr	r6, [sp, #8]
	add	r0, r4, #172
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up(PLT)
.L2465:
	ldr	r0, [r0, #120]
	bl	smd_write_avail(PLT)
	cmp	r5, r0
	bgt	.L2457
	mov	r0, #0
	add	r1, r4, #148
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	add	r0, r4, #144
	bne	.L2457
	bl	__tasklet_schedule(PLT)
	b	.L2457
	.fnend
	.size	rmnet_mux_smd_notify, .-rmnet_mux_smd_notify
	.section	.init.text,"ax",%progbits
	.align	2
	.type	gsmd_ctrl_init, %function
gsmd_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L2475
	mov	r1, #0
	stmfd	sp!, {r4, r5, lr}
	.save {r4, r5, lr}
	.pad #12
	sub	sp, sp, #12
	ldr	r4, .L2475+4
.LPIC477:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	ldr	r3, .L2475+8
.LPIC478:
	add	r4, pc, r4
	cmn	r0, #4096
	ldr	r2, [r4, r3]
	str	r0, [r2]
	bhi	.L2468
	ldr	ip, .L2475+12
	mov	r5, r2
	mov	r2, r0
	ldr	r0, .L2475+16
	mov	r3, #0
	mov	r1, #292
	ldr	ip, [r4, ip]
.LPIC479:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	ldr	r3, .L2475+20
	cmp	r0, #0
	ldr	r3, [r4, r3]
	str	r0, [r3]
	beq	.L2469
	cmn	r0, #4096
	bls	.L2468
.L2469:
	ldr	r0, [r5]
	bl	debugfs_remove(PLT)
.L2468:
	ldr	r3, .L2475+24
	mov	r2, #0
	mov	r0, r2
	ldr	r3, [r4, r3]
	strb	r2, [r3]
	add	sp, sp, #12
	@ sp needed
	ldmfd	sp!, {r4, r5, pc}
.L2476:
	.align	2
.L2475:
	.word	.LC134-(.LPIC477+8)
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC478+8)
	.word	smd_ctrl_dent(GOT)
	.word	gsmd_ctrl_stats_ops(GOT)
	.word	.LC135-(.LPIC479+8)
	.word	smd_ctrl_dfile(GOT)
	.word	online_clients(GOT)
	.fnend
	.size	gsmd_ctrl_init, .-gsmd_ctrl_init
	.section	.exit.text
	.align	2
	.type	gsmd_ctrl_exit, %function
gsmd_ctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L2479
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
.LPIC482:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3]
	bl	debugfs_remove(PLT)
	ldr	r3, .L2479+4
	ldmfd	sp!, {r4, lr}
.LPIC481:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3]
	b	debugfs_remove(PLT)
.L2480:
	.align	2
.L2479:
	.word	smd_ctrl_dfile(GOT_PREL)+(.-(.LPIC482+8))
	.word	smd_ctrl_dent(GOT_PREL)+(.-(.LPIC481+8))
	.fnend
	.size	gsmd_ctrl_exit, .-gsmd_ctrl_exit
	.section	.init.text
	.align	2
	.type	gctrl_init, %function
gctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L2490
	mov	r1, #0
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
	.pad #8
	sub	sp, sp, #8
.LPIC483:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	ldr	r3, .L2490+4
	cmn	r0, #4096
	mov	r2, r0
.LPIC488:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r0, [r3]
	bhi	.L2483
	ldr	ip, .L2490+8
	mov	r4, r3
	mov	r1, #292
	ldr	r0, .L2490+12
	mov	r3, #0
.LPIC487:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
.LPIC485:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	ldr	r3, .L2490+16
	cmp	r0, #0
.LPIC486:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r0, [r3]
	beq	.L2484
	cmn	r0, #4096
	bls	.L2483
.L2484:
	ldr	r0, [r4]
	bl	debugfs_remove(PLT)
.L2483:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	ldmfd	sp!, {r4, pc}
.L2491:
	.align	2
.L2490:
	.word	.LC136-(.LPIC483+8)
	.word	gctrl_dent(GOT_PREL)+(.-(.LPIC488+8))
	.word	gctrl_stats_ops(GOT_PREL)+(.-(.LPIC487+8))
	.word	.LC135-(.LPIC485+8)
	.word	gctrl_dfile(GOT_PREL)+(.-(.LPIC486+8))
	.fnend
	.size	gctrl_init, .-gctrl_init
	.section	.exit.text
	.align	2
	.type	gctrl_exit, %function
gctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L2494
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
.LPIC491:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3]
	bl	debugfs_remove(PLT)
	ldr	r3, .L2494+4
	ldmfd	sp!, {r4, lr}
.LPIC490:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3]
	b	debugfs_remove(PLT)
.L2495:
	.align	2
.L2494:
	.word	gctrl_dfile(GOT_PREL)+(.-(.LPIC491+8))
	.word	gctrl_dent(GOT_PREL)+(.-(.LPIC490+8))
	.fnend
	.size	gctrl_exit, .-gctrl_exit
	.section	.init.text
	.align	2
	.type	ghsic_data_init, %function
ghsic_data_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L2510
	mov	r1, #0
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
	.pad #8
	sub	sp, sp, #8
	ldr	r4, .L2510+4
.LPIC492:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
.LPIC493:
	add	r4, pc, r4
	cmn	r0, #4096
	mov	r2, r0
	str	r0, [r4, #-640]
	bhi	.L2498
	ldr	ip, .L2510+8
	mov	r1, #292
	mov	r3, #0
	ldr	r0, .L2510+12
.LPIC503:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
.LPIC494:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	cmp	r0, #0
	str	r0, [r4, #-636]
	beq	.L2499
	cmn	r0, #4096
	bls	.L2500
.L2499:
	ldr	r3, .L2510+16
.LPIC497:
	add	r3, pc, r3
	ldr	r0, [r3, #-640]
	bl	debugfs_remove(PLT)
	b	.L2498
.L2500:
	ldr	ip, .L2510+20
	mov	r1, #420
	mov	r3, #0
	ldr	r0, .L2510+24
	ldr	r2, [r4, #-640]
.LPIC502:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
.LPIC498:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	cmp	r0, #0
	str	r0, [r4, #-632]
	beq	.L2501
	cmn	r0, #4096
	bls	.L2498
.L2501:
	ldr	r3, .L2510+28
.LPIC501:
	add	r3, pc, r3
	ldr	r0, [r3, #-640]
	bl	debugfs_remove(PLT)
.L2498:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	ldmfd	sp!, {r4, pc}
.L2511:
	.align	2
.L2510:
	.word	.LC137-(.LPIC492+8)
	.word	.LANCHOR4-(.LPIC493+8)
	.word	ghsic_stats_ops(GOT_PREL)+(.-(.LPIC503+8))
	.word	.LC135-(.LPIC494+8)
	.word	.LANCHOR4-(.LPIC497+8)
	.word	gdata_timestamp_ops(GOT_PREL)+(.-(.LPIC502+8))
	.word	.LC138-(.LPIC498+8)
	.word	.LANCHOR4-(.LPIC501+8)
	.fnend
	.size	ghsic_data_init, .-ghsic_data_init
	.section	.exit.text
	.align	2
	.type	ghsic_data_exit, %function
ghsic_data_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
	ldr	r4, .L2514
.LPIC504:
	add	r4, pc, r4
	ldr	r0, [r4, #-636]
	bl	debugfs_remove(PLT)
	ldr	r0, [r4, #-632]
	bl	debugfs_remove(PLT)
	ldr	r0, [r4, #-640]
	ldmfd	sp!, {r4, lr}
	b	debugfs_remove(PLT)
.L2515:
	.align	2
.L2514:
	.word	.LANCHOR4-(.LPIC504+8)
	.fnend
	.size	ghsic_data_exit, .-ghsic_data_exit
	.section	.init.text
	.align	2
	.type	ghsuart_ctrl_init, %function
ghsuart_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L2529
	mov	r1, #0
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
	.pad #8
	sub	sp, sp, #8
.LPIC507:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	ldr	r3, .L2529+4
	cmp	r0, #0
	mov	r2, r0
.LPIC508:
	add	r3, pc, r3
	str	r0, [r3, #-660]
	beq	.L2517
	cmn	r0, #4096
	bhi	.L2517
	ldr	ip, .L2529+8
	mov	r1, #420
	mov	r3, #0
	ldr	r0, .L2529+12
.LPIC510:
	add	ip, pc, ip
.LPIC509:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	cmp	r0, #0
	beq	.L2518
	cmn	r0, #4096
	movls	r0, #0
	bls	.L2527
.L2518:
	ldr	r4, .L2529+16
.LPIC511:
	add	r4, pc, r4
	ldr	r0, [r4, #-660]
	bl	debugfs_remove(PLT)
	mov	r3, #0
	str	r3, [r4, #-660]
.L2517:
	mvn	r0, #18
.L2527:
	add	sp, sp, #8
	@ sp needed
	ldmfd	sp!, {r4, pc}
.L2530:
	.align	2
.L2529:
	.word	.LC139-(.LPIC507+8)
	.word	.LANCHOR4-(.LPIC508+8)
	.word	.LANCHOR5-(.LPIC510+8)
	.word	.LC135-(.LPIC509+8)
	.word	.LANCHOR4-(.LPIC511+8)
	.fnend
	.size	ghsuart_ctrl_init, .-ghsuart_ctrl_init
	.align	2
	.type	ghsuart_data_init, %function
ghsuart_data_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L2544
	mov	r1, #0
	str	lr, [sp, #-4]!
	.save {lr}
	.pad #12
	sub	sp, sp, #12
.LPIC513:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	ldr	r3, .L2544+4
	cmp	r0, #0
	mov	r2, r0
.LPIC514:
	add	r3, pc, r3
	str	r0, [r3, #-656]
	beq	.L2532
	cmn	r0, #4096
	bhi	.L2532
	ldr	ip, .L2544+8
	mov	r1, #420
	mov	r3, #0
	ldr	r0, .L2544+12
.LPIC518:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
.LPIC515:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	cmp	r0, #0
	beq	.L2533
	cmn	r0, #4096
	movls	r0, #0
	bls	.L2542
.L2533:
	ldr	r3, .L2544+16
.LPIC517:
	add	r3, pc, r3
	ldr	r0, [r3, #-656]
	bl	debugfs_remove(PLT)
.L2532:
	mvn	r0, #18
.L2542:
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L2545:
	.align	2
.L2544:
	.word	.LC140-(.LPIC513+8)
	.word	.LANCHOR4-(.LPIC514+8)
	.word	ghsuart_data_stats_ops(GOT_PREL)+(.-(.LPIC518+8))
	.word	.LC135-(.LPIC515+8)
	.word	.LANCHOR4-(.LPIC517+8)
	.fnend
	.size	ghsuart_data_init, .-ghsuart_data_init
	.text
	.align	2
	.type	diag_function_init, %function
diag_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L2555
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, #0
	ldr	r0, .L2555+4
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, .L2555+8
.LPIC519:
	add	r3, pc, r3
	sub	r2, r3, #628
.LPIC523:
	add	r0, pc, r0
	str	r2, [r3, #-628]
	str	r2, [r3, #-624]
	bl	debugfs_create_dir(PLT)
.LPIC527:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
	cmp	r0, #0
	str	r0, [r4]
	beq	.L2548
	cmn	r0, #4096
	bhi	.L2548
	ldr	ip, .L2555+12
	mov	r2, r0
	mov	r1, #292
	ldr	r0, .L2555+16
	mov	r3, #0
.LPIC526:
	add	ip, pc, ip
	add	ip, ip, #104
.LPIC525:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	cmp	r0, #0
	beq	.L2550
	cmn	r0, #4096
	bhi	.L2550
.L2548:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2550:
	ldr	r0, [r4]
	bl	debugfs_remove(PLT)
	mov	r3, #0
	str	r3, [r4]
	b	.L2548
.L2556:
	.align	2
.L2555:
	.word	.LANCHOR4-(.LPIC519+8)
	.word	.LC141-(.LPIC523+8)
	.word	dent_diag(GOT_PREL)+(.-(.LPIC527+8))
	.word	.LANCHOR5-(.LPIC526+8)
	.word	.LC135-(.LPIC525+8)
	.fnend
	.size	diag_function_init, .-diag_function_init
	.align	2
	.type	rmnet_sdio_data_rx_work, %function
rmnet_sdio_data_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #80]
	ldr	r8, [r0, #-152]
	tst	r3, #2
	beq	.L2564
	sub	r6, r0, #48
	mov	r4, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, r4
	mov	r7, r0
	ldr	r5, [r3, #-64]!
	cmp	r5, r3
	cmpne	r5, #0
	beq	.L2559
	ldr	r3, [r4, #-56]
	mov	ip, #0
	mov	r1, r0
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r4, #-56]
	ldrd	r2, [r5]
	str	ip, [r5]
	str	ip, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	ldr	r1, .L2565
	ldr	r0, [r8]
.LPIC530:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r0, r5
	bl	dev_kfree_skb_any(PLT)
.L2559:
	mov	r0, r6
	mov	r1, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L2564:
	ldr	r1, .L2565+4
	ldr	r0, .L2565+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC529:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC528:
	add	r0, pc, r0
	add	r1, r1, #696
	add	sp, sp, #24
	b	printk(PLT)
.L2566:
	.align	2
.L2565:
	.word	.LC143-(.LPIC530+8)
	.word	.LANCHOR3-(.LPIC529+8)
	.word	.LC142-(.LPIC528+8)
	.fnend
	.size	rmnet_sdio_data_rx_work, .-rmnet_sdio_data_rx_work
	.align	2
	.type	gbam_write_data_tohost, %function
gbam_write_data_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #8
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #12]
	str	r0, [sp, #12]
	cmp	r3, #0
	moveq	r1, r0
	moveq	r0, r7
	beq	.L2581
	ldr	r2, [r6, #28]
	add	r1, r6, #28
	ldr	r8, [r3, #76]
	str	r1, [sp]
	cmp	r1, r2
	beq	.L2572
	ldr	r5, [r6, #36]
	add	r3, r6, #36
	str	r3, [sp, #8]
	cmp	r5, r3
	cmpne	r5, #0
	beq	.L2572
	ldr	r10, .L2583
	mov	r9, #0
	ldr	r3, .L2583+4
.LPIC531:
	add	r10, pc, r10
.LPIC533:
	add	r3, pc, r3
	str	r3, [sp, #4]
.L2573:
	ldr	r4, [r6, #44]
	mov	lr, #1
	mov	ip, #256
	ldr	r3, [r10, #-620]
	mov	r0, r7
	sub	r4, r4, #1
	add	r3, r3, lr
	str	r4, [r6, #44]
	ldmia	r5, {r1, r2}
	str	r9, [r5]
	str	r9, [r5, #4]
	str	r3, [r10, #-620]
	str	r2, [r1, #4]
	str	r1, [r2]
	ldr	r4, [r6, #28]
	mov	r1, #512
	str	r5, [r4, #-4]
	ldr	r2, [r5, #172]
	sub	fp, r4, #36
	str	r2, [r4, #-36]
	ldr	r2, [r5, #80]
	str	r2, [r4, #-32]
	ldr	r2, [sp, #4]
	ldr	r2, [r2, #336]
	cmp	r3, r2
	ldr	r2, [r4, #4]
	moveq	lr, #0
	streq	r9, [r10, #-620]
	ldrb	r3, [r4, #-10]	@ zero_extendqisi2
	bfi	r3, lr, #0, #1
	ldr	lr, [r4]
	uxtb	r3, r3
	orr	r3, r3, #2
	strb	r3, [r4, #-10]
	str	r2, [lr, #4]
	str	lr, [r2]
	str	ip, [r4]
	str	r1, [r4, #4]
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r8, #8]
	mov	r1, fp
	mov	r2, #32
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	cmp	fp, #0
	bne	.L2582
	ldr	r3, [r6, #264]
	ldr	r2, [r6, #28]
	ldr	r1, [sp]
	add	r3, r3, #1
	cmp	r1, r2
	str	r3, [r6, #264]
	beq	.L2572
	ldr	r5, [r6, #36]
	ldr	r3, [sp, #8]
	cmp	r5, r3
	cmpne	r5, #0
	bne	.L2573
.L2572:
	ldr	r1, [sp, #12]
	mov	r0, r7
.L2581:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L2582:
	ldr	r1, .L2583+8
	mov	r2, fp
	ldr	r0, .L2583+12
.LPIC536:
	add	r1, pc, r1
	add	r1, r1, #720
.LPIC535:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, [r6, #28]
	mov	r0, r5
	str	r4, [r3, #4]
	str	r3, [r4]
	ldr	r3, [sp]
	str	r3, [r4, #4]
	str	r4, [r6, #28]
	bl	dev_kfree_skb_any(PLT)
	b	.L2572
.L2584:
	.align	2
.L2583:
	.word	.LANCHOR4-(.LPIC531+8)
	.word	.LANCHOR1-(.LPIC533+8)
	.word	.LANCHOR3-(.LPIC536+8)
	.word	.LC144-(.LPIC535+8)
	.fnend
	.size	gbam_write_data_tohost, .-gbam_write_data_tohost
	.align	2
	.type	gbam_write_data_tohost_w, %function
gbam_write_data_tohost_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #-20]
	b	gbam_write_data_tohost(PLT)
	.fnend
	.size	gbam_write_data_tohost_w, .-gbam_write_data_tohost_w
	.align	2
	.type	gbam_epin_complete, %function
gbam_epin_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r5, [r0]
	ldr	r7, [r1, #32]
	cmn	r2, #104
	beq	.L2588
	cmp	r2, #0
	beq	.L2589
	cmn	r2, #108
	beq	.L2588
	ldr	r1, .L2602
	ldr	r0, .L2602+4
.LPIC538:
	add	r1, pc, r1
.LPIC537:
	add	r0, pc, r0
	add	r1, r1, #744
	bl	printk(PLT)
.L2589:
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	cmp	r5, #0
	beq	.L2586
	add	r6, r5, #8
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r5, #32]
	add	r2, r4, #36
	add	r1, r5, #28
	mov	r0, r6
	str	r2, [r5, #32]
	str	r1, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock(PLT)
	ldr	r3, .L2602+8
	add	r1, r5, #96
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
.LPIC539:
	add	r3, pc, r3
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r0, [r3, #-616]
	b	queue_work(PLT)
.L2588:
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L2586:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2603:
	.align	2
.L2602:
	.word	.LANCHOR3-(.LPIC538+8)
	.word	.LC145-(.LPIC537+8)
	.word	.LANCHOR4-(.LPIC539+8)
	.fnend
	.size	gbam_epin_complete, .-gbam_epin_complete
	.align	2
	.type	ghsic_data_receive, %function
ghsic_data_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L2605
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L2605
	add	r6, r4, #48
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, .L2617
	add	r1, r4, #32
	mov	r7, r0
	ldr	r3, [r4, #36]
.LPIC540:
	add	r2, pc, r2
	stmia	r5, {r1, r3}
	str	r5, [r3]
	ldr	r3, [r4, #40]
	ldr	r1, [r2, #340]
	str	r5, [r4, #36]
	add	r3, r3, #1
	cmp	r1, #0
	str	r3, [r4, #40]
	beq	.L2608
	ldr	r2, [r2, #344]
	cmp	r2, r3
	bls	.L2616
.L2608:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #84]
	add	r1, r4, #136
	bl	queue_work(PLT)
	mov	r0, #0
.L2607:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2605:
	mov	r0, r5
	bl	dev_kfree_skb_any(PLT)
	mvn	r0, #106
	b	.L2607
.L2616:
	mov	r0, #2
	add	r1, r4, #164
	bl	_set_bit(PLT)
	ldr	r3, [r4, #196]
	mov	r0, r6
	mov	r1, r7
	add	r3, r3, #1
	str	r3, [r4, #196]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #84]
	add	r1, r4, #136
	bl	queue_work(PLT)
	mvn	r0, #15
	b	.L2607
.L2618:
	.align	2
.L2617:
	.word	.LANCHOR1-(.LPIC540+8)
	.fnend
	.size	ghsic_data_receive, .-ghsic_data_receive
	.align	2
	.type	eth_start_xmit, %function
eth_start_xmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r7, r1, #1216
	strd	r8, [sp, #16]
	mov	r0, r7
	mov	r9, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r9, #1220]
	mov	r1, r0
	cmp	r2, #0
	beq	.L2620
	ldr	r8, [r2, #80]
	mov	r0, r7
	ldrb	r3, [r2, #116]	@ zero_extendqisi2
	ldrh	r10, [r2, #90]
	str	r3, [sp, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r8, #0
	beq	.L2632
	add	r6, r9, #1232
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp, #4]
	str	r0, [sp, #8]
	cmp	r3, #0
	beq	.L2623
	ldr	r2, [r9, #1264]
	cmp	r2, #0
	beq	.L2679
.L2623:
	ldr	r1, [sp, #8]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	tst	r10, #1
	bne	.L2630
	ldr	r2, [r5, #172]
	ldrb	r1, [r2]	@ zero_extendqisi2
	tst	r1, #1
	bne	.L2680
.L2630:
	mov	r0, r6
	add	r4, r7, #20
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	fp, [r9, #1236]
	mov	r10, r0
	cmp	r4, fp
	beq	.L2681
	ldr	r2, [fp, #4]
	mov	lr, #256
	mov	r0, #512
	ldr	r1, [fp]
	sub	r3, fp, #36
	str	r3, [sp, #8]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	lr, [fp]
	str	r0, [fp, #4]
	ldr	r2, [r9, #1236]
	cmp	r4, r2
	beq	.L2682
.L2634:
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r9, #1296]
	mov	r10, r0
	cmp	r2, #0
	beq	.L2636
	ldr	r0, [r9, #1220]
	cmp	r0, #0
	beq	.L2637
	mov	r1, r5
	blx	r2
	mov	r5, r0
.L2637:
	cmp	r5, #0
	beq	.L2683
.L2636:
	ldr	r3, [sp, #4]
	cmp	r3, #0
	bne	.L2684
	mov	r0, r7
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r2, [r5, #172]
	ldr	r7, [r5, #80]
	str	r5, [fp, #-4]
	str	r2, [fp, #-36]
.L2642:
	ldr	r2, [r9, #1220]
	ldrb	r1, [r2, #96]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L2654
	ldr	r2, [r2, #104]
	cmp	r7, r2
	beq	.L2685
.L2654:
	mov	r1, #1
.L2643:
	ldrb	r2, [fp, #-10]	@ zero_extendqisi2
	bfi	r2, r1, #1, #1
	uxtb	r1, r2
	strb	r2, [fp, #-10]
	tst	r1, #2
	beq	.L2644
	ldrb	r2, [r9, #1340]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L2644
	ldrh	r0, [r8, #20]
	sdiv	r2, r7, r0
	mls	r2, r0, r2, r7
	cmp	r2, #0
	bne	.L2644
	bfi	r1, r2, #1, #1
	add	r7, r7, #1
	strb	r1, [fp, #-10]
.L2644:
	str	r7, [fp, #-32]
	ldr	r2, [r9, #1228]
	ldr	r1, [r2, #20]
	cmp	r1, #2
	bls	.L2645
	ldr	r2, [r2, #16]
	sub	r2, r2, #3
	bics	r2, r2, #2
	beq	.L2686
.L2645:
	ldrb	r2, [fp, #-10]	@ zero_extendqisi2
	bfc	r2, #0, #1
	strb	r2, [fp, #-10]
.L2647:
	ldr	lr, [r8, #8]
	mov	r0, r8
	mov	r2, #32
	ldr	r1, [sp, #8]
	ldr	r7, [lr, #16]
	blx	r7
	cmp	r0, #0
	bne	.L2677
	ldr	r2, .L2692
.LPIC546:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	ldr	r2, [r2]
	str	r2, [r9, #604]
.L2676:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2684:
	ldr	lr, [fp, #-36]
	ldr	r0, [fp, #-32]
	ldr	r1, [r9, #1220]
	ldr	r2, [r9, #1284]
	add	r0, lr, r0
	ldr	r1, [r1, #136]
	bl	memcpy(PLT)
	ldr	lr, [r9, #1284]
	mov	r0, r7
	mov	r1, r10
	ldr	r2, [fp, #-32]
	add	r2, r2, lr
	str	r2, [fp, #-32]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	lr, [fp, #-36]
	ldr	r0, [fp, #-32]
	ldr	r1, [r5, #172]
	ldr	r2, [r5, #80]
	add	r0, lr, r0
	bl	memcpy(PLT)
	ldr	r1, [fp, #-32]
	mov	r0, r5
	ldr	r2, [r5, #80]
	add	r2, r2, r1
	mov	r7, r2
	str	r2, [fp, #-32]
	bl	dev_kfree_skb_any(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r9, #1260]
	mov	r1, r0
	ldr	r0, [r9, #1292]
	add	r2, r2, #1
	cmp	r2, r0
	str	r2, [r9, #1260]
	ldr	r2, [r9, #1256]
	bcs	.L2641
	cmp	r2, #5
	bgt	.L2687
.L2641:
	add	r2, r2, #1
	mov	lr, #0
	mov	r0, r6
	str	r2, [r9, #1256]
	str	lr, [r9, #1260]
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L2642
.L2680:
	ldrb	fp, [r2, #1]	@ zero_extendqisi2
	ldrb	r4, [r2, #2]	@ zero_extendqisi2
	ldrb	lr, [r2, #3]	@ zero_extendqisi2
	ldrb	ip, [r2, #4]	@ zero_extendqisi2
	ldrb	r0, [r2, #5]	@ zero_extendqisi2
	and	r1, r1, fp
	and	r2, r1, r4
	and	r2, r2, lr
	and	r2, r2, ip
	and	r2, r2, r0
	cmp	r2, #255
	moveq	r2, #8
	movne	r2, #2
	tst	r2, r10
	bne	.L2630
.L2632:
	mov	r0, r5
	bl	dev_kfree_skb_any(PLT)
	mov	r0, #0
	b	.L2676
.L2677:
	ldr	r3, [sp, #4]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [fp, #-32]
	beq	.L2688
.L2638:
	ldr	r1, [r9, #1224]
	mov	r0, r6
	ldr	r2, [r1, #212]
	add	r2, r2, #1
	str	r2, [r1, #212]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r9, #1236]
	mov	r5, r0
	cmp	r4, r2
	beq	.L2689
.L2651:
	ldr	r2, [r9, #1240]
	mov	r0, r6
	str	fp, [r9, #1240]
	mov	r1, r5
	str	r4, [fp]
	str	r2, [fp, #4]
	str	fp, [r2]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L2676
.L2679:
	ldr	r1, [r9, #1224]
	add	fp, r7, #20
	ldr	r0, [r9, #1292]
	ldr	r4, [r9, #1236]
	ldr	r1, [r1, #316]
	cmp	r4, fp
	add	r1, r1, #80
	mul	r1, r0, r1
	str	r1, [r9, #1264]
	bne	.L2625
	b	.L2623
.L2626:
	str	r2, [r4, #-4]
	ldr	r4, [r4]
	cmp	r4, fp
	beq	.L2623
.L2625:
	ldr	r1, [r4, #-36]
	cmp	r1, #0
	bne	.L2626
	ldr	r0, [r9, #1264]
	movw	r1, #32800
	str	r2, [sp, #12]
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r4, #-36]
	ldr	r2, [sp, #12]
	bne	.L2626
.L2627:
	ldr	r5, [r9, #1236]
	str	r0, [r9, #1264]
	cmp	r5, fp
	beq	.L2628
	mov	r4, r0
.L2629:
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	str	r4, [r5, #-36]
	ldr	r5, [r5]
	cmp	r5, fp
	bne	.L2629
.L2628:
	mov	r0, r6
	ldr	r1, [sp, #8]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #11
	b	.L2676
.L2686:
	ldr	r0, .L2692+4
	ldr	r1, [r9, #1252]
.LPIC544:
	add	r0, pc, r0
	ldr	r0, [r0, #348]
	add	r1, r1, #1
	str	r1, [r9, #1252]
	cmp	r1, r0, lsr #1
	beq	.L2690
	ldrb	r2, [fp, #-10]	@ zero_extendqisi2
	orr	r2, r2, #1
	strb	r2, [fp, #-10]
	b	.L2647
.L2620:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r5
	bl	dev_kfree_skb_any(PLT)
	mov	r0, #0
	b	.L2676
.L2682:
	ldr	r1, [r9, #576]
	cmp	r1, #0
	beq	.L2691
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit(PLT)
	b	.L2634
.L2681:
	mov	r0, r6
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #16
	b	.L2676
.L2688:
	mov	r0, r5
	bl	dev_kfree_skb_any(PLT)
	b	.L2638
.L2685:
	ldrh	r1, [r8, #20]
	sdiv	r2, r7, r1
	mls	r1, r1, r2, r7
	adds	r1, r1, #0
	movne	r1, #1
	b	.L2643
.L2687:
	ldr	r2, [r9, #1236]
	mov	r0, r6
	str	fp, [r2, #4]
	stmia	fp, {r2, r4}
	str	fp, [r9, #1236]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L2676
.L2690:
	ldrb	r1, [fp, #-10]	@ zero_extendqisi2
	bfi	r1, r2, #0, #1
	strb	r1, [fp, #-10]
	str	r2, [r9, #1252]
	b	.L2647
.L2683:
	mov	r0, r7
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L2638
.L2689:
	ldr	r1, [r9, #576]
	mov	r0, #0
	add	r1, r1, #80
	bl	_clear_bit(PLT)
	b	.L2651
.L2691:
	ldr	r0, .L2692+8
	movw	r1, #1847
.LPIC542:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r0, .L2692+12
.LPIC543:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2634
.L2693:
	.align	2
.L2692:
	.word	jiffies(GOT_PREL)+(.-(.LPIC546+8))
	.word	.LANCHOR1-(.LPIC544+8)
	.word	.LC82-(.LPIC542+8)
	.word	.LC83-(.LPIC543+8)
	.fnend
	.size	eth_start_xmit, .-eth_start_xmit
	.align	2
	.type	rmnet_mux_sdio_data_rx_work, %function
rmnet_mux_sdio_data_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #124
	sub	r7, r0, #16
	strd	r10, [sp, #24]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r8, [r0, #-156]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #-16]
	mov	fp, r0
	cmp	r4, r7
	cmpne	r4, #0
	beq	.L2695
	ldr	r9, .L2702
	mov	r10, #0
.LPIC547:
	add	r9, pc, r9
.L2696:
	ldr	r3, [r5, #-8]
	mov	r1, fp
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r5, #-8]
	ldrd	r2, [r4]
	str	r10, [r4]
	str	r10, [r4, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	fp, r0
	ldr	r0, [r8]
	mov	r1, r9
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	ldr	r4, [r5, #-16]
	cmp	r4, r7
	cmpne	r4, #0
	bne	.L2696
.L2695:
	mov	r0, r6
	mov	r1, fp
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L2703:
	.align	2
.L2702:
	.word	.LC146-(.LPIC547+8)
	.fnend
	.size	rmnet_mux_sdio_data_rx_work, .-rmnet_mux_sdio_data_rx_work
	.align	2
	.type	ghsuart_data_write_tomdm, %function
ghsuart_data_write_tomdm:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #144
	bxeq	lr
	ldr	r3, [r0, #-140]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #40
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #40]
	mov	r8, r0
	ubfx	r3, r3, #1, #1
	cmp	r3, #0
	movne	r0, r7
	movne	r1, r8
	bne	.L2738
	mov	r2, r5
	ldr	r4, [r2, #-56]!
	cmp	r4, r2
	cmpne	r4, #0
	beq	.L2707
	ldr	r2, [r5, #-48]
	ldr	r6, .L2745
	ldr	r0, .L2745+4
	sub	r2, r2, #1
.LPIC551:
	add	r6, pc, r6
	str	r2, [r5, #-48]
	ldr	ip, [r4]
.LPIC550:
	add	r0, pc, r0
	ldr	r2, [r4, #4]
	add	r6, r6, #764
	str	r3, [r4]
	str	r3, [r4, #4]
	mov	r1, r6
	add	r0, r0, #352
	str	r2, [ip, #4]
	str	ip, [r2]
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L2741
.L2709:
	ldr	r3, [r5, #68]
	mov	r0, r4
	add	r3, r3, #1
	str	r3, [r5, #68]
	bl	dev_kfree_skb_any(PLT)
.L2707:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r8, [r5, #-132]
	mov	fp, r0
	cmp	r8, #0
	beq	.L2712
	ldr	r3, [r5, #40]
	tst	r3, #2
	bne	.L2712
	ldr	r9, .L2745+8
	sub	r3, r5, #64
	str	r3, [sp, #4]
.LPIC552:
	add	r9, pc, r9
	b	.L2713
.L2743:
	ldr	r4, [r5, #-64]
	ldr	r0, [sp, #4]
	sub	r10, r4, #36
	cmp	r4, r0
	beq	.L2712
	ldr	r0, [r9, #376]
	bl	__alloc_skb(PLT)
	subs	r6, r0, #0
	mov	lr, #256
	mov	r2, #512
	mov	r1, fp
	mov	r0, r7
	beq	.L2712
	ldr	ip, [r4]
	ldr	r3, [r4, #4]
	str	r3, [ip, #4]
	str	ip, [r3]
	str	lr, [r4]
	str	r2, [r4, #4]
	ldr	r3, [r6, #172]
	str	r3, [r4, #-36]
	ldr	r3, [r9, #376]
	str	r6, [r4, #-4]
	str	r3, [r4, #-32]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r8, #8]
	mov	r1, r10
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	str	r0, [sp]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp]
	mov	fp, r0
	cmp	r3, #0
	bne	.L2742
.L2713:
	ldr	r0, [r5, #-140]
	mov	r2, #0
	mvn	r3, #0
	mov	r1, #32
	cmp	r0, r2
	bne	.L2743
.L2712:
	mov	r0, r7
	mov	r1, fp
.L2738:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L2742:
	mov	r0, r6
	ldr	r6, .L2745+12
	bl	dev_kfree_skb_any(PLT)
	add	r0, r9, #380
.LPIC555:
	add	r6, pc, r6
	add	r6, r6, #792
	mov	r1, r6
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L2744
.L2714:
	ldr	r3, [r5, #-140]
	cmp	r3, #0
	beq	.L2715
	ldr	r3, [r5, #-64]
	str	r4, [r3, #4]
	str	r3, [r4]
	ldr	r3, [sp, #4]
	str	r3, [r4, #4]
	str	r4, [r5, #-64]
	b	.L2712
.L2715:
	ldr	r3, [r8, #8]
	mov	r1, r10
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L2712
.L2744:
	ldr	r0, .L2745+16
	mov	r1, r6
.LPIC556:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2714
.L2741:
	ldr	r0, .L2745+20
	mov	r1, r6
	mvn	r2, #18
.LPIC548:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2709
.L2746:
	.align	2
.L2745:
	.word	.LANCHOR3-(.LPIC551+8)
	.word	.LANCHOR1-(.LPIC550+8)
	.word	.LANCHOR1-(.LPIC552+8)
	.word	.LANCHOR3-(.LPIC555+8)
	.word	.LC147-(.LPIC556+8)
	.word	.LC85-(.LPIC548+8)
	.fnend
	.size	ghsuart_data_write_tomdm, .-ghsuart_data_write_tomdm
	.align	2
	.type	rmnet_sdio_unbind, %function
rmnet_sdio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	add	r0, r1, #244
	mov	r4, r1
	str	lr, [sp, #4]
	bl	cancel_delayed_work_sync(PLT)
	ldr	r0, [r4, #192]
	bl	destroy_workqueue(PLT)
	ldr	r2, [r4, #308]
	mov	r3, #0
	str	r3, [r4, #88]
	str	r3, [r4, #84]
	tst	r2, #2
	str	r3, [r4, #80]
	bne	.L2757
.L2748:
	ldr	r3, [r4, #312]
	tst	r3, #2
	beq	.L2749
	mov	r0, #1
	add	r1, r4, #312
	bl	_clear_bit(PLT)
.L2749:
	ldr	r0, [r4, #340]
	bl	debugfs_remove_recursive(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
.L2757:
	mov	r0, #1
	add	r1, r4, #308
	bl	_clear_bit(PLT)
	b	.L2748
	.fnend
	.size	rmnet_sdio_unbind, .-rmnet_sdio_unbind
	.align	2
	.type	grmnet_ctrl_smd_connect_w, %function
grmnet_ctrl_smd_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #-104]
	ldr	r5, [r0, #-12]
	tst	r3, #2
	bne	.L2759
	ldr	r3, [r0, #-104]
	tst	r3, #4
	beq	.L2768
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2759:
	ldr	r3, .L2769
	sub	r1, r0, #112
	mov	r2, r1
	ldr	r0, [r0, #-108]
.LPIC559:
	add	r3, pc, r3
	bl	smd_open(PLT)
	cmp	r0, #0
	beq	.L2761
	cmn	r0, #11
	bne	.L2762
	ldr	r3, .L2769+4
	mov	r0, #250
.LPIC560:
	add	r3, pc, r3
	ldr	r5, [r3, #-648]
	bl	msecs_to_jiffies(PLT)
	mov	r2, r0
	mov	r1, r4
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	mov	r0, r5
	ldr	lr, [sp, #20]
	ldrd	r4, [sp]
	add	sp, sp, #24
	b	queue_delayed_work(PLT)
.L2768:
	sub	r1, r0, #104
	mov	r0, #2
	bl	_set_bit(PLT)
	ldr	r0, .L2769+8
	mov	r3, #84
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC558:
	add	r0, pc, r0
	mla	r0, r3, r5, r0
	ldrd	r4, [sp]
	add	sp, sp, #24
	add	r0, r0, #536
	b	platform_driver_register(PLT)
.L2761:
	sub	r5, r4, #4
	ldr	r6, [r4, #-24]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #-8]
	mov	r7, r0
	cmp	r3, #0
	beq	.L2763
	orr	r2, r6, #4
	ldr	r0, [r4, #-112]
	mov	r1, r6
	mvn	r2, r2
	bl	smd_tiocmset(PLT)
.L2763:
	mov	r0, r5
	mov	r1, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L2762:
	ldr	r1, .L2769+12
	mov	r3, r0
	ldr	r0, .L2769+16
	ldr	r2, [r4, #-108]
	ldrd	r6, [sp, #8]
.LPIC562:
	add	r1, pc, r1
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
.LPIC561:
	add	r0, pc, r0
	add	r1, r1, #816
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk(PLT)
.L2770:
	.align	2
.L2769:
	.word	grmnet_ctrl_smd_notify-(.LPIC559+8)
	.word	.LANCHOR4-(.LPIC560+8)
	.word	.LANCHOR2-(.LPIC558+8)
	.word	.LANCHOR3-(.LPIC562+8)
	.word	.LC148-(.LPIC561+8)
	.fnend
	.size	grmnet_ctrl_smd_connect_w, .-grmnet_ctrl_smd_connect_w
	.align	2
	.type	rmnet_mux_open_sdio_work, %function
rmnet_mux_open_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L2775
	ldr	r1, [r0, #-172]
.LPIC563:
	add	r2, pc, r2
	ldr	r3, [r2, #-612]
	cmp	r3, #90
	bgt	.L2774
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r3, r3, #1
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #120]
	mov	r0, #2000
	str	r3, [r2, #-612]
	bl	msecs_to_jiffies(PLT)
	mov	r2, r0
	mov	r1, r4
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_delayed_work(PLT)
.L2774:
	ldr	r0, [r1]
	ldr	r1, .L2775+4
	add	r0, r0, #32
.LPIC564:
	add	r1, pc, r1
	b	dev_err(PLT)
.L2776:
	.align	2
.L2775:
	.word	.LANCHOR4-(.LPIC563+8)
	.word	.LC149-(.LPIC564+8)
	.fnend
	.size	rmnet_mux_open_sdio_work, .-rmnet_mux_open_sdio_work
	.align	2
	.type	gbam_start_rx, %function
gbam_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #4
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #12]
	mov	r7, r0
	cmp	r3, #0
	beq	.L2781
	ldr	r9, .L2804
	ldr	fp, .L2804+4
	ldr	r8, [r3, #80]
	add	r3, r5, #52
.LPIC568:
	add	r9, pc, r9
	str	r3, [sp, #12]
	mov	r3, r9
.LPIC566:
	add	fp, pc, fp
	mov	r9, r0
	mov	r7, r3
.L2779:
	ldr	r4, [r5, #52]
	mvn	r3, #0
	mov	r2, #0
	ldr	r0, [sp, #12]
	mov	r1, #32
	cmp	r0, r4
	sub	r0, r4, #36
	str	r0, [sp, #4]
	beq	.L2800
	ldr	r0, [fp, #404]
	cmp	r0, #0
	beq	.L2780
	ldr	lr, [r5, #68]
	ldr	r0, [fp, #408]
	cmp	lr, r0
	bcs	.L2800
.L2780:
	ldr	r0, [r7, #412]
	add	r0, r0, #8
	bl	__alloc_skb(PLT)
	subs	r10, r0, #0
	mov	lr, #256
	mov	r2, #512
	mov	r1, r9
	mov	r0, r6
	beq	.L2800
	ldr	ip, [r10, #172]
	ldr	r3, [r10, #160]
	add	ip, ip, #8
	add	r3, r3, #8
	str	ip, [r10, #172]
	str	r3, [r10, #160]
	ldr	ip, [r4]
	ldr	r3, [r4, #4]
	str	r3, [ip, #4]
	str	ip, [r3]
	str	lr, [r4]
	str	r2, [r4, #4]
	ldr	r3, [r10, #172]
	str	r3, [r4, #-36]
	ldr	r3, [r7, #412]
	str	r10, [r4, #-4]
	str	r3, [r4, #-32]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r8, #8]
	mov	r2, #32
	mov	r0, r8
	ldr	r1, [sp, #4]
	ldr	r3, [r3, #16]
	blx	r3
	str	r0, [sp, #8]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp, #8]
	mov	r9, r0
	cmp	r3, #0
	bne	.L2802
	ldr	r3, [r5, #12]
	cmp	r3, #0
	bne	.L2779
.L2800:
	mov	r7, r9
.L2781:
	mov	r0, r6
	mov	r1, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L2802:
	ldr	fp, .L2804+8
	mov	r2, r3
	mov	r3, r10
	mov	r7, r0
	mov	r0, r3
	mov	r10, r2
	bl	dev_kfree_skb_any(PLT)
.LPIC570:
	add	fp, pc, fp
	add	fp, fp, #844
	mov	r0, fp
	bl	__printk_ratelimit(PLT)
	cmp	r0, #0
	bne	.L2803
.L2783:
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L2784
	ldr	r3, [r5, #52]
	str	r4, [r3, #4]
	str	r3, [r4]
	ldr	r3, [sp, #12]
	str	r3, [r4, #4]
	str	r4, [r5, #52]
	b	.L2781
.L2784:
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r1, [sp, #4]
	ldr	r3, [r3, #12]
	blx	r3
	b	.L2781
.L2803:
	ldr	r0, .L2804+12
	mov	r1, fp
	mov	r2, r10
.LPIC571:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2783
.L2805:
	.align	2
.L2804:
	.word	.LANCHOR1-(.LPIC568+8)
	.word	.LANCHOR1-(.LPIC566+8)
	.word	.LANCHOR3-(.LPIC570+8)
	.word	.LC150-(.LPIC571+8)
	.fnend
	.size	gbam_start_rx, .-gbam_start_rx
	.align	2
	.type	gbam_epout_complete, %function
gbam_epout_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r7, [r1, #44]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0]
	ldr	r8, [r1, #32]
	cmn	r7, #104
	beq	.L2808
	cmp	r7, #0
	beq	.L2809
	cmn	r7, #108
	beq	.L2808
	ldr	r9, .L2837
.LPIC574:
	add	r9, pc, r9
	add	r9, r9, #860
	mov	r0, r9
	bl	__printk_ratelimit(PLT)
	cmp	r0, #0
	bne	.L2835
.L2811:
	mov	r0, r8
	add	r9, r5, #4
	bl	dev_kfree_skb_any(PLT)
	mov	r0, r9
	bl	_raw_spin_lock(PLT)
.L2810:
	ldr	r3, .L2837+4
.LPIC577:
	add	r3, pc, r3
	ldr	r2, [r3, #404]
	cmp	r2, #0
	beq	.L2812
	ldr	r3, [r3, #408]
	ldr	r2, [r5, #68]
	cmp	r2, r3
	bcc	.L2812
	ldr	r3, [r5, #276]
	cmp	r3, #0
	bne	.L2834
	ldr	r3, [r5, #272]
	mov	r2, #1
	str	r2, [r5, #276]
	add	r3, r3, r2
	str	r3, [r5, #272]
.L2834:
	ldr	r3, [r5, #56]
	add	r2, r4, #36
	add	r1, r5, #52
	mov	r0, r9
	str	r2, [r5, #56]
	str	r1, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock(PLT)
.L2808:
	mov	r0, r8
	bl	dev_kfree_skb_any(PLT)
	mov	r3, #0
	mov	r1, r4
	mov	r0, r6
	str	r3, [r4]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L2812:
	ldr	r8, .L2837+8
	mov	r0, r9
	bl	_raw_spin_unlock(PLT)
	mov	r1, #32
	mov	r2, #0
	mvn	r3, #0
.LPIC579:
	add	r8, pc, r8
	ldr	r0, [r8, #412]
	add	r0, r0, #8
	bl	__alloc_skb(PLT)
	subs	r7, r0, #0
	beq	.L2816
	ldr	r3, [r7, #172]
	mov	r0, r6
	mov	r1, r4
	ldr	ip, [r7, #160]
	mov	r2, #32
	add	r3, r3, #8
	add	ip, ip, #8
	str	r3, [r7, #172]
	str	ip, [r7, #160]
	str	r3, [r4]
	ldr	r3, [r8, #412]
	str	r7, [r4, #32]
	str	r3, [r4, #4]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r8, r0, #0
	bne	.L2836
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L2809:
	ldr	r1, [r1, #48]
	mov	r0, r8
	add	r9, r5, #4
	bl	skb_put(PLT)
	mov	r0, r9
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r5, #64]
	add	r0, r5, #60
	add	r1, r5, #80
	ldr	r2, .L2837+12
	stmia	r8, {r0, r3}
	str	r8, [r3]
	ldr	r3, [r5, #68]
.LPIC573:
	add	r2, pc, r2
	str	r8, [r5, #64]
	ldr	r0, [r2, #-616]
	add	r3, r3, #1
	str	r3, [r5, #68]
	bl	queue_work(PLT)
	b	.L2810
.L2836:
	ldr	r6, .L2837+16
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
.LPIC581:
	add	r6, pc, r6
	add	r6, r6, #860
	mov	r0, r6
	bl	__printk_ratelimit(PLT)
	cmp	r0, #0
	beq	.L2816
	ldr	r0, .L2837+20
	mov	r1, r6
	mov	r2, r8
.LPIC582:
	add	r0, pc, r0
	bl	printk(PLT)
.L2816:
	mov	r0, r9
	bl	_raw_spin_lock(PLT)
	b	.L2834
.L2835:
	ldr	lr, [r4, #48]
	mov	r1, r9
	mov	r3, r7
	ldr	ip, [r4, #4]
	ldr	r0, .L2837+24
	ldr	r2, [r6, #4]
	str	lr, [sp]
	str	ip, [sp, #4]
.LPIC575:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2811
.L2838:
	.align	2
.L2837:
	.word	.LANCHOR3-(.LPIC574+8)
	.word	.LANCHOR1-(.LPIC577+8)
	.word	.LANCHOR1-(.LPIC579+8)
	.word	.LANCHOR4-(.LPIC573+8)
	.word	.LANCHOR3-(.LPIC581+8)
	.word	.LC152-(.LPIC582+8)
	.word	.LC151-(.LPIC575+8)
	.fnend
	.size	gbam_epout_complete, .-gbam_epout_complete
	.align	2
	.type	usb_rmnet_mux_ctrl_ioctl, %function
usb_rmnet_mux_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #65024
	ldr	ip, [r0, #124]
	movt	r3, 32772
	cmp	r1, r3
	bne	.L2841
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	movne	r0, #4
	beq	.L2843
.L2840:
	bx	lr
.L2843:
	mov	r0, r2
	add	r1, ip, #340
	mov	r2, #4
	b	__copy_to_user(PLT)
.L2841:
	mvn	r0, #18
	b	.L2840
	.fnend
	.size	usb_rmnet_mux_ctrl_ioctl, .-usb_rmnet_mux_ctrl_ioctl
	.align	2
	.type	acc_ioctl, %function
acc_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #19714
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	ip, 16640
	str	r6, [sp, #8]
	cmp	r1, ip
	str	lr, [sp, #12]
	ldr	r3, [r0, #124]
	beq	.L2846
	bls	.L2863
	movw	r0, #19716
	movt	r0, 16640
	cmp	r1, r0
	beq	.L2851
	bcc	.L2852
	movw	r0, #19717
	movt	r0, 16640
	cmp	r1, r0
	beq	.L2853
	movw	r0, #19718
	movt	r0, 16640
	cmp	r1, r0
	addeq	r5, r3, #1360
	addeq	r5, r5, #13
	bne	.L2858
.L2855:
	cmp	r5, #0
	beq	.L2858
	mov	r0, r5
	mov	r6, r2
	bl	strlen(PLT)
	mov	r3, sp
	add	r4, r0, #1
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	movne	r0, r4
	beq	.L2864
.L2856:
	cmp	r0, #0
	moveq	r0, r4
	mvnne	r0, #13
	b	.L2845
.L2863:
	movw	r0, #19720
	cmp	r1, r0
	beq	.L2848
	movw	r0, #19713
	movt	r0, 16640
	cmp	r1, r0
	beq	.L2849
	movw	r2, #19719
	cmp	r1, r2
	beq	.L2865
.L2858:
	mvn	r0, #21
.L2845:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2849:
	add	r5, r3, #93
	b	.L2855
.L2853:
	add	r5, r3, #1104
	add	r5, r5, #13
	b	.L2855
.L2864:
	mov	r0, r6
	mov	r1, r5
	mov	r2, r4
	bl	__copy_to_user(PLT)
	b	.L2856
.L2852:
	add	r5, r3, #604
	add	r5, r5, #1
	b	.L2855
.L2848:
	ldr	r0, [r3, #1640]
	b	.L2845
.L2865:
	ldr	r0, [r3, #1636]
	b	.L2845
.L2851:
	add	r5, r3, #860
	add	r5, r5, #1
	b	.L2855
.L2846:
	add	r5, r3, #348
	add	r5, r5, #1
	b	.L2855
	.fnend
	.size	acc_ioctl, .-acc_ioctl
	.align	2
	.type	rmnet_ctrl_ioctl, %function
rmnet_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r4, [r0, #124]
	.pad #12
	sub	sp, sp, #12
	add	r5, r4, #28
#APP
@ 61 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r0, r3, [r5]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L2867
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #15
.L2875:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L2867:
	movw	r3, #29186
	mov	r0, r2
	movt	r3, 32772
	cmp	r1, r3
	bne	.L2879
	ldr	r2, [r4, #12]
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	str	r2, [sp, #4]
#APP
@ 448 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r2, r0, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2870
.L2872:
	ldr	r0, .L2880
.LPIC584:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #13
.L2871:
	ldr	r3, [r4, #12]
.L2873:
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	b	.L2875
.L2870:
	add	r1, sp, #4
	mov	r2, #4
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	beq	.L2871
	b	.L2872
.L2879:
	ldr	r0, .L2880+4
.LPIC585:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #21
	b	.L2873
.L2881:
	.align	2
.L2880:
	.word	.LC153-(.LPIC584+8)
	.word	.LC154-(.LPIC585+8)
	.fnend
	.size	rmnet_ctrl_ioctl, .-rmnet_ctrl_ioctl
	.align	2
	.type	rndis_qc_ioctl, %function
rndis_qc_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L2899
	mov	r7, r1
	str	r8, [sp, #16]
	mov	r8, r2
	mov	r2, r1
	str	lr, [sp, #20]
	ldr	r4, [r0, #124]
	ldr	r0, .L2899+4
.LPIC587:
	add	r6, pc, r6
	add	r6, r6, #880
	mov	r1, r6
	add	r5, r4, #140
.LPIC586:
	add	r0, pc, r0
	bl	printk(PLT)
#APP
@ 61 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r5]
	add	r2, r2, #1
	strex	r3, r2, [r5]
	teq	r3, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #1
	beq	.L2883
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #15
.L2894:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2883:
	movw	r3, #26881
	movt	r3, 32769
	cmp	r7, r3
	beq	.L2885
	movw	r3, #26882
	movt	r3, 32772
	cmp	r7, r3
	bne	.L2898
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2891
.L2892:
	ldr	r1, .L2899+8
	mvn	r6, #13
	ldr	r0, .L2899+12
.LPIC593:
	add	r1, pc, r1
	add	r1, r1, #880
.LPIC592:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2889
.L2898:
	ldr	r0, .L2899+16
	mov	r1, r6
	mvn	r6, #21
.LPIC594:
	add	r0, pc, r0
	bl	printk(PLT)
.L2889:
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, r6
	b	.L2894
.L2885:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r1, r8, #1; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2886
.L2888:
	ldr	r1, .L2899+20
	mvn	r6, #13
	ldr	r0, .L2899+24
.LPIC589:
	add	r1, pc, r1
.LPIC588:
	add	r0, pc, r0
	add	r1, r1, #880
	bl	printk(PLT)
.L2887:
	ldr	r1, .L2899+28
	ldr	r0, .L2899+32
	ldrb	r2, [r4, #124]	@ zero_extendqisi2
.LPIC591:
	add	r1, pc, r1
	add	r1, r1, #880
.LPIC590:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2889
.L2891:
	mov	r0, r8
	add	r1, r4, #128
	mov	r2, #4
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	bne	.L2892
	mov	r6, r0
	b	.L2889
.L2886:
	mov	r0, r8
	add	r1, r4, #124
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	bne	.L2888
	mov	r6, r0
	b	.L2887
.L2900:
	.align	2
.L2899:
	.word	.LANCHOR3-(.LPIC587+8)
	.word	.LC155-(.LPIC586+8)
	.word	.LANCHOR3-(.LPIC593+8)
	.word	.LC156-(.LPIC592+8)
	.word	.LC158-(.LPIC594+8)
	.word	.LANCHOR3-(.LPIC589+8)
	.word	.LC156-(.LPIC588+8)
	.word	.LANCHOR3-(.LPIC591+8)
	.word	.LC157-(.LPIC590+8)
	.fnend
	.size	rndis_qc_ioctl, .-rndis_qc_ioctl
	.align	2
	.type	mbim_ioctl, %function
mbim_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	add	r5, r4, #88
#APP
@ 61 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r0, r3, [r5]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L2902
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #15
.L2914:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2902:
	movw	r3, #28419
	mov	r0, r2
	movt	r3, 32770
	cmp	r1, r3
	beq	.L2909
	movw	r3, #28418
	movt	r3, 32772
	cmp	r1, r3
	bne	.L2918
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2905
.L2907:
	ldr	r1, .L2919
	mvn	r6, #13
	ldr	r0, .L2919+4
.LPIC597:
	add	r1, pc, r1
.LPIC596:
	add	r0, pc, r0
	add	r1, r1, #896
	bl	printk(PLT)
.L2906:
	ldr	r1, .L2919+8
	ldr	r0, .L2919+12
	ldr	r2, [r4, #216]
.LPIC599:
	add	r1, pc, r1
	add	r1, r1, #896
.LPIC598:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2908
.L2918:
	ldr	r1, .L2919+16
	mvn	r6, #21
	ldr	r0, .L2919+20
.LPIC605:
	add	r1, pc, r1
.LPIC604:
	add	r0, pc, r0
	add	r1, r1, #896
	bl	printk(PLT)
.L2908:
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, r6
	b	.L2914
.L2909:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, #2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2910
.L2912:
	ldr	r1, .L2919+24
	mvn	r6, #13
	ldr	r0, .L2919+28
.LPIC601:
	add	r1, pc, r1
.LPIC600:
	add	r0, pc, r0
	add	r1, r1, #896
	bl	printk(PLT)
.L2911:
	ldr	r1, .L2919+32
	ldr	r0, .L2919+36
	ldrh	r2, [r4, #220]
.LPIC603:
	add	r1, pc, r1
	add	r1, r1, #896
.LPIC602:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2908
.L2905:
	add	r1, r4, #216
	mov	r2, #4
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	bne	.L2907
	mov	r6, r0
	b	.L2906
.L2910:
	add	r1, r4, #220
	mov	r2, #2
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	bne	.L2912
	mov	r6, r0
	b	.L2911
.L2920:
	.align	2
.L2919:
	.word	.LANCHOR3-(.LPIC597+8)
	.word	.LC156-(.LPIC596+8)
	.word	.LANCHOR3-(.LPIC599+8)
	.word	.LC159-(.LPIC598+8)
	.word	.LANCHOR3-(.LPIC605+8)
	.word	.LC161-(.LPIC604+8)
	.word	.LANCHOR3-(.LPIC601+8)
	.word	.LC156-(.LPIC600+8)
	.word	.LANCHOR3-(.LPIC603+8)
	.word	.LC160-(.LPIC602+8)
	.fnend
	.size	mbim_ioctl, .-mbim_ioctl
	.align	2
	.global	usb_rmnet_mux_ctrl_read
	.type	usb_rmnet_mux_ctrl_read, %function
usb_rmnet_mux_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r8, [sp, #16]
	mov	r8, r1
	mov	r9, r2
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #24
	sub	sp, sp, #24
	ldr	r4, [r0, #124]
	mov	r3, sp
	bic	r7, r3, #8128
	bic	r7, r7, #63
.L2922:
	ldr	r3, [r4, #360]
	cmp	r3, #0
	beq	.L2931
	add	r6, r4, #356
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, r4
	mov	r1, r0
	ldr	r5, [r3, #304]!
	cmp	r5, r3
	bne	.L2924
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #304]
	cmp	r5, r3
	bne	.L2922
	ldr	r3, [r4, #360]
	cmp	r3, #0
	beq	.L2922
	ldr	r2, .L2944
	mov	r3, #0
	add	r6, sp, #4
	ldr	r1, [r7, #12]
	add	r10, r4, #312
	str	r3, [sp, #4]
	add	r3, sp, #16
.LPIC609:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L2928
.L2941:
	bl	schedule(PLT)
.L2928:
	mov	r0, r10
	mov	r1, r6
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #304]
	cmp	r5, r3
	bne	.L2926
	ldr	r3, [r4, #360]
	cmp	r3, #0
	beq	.L2926
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2941
	mov	r9, #65024
	mov	r0, r10
	mov	r1, r6
	movt	r9, 65535
	bl	finish_wait(PLT)
.L2939:
	mov	r0, r9
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2931:
	mvn	r9, #18
	b	.L2939
.L2924:
	ldr	r3, [r5, #-4]
	sub	r7, r5, #8
	cmp	r3, r9
	bhi	.L2942
	ldr	r3, [r5, #4]
	mov	lr, #256
	mov	ip, #512
	ldr	r2, [r5]
	mov	r0, r6
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r5]
	str	ip, [r5, #4]
	ldr	r3, [r4, #324]
	sub	r3, r3, #1
	str	r3, [r4, #324]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r3, sp
	ldr	r9, [r5, #-4]
	bic	r3, r3, #8128
	ldr	r1, [r5, #-8]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, r9; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	mov	r0, r9
	beq	.L2943
.L2930:
	ldr	r3, [r4, #408]
	cmp	r0, #0
	movne	r9, r0
	add	r3, r3, #1
	str	r3, [r4, #408]
	ldr	r0, [r5, #-8]
	bl	kfree(PLT)
	mov	r0, r7
	bl	kfree(PLT)
	b	.L2939
.L2926:
	mov	r0, r10
	mov	r1, r6
	bl	finish_wait(PLT)
	b	.L2922
.L2943:
	mov	r0, r8
	mov	r2, r9
	bl	__copy_to_user(PLT)
	b	.L2930
.L2942:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, .L2944+4
	mov	r3, r9
	mvn	r9, #11
	ldr	r0, .L2944+8
	ldr	r2, [r5, #-4]
.LPIC608:
	add	r1, pc, r1
	add	r1, r1, #908
.LPIC607:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2939
.L2945:
	.align	2
.L2944:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC609+8))
	.word	.LANCHOR3-(.LPIC608+8)
	.word	.LC162-(.LPIC607+8)
	.fnend
	.size	usb_rmnet_mux_ctrl_read, .-usb_rmnet_mux_ctrl_read
	.align	2
	.type	rmnet_ctrl_read, %function
rmnet_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r2, #2048
	strd	r10, [sp, #24]
	mov	fp, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r4, [r0, #124]
	str	r1, [sp, #4]
	bhi	.L2963
	add	r10, r4, #20
#APP
@ 61 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r10]
	add	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L2949
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r0, .L2968
.LPIC611:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #15
.L2961:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2949:
	mov	r3, sp
	add	r6, r4, #52
	bic	r9, r3, #8128
	add	r5, r4, #44
	bic	r9, r9, #63
.L2951:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r7, [r4, #44]
	mov	r1, r0
	cmp	r5, r7
	bne	.L2950
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #44]
	cmp	r3, r5
	bne	.L2951
	ldr	r2, .L2968+4
	mov	r3, #0
	add	r7, sp, #12
	ldr	r1, [r9, #12]
	add	r8, r4, #32
	str	r3, [sp, #12]
	add	r3, sp, #24
.LPIC615:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #24]
	str	r3, [sp, #28]
	str	r1, [sp, #16]
	str	r2, [sp, #20]
	b	.L2954
.L2964:
	bl	schedule(PLT)
.L2954:
	mov	r0, r8
	mov	r1, r7
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #44]
	cmp	r5, r3
	bne	.L2952
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2964
	mov	r0, r8
	mov	r1, r7
	bl	finish_wait(PLT)
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, #65024
	movt	r0, 65535
	b	.L2961
.L2952:
	mov	r0, r8
	mov	r1, r7
	bl	finish_wait(PLT)
	b	.L2951
.L2950:
	ldr	r3, [r7, #4]
	mov	lr, #256
	mov	ip, #512
	ldr	r2, [r7]
	mov	r0, r6
	sub	r5, r7, #8
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r7]
	str	ip, [r7, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, [r7, #-4]
	cmp	fp, r1
	bcc	.L2965
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r3, sp
	ldr	r2, [r7, #-4]
	bic	r3, r3, #8128
	ldr	ip, [sp, #4]
	bic	r3, r3, #63
	ldr	r1, [r7, #-8]
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r0, ip, r2; sbcccs r0, r0, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2966
.L2956:
	cmp	r2, #0
	ldreq	r4, [r7, #-4]
	bne	.L2967
.L2958:
	ldr	r0, [r7, #-8]
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r4
	b	.L2961
.L2966:
	mov	r0, ip
	bl	__copy_to_user(PLT)
	mov	r2, r0
	b	.L2956
.L2965:
	ldr	r0, .L2968+8
	mov	r2, fp
.LPIC613:
	add	r0, pc, r0
	bl	printk(PLT)
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r0, [r7, #-8]
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	mvn	r0, #11
	b	.L2961
.L2967:
	ldr	r0, .L2968+12
	mov	r1, r2
	mvn	r4, #13
.LPIC614:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2958
.L2963:
	ldr	r0, .L2968+16
	mov	r1, r2
	mov	r2, #2048
.LPIC610:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #21
	b	.L2961
.L2969:
	.align	2
.L2968:
	.word	.LC164-(.LPIC611+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC615+8))
	.word	.LC165-(.LPIC613+8)
	.word	.LC166-(.LPIC614+8)
	.word	.LC163-(.LPIC610+8)
	.fnend
	.size	rmnet_ctrl_read, .-rmnet_ctrl_read
	.align	2
	.type	acc_read, %function
acc_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #28
	sub	sp, sp, #28
	ldrb	r3, [r4, #92]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L2984
	mov	r5, r2
	ldr	r2, [r4, #88]
	ands	r3, r3, #1
	mov	r9, r1
	ldrh	r10, [r2, #20]
	bne	.L2972
	ldr	r2, .L3002
	mov	r1, sp
	str	r3, [sp, #4]
	bic	r6, r1, #8128
	add	r3, sp, #16
	bic	r6, r6, #63
	add	r8, r4, #1648
	ldr	r1, [r6, #12]
	add	r8, r8, #8
	add	r7, sp, #4
.LPIC618:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L2975
.L2998:
	bl	schedule(PLT)
.L2975:
	mov	r0, r8
	mov	r1, r7
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldrb	r3, [r4, #92]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L2973
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2998
	mov	r0, r8
	mov	r1, r7
	bl	finish_wait(PLT)
	mov	r0, #65024
	movt	r0, 65535
.L2996:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2973:
	mov	r0, r8
	mov	r1, r7
	bl	finish_wait(PLT)
.L2972:
	ldr	r3, [r4, #1688]
	cmp	r5, #16384
	movcs	r5, #16384
	cmp	r3, #0
	beq	.L2976
	ldr	r6, [r4, #1680]
.L2977:
	ldrb	r3, [r4, #92]	@ zero_extendqisi2
	mov	r2, #0
	str	r2, [r4, #1688]
	tst	r3, #1
	beq	.L2982
	ldr	r3, [r6, #48]
	cmp	r3, r2
	bne	.L2999
.L2976:
	ldr	r6, [r4, #1680]
	sub	r2, r10, #1
	rsb	r3, r10, #0
	add	r2, r2, r5
	mov	ip, #0
	and	r3, r3, r2
	mov	r2, #208
	str	r3, [r6, #4]
	ldr	r0, [r4, #88]
	mov	r1, r6
	str	ip, [r4, #1688]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L2982
	ldr	r3, [r4, #1688]
	cmp	r3, #0
	bne	.L2977
	ldr	r2, .L3002+4
	mov	r1, sp
	str	r3, [sp, #4]
	bic	r8, r1, #8128
	add	r3, sp, #16
	bic	r8, r8, #63
	add	fp, r4, #1648
	ldr	r1, [r8, #12]
	add	fp, fp, #8
	add	r7, sp, #4
.LPIC617:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L2981
.L3000:
	bl	schedule(PLT)
.L2981:
	mov	r0, fp
	mov	r1, r7
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #1688]
	cmp	r3, #0
	bne	.L2979
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3000
	mov	r0, fp
	mov	r1, r7
	bl	finish_wait(PLT)
	ldr	r0, [r4, #88]
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	mov	r0, #65024
	movt	r0, 65535
	b	.L2996
.L2982:
	mvn	r0, #4
	b	.L2996
.L2999:
	mov	r2, sp
	cmp	r5, r3
	ldr	r1, [r6]
	bic	r2, r2, #8128
	movcs	r5, r3
	bic	r2, r2, #63
	ldr	r3, [r2, #8]
#APP
@ 448 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	movne	r0, r5
	beq	.L3001
.L2983:
	cmp	r0, #0
	moveq	r0, r5
	mvnne	r0, #13
	b	.L2996
.L2984:
	mvn	r0, #18
	b	.L2996
.L2979:
	mov	r0, fp
	mov	r1, r7
	bl	finish_wait(PLT)
	b	.L2977
.L3001:
	mov	r0, r9
	mov	r2, r5
	bl	__copy_to_user(PLT)
	b	.L2983
.L3003:
	.align	2
.L3002:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC618+8))
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC617+8))
	.fnend
	.size	acc_read, .-acc_read
	.align	2
	.type	ccid_ctrl_read, %function
ccid_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r5, [r0, #124]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r5, #88]
	cmp	r3, #0
	beq	.L3011
	ldr	r3, [r5, #136]
	cmp	r2, #4
	mov	r4, r2
	movcc	r4, r2
	movcs	r4, #4
	mov	r7, r1
	cmp	r3, #0
	bne	.L3007
	ldr	r2, .L3022
	mov	r1, sp
	str	r3, [sp, #4]
	bic	r6, r1, #8128
	add	r3, sp, #16
	bic	r6, r6, #63
	add	r9, r5, #120
	ldr	r1, [r6, #12]
	add	r8, sp, #4
	str	r3, [sp, #16]
.LPIC620:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L3010
.L3020:
	bl	schedule(PLT)
.L3010:
	mov	r0, r9
	mov	r1, r8
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldr	r3, [r5, #136]
	cmp	r3, #0
	bne	.L3008
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3020
	mov	r0, r9
	mov	r1, r8
	bl	finish_wait(PLT)
	mov	r0, #65024
	movt	r0, 65535
	b	.L3018
.L3008:
	mov	r0, r9
	mov	r1, r8
	bl	finish_wait(PLT)
.L3007:
	ldr	r3, [r5, #88]
	mov	r2, #0
	str	r2, [r5, #136]
	cmp	r3, r2
	beq	.L3011
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	movne	r0, r4
	beq	.L3021
.L3012:
	cmp	r0, #0
	moveq	r0, r4
	mvnne	r0, #13
.L3018:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L3021:
	mov	r0, r7
	add	r1, r5, #132
	mov	r2, r4
	bl	__copy_to_user(PLT)
	b	.L3012
.L3011:
	mvn	r0, #18
	b	.L3018
.L3023:
	.align	2
.L3022:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC620+8))
	.fnend
	.size	ccid_ctrl_read, .-ccid_ctrl_read
	.align	2
	.type	adb_read, %function
adb_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3066
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC621:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	r5, [r3, #-644]
	ldr	r4, [r0, #124]
	cmp	r5, #0
	beq	.L3044
	cmp	r2, #4096
	bhi	.L3045
	add	r8, r4, #100
#APP
@ 61 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r6, [r8]
	add	r6, r6, #1
	strex	r3, r6, [r8]
	teq	r3, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r6, #1
	beq	.L3059
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #15
.L3057:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3059:
	mov	r3, sp
	mov	r9, r2
	bic	r7, r3, #8128
	mov	r10, r1
	bic	r7, r7, #63
.L3027:
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L3032
.L3061:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L3032
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L3027
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L3027
	ldr	r2, .L3066+4
	add	r5, sp, #4
	add	r6, r4, #120
	ldr	r1, [r7, #12]
	str	r3, [sp, #4]
	add	r3, sp, #16
	str	r3, [sp, #16]
.LPIC624:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L3031
.L3060:
	bl	schedule(PLT)
.L3031:
	mov	r0, r6
	mov	r1, r5
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L3029
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L3029
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3060
	mov	r0, r6
	mov	r1, r5
	bl	finish_wait(PLT)
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, #65024
	movt	r0, 65535
	b	.L3057
.L3029:
	mov	r0, r6
	mov	r1, r5
	bl	finish_wait(PLT)
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L3061
.L3032:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L3041
	mov	r3, sp
	bic	fp, r3, #8128
	bic	fp, fp, #63
.L3034:
	ldr	r6, [r4, #144]
	mov	r1, #4096
	mov	r3, #0
	mov	r2, #32
	str	r1, [r6, #4]
	ldr	r0, [r4, #88]
	mov	r1, r6
	str	r3, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3062
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L3037
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L3037
	ldr	r2, .L3066+8
	add	r5, sp, #4
	add	r7, r4, #120
	ldr	r1, [fp, #12]
	str	r3, [sp, #4]
	add	r3, sp, #16
	str	r3, [sp, #16]
.LPIC623:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L3040
.L3063:
	bl	schedule(PLT)
.L3040:
	mov	r0, r7
	mov	r1, r5
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L3038
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L3038
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3063
	mov	r0, r7
	mov	r1, r5
	bl	finish_wait(PLT)
	ldr	r0, [r4, #88]
	mov	r10, #65024
	mov	r1, r6
	movt	r10, 65535
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L3035:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L3064
.L3043:
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, r10
	b	.L3057
.L3038:
	mov	r0, r7
	mov	r1, r5
	bl	finish_wait(PLT)
.L3037:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L3041
	ldr	r2, [r6, #48]
	cmp	r2, #0
	beq	.L3034
	mov	r3, sp
	cmp	r2, r9
	ldr	r1, [r6]
	bic	r3, r3, #8128
	movcs	r2, r9
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r0, r10, r2; sbcccs r0, r0, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L3065
.L3042:
	cmp	r2, #0
	moveq	r10, r9
	mvnne	r10, #13
	b	.L3035
.L3041:
	ldr	r3, [r4, #96]
	mvn	r10, #4
	cmp	r3, #0
	beq	.L3043
.L3064:
	add	r0, r4, #132
	mov	r1, #3
	mov	r2, #1
	mov	r3, #0
	bl	__wake_up(PLT)
	b	.L3043
.L3062:
	mov	r3, #1
	mvn	r10, #4
	str	r3, [r4, #96]
	b	.L3035
.L3045:
	mvn	r0, #21
	b	.L3057
.L3065:
	mov	r0, r10
	bl	__copy_to_user(PLT)
	mov	r2, r0
	b	.L3042
.L3044:
	mvn	r0, #18
	b	.L3057
.L3067:
	.align	2
.L3066:
	.word	.LANCHOR4-(.LPIC621+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC624+8))
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC623+8))
	.fnend
	.size	adb_read, .-adb_read
	.align	2
	.global	usb_rmnet_mux_ctrl_write
	.type	usb_rmnet_mux_ctrl_write, %function
usb_rmnet_mux_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	ldr	r6, [r4, #360]
	cmp	r6, #0
	beq	.L3081
	cmp	r2, #0
	mov	r5, r2
	mov	r7, r1
	beq	.L3091
	cmp	r2, #4096
	bhi	.L3092
	ldr	r3, .L3096
.LPIC635:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L3082
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r6, r0, #0
	beq	.L3073
.L3072:
	mov	r0, r5
	movw	r1, #32976
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L3093
	mov	r3, sp
	str	r5, [r6, #4]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 439 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L3094
	mov	r1, r5
	bl	__memzero(PLT)
.L3076:
	ldr	r1, .L3096+4
	mov	r2, r5
	ldr	r0, .L3096+8
.LPIC631:
	add	r1, pc, r1
	add	r1, r1, #932
.LPIC630:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [r6]
	bl	kfree(PLT)
	mov	r0, r6
	bl	kfree(PLT)
.L3085:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3082:
	mov	r6, #16
	b	.L3072
.L3094:
	mov	r1, r7
	mov	r2, r5
	bl	__copy_from_user(PLT)
	subs	r9, r0, #0
	bne	.L3095
	add	r7, r4, #356
	add	r8, r4, #364
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #336]
	mov	r3, r4
	add	ip, r6, #8
	mov	r1, r0
	mov	r0, r7
	add	r2, r2, #1
	str	r2, [r4, #336]
	ldr	r2, [r3, #328]!
	str	ip, [r2, #4]
	strd	r2, [r6, #8]
	str	ip, [r4, #328]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #92]
	ldr	r6, [r4, #76]
	ldr	r3, [r3]
#APP
@ 61 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r8]
	add	r2, r2, #1
	strex	r1, r2, [r8]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #1
	bne	.L3085
	mvn	r1, #94
	strb	r2, [r3, #1]
	mov	r2, #32
	strb	r9, [r3, #2]
	strb	r9, [r3, #3]
	strb	r1, [r3]
	ldrb	r1, [r4, #348]	@ zero_extendqisi2
	strb	r9, [r3, #6]
	strb	r9, [r3, #7]
	strh	r1, [r3, #4]	@ unaligned
	ldrd	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L3085
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r1, r3, [r8]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L3096+12
	ldr	r0, [r6]
.LPIC632:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L3085
.L3081:
	mvn	r5, #18
	b	.L3085
.L3093:
	mov	r0, r6
	bl	kfree(PLT)
.L3073:
	ldr	r1, .L3096+16
	mvn	r5, #11
	ldr	r0, .L3096+20
.LPIC634:
	add	r1, pc, r1
	add	r1, r1, #932
.LPIC633:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L3085
.L3092:
	ldr	r1, .L3096+24
	mov	r3, r2
	mov	r2, #4096
	ldr	r0, .L3096+28
	mvn	r5, #11
.LPIC628:
	add	r1, pc, r1
	add	r1, r1, #932
.LPIC627:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L3085
.L3091:
	ldr	r1, .L3096+32
	mvn	r5, #18
	ldr	r0, .L3096+36
.LPIC626:
	add	r1, pc, r1
	add	r1, r1, #932
.LPIC625:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L3085
.L3095:
	mov	r5, r9
	b	.L3076
.L3097:
	.align	2
.L3096:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC635+8))
	.word	.LANCHOR3-(.LPIC631+8)
	.word	.LC169-(.LPIC630+8)
	.word	.LC170-(.LPIC632+8)
	.word	.LANCHOR3-(.LPIC634+8)
	.word	.LC171-(.LPIC633+8)
	.word	.LANCHOR3-(.LPIC628+8)
	.word	.LC168-(.LPIC627+8)
	.word	.LANCHOR3-(.LPIC626+8)
	.word	.LC167-(.LPIC625+8)
	.fnend
	.size	usb_rmnet_mux_ctrl_write, .-usb_rmnet_mux_ctrl_write
	.align	2
	.type	rmnet_ctrl_write, %function
rmnet_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r3, r2, #1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	cmp	r3, #2048
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	bcs	.L3109
	mov	r7, r1
	mov	r5, r2
	add	r6, r4, #24
#APP
@ 61 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r6]
	add	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L3100
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r0, .L3125
.LPIC636:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #15
.L3116:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3100:
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L3120
	mov	r0, r5
	mov	r1, #208
	bl	__kmalloc(PLT)
	subs	r8, r0, #0
	beq	.L3121
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 439 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L3122
	mov	r1, r5
	bl	__memzero(PLT)
	mov	r0, r5
.L3103:
	cmp	r0, #0
	bne	.L3123
	add	r7, r4, #52
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r9, r0
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L3105
	ldr	r3, [r0, #84]
	cmp	r3, #0
	beq	.L3105
	mov	r1, r8
	mov	r2, r5
	blx	r3
	subs	r10, r0, #0
	bne	.L3124
	mov	r0, r7
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r8
	bl	kfree(PLT)
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, r5
	b	.L3116
.L3122:
	mov	r1, r7
	mov	r2, r5
	bl	__copy_from_user(PLT)
	b	.L3103
.L3109:
	mvn	r0, #21
	b	.L3116
.L3120:
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #31
	b	.L3116
.L3105:
	ldr	r0, .L3125+4
.LPIC640:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r7
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r8
	bl	kfree(PLT)
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #21
	b	.L3116
.L3121:
	ldr	r0, .L3125+8
.LPIC637:
	add	r0, pc, r0
	bl	printk(PLT)
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #11
	b	.L3116
.L3124:
	ldr	r0, .L3125+12
	mov	r1, r10
.LPIC639:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r7
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r8
	bl	kfree(PLT)
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, r10
	b	.L3116
.L3123:
	mov	r1, r0
	ldr	r0, .L3125+16
.LPIC638:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r8
	bl	kfree(PLT)
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #13
	b	.L3116
.L3126:
	.align	2
.L3125:
	.word	.LC172-(.LPIC636+8)
	.word	.LC176-(.LPIC640+8)
	.word	.LC173-(.LPIC637+8)
	.word	.LC175-(.LPIC639+8)
	.word	.LC174-(.LPIC638+8)
	.fnend
	.size	rmnet_ctrl_write, .-rmnet_ctrl_write
	.align	2
	.type	ccid_ctrl_ioctl, %function
ccid_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #17154
	str	r6, [sp, #8]
	movt	r3, 16388
	str	lr, [sp, #12]
	ldr	r5, [r0, #124]
	cmp	r1, r3
	ldr	r4, [r5, #104]
	ldr	r0, [r4]
	beq	.L3129
	movw	r3, #17155
	movt	r3, 32772
	cmp	r1, r3
	beq	.L3130
	movw	r3, #17153
	movt	r3, 16388
	cmp	r1, r3
	movne	r1, r4
	beq	.L3144
.L3128:
	ldr	r0, [r5, #92]
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	movge	r0, #0
	blt	.L3145
.L3134:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3144:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 439 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	bne	.L3135
	mov	r1, r2
	mov	r2, #4
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	bne	.L3143
	mov	r3, #2
	str	r3, [r4, #4]
	ldr	r1, [r5, #104]
	b	.L3128
.L3129:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 439 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L3146
.L3135:
	mov	r1, #4
	bl	__memzero(PLT)
.L3143:
	mvn	r0, #13
	b	.L3134
.L3130:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	bne	.L3143
	mov	r0, r2
	add	r1, r5, #192
	mov	r2, #4
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	beq	.L3134
	b	.L3143
.L3146:
	mov	r1, r2
	mov	r2, #4
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	bne	.L3143
	mov	r3, #4
	str	r3, [r4, #4]
	ldr	r1, [r5, #104]
	b	.L3128
.L3145:
	ldr	r0, .L3147
	mov	r1, r4
.LPIC641:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	b	.L3134
.L3148:
	.align	2
.L3147:
	.word	.LC177-(.LPIC641+8)
	.fnend
	.size	ccid_ctrl_ioctl, .-ccid_ctrl_ioctl
	.align	2
	.type	ffs_prepare_buffer, %function
ffs_prepare_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L3151
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	mov	r6, r0
	mov	r0, r1
	mov	r1, #208
	str	lr, [sp, #12]
	bl	__kmalloc(PLT)
	subs	r5, r0, #0
	mvneq	r0, #11
	beq	.L3150
	mov	r1, r6
	mov	r2, r4
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	mov	r0, r5
	bne	.L3155
.L3150:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3151:
	mov	r0, r1
	bx	lr
.L3155:
	bl	kfree(PLT)
	mvn	r0, #13
	b	.L3150
	.fnend
	.size	ffs_prepare_buffer, .-ffs_prepare_buffer
	.align	2
	.type	eth_get_drvinfo, %function
eth_get_drvinfo:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	ldr	r1, .L3159
	mov	r5, r0
	mov	r2, #32
	str	lr, [sp, #12]
	add	r0, r4, #4
	str	r6, [sp, #8]
.LPIC642:
	add	r1, pc, r1
	bl	strlcpy(PLT)
	ldr	r1, .L3159+4
	add	r0, r4, #36
	mov	r2, #32
.LPIC643:
	add	r1, pc, r1
	bl	strlcpy(PLT)
	ldr	r3, [r5, #1228]
	add	r0, r4, #68
	mov	r2, #32
	ldr	r1, [r3, #28]
	bl	strlcpy(PLT)
	ldr	r3, [r5, #1228]
	add	r0, r4, #100
	mov	r2, #32
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #76]
	cmp	r1, #0
	ldreq	r1, [r3, #40]
	b	strlcpy(PLT)
.L3160:
	.align	2
.L3159:
	.word	.LC178-(.LPIC642+8)
	.word	.LC179-(.LPIC643+8)
	.fnend
	.size	eth_get_drvinfo, .-eth_get_drvinfo
	.align	2
	.type	eth_qc_get_drvinfo, %function
eth_qc_get_drvinfo:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	ldr	r1, .L3164
	mov	r5, r0
	mov	r2, #32
	str	lr, [sp, #12]
	add	r0, r4, #4
	str	r6, [sp, #8]
.LPIC644:
	add	r1, pc, r1
	bl	strlcpy(PLT)
	ldr	r1, .L3164+4
	add	r0, r4, #36
	mov	r2, #32
.LPIC645:
	add	r1, pc, r1
	bl	strlcpy(PLT)
	ldr	r3, [r5, #1228]
	add	r0, r4, #68
	mov	r2, #32
	ldr	r1, [r3, #28]
	bl	strlcpy(PLT)
	ldr	r3, [r5, #1228]
	add	r0, r4, #100
	mov	r2, #32
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #76]
	cmp	r1, #0
	ldreq	r1, [r3, #40]
	b	strlcpy(PLT)
.L3165:
	.align	2
.L3164:
	.word	.LC180-(.LPIC644+8)
	.word	.LC179-(.LPIC645+8)
	.fnend
	.size	eth_qc_get_drvinfo, .-eth_qc_get_drvinfo
	.align	2
	.type	pm_qos_store, %function
pm_qos_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata(PLT)
	add	r0, r0, #60
	mov	r1, r5
	mov	r2, #5
	bl	strlcpy(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	pm_qos_store, .-pm_qos_store
	.align	2
	.type	ecm_transports_store, %function
ecm_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L3170
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
.LPIC646:
	add	r0, pc, r0
	add	r0, r0, #3168
	bl	strlcpy(PLT)
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3171:
	.align	2
.L3170:
	.word	.LANCHOR2-(.LPIC646+8)
	.fnend
	.size	ecm_transports_store, .-ecm_transports_store
	.align	2
	.type	acm_transports_store, %function
acm_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L3174
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	mov	r2, #32
	mov	r4, r3
	str	lr, [sp, #4]
.LPIC647:
	add	r0, pc, r0
	sub	r0, r0, #608
	bl	strlcpy(PLT)
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3175:
	.align	2
.L3174:
	.word	.LANCHOR4-(.LPIC647+8)
	.fnend
	.size	acm_transports_store, .-acm_transports_store
	.align	2
	.type	serial_xport_names_store, %function
serial_xport_names_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L3178
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	mov	r2, #32
	mov	r4, r3
	str	lr, [sp, #4]
.LPIC648:
	add	r0, pc, r0
	add	r0, r0, #3216
	add	r0, r0, #4
	bl	strlcpy(PLT)
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3179:
	.align	2
.L3178:
	.word	.LANCHOR2-(.LPIC648+8)
	.fnend
	.size	serial_xport_names_store, .-serial_xport_names_store
	.align	2
	.type	serial_transports_store, %function
serial_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L3182
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	mov	r2, #32
	mov	r4, r3
	str	lr, [sp, #4]
.LPIC649:
	add	r0, pc, r0
	sub	r0, r0, #576
	bl	strlcpy(PLT)
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3183:
	.align	2
.L3182:
	.word	.LANCHOR4-(.LPIC649+8)
	.fnend
	.size	serial_transports_store, .-serial_transports_store
	.align	2
	.type	usb_diag_update_pid_and_serial_num, %function
usb_diag_update_pid_and_serial_num:
	.fnstart
	@ args = 0, pretend = 0, frame = 144
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L3195
	mov	r2, #140
	strd	r6, [sp, #8]
	ldr	r6, .L3195+4
	mov	r7, r1
	str	r8, [sp, #16]
	mov	r1, #0
	mov	r8, r0
	str	lr, [sp, #20]
	.pad #144
	sub	sp, sp, #144
.LPIC651:
	ldr	r5, [pc, r5]		@ tls_load_dot_plus_eight
	mov	r0, sp
	mov	r4, sp
	ldr	r3, [r5]
	str	r3, [sp, #140]
	bl	memset(PLT)
.LPIC652:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	ldr	r3, [r6]
	cmp	r3, #0
	beq	.L3190
	movw	r3, #10505
	cmp	r7, #0
	str	r8, [sp]
	movt	r3, 28995
	str	r3, [sp, #132]
	beq	.L3193
	movw	r3, #21364
	mov	r1, r7
	movt	r3, 24980
	add	r0, sp, #4
	mov	r2, #128
	str	r3, [sp, #136]
	bl	strlcpy(PLT)
.L3187:
	ldr	r2, [r6]
	mov	r3, r4
	add	r0, sp, #140
	sub	r2, r2, #4
.L3188:
	ldr	r1, [r3], #4
	cmp	r3, r0
	str	r1, [r2, #4]!
	bne	.L3188
	mov	r0, #0
.L3185:
	ldr	r2, [sp, #140]
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L3194
	add	sp, sp, #144
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3193:
	add	r0, sp, #4
	mov	r1, #128
	bl	__memzero(PLT)
	b	.L3187
.L3190:
	mvn	r0, #18
	b	.L3185
.L3194:
	bl	__stack_chk_fail(PLT)
.L3196:
	.align	2
.L3195:
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC651+8))
	.word	diag_dload(GOT_PREL)+(.-(.LPIC652+8))
	.fnend
	.size	usb_diag_update_pid_and_serial_num, .-usb_diag_update_pid_and_serial_num
	.align	2
	.type	clients_store, %function
clients_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L3199
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	mov	r2, #32
	mov	r4, r3
	str	lr, [sp, #4]
.LPIC653:
	add	r0, pc, r0
	sub	r0, r0, #544
	bl	strlcpy(PLT)
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3200:
	.align	2
.L3199:
	.word	.LANCHOR4-(.LPIC653+8)
	.fnend
	.size	clients_store, .-clients_store
	.align	2
	.type	rmnet_xport_names_store, %function
rmnet_xport_names_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L3203
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
.LPIC654:
	add	r0, pc, r0
	add	r0, r0, #3248
	add	r0, r0, #4
	bl	strlcpy(PLT)
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3204:
	.align	2
.L3203:
	.word	.LANCHOR2-(.LPIC654+8)
	.fnend
	.size	rmnet_xport_names_store, .-rmnet_xport_names_store
	.align	2
	.type	rmnet_transports_store, %function
rmnet_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L3207
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
.LPIC655:
	add	r0, pc, r0
	add	r0, r0, #3296
	add	r0, r0, #8
	bl	strlcpy(PLT)
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3208:
	.align	2
.L3207:
	.word	.LANCHOR2-(.LPIC655+8)
	.fnend
	.size	rmnet_transports_store, .-rmnet_transports_store
	.align	2
	.type	mbim_transports_store, %function
mbim_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L3211
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
.LPIC656:
	add	r0, pc, r0
	add	r0, r0, #3344
	add	r0, r0, #12
	bl	strlcpy(PLT)
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3212:
	.align	2
.L3211:
	.word	.LANCHOR2-(.LPIC656+8)
	.fnend
	.size	mbim_transports_store, .-mbim_transports_store
	.align	2
	.type	audio_send, %function
audio_send:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r7, r0, #100
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #84]
	mov	r1, r0
	cmp	r3, #0
	moveq	r0, r7
	beq	.L3236
	ldr	r2, [r5, #112]
	mov	r0, r7
	cmp	r2, #0
	beq	.L3236
	ldr	fp, [r3, #164]
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r0, sp, #24
	bl	ktime_get(PLT)
	ldrd	r0, [sp, #24]
	mov	ip, #0
	movw	lr, #44100
	ldrd	r2, [r5, #128]
	mov	r4, ip
	mov	r6, ip
	subs	r0, r0, r2
	movw	r2, #13531
	sbc	r1, r1, r3
	movw	r3, #56962
	mov	r8, r0
	mov	r9, r1
	movt	r2, 55222
	movt	r3, 17179
#APP
@ 349 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_audio_source.c" 1
	umull	r0, r1, r2, r8
	mov	r0, #0
@ 0 "" 2
@ 349 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_audio_source.c" 1
	umlal	r1, r0, r3, r8
	umlal	r1, r4, r2, r9
	mov	r1, #0
	adds	r0, r4, r0
	adc	r1, r1, #0
	umlal	r0, r1, r3, r9
@ 0 "" 2
	mov	r2, r0, lsr #18
	movw	r8, #57147
	movw	r9, #28311
	orr	r2, r2, r1, asl #14
	mov	r1, r1, lsr #18
	movt	r8, 36175
	movt	r9, 33554
	umull	r2, r3, r2, lr
	mla	r3, lr, r1, r3
#APP
@ 351 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_audio_source.c" 1
	umull	r0, r1, r8, r2
	cmn	r0, r8
	adcs	r1, r1, r9
	adc	r0, ip, #0
@ 0 "" 2
@ 351 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_audio_source.c" 1
	umlal	r1, r0, r9, r2
	umlal	r1, r6, r8, r3
	mov	r1, #0
	adds	r0, r6, r0
	adc	r1, r1, #0
	umlal	r0, r1, r9, r3
@ 0 "" 2
	mov	r3, r0, lsr #9
	orr	r3, r3, r1, asl #23
	str	r3, [sp]
	mov	r3, r1, lsr #9
	str	r3, [sp, #4]
	ldrd	r2, [r5, #136]
	ldrd	r0, [sp]
	subs	r0, r0, r2
	sbc	r1, r1, r3
	mov	r2, r0
	mov	r0, #440
	mov	r3, r1
	cmp	r0, r2
	mov	r1, #0
	sbcs	r1, r1, r3
	blt	.L3239
	cmp	r2, #1
	strd	r2, [sp]
	sbcs	r3, r3, #0
	blt	.L3240
.L3217:
	add	r3, r5, #88
	str	r3, [sp, #20]
	b	.L3227
.L3243:
	rsb	r8, r1, r8
	ldr	r0, [r6]
	mov	r2, r8
	str	r8, [sp, #8]
	bl	memcpy(PLT)
	cmp	r4, r8
	ldr	r3, [sp, #8]
	ble	.L3224
	ldr	r0, [r6]
	rsb	r3, r8, r4
	mov	r2, r3
	ldr	r1, [r5, #104]
	str	r3, [sp, #8]
	add	r0, r0, r8
	bl	memcpy(PLT)
	ldr	r3, [sp, #8]
	ldr	r2, [r5, #104]
	add	r3, r2, r3
	str	r3, [r5, #112]
.L3225:
	mov	r1, r9
	mov	r0, r7
	str	r10, [r6, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r5, #96]
	mov	r1, r6
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3241
	ldr	r2, [fp, #88]
	mov	r4, r4, asl #3
	mov	r9, #0
	ldrd	r0, [r5, #136]
	udiv	r2, r4, r2
	mov	r8, r2
	ldrd	r2, [sp]
	strd	r8, [sp, #8]
	subs	r8, r2, r8
	sbc	r9, r3, r9
	ldrd	r2, [sp, #8]
	strd	r8, [sp]
	adds	r2, r2, r0
	adc	r3, r3, r1
	mov	r1, r9
	cmp	r8, #1
	sbcs	r1, r1, #0
	strd	r2, [r5, #136]
	blt	.L3242
.L3227:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [sp, #20]
	mov	r1, r0
	ldr	r3, [r5, #88]
	cmp	r3, r2
	beq	.L3231
	ldr	r2, [r3, #4]
	mov	r0, #512
	sub	r6, r3, #36
	ldr	ip, [r3]
	str	r2, [ip, #4]
	str	ip, [r2]
	mov	r2, #256
	str	r0, [r3, #4]
	str	r2, [r3]
.L3218:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #84]
	mov	r9, r0
	cmp	r3, #0
	beq	.L3237
	ldr	r1, [r5, #112]
	cmp	r1, #0
	beq	.L3237
	cmp	r6, #0
	beq	.L3237
	ldr	r3, [sp]
	ldr	r4, [fp, #88]
	ldr	r8, [r5, #108]
	mul	r4, r3, r4
	mov	r4, r4, lsr #3
	cmp	r4, #256
	movhi	r10, #256
	movls	r10, r4
	add	r3, r1, r10
	movhi	r4, r10
	cmp	r8, r3
	bcc	.L3243
	ldr	r0, [r6]
	mov	r2, r10
	bl	memcpy(PLT)
	mov	r3, r10
.L3224:
	ldr	r2, [r5, #112]
	ldr	r1, [r5, #108]
	add	r3, r2, r3
	cmp	r3, r1
	str	r3, [r5, #112]
	ldrcs	r3, [r5, #104]
	strcs	r3, [r5, #112]
	b	.L3225
.L3241:
	mov	r1, r0
	ldr	r0, .L3244
.LPIC657:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [sp, #20]
	add	r2, r6, #36
	mov	r1, r0
	ldr	r3, [r5, #92]
	mov	r0, r7
	str	r2, [r5, #92]
	str	ip, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
.L3236:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L3239:
	ldrd	r8, [sp]
	mov	r2, #44
	mov	r3, #0
	strd	r2, [sp]
	subs	r8, r8, #44
	sbc	r9, r9, #0
	cmp	r2, #1
	sbcs	r3, r3, #0
	strd	r8, [r5, #136]
	bge	.L3217
.L3240:
	mov	r2, #44
	mov	r3, #0
	strd	r2, [sp]
	b	.L3217
.L3237:
	mov	r0, r7
	mov	r1, r9
	b	.L3236
.L3242:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3231:
	mov	r6, #0
	b	.L3218
.L3245:
	.align	2
.L3244:
	.word	.LC181-(.LPIC657+8)
	.fnend
	.size	audio_send, .-audio_send
	.align	2
	.type	audio_pcm_playback_trigger, %function
audio_pcm_playback_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r3, [r0, #164]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r3, #208]
	cmp	r1, #6
	addls	pc, pc, r1, asl #2
	b	.L3251
.L3249:
	b	.L3248
	b	.L3250
	b	.L3251
	b	.L3251
	b	.L3251
	b	.L3248
	b	.L3250
	.p2align 1
.L3250:
	mov	r0, sp
	mov	r6, #0
	bl	ktime_get(PLT)
	ldrd	r2, [sp]
	mov	r7, #0
	mov	r0, r5
	strd	r6, [r5, #136]
	strd	r2, [r5, #128]
	bl	audio_send(PLT)
	mov	r0, #0
.L3247:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L3248:
	add	r6, r5, #100
	mov	r4, #0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r4, [r5, #104]
	mov	r0, r6
	str	r4, [r5, #108]
	str	r4, [r5, #112]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
	b	.L3247
.L3251:
	mvn	r0, #21
	b	.L3247
	.fnend
	.size	audio_pcm_playback_trigger, .-audio_pcm_playback_trigger
	.align	2
	.type	audio_pcm_open, %function
audio_pcm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3255
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r8, [sp, #12]
	strd	r10, [sp, #20]
	str	lr, [sp, #28]
.LPIC658:
	add	r3, pc, r3
	str	r6, [sp, #8]
	.pad #8
	sub	sp, sp, #8
	add	r3, r3, #960
	ldr	r6, [r0, #164]
	ldrd	r8, [r3, #32]
	ldr	r4, [r0, #8]
	ldrd	r10, [r3, #24]
	add	lr, r6, #216
	mov	r0, r6
	strd	r8, [sp]
	ldrd	r8, [r3]
	str	r4, [r6, #208]
	strd	r8, [r6, #216]
	ldrd	r8, [r3, #40]
	strd	r8, [lr, #40]
	ldrd	r8, [r3, #8]
	strd	r8, [r6, #224]
	ldrd	r8, [r3, #48]
	strd	r8, [lr, #48]
	ldrd	r8, [r3, #16]
	ldrd	r2, [r3, #56]
	strd	r8, [r6, #232]
	strd	r2, [lr, #56]
	ldrd	r2, [sp]
	strd	r10, [r6, #240]
	strd	r2, [r6, #248]
	bl	snd_pcm_limit_hw_rates(PLT)
	mov	r3, #2
	mov	r0, #0
	str	r3, [r6, #248]
	str	r5, [r4, #84]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldrd	r8, [sp, #12]
	ldrd	r10, [sp, #20]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3256:
	.align	2
.L3255:
	.word	.LANCHOR3-(.LPIC658+8)
	.fnend
	.size	audio_pcm_open, .-audio_pcm_open
	.align	2
	.type	gs_break_ctl, %function
gs_break_ctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #280]
	mov	r0, r5
	bl	_raw_spin_lock_irq(PLT)
	ldr	r0, [r5, #4]
	cmp	r0, #0
	beq	.L3259
	ldr	r3, [r0, #116]
	cmp	r3, #0
	moveq	r4, r3
	beq	.L3258
	mov	r1, r4
	blx	r3
	mov	r4, r0
.L3258:
	mov	r0, r5
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3259:
	mov	r4, r0
	b	.L3258
	.fnend
	.size	gs_break_ctl, .-gs_break_ctl
	.align	2
	.type	gs_tiocmget, %function
gs_tiocmget:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #280]
	mov	r0, r6
	bl	_raw_spin_lock_irq(PLT)
	ldr	r5, [r6, #4]
	cmp	r5, #0
	beq	.L3270
	ldr	r4, [r5, #100]
	cmp	r4, #0
	beq	.L3264
	mov	r0, r5
	blx	r4
	cmp	r0, #0
	movne	r4, #2
	moveq	r4, #0
.L3264:
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L3266
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	movne	r0, #4
	moveq	r0, #0
	orr	r4, r4, r0
.L3266:
	ldrh	r3, [r5, #96]
	tst	r3, #64
	orrne	r4, r4, #64
	tst	r3, #128
	orrne	r4, r4, #128
.L3263:
	mov	r0, r6
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3270:
	mvn	r4, #18
	b	.L3263
	.fnend
	.size	gs_tiocmget, .-gs_tiocmget
	.align	2
	.type	gs_tiocmset, %function
gs_tiocmset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	mov	r8, r2
	str	lr, [sp, #20]
	ldr	r6, [r0, #280]
	mov	r0, r6
	bl	_raw_spin_lock_irq(PLT)
	ldr	r4, [r6, #4]
	cmp	r4, #0
	beq	.L3286
	ands	r5, r7, #128
	beq	.L3283
	ldr	r5, [r4, #124]
	cmp	r5, #0
	beq	.L3284
	ldrh	r3, [r4, #96]
	mov	r0, r4
	mov	r1, #1
	orr	r3, r3, #128
	strh	r3, [r4, #96]	@ movhi
	blx	r5
	mov	r5, r0
.L3283:
	tst	r8, #128
	beq	.L3284
	ldr	r2, [r4, #124]
	cmp	r2, #0
	beq	.L3284
	ldrh	r3, [r4, #96]
	mov	r0, r4
	mov	r1, #0
	bic	r3, r3, #128
	strh	r3, [r4, #96]	@ movhi
	blx	r2
	mov	r5, r0
.L3284:
	tst	r7, #64
	beq	.L3285
	ldr	r2, [r4, #120]
	cmp	r2, #0
	beq	.L3282
	ldrh	r3, [r4, #96]
	mov	r0, r4
	mov	r1, #1
	orr	r3, r3, #64
	strh	r3, [r4, #96]	@ movhi
	blx	r2
	mov	r5, r0
.L3285:
	tst	r8, #64
	beq	.L3282
	ldr	r2, [r4, #120]
	cmp	r2, #0
	beq	.L3282
	ldrh	r3, [r4, #96]
	mov	r0, r4
	mov	r1, #0
	bic	r3, r3, #64
	strh	r3, [r4, #96]	@ movhi
	blx	r2
	mov	r5, r0
.L3282:
	mov	r0, r6
	bl	_raw_spin_unlock_irq(PLT)
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3286:
	mvn	r5, #18
	b	.L3282
	.fnend
	.size	gs_tiocmset, .-gs_tiocmset
	.align	2
	.type	ffs_epfile_ioctl, %function
ffs_epfile_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	ldr	r0, [r4, #40]
	ldr	r3, [r0, #96]
	cmp	r3, #2
	bne	.L3331
	add	r0, r0, #28
	mov	r5, r1
	mov	r6, r2
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #44]
	cmp	r3, #0
	mvneq	r5, #18
	beq	.L3311
	movw	r2, #26371
	cmp	r5, r2
	beq	.L3312
	bhi	.L3313
	movw	r2, #26369
	cmp	r5, r2
	beq	.L3314
	movw	r2, #26370
	cmp	r5, r2
	bne	.L3324
	ldr	r0, [r3]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	moveq	r5, r3
	beq	.L3311
	mov	r5, #0
	blx	r3
.L3311:
	ldr	r0, [r4, #40]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
.L3328:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3313:
	movw	r2, #26497
	cmp	r5, r2
	beq	.L3316
	movw	r2, #26498
	movt	r2, 32777
	cmp	r5, r2
	bne	.L3324
	ldr	r0, [r4, #40]
	ldr	r2, [r0]
	ldr	r2, [r2, #16]
	cmp	r2, #3
	moveq	r2, #1
	beq	.L3320
	cmp	r2, #5
	moveq	r2, #2
	movne	r2, #0
.L3320:
	add	r2, r2, #2
	add	r0, r0, #28
	ldr	r4, [r3, r2, asl #2]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, #9; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L3321
.L3322:
	mvn	r0, #13
	b	.L3328
.L3324:
	mvn	r5, #24
	b	.L3311
.L3314:
	ldr	r0, [r3]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	mvneq	r5, #94
	beq	.L3311
	blx	r3
	mov	r5, r0
	b	.L3311
.L3316:
	ldrb	r5, [r3, #20]	@ zero_extendqisi2
	b	.L3311
.L3312:
	ldr	r0, [r3]
	mov	r1, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	mov	r5, r0
	b	.L3311
.L3331:
	ldr	r0, .L3332
	mov	r1, #980
.LPIC659:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	mvn	r0, #18
	b	.L3328
.L3321:
	mov	r0, r6
	mov	r1, r4
	mov	r2, #9
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	beq	.L3328
	b	.L3322
.L3333:
	.align	2
.L3332:
	.word	.LC182-(.LPIC659+8)
	.fnend
	.size	ffs_epfile_ioctl, .-ffs_epfile_ioctl
	.align	2
	.type	gsmd_rx_push, %function
gsmd_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r8, [sp, #16]
	sub	r9, r0, #24
	sub	r8, r5, #8
	strd	r10, [sp, #24]
	sub	r10, r0, #28
	strd	r6, [sp, #8]
	str	lr, [sp, #32]
	ldr	r7, [r0, #44]
	.pad #20
	sub	sp, sp, #20
	mov	r0, r9
	bl	_raw_spin_lock_irq(PLT)
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L3336
	ldr	r4, [r5, #-8]
	cmp	r8, r4
	beq	.L3336
	ldr	r6, .L3367
	ldr	fp, .L3367+4
.LPIC661:
	add	r6, pc, r6
.LPIC660:
	add	fp, pc, fp
	add	r6, r6, #1024
.L3344:
	ldr	r2, [r4, #8]
	cmn	r2, #108
	beq	.L3336
	cmp	r2, #0
	beq	.L3339
	ldr	r3, [r5, #-28]
	mov	r0, fp
	str	r2, [sp]
	mov	r1, r6
	mov	r2, r10
	bl	printk(PLT)
	ldr	r0, [r7]
.L3339:
	bl	smd_write_avail(PLT)
	cmp	r0, #0
	beq	.L3336
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L3340
	ldr	r2, [r5, #-20]
	ldr	r1, [r4, #-36]
	ldr	r0, [r7]
	cmp	r2, #0
	rsbne	r3, r2, r3
	addne	r1, r1, r2
	mov	r2, r3
	str	r3, [sp, #12]
	bl	smd_write(PLT)
	cmp	r0, #0
	ldr	r3, [sp, #12]
	blt	.L3365
	cmp	r0, r3
	bne	.L3366
	ldr	r2, [r5, #136]
	add	r3, r2, r3
	str	r3, [r5, #136]
.L3340:
	mov	r2, #0
	mov	r3, r5
	str	r2, [r5, #-20]
	ldmia	r4, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	ldr	r2, [r3, #-16]!
	str	r4, [r2, #4]
	strd	r2, [r4]
	str	r4, [r5, #-16]
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L3336
	ldr	r4, [r5, #-8]
	cmp	r8, r4
	bne	.L3344
.L3336:
	mov	r0, r9
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r10
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsmd_start_rx(PLT)
.L3366:
	ldr	r3, [r5, #-20]
	add	r0, r3, r0
	str	r0, [r5, #-20]
	b	.L3336
.L3365:
	ldr	r1, .L3367+8
	mov	r2, r0
	ldr	r0, .L3367+12
.LPIC663:
	add	r1, pc, r1
	add	r1, r1, #1024
.LPIC662:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L3336
.L3368:
	.align	2
.L3367:
	.word	.LANCHOR3-(.LPIC661+8)
	.word	.LC183-(.LPIC660+8)
	.word	.LANCHOR3-(.LPIC663+8)
	.word	.LC184-(.LPIC662+8)
	.fnend
	.size	gsmd_rx_push, .-gsmd_rx_push
	.align	2
	.type	gsmd_tx_pull, %function
gsmd_tx_pull:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r3, r0, #52
	sub	r5, r0, #48
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r10, r0
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r6, [r0, #20]
	mov	r0, r5
	sub	r9, r10, #8
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r10, #16]
	cmp	r3, #0
	beq	.L3398
	ldr	r0, [r6]
	ldr	r7, [r3, #80]
	cmp	r0, #0
	beq	.L3379
	ldr	r3, [r10, #-8]
	cmp	r9, r3
	bne	.L3385
	b	.L3379
.L3400:
	ldr	r4, [r10, #-8]
	mov	r0, #256
	cmp	r2, #2048
	movge	r2, #2048
	ldr	r3, [r4, #4]
	sub	r8, r4, #36
	ldr	r1, [r4]
	str	r3, [r1, #4]
	str	r1, [r3]
	mov	r3, #512
	ldr	r1, [r4, #-36]
	stmia	r4, {r0, r3}
	ldr	r0, [r6]
	bl	smd_read(PLT)
	str	r0, [r4, #-32]
	mov	r0, r5
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r2, #208
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r5
	bl	_raw_spin_lock_irq(PLT)
	cmp	fp, #0
	bne	.L3399
	ldr	r2, [r4, #-32]
	ldr	r3, [r10, #116]
	add	r3, r3, r2
	str	r3, [r10, #116]
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L3381
	ldr	r3, [r10, #-8]
	cmp	r9, r3
	beq	.L3381
.L3385:
	bl	smd_read_avail(PLT)
	subs	r2, r0, #0
	bne	.L3400
.L3381:
	ldr	r3, [r10, #16]
	cmp	r3, #0
	beq	.L3386
.L3379:
	ldr	r3, [r10, #20]
	ldr	r0, [r3]
	bl	smd_read_avail(PLT)
	cmp	r0, #0
	beq	.L3386
	ldr	r3, [r10, #-8]
	cmp	r9, r3
	beq	.L3386
	ldr	r3, .L3402
	mov	r1, r10
.LPIC666:
	add	r3, pc, r3
	ldr	r0, [r3, #-512]
	bl	queue_work(PLT)
.L3386:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq(PLT)
.L3398:
	mov	r0, r5
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [sp, #12]
	cmp	r3, #0
	beq	.L3369
	ldr	r3, [r10, #20]
	ldr	r0, [r3]
	cmp	r0, #0
	bne	.L3374
	b	.L3369
.L3375:
	ldr	r3, [r10, #20]
	ldr	r0, [r3]
	bl	smd_read(PLT)
	ldr	r3, [r10, #20]
	ldr	r0, [r3]
.L3374:
	bl	smd_read_avail(PLT)
	subs	r2, r0, #0
	mov	r1, #0
	bne	.L3375
.L3369:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3399:
	ldr	r1, .L3402+4
	str	fp, [sp]
	ldr	r0, .L3402+8
	ldr	r3, [r10, #-52]
	ldr	r2, [sp, #12]
.LPIC665:
	add	r1, pc, r1
.LPIC664:
	add	r0, pc, r0
	add	r1, r1, #1040
	bl	printk(PLT)
	ldr	r3, [r10, #16]
	cmp	r3, #0
	beq	.L3401
	ldr	r3, [r10, #-8]
	str	r4, [r3, #4]
	stmia	r4, {r3, r9}
	str	r4, [r10, #-8]
	b	.L3381
.L3401:
	ldr	r0, [r4, #-36]
	bl	kfree(PLT)
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L3381
.L3403:
	.align	2
.L3402:
	.word	.LANCHOR4-(.LPIC666+8)
	.word	.LANCHOR3-(.LPIC665+8)
	.word	.LC185-(.LPIC664+8)
	.fnend
	.size	gsmd_tx_pull, .-gsmd_tx_pull
	.align	2
	.type	mtp_read, %function
mtp_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r10, [sp, #24]
	ldr	r10, .L3450
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldr	fp, [r0, #124]
	.pad #36
	sub	sp, sp, #36
.LPIC667:
	add	r10, pc, r10
	ldr	r4, [fp, #88]
	cmp	r4, #0
	beq	.L3411
	str	r2, [sp]
	ldr	r2, [fp, #96]
	str	r1, [sp, #4]
	cmp	r2, #0
	beq	.L3444
.L3407:
	ldr	r1, .L3450+4
	ldrh	r2, [r4, #20]
	ldr	r3, [sp]
	ldr	r1, [r10, r1]
	sub	r6, r2, #1
	rsb	r2, r2, #0
	add	r6, r6, r3
	and	r6, r6, r2
	ldr	r2, [r1]
	cmp	r6, r2
	bhi	.L3411
	add	r9, fp, #80
	mov	r0, r9
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [fp, #96]
	cmp	r2, #3
	beq	.L3445
	mov	r2, #2
	mov	r0, r9
	str	r2, [fp, #96]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r3, sp
	bic	r7, r3, #8128
	bic	r7, r7, #63
.L3413:
	ldr	r4, [fp, #160]
	mov	ip, #0
	mov	r2, #208
	str	r6, [r4, #4]
	mov	r1, r4
	ldr	r0, [fp, #88]
	str	ip, [fp, #168]
	ldr	ip, [r0, #8]
	ldr	ip, [ip, #16]
	blx	ip
	cmp	r0, #0
	blt	.L3432
	ldr	r2, [fp, #168]
	cmp	r2, #0
	bne	.L3415
	ldr	r1, [fp, #96]
	cmp	r1, #2
	beq	.L3446
	cmp	r1, #3
	beq	.L3426
.L3432:
	mvn	r5, #4
.L3414:
	mov	r0, r9
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [fp, #96]
	cmp	r2, #3
	mvneq	r5, #124
	beq	.L3422
	cmp	r2, #0
	movne	r2, #1
	strne	r2, [fp, #96]
.L3422:
	mov	r0, r9
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
.L3441:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3415:
	ldr	r2, [fp, #96]
	cmp	r2, #3
	beq	.L3420
.L3423:
	cmp	r2, #2
	bne	.L3432
	ldr	r2, [r4, #48]
	cmp	r2, #0
	beq	.L3413
	mov	r3, sp
	ldr	r1, [r4]
	bic	r0, r3, #8128
	ldr	r3, [sp]
	bic	r0, r0, #63
	cmp	r2, r3
	movcc	r5, r2
	movcs	r5, r3
	ldr	r2, [r0, #8]
	ldr	r3, [sp, #4]
#APP
@ 448 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r0, r3, r5; sbcccs r0, r0, r2; movcc r2, #0
@ 0 "" 2
	cmp	r2, #0
	movne	r0, r5
	beq	.L3447
.L3421:
	cmp	r0, #0
	mvnne	r5, #13
	b	.L3414
.L3446:
	ldr	r1, [r7, #12]
	str	r2, [sp, #12]
	add	r5, sp, #12
	ldr	r2, .L3450+8
	add	r8, fp, #124
	str	r1, [sp, #16]
	ldr	r1, [r10, r2]
	add	r2, sp, #24
	str	r2, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #20]
	b	.L3419
.L3448:
	bl	schedule(PLT)
.L3419:
	mov	r2, #1
	mov	r0, r8
	mov	r1, r5
	bl	prepare_to_wait(PLT)
	ldr	r2, [fp, #168]
	cmp	r2, #0
	bne	.L3417
	ldr	r2, [fp, #96]
	cmp	r2, #2
	bne	.L3417
	ldr	r2, [r7, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L3448
	mov	r0, r8
	mov	r1, r5
	bl	finish_wait(PLT)
	ldr	r2, [fp, #96]
	cmp	r2, #3
	beq	.L3443
	ldr	r0, [fp, #88]
	mov	r1, r4
	mov	r5, #65024
	movt	r5, 65535
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
	b	.L3414
.L3444:
	mov	r3, sp
	str	r2, [sp, #12]
	ldr	r1, .L3450+8
	bic	r4, r3, #8128
	add	r6, fp, #124
	bic	r4, r4, #63
	add	r5, sp, #12
	ldr	r2, [r4, #12]
	str	r2, [sp, #16]
	ldr	r1, [r10, r1]
	add	r2, sp, #24
	str	r2, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #20]
	b	.L3410
.L3449:
	bl	schedule(PLT)
.L3410:
	mov	r2, #1
	mov	r0, r6
	mov	r1, r5
	bl	prepare_to_wait(PLT)
	ldr	r2, [fp, #96]
	cmp	r2, #0
	bne	.L3408
	ldr	r2, [r4, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L3449
	mov	r1, r5
	mov	r0, r6
	mov	r5, #65024
	add	r9, fp, #80
	bl	finish_wait(PLT)
	movt	r5, 65535
	b	.L3414
.L3417:
	mov	r0, r8
	mov	r1, r5
	bl	finish_wait(PLT)
	ldr	r2, [fp, #96]
	cmp	r2, #3
	bne	.L3423
.L3443:
	ldr	r2, [fp, #168]
	cmp	r2, #0
	bne	.L3420
.L3426:
	ldr	r0, [fp, #88]
	mov	r1, r4
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
.L3420:
	mov	r0, r9
	mvn	r5, #124
	bl	_raw_spin_lock_irq(PLT)
	mov	r2, #3
	mov	r0, r9
	str	r2, [fp, #96]
	bl	_raw_spin_unlock_irq(PLT)
	b	.L3414
.L3408:
	mov	r0, r6
	mov	r1, r5
	bl	finish_wait(PLT)
	ldr	r4, [fp, #88]
	b	.L3407
.L3411:
	mvn	r0, #21
	b	.L3441
.L3447:
	mov	r0, r3
	mov	r2, r5
	bl	__copy_to_user(PLT)
	b	.L3421
.L3445:
	mov	r2, #1
	mov	r0, r9
	str	r2, [fp, #96]
	bl	_raw_spin_unlock_irq(PLT)
	mvn	r0, #124
	b	.L3441
.L3451:
	.align	2
.L3450:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC667+8)
	.word	mtp_rx_req_len(GOT)
	.word	autoremove_wake_function(GOT)
	.fnend
	.size	mtp_read, .-mtp_read
	.align	2
	.type	functions_show, %function
functions_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	mov	r9, r2
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bl	dev_get_drvdata(PLT)
	add	r10, r0, #28
	mov	r8, r0
	mov	r0, r10
	bl	mutex_lock(PLT)
	ldr	r7, [r8, #156]!
	cmp	r8, r7
	sub	r7, r7, #120
	beq	.L3453
	ldr	r6, .L3466
	mov	fp, r9
.LPIC668:
	add	r6, pc, r6
.L3454:
	mov	r5, r7
	ldr	r4, [r5, #112]!
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L3456
.L3457:
	ldr	r3, [r4]
	mov	r0, fp
	mov	r1, #4096
	mov	r2, r6
	ldr	r3, [r3]
	bl	snprintf(PLT)
	ldr	r4, [r4, #4]
	add	fp, fp, r0
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L3457
.L3456:
	ldr	r7, [r7, #120]
	cmp	r8, r7
	sub	r7, r7, #120
	beq	.L3465
	cmp	r9, fp
	movne	r3, #58
	strneb	r3, [fp, #-1]
	b	.L3454
.L3465:
	mov	r0, r10
	bl	mutex_unlock(PLT)
	cmp	r9, fp
	beq	.L3464
	mov	r3, #10
	rsb	r0, r9, fp
	strb	r3, [fp, #-1]
.L3462:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3453:
	mov	r0, r10
	bl	mutex_unlock(PLT)
.L3464:
	mov	r0, #0
	b	.L3462
.L3467:
	.align	2
.L3466:
	.word	.LC186-(.LPIC668+8)
	.fnend
	.size	functions_show, .-functions_show
	.align	2
	.type	ffs_aliases_show, %function
ffs_aliases_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3470
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	mov	r6, r2
.LPIC669:
	add	r3, pc, r3
	ldr	r5, [r3]
	sub	r4, r5, #140
	mov	r0, r4
	bl	mutex_lock(PLT)
	ldr	r1, .L3470+4
	add	r2, r5, #8
	mov	r0, r6
.LPIC670:
	add	r1, pc, r1
	bl	sprintf(PLT)
	mov	r5, r0
	mov	r0, r4
	bl	mutex_unlock(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3471:
	.align	2
.L3470:
	.word	.LANCHOR2-(.LPIC669+8)
	.word	.LC72-(.LPIC670+8)
	.fnend
	.size	ffs_aliases_show, .-ffs_aliases_show
	.align	2
	.type	gsmd_ch_remove, %function
gsmd_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L3484
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC671:
	add	r5, pc, r5
	ldr	r6, [r5, #312]
	cmp	r6, #0
	beq	.L3474
	ldr	r3, [r5, #340]
	mov	r2, #20
	ldr	r7, [r0]
	ldr	r4, [r3, #72]
	mov	r1, r7
	ldr	r0, [r4, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3475
	cmp	r6, #1
	bls	.L3474
	ldr	r3, [r5, #448]
	mov	r1, r7
	mov	r2, #20
	ldr	r4, [r3, #72]
	ldr	r0, [r4, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3475
.L3474:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3475:
	add	r5, r4, #8
	mov	r0, #1
	mov	r1, r5
	bl	_clear_bit(PLT)
	mov	r0, #0
	mov	r1, r5
	bl	_clear_bit(PLT)
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L3474
	bl	smd_close(PLT)
	mov	r3, #0
	str	r3, [r4]
	b	.L3474
.L3485:
	.align	2
.L3484:
	.word	.LANCHOR2-(.LPIC671+8)
	.fnend
	.size	gsmd_ch_remove, .-gsmd_ch_remove
	.align	2
	.type	gsmd_ch_probe, %function
gsmd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L3500
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC674:
	add	r6, pc, r6
	ldr	r7, [r6, #312]
	cmp	r7, #0
	beq	.L3487
	ldr	r4, [r6, #340]
	mov	r2, #20
	ldr	r8, [r0]
	ldr	r5, [r4, #72]
	mov	r1, r8
	ldr	r0, [r5, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3488
	cmp	r7, #1
	bls	.L3487
	ldr	r4, [r6, #448]
	mov	r1, r8
	mov	r2, #20
	ldr	r5, [r4, #72]
	ldr	r0, [r5, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3488
.L3487:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3488:
	add	r1, r5, #8
	mov	r0, #1
	add	r5, r4, #4
	bl	_set_bit(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #68]
	mov	r6, r0
	cmp	r3, #0
	beq	.L3489
	ldr	r3, .L3500+4
	mov	r0, #0
.LPIC677:
	add	r3, pc, r3
	ldr	r7, [r3, #-512]
	bl	msecs_to_jiffies(PLT)
	mov	r2, r0
	add	r1, r4, #76
	mov	r0, r7
	bl	queue_delayed_work(PLT)
.L3489:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L3487
.L3501:
	.align	2
.L3500:
	.word	.LANCHOR2-(.LPIC674+8)
	.word	.LANCHOR4-(.LPIC677+8)
	.fnend
	.size	gsmd_ch_probe, .-gsmd_ch_probe
	.align	2
	.type	gbam_data_ch_probe, %function
gbam_data_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L3510
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC678:
	add	r4, pc, r4
	ldr	r3, [r4, #2224]
	cmp	r3, #0
	ble	.L3503
	ldr	r1, [r0]
	mov	r2, #20
	ldr	r0, .L3510+4
.LPIC679:
	add	r0, pc, r0
	bl	strncmp(PLT)
	cmp	r0, #0
	ldr	r4, [r4, #2228]
	beq	.L3509
.L3503:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3509:
	add	r1, r4, #20
	mov	r0, #2
	add	r5, r4, #4
	add	r6, r4, #8
	bl	_set_bit(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L3504
	ldr	r3, .L3510+8
	add	r1, r4, #284
.LPIC681:
	add	r3, pc, r3
	ldr	r0, [r3, #-616]
	bl	queue_work(PLT)
.L3504:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L3503
.L3511:
	.align	2
.L3510:
	.word	.LANCHOR2-(.LPIC678+8)
	.word	.LC187-(.LPIC679+8)
	.word	.LANCHOR4-(.LPIC681+8)
	.fnend
	.size	gbam_data_ch_probe, .-gbam_data_ch_probe
	.align	2
	.type	grmnet_ctrl_smd_ch_remove, %function
grmnet_ctrl_smd_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3556
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC682:
	add	r3, pc, r3
	ldr	r4, [r3, #532]
	cmp	r4, #0
	beq	.L3513
	ldr	r0, [r4, #4]
	mov	r2, #20
	ldr	r1, [r5]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3514
.L3513:
	ldr	r3, .L3556+4
.LPIC683:
	add	r3, pc, r3
	ldr	r4, [r3, #616]
	cmp	r4, #0
	beq	.L3515
	ldr	r0, [r4, #4]
	mov	r2, #20
	ldr	r1, [r5]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3514
.L3515:
	ldr	r3, .L3556+8
.LPIC684:
	add	r3, pc, r3
	ldr	r4, [r3, #700]
	cmp	r4, #0
	beq	.L3516
	ldr	r0, [r4, #4]
	mov	r2, #20
	ldr	r1, [r5]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3514
.L3516:
	ldr	r3, .L3556+12
.LPIC685:
	add	r3, pc, r3
	ldr	r4, [r3, #784]
	cmp	r4, #0
	beq	.L3517
	ldr	r0, [r4, #4]
	mov	r2, #20
	ldr	r1, [r5]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3514
.L3517:
	ldr	r3, .L3556+16
.LPIC686:
	add	r3, pc, r3
	ldr	r4, [r3, #868]
	cmp	r4, #0
	beq	.L3518
	ldr	r0, [r4, #4]
	mov	r2, #20
	ldr	r1, [r5]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3514
.L3518:
	ldr	r3, .L3556+20
.LPIC687:
	add	r3, pc, r3
	ldr	r4, [r3, #952]
	cmp	r4, #0
	beq	.L3521
	ldr	r1, [r5]
	mov	r2, #20
	ldr	r0, [r4, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3514
.L3521:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3514:
	add	r5, r4, #8
	mov	r0, #1
	mov	r1, r5
	bl	_clear_bit(PLT)
	mov	r0, #0
	mov	r1, r5
	bl	_clear_bit(PLT)
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L3521
	bl	smd_close(PLT)
	mov	r3, #0
	str	r3, [r4]
	b	.L3521
.L3557:
	.align	2
.L3556:
	.word	.LANCHOR2-(.LPIC682+8)
	.word	.LANCHOR2-(.LPIC683+8)
	.word	.LANCHOR2-(.LPIC684+8)
	.word	.LANCHOR2-(.LPIC685+8)
	.word	.LANCHOR2-(.LPIC686+8)
	.word	.LANCHOR2-(.LPIC687+8)
	.fnend
	.size	grmnet_ctrl_smd_ch_remove, .-grmnet_ctrl_smd_ch_remove
	.align	2
	.type	grmnet_ctrl_smd_ch_probe, %function
grmnet_ctrl_smd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3604
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC688:
	add	r3, pc, r3
	ldr	r4, [r3, #532]
	cmp	r4, #0
	beq	.L3559
	ldr	r0, [r4, #4]
	mov	r2, #20
	ldr	r1, [r5]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3560
.L3559:
	ldr	r3, .L3604+4
.LPIC689:
	add	r3, pc, r3
	ldr	r4, [r3, #616]
	cmp	r4, #0
	beq	.L3561
	ldr	r0, [r4, #4]
	mov	r2, #20
	ldr	r1, [r5]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3560
.L3561:
	ldr	r3, .L3604+8
.LPIC690:
	add	r3, pc, r3
	ldr	r4, [r3, #700]
	cmp	r4, #0
	beq	.L3562
	ldr	r0, [r4, #4]
	mov	r2, #20
	ldr	r1, [r5]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3560
.L3562:
	ldr	r3, .L3604+12
.LPIC691:
	add	r3, pc, r3
	ldr	r4, [r3, #784]
	cmp	r4, #0
	beq	.L3563
	ldr	r0, [r4, #4]
	mov	r2, #20
	ldr	r1, [r5]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3560
.L3563:
	ldr	r3, .L3604+16
.LPIC692:
	add	r3, pc, r3
	ldr	r4, [r3, #868]
	cmp	r4, #0
	beq	.L3564
	ldr	r0, [r4, #4]
	mov	r2, #20
	ldr	r1, [r5]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3560
.L3564:
	ldr	r3, .L3604+20
.LPIC693:
	add	r3, pc, r3
	ldr	r4, [r3, #952]
	cmp	r4, #0
	beq	.L3565
	ldr	r1, [r5]
	mov	r2, #20
	ldr	r0, [r4, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3560
.L3565:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3560:
	add	r5, r4, #8
	mov	r0, #2
	mov	r1, r5
	add	r6, r4, #108
	bl	_clear_bit(PLT)
	mov	r1, r5
	mov	r0, #1
	bl	_set_bit(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #104]
	mov	r5, r0
	cmp	r3, #0
	beq	.L3566
	ldr	r3, .L3604+24
	add	r1, r4, #112
	mov	r2, #0
.LPIC694:
	add	r3, pc, r3
	ldr	r0, [r3, #-648]
	bl	queue_delayed_work(PLT)
.L3566:
	mov	r0, r6
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L3565
.L3605:
	.align	2
.L3604:
	.word	.LANCHOR2-(.LPIC688+8)
	.word	.LANCHOR2-(.LPIC689+8)
	.word	.LANCHOR2-(.LPIC690+8)
	.word	.LANCHOR2-(.LPIC691+8)
	.word	.LANCHOR2-(.LPIC692+8)
	.word	.LANCHOR2-(.LPIC693+8)
	.word	.LANCHOR4-(.LPIC694+8)
	.fnend
	.size	grmnet_ctrl_smd_ch_probe, .-grmnet_ctrl_smd_ch_probe
	.align	2
	.type	ghsic_ctrl_remove, %function
ghsic_ctrl_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L3646
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
.LPIC695:
	add	r5, pc, r5
	ldr	r7, [r5, #1036]
	cmp	r7, #0
	beq	.L3607
	ldr	r4, [r5, #1040]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3608
	cmp	r7, #1
	bls	.L3607
	ldr	r4, [r5, #1144]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3608
	cmp	r7, #2
	beq	.L3607
	ldr	r4, [r5, #1248]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3608
	cmp	r7, #3
	beq	.L3607
	ldr	r4, [r5, #1352]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3608
.L3607:
	ldr	r1, .L3646+4
	mvn	r2, #21
	ldr	r0, .L3646+8
.LPIC701:
	add	r1, pc, r1
.LPIC700:
	add	r0, pc, r0
	add	r1, r1, #1056
	bl	printk(PLT)
	mvn	r0, #21
.L3640:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3608:
	add	r6, r4, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #8]
	mov	r1, r0
	cmp	r5, #0
	beq	.L3644
	ldr	r3, [r4, #48]
	cmp	r3, #0
	bne	.L3645
	str	r3, [r4, #92]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r5, #112]
	cmp	r3, #0
	beq	.L3618
.L3617:
	mov	r0, r5
	blx	r3
.L3618:
	add	r4, r4, #84
	mov	r0, #0
	mov	r1, r4
	bl	_clear_bit(PLT)
.L3612:
	mov	r0, #1
	mov	r1, r4
	bl	_clear_bit(PLT)
	mov	r0, #0
	b	.L3640
.L3645:
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #92]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r5, #96]
	cmp	r3, #0
	bne	.L3617
	b	.L3618
.L3644:
	mov	r0, r6
	add	r4, r4, #84
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L3612
.L3647:
	.align	2
.L3646:
	.word	.LANCHOR2-(.LPIC695+8)
	.word	.LANCHOR3-(.LPIC701+8)
	.word	.LC91-(.LPIC700+8)
	.fnend
	.size	ghsic_ctrl_remove, .-ghsic_ctrl_remove
	.align	2
	.type	gsmd_notify_modem, %function
gsmd_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3677
.LPIC702:
	add	r3, pc, r3
	ldr	ip, [r3, #312]
	cmp	r1, ip
	bcs	.L3674
	cmp	r0, #0
	beq	.L3675
	mov	ip, #108
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	lr, [sp, #12]
	and	lr, r2, #1
	mla	r3, ip, r1, r3
	str	r6, [sp, #8]
	cmp	lr, #0
	moveq	r1, #4
	movne	r1, #6
	moveq	ip, #0
	movne	ip, #2
	ldr	r4, [r3, #340]
	tst	r2, #2
	moveq	r1, ip
	ldr	r3, [r4, #156]
	cmp	r3, r1
	beq	.L3648
	ldr	r3, [r4, #72]
	str	r1, [r4, #156]
	ldr	r2, [r3, #8]
	tst	r2, #1
	beq	.L3648
	tst	r1, #2
	bne	.L3676
.L3656:
	ldrd	r4, [sp]
	mvn	r2, r1
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r0, [r3]
	b	smd_tiocmset(PLT)
.L3648:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3676:
	mov	r5, r0
	ldr	r0, [r3]
	bl	smd_tiocmget(PLT)
	and	r3, r0, #128
	cmp	r3, #0
	moveq	r1, #0
	movne	r1, #8
	moveq	r3, #1
	movne	r3, #9
	tst	r0, #64
	movne	r1, r3
	tst	r0, #256
	orrne	r1, r1, #2
	str	r1, [r4, #160]
	ldr	r3, [r5, #128]
	cmp	r3, #0
	beq	.L3673
	ldr	r0, [r4, #68]
	blx	r3
.L3673:
	ldr	r3, [r4, #72]
	ldr	r1, [r4, #156]
	b	.L3656
.L3674:
	ldr	r3, .L3677+4
	mov	r2, r1
	ldr	r0, .L3677+8
.LPIC704:
	add	r3, pc, r3
	add	r1, r3, #1072
.LPIC703:
	add	r0, pc, r0
	add	r1, r1, #4
	b	printk(PLT)
.L3675:
	ldr	r1, .L3677+12
	ldr	r0, .L3677+16
.LPIC706:
	add	r1, pc, r1
	add	r1, r1, #1072
.LPIC705:
	add	r0, pc, r0
	add	r1, r1, #4
	b	printk(PLT)
.L3678:
	.align	2
.L3677:
	.word	.LANCHOR2-(.LPIC702+8)
	.word	.LANCHOR3-(.LPIC704+8)
	.word	.LC88-(.LPIC703+8)
	.word	.LANCHOR3-(.LPIC706+8)
	.word	.LC89-(.LPIC705+8)
	.fnend
	.size	gsmd_notify_modem, .-gsmd_notify_modem
	.align	2
	.type	gbam_data_write_tobam, %function
gbam_data_write_tobam:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-4]
	.pad #12
	sub	sp, sp, #12
	add	r6, r3, #4
	mov	r5, r3
	str	r3, [sp, #4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #12]
	mov	fp, r0
	cmp	r3, #0
	beq	.L3680
	ldr	r10, .L3697
	sub	r7, r4, #20
	mov	r9, #0
	ldr	r3, [r4, #160]
.LPIC708:
	add	r10, pc, r10
	b	.L3681
.L3696:
	ldr	r3, [r4, #-12]
	sub	r3, r3, #1
	str	r3, [r4, #-12]
	ldrd	r2, [r5]
	str	r9, [r5]
	str	r9, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r2, [r4, #160]
	ldr	r3, [r4, #180]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r4, #160]
	str	r3, [r4, #180]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r1, r5
	ldr	r0, [r4, #-56]
	bl	msm_bam_dmux_write(PLT)
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r8, #0
	mov	fp, r0
	bne	.L3695
	ldr	r3, [r4, #160]
	ldr	r2, [r4, #200]
	cmp	r3, r2
	strhi	r3, [r4, #200]
.L3681:
	ldr	r2, [r10, #416]
	mov	r1, fp
	mov	r0, r6
	cmp	r2, r3
	bls	.L3682
	ldr	r5, [r4, #-20]
	cmp	r5, r7
	cmpne	r5, #0
	bne	.L3696
.L3682:
	mov	r0, r6
	mov	r1, fp
	ldr	r5, [r4, #-12]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L3697+4
.LPIC709:
	add	r3, pc, r3
	ldr	r3, [r3, #420]
	cmp	r5, r3
	bcs	.L3679
	ldr	r3, [r4, #196]
	cmp	r3, #0
	beq	.L3687
	ldr	r3, [r4, #188]
	mov	r2, #0
	str	r2, [r4, #196]
	add	r3, r3, #1
	str	r3, [r4, #188]
.L3687:
	ldr	r0, [sp, #4]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gbam_start_rx(PLT)
.L3679:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3695:
	ldr	r2, [r4, #160]
	mov	r0, r5
	ldr	r3, [r4, #180]
	ldr	r5, [r4, #168]
	sub	r2, r2, #1
	sub	r3, r3, #1
	add	r5, r5, #1
	str	r2, [r4, #160]
	str	r3, [r4, #180]
	str	r5, [r4, #168]
	bl	dev_kfree_skb_any(PLT)
	b	.L3682
.L3680:
	mov	r0, r6
	mov	r1, fp
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L3698:
	.align	2
.L3697:
	.word	.LANCHOR1-(.LPIC708+8)
	.word	.LANCHOR1-(.LPIC709+8)
	.fnend
	.size	gbam_data_write_tobam, .-gbam_data_write_tobam
	.align	2
	.type	gbam2bam_resume_work, %function
gbam2bam_resume_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	mov	r2, r1
	ldrb	r0, [r0, #-203]	@ zero_extendqisi2
	bl	usb_bam_register_wake_cb(PLT)
	ldr	r3, [r4, #-200]
	cmp	r3, #7
	beq	.L3702
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3702:
	sub	r0, r4, #196
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	usb_bam_resume(PLT)
	.fnend
	.size	gbam2bam_resume_work, .-gbam2bam_resume_work
	.align	2
	.type	bam2bam_data_resume_work, %function
bam2bam_data_resume_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	mov	r2, r1
	ldrb	r0, [r0, #-163]	@ zero_extendqisi2
	bl	usb_bam_register_wake_cb(PLT)
	ldr	r3, [r4, #-156]
	cmp	r3, #7
	beq	.L3706
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3706:
	sub	r0, r4, #152
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	usb_bam_resume(PLT)
	.fnend
	.size	bam2bam_data_resume_work, .-bam2bam_data_resume_work
	.align	2
	.type	gbam2bam_suspend_work, %function
gbam2bam_suspend_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L3711
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	sub	r5, r0, #316
	str	r6, [sp, #8]
	mov	r4, r0
	mov	r2, r5
	str	lr, [sp, #12]
	ldrb	r0, [r0, #-187]	@ zero_extendqisi2
.LPIC710:
	add	r1, pc, r1
	bl	usb_bam_register_wake_cb(PLT)
	ldr	r3, [r4, #-184]
	cmp	r3, #7
	beq	.L3710
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3710:
	ldr	r0, .L3711+4
	mov	r2, r5
	ldr	r1, .L3711+8
.LPIC711:
	add	r0, pc, r0
.LPIC712:
	add	r1, pc, r1
	bl	usb_bam_register_start_stop_cbs(PLT)
	ldr	r6, [sp, #8]
	sub	r0, r4, #180
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	usb_bam_suspend(PLT)
.L3712:
	.align	2
.L3711:
	.word	gbam_wake_cb-(.LPIC710+8)
	.word	gbam_start-(.LPIC711+8)
	.word	gbam_stop-(.LPIC712+8)
	.fnend
	.size	gbam2bam_suspend_work, .-gbam2bam_suspend_work
	.align	2
	.type	bam2bam_data_suspend_work, %function
bam2bam_data_suspend_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L3717
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	sub	r5, r0, #200
	str	r6, [sp, #8]
	mov	r4, r0
	mov	r2, r5
	str	lr, [sp, #12]
	ldrb	r0, [r0, #-147]	@ zero_extendqisi2
.LPIC713:
	add	r1, pc, r1
	bl	usb_bam_register_wake_cb(PLT)
	ldr	r3, [r4, #-140]
	cmp	r3, #7
	beq	.L3716
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3716:
	ldr	r0, .L3717+4
	mov	r2, r5
	ldr	r1, .L3717+8
.LPIC714:
	add	r0, pc, r0
.LPIC715:
	add	r1, pc, r1
	bl	usb_bam_register_start_stop_cbs(PLT)
	ldr	r6, [sp, #8]
	sub	r0, r4, #136
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	usb_bam_suspend(PLT)
.L3718:
	.align	2
.L3717:
	.word	bam_data_wake_cb-(.LPIC713+8)
	.word	bam_data_start-(.LPIC714+8)
	.word	bam_data_stop-(.LPIC715+8)
	.fnend
	.size	bam2bam_data_suspend_work, .-bam2bam_data_suspend_work
	.align	2
	.type	gbam_peer_reset_cb, %function
gbam_peer_reset_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #12]
	cmp	r3, #0
	moveq	r5, r3
	beq	.L3720
	ldr	r2, [r3, #76]
	cmp	r2, #0
	moveq	r5, r2
	beq	.L3720
	ldr	r5, [r2]
	cmp	r5, #0
	beq	.L3720
	ldr	r0, [r3, #80]
	mov	r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	ldr	r0, [r3, #76]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #12]
	mov	r3, #0
	ldr	r2, [r2, #76]
	str	r3, [r2]
	ldr	r2, [r4, #12]
	ldr	r2, [r2, #80]
	str	r3, [r2]
.L3720:
	mov	r0, #1
	bl	msm_hw_bam_disable(PLT)
	mov	r0, #0
	bl	usb_bam_a2_reset(PLT)
	subs	r2, r0, #0
	bne	.L3747
	bl	msm_hw_bam_disable(PLT)
.L3722:
	cmp	r5, #0
	bne	.L3748
.L3723:
	ldr	r3, [r4, #132]
	cmp	r3, #6
	beq	.L3749
.L3736:
	mov	r5, #0
.L3725:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3749:
	ldr	r5, [r4]
	cmp	r5, #0
	bne	.L3736
	mov	r0, r5
	mov	r1, r5
	bl	usb_bam_register_peer_reset_cb(PLT)
	b	.L3725
.L3748:
	ldr	r3, [r4, #12]
	ldr	r0, [r3, #76]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L3750
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #76]
	str	r4, [r3]
	ldr	r3, [r4, #12]
	ldr	r0, [r3, #80]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L3751
	ldr	r3, [r4, #12]
	add	r5, r4, #4
	mov	r0, r5
	ldr	r3, [r3, #80]
	str	r4, [r3]
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L3752
	ldr	r0, [r3, #80]
	mov	r2, #32
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L3753
.L3729:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
.L3728:
	add	r5, r4, #8
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L3754
	ldr	r0, [r3, #76]
	mov	r2, #32
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L3755
.L3731:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	b	.L3723
.L3747:
	ldr	r1, .L3756
	ldr	r0, .L3756+4
.LPIC717:
	add	r1, pc, r1
	add	r1, r1, #1088
.LPIC716:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L3722
.L3750:
	ldr	r1, .L3756+8
	ldr	r3, [r4, #12]
	ldr	r0, .L3756+12
.LPIC719:
	add	r1, pc, r1
	add	r1, r1, #1088
	ldr	r2, [r3, #76]
	add	r1, r1, #8
.LPIC718:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L3725
.L3751:
	ldr	r1, .L3756+16
	ldr	r3, [r4, #12]
	ldr	r0, .L3756+20
.LPIC721:
	add	r1, pc, r1
	add	r1, r1, #1088
	ldr	r2, [r3, #80]
.LPIC720:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	ldr	r3, [r4, #12]
	mov	r2, #0
	ldr	r3, [r3, #76]
	str	r2, [r3]
	b	.L3725
.L3752:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L3756+24
	ldr	r0, .L3756+28
.LPIC723:
	add	r1, pc, r1
	add	r1, r1, #1104
.LPIC722:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L3728
.L3753:
	ldr	r1, .L3756+32
	mov	r2, r0
	ldr	r0, .L3756+36
.LPIC725:
	add	r1, pc, r1
	add	r1, r1, #1104
.LPIC724:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L3729
.L3754:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L3756+40
	ldr	r0, .L3756+44
.LPIC727:
	add	r1, pc, r1
	add	r1, r1, #1136
.LPIC726:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L3723
.L3755:
	ldr	r1, .L3756+48
	mov	r2, r0
	ldr	r0, .L3756+52
.LPIC729:
	add	r1, pc, r1
	add	r1, r1, #1136
.LPIC728:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L3731
.L3757:
	.align	2
.L3756:
	.word	.LANCHOR3-(.LPIC717+8)
	.word	.LC188-(.LPIC716+8)
	.word	.LANCHOR3-(.LPIC719+8)
	.word	.LC189-(.LPIC718+8)
	.word	.LANCHOR3-(.LPIC721+8)
	.word	.LC190-(.LPIC720+8)
	.word	.LANCHOR3-(.LPIC723+8)
	.word	.LC29-(.LPIC722+8)
	.word	.LANCHOR3-(.LPIC725+8)
	.word	.LC191-(.LPIC724+8)
	.word	.LANCHOR3-(.LPIC727+8)
	.word	.LC29-(.LPIC726+8)
	.word	.LANCHOR3-(.LPIC729+8)
	.word	.LC191-(.LPIC728+8)
	.fnend
	.size	gbam_peer_reset_cb, .-gbam_peer_reset_cb
	.align	2
	.type	bam_data_peer_reset_cb, %function
bam_data_peer_reset_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, #1
	str	lr, [sp, #4]
	bl	msm_hw_bam_disable(PLT)
	mov	r0, #0
	bl	usb_bam_a2_reset(PLT)
	subs	r4, r0, #0
	bne	.L3762
	bl	msm_hw_bam_disable(PLT)
	mov	r0, r4
	mov	r1, r4
	bl	usb_bam_register_peer_reset_cb(PLT)
.L3760:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3762:
	ldr	r1, .L3763
	mov	r3, r4
	ldr	r0, .L3763+4
.LPIC731:
	add	r1, pc, r1
	add	r1, r1, #1152
.LPIC730:
	add	r0, pc, r0
	add	r1, r1, #12
	mov	r2, r1
	bl	printk(PLT)
	b	.L3760
.L3764:
	.align	2
.L3763:
	.word	.LANCHOR3-(.LPIC731+8)
	.word	.LC192-(.LPIC730+8)
	.fnend
	.size	bam_data_peer_reset_cb, .-bam_data_peer_reset_cb
	.section	.init.text
	.align	2
	.type	gqti_ctrl_init, %function
gqti_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3771
	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
.LPIC741:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L3768
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	bne	.L3766
	ldr	r0, .L3771+4
.LPIC734:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #11
	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
.L3768:
	mov	r4, #16
.L3766:
	ldr	r7, .L3771+8
	mov	r5, #0
	add	r3, r4, #44
	ldr	r1, .L3771+12
	add	r0, r4, #32
	str	r3, [r4, #44]
	str	r3, [r4, #48]
.LPIC736:
	add	r7, pc, r7
	str	r5, [r4, #52]
.LPIC735:
	add	r1, pc, r1
	sub	r2, r7, #508
	str	r5, [r4, #16]
	str	r5, [r4, #20]
	str	r5, [r4, #24]
	str	r5, [r4, #28]
	str	r5, [r4, #8]
	str	r5, [r4, #12]
	bl	__init_waitqueue_head(PLT)
	ldr	r0, .L3771+16
	str	r4, [r7, #-508]
.LPIC738:
	add	r0, pc, r0
	add	r0, r0, #120
	bl	misc_register(PLT)
	subs	r6, r0, #0
	beq	.L3769
	ldr	r0, .L3771+20
.LPIC739:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	str	r5, [r7, #-508]
	mov	r0, r6
	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
.L3769:
	mov	r0, r6
	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
.L3772:
	.align	2
.L3771:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC741+8))
	.word	.LC193-(.LPIC734+8)
	.word	.LANCHOR4-(.LPIC736+8)
	.word	.LC194-(.LPIC735+8)
	.word	.LANCHOR0-(.LPIC738+8)
	.word	.LC195-(.LPIC739+8)
	.fnend
	.size	gqti_ctrl_init, .-gqti_ctrl_init
	.text
	.align	2
	.type	accessory_function_init, %function
accessory_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3784
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC753:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #44]
	cmp	r0, #0
	beq	.L3777
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L3782
.L3774:
	ldr	r5, .L3784+4
	mov	r7, #0
	add	r0, r4, #1648
	ldr	r1, .L3784+8
	add	r0, r0, #8
	mov	r6, #2560
	str	r7, [r4, #80]
	add	r8, r4, #1648
.LPIC744:
	add	r5, pc, r5
	sub	r5, r5, #504
.LPIC743:
	add	r1, pc, r1
	mov	r2, r5
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L3784+12
	add	r0, r4, #1664
	mov	r2, r5
	add	r0, r0, #4
	add	r5, r4, #1696
.LPIC745:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	lr, .L3784+16
	add	ip, r4, #1760
	add	r2, r4, #1744
	mov	r3, ip
	add	r2, r2, #12
	str	r6, [r4, #1692]
	add	ip, ip, #4
	add	r3, r3, #12
	str	r5, [r4, #1696]
	add	r0, r5, #12
	str	r2, [r4, #1756]
	mov	r1, r7
.LPIC747:
	add	lr, pc, lr
	str	r2, [r4, #1760]
	mov	r2, r7
	str	ip, [r4, #1764]
	str	ip, [r4, #1768]
	str	r3, [r4, #1772]
	str	r3, [r4, #1776]
	str	lr, [r4, #1704]
	str	r5, [r4, #1700]
	str	r7, [r4, #1644]
	str	r8, [r4, #1648]
	str	r8, [r4, #1652]
	bl	init_timer_key(PLT)
	ldr	r3, .L3784+20
	str	r6, [r4, #1740]
	add	r1, r4, #1680
	ldr	r2, .L3784+24
	add	ip, r4, #1744
	add	r1, r1, #12
	ldr	r0, .L3784+28
	ldr	r6, .L3784+32
	str	ip, [r4, #1744]
.LPIC752:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r1, [r4, #1728]
.LPIC748:
	add	r2, pc, r2
	str	ip, [r4, #1748]
.LPIC750:
	add	r0, pc, r0
.LPIC749:
	add	r6, pc, r6
	str	r2, [r4, #1752]
	add	r0, r0, #156
	str	r3, [r4, #1724]
	str	r4, [r6, #2316]
	bl	misc_register(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L3783
.L3775:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3777:
	mov	r4, #16
	b	.L3774
.L3782:
	mvn	r0, #11
	b	.L3775
.L3783:
.L3776:
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r0, .L3784+36
.LPIC751:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r5
	b	.L3775
.L3785:
	.align	2
.L3784:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC753+8))
	.word	.LANCHOR4-(.LPIC744+8)
	.word	.LC196-(.LPIC743+8)
	.word	.LC197-(.LPIC745+8)
	.word	acc_start_work-(.LPIC747+8)
	.word	delayed_work_timer_fn(GOT_PREL)+(.-(.LPIC752+8))
	.word	acc_hid_work-(.LPIC748+8)
	.word	.LANCHOR0-(.LPIC750+8)
	.word	.LANCHOR2-(.LPIC749+8)
	.word	.LC198-(.LPIC751+8)
	.fnend
	.size	accessory_function_init, .-accessory_function_init
	.align	2
	.type	rndis_qc_function_init, %function
rndis_qc_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3795
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC760:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L3787
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r4, #4]
	beq	.L3790
.L3789:
	ldr	r4, .L3795+4
	ldr	r0, .L3795+8
.LPIC756:
	add	r4, pc, r4
	add	r4, r4, #1184
.LPIC755:
	add	r0, pc, r0
	add	r4, r4, #4
	mov	r1, r4
	bl	printk(PLT)
	ldr	r0, .L3795+12
.LPIC757:
	add	r0, pc, r0
	add	r0, r0, #192
	bl	misc_register(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L3794
.L3792:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3787:
	mov	r3, #16
	str	r3, [r4, #4]
	b	.L3789
.L3790:
	mvn	r0, #11
	b	.L3792
.L3794:
	ldr	r0, .L3795+16
	mov	r1, r4
.LPIC758:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r5
	b	.L3792
.L3796:
	.align	2
.L3795:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC760+8))
	.word	.LANCHOR3-(.LPIC756+8)
	.word	.LC199-(.LPIC755+8)
	.word	.LANCHOR0-(.LPIC757+8)
	.word	.LC200-(.LPIC758+8)
	.fnend
	.size	rndis_qc_function_init, .-rndis_qc_function_init
	.align	2
	.type	mtp_function_init, %function
mtp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3810
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
.LPIC775:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L3802
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L3808
.L3798:
	ldr	r5, .L3810+4
	mov	r6, #0
	add	r0, r4, #124
	ldr	r1, .L3810+8
	str	r6, [r4, #80]
.LPIC763:
	add	r5, pc, r5
	sub	r5, r5, #504
.LPIC762:
	add	r1, pc, r1
	mov	r2, r5
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L3810+12
	mov	r2, r5
	add	r0, r4, #136
.LPIC764:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L3810+16
	mov	r2, r5
	add	r0, r4, #148
.LPIC766:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r0, .L3810+20
	add	lr, r4, #108
	add	ip, r4, #116
	str	r6, [r4, #100]
	mov	r3, r6
	mov	r1, #10
	str	r6, [r4, #104]
	mov	r2, #1
	str	lr, [r4, #108]
	str	lr, [r4, #112]
.LPIC768:
	add	r0, pc, r0
	str	ip, [r4, #116]
	str	ip, [r4, #120]
	str	r6, [sp]
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, r6
	str	r0, [r4, #172]
	beq	.L3804
	ldr	r1, .L3810+24
	mov	r5, #2560
	add	lr, r4, #180
	ldr	r2, .L3810+28
	add	ip, r4, #196
	ldr	r0, .L3810+32
	str	r5, [r4, #176]
	ldr	r3, .L3810+36
	str	r5, [r4, #192]
.LPIC769:
	add	r1, pc, r1
	str	lr, [r4, #180]
.LPIC770:
	add	r2, pc, r2
	str	lr, [r4, #184]
.LPIC772:
	add	r0, pc, r0
	str	r1, [r4, #188]
.LPIC771:
	add	r3, pc, r3
	str	r2, [r4, #204]
	add	r0, r0, #228
	str	ip, [r4, #196]
	str	ip, [r4, #200]
	str	r4, [r3, #2320]
	bl	misc_register(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L3809
.L3799:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3802:
	mov	r4, #16
	b	.L3798
.L3808:
	mvn	r0, #11
	b	.L3799
.L3809:
.L3801:
	ldr	r0, [r4, #172]
	bl	destroy_workqueue(PLT)
.L3800:
	ldr	r3, .L3810+40
	mov	r2, #0
	mov	r0, r4
.LPIC773:
	add	r3, pc, r3
	str	r2, [r3, #2320]
	bl	kfree(PLT)
	ldr	r0, .L3810+44
.LPIC774:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r5
	b	.L3799
.L3804:
	mvn	r5, #11
	b	.L3800
.L3811:
	.align	2
.L3810:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC775+8))
	.word	.LANCHOR4-(.LPIC763+8)
	.word	.LC196-(.LPIC762+8)
	.word	.LC197-(.LPIC764+8)
	.word	.LC201-(.LPIC766+8)
	.word	.LC202-(.LPIC768+8)
	.word	send_file_work-(.LPIC769+8)
	.word	receive_file_work-(.LPIC770+8)
	.word	.LANCHOR0-(.LPIC772+8)
	.word	.LANCHOR2-(.LPIC771+8)
	.word	.LANCHOR2-(.LPIC773+8)
	.word	.LC203-(.LPIC774+8)
	.fnend
	.size	mtp_function_init, .-mtp_function_init
	.align	2
	.type	adb_function_init, %function
adb_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L3828
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC784:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
	ldr	r0, [r4, #24]
	cmp	r0, #0
	beq	.L3813
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r5, #4]
	beq	.L3817
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L3819
.L3827:
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L3817
.L3816:
	ldr	r5, .L3828+4
	mov	r6, #0
	add	r0, r4, #120
	ldr	r1, .L3828+8
	str	r6, [r4, #80]
.LPIC778:
	add	r5, pc, r5
	sub	r7, r5, #504
.LPIC777:
	add	r1, pc, r1
	mov	r2, r7
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L3828+12
	mov	r2, r7
	add	r0, r4, #132
.LPIC779:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r0, .L3828+16
	add	r3, r4, #112
	mov	r2, #1
	str	r6, [r4, #108]
	str	r6, [r4, #100]
	str	r6, [r4, #104]
.LPIC782:
	add	r0, pc, r0
	strb	r2, [r4, #153]
	add	r0, r0, #264
	str	r3, [r4, #112]
	str	r3, [r4, #116]
	str	r4, [r5, #-644]
	bl	misc_register(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L3826
.L3824:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3813:
	mov	r3, #16
	str	r3, [r5, #4]
	ldr	r0, [r4, #8]
	cmp	r0, #0
	bne	.L3827
.L3819:
	mov	r4, #16
	b	.L3816
.L3817:
	mvn	r0, #11
	b	.L3824
.L3826:
.L3818:
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r0, .L3828+20
.LPIC783:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r5
	b	.L3824
.L3829:
	.align	2
.L3828:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC784+8))
	.word	.LANCHOR4-(.LPIC778+8)
	.word	.LC196-(.LPIC777+8)
	.word	.LC197-(.LPIC779+8)
	.word	.LANCHOR0-(.LPIC782+8)
	.word	.LC204-(.LPIC783+8)
	.fnend
	.size	adb_function_init, .-adb_function_init
	.align	2
	.type	rmnet_smd_sdio_function_init, %function
rmnet_smd_sdio_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r3, .L3851
	strd	r6, [sp, #8]
	ldr	r7, .L3851+4
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
.LPIC785:
	add	r7, pc, r7
	ldr	r3, [r7, r3]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L3838
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L3848
.L3831:
	ldr	ip, .L3851+8
	mov	r5, #0
	mov	r1, #10
	ldr	r0, .L3851+12
	mov	r3, r5
	mov	r2, #1
	str	r5, [sp]
.LPIC786:
	add	ip, pc, ip
.LPIC787:
	add	r0, pc, r0
	str	r4, [ip, #2312]
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, r5
	str	r0, [r4, #368]
	beq	.L3840
	ldr	r3, .L3851+16
	add	ip, r4, #376
	mov	r9, #2560
	ldr	r1, .L3851+20
	str	r5, [r4, #356]
	add	r0, r4, #144
	str	ip, [r4, #376]
	mov	r2, r4
	ldr	r6, .L3851+24
	str	ip, [r4, #380]
	add	r10, r4, #112
	add	r8, r4, #96
.LPIC788:
	add	r3, pc, r3
	str	r5, [r4, #364]
	add	fp, r4, #104
.LPIC789:
	add	r1, pc, r1
	str	r5, [r4, #360]
	str	r3, [r4, #384]
.LPIC792:
	add	r6, pc, r6
	str	r5, [r4, #168]
	sub	r6, r6, #504
	str	r9, [r4, #372]
	bl	tasklet_init(PLT)
	ldr	r1, .L3851+28
	add	r0, r4, #124
	mov	r2, r4
.LPIC790:
	add	r1, pc, r1
	bl	tasklet_init(PLT)
	ldr	r1, .L3851+32
	mov	r2, r6
	add	r0, r4, #172
.LPIC791:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r2, .L3851+36
	str	r10, [r4, #112]
	add	lr, r4, #236
	ldr	r3, .L3851+40
	str	r10, [r4, #116]
	add	ip, r4, #252
	ldr	r10, .L3851+44
	mov	r1, r5
	str	r9, [r4, #232]
	add	r0, r4, #264
	str	r9, [r4, #248]
	add	r9, r4, #248
.LPIC793:
	add	r2, pc, r2
	str	r8, [r4, #96]
.LPIC794:
	add	r3, pc, r3
	str	r8, [r4, #100]
	add	r8, r4, #208
	str	r2, [r4, #244]
	mov	r2, r5
	str	r3, [r4, #260]
	str	fp, [r4, #104]
	str	fp, [r4, #108]
	add	fp, r4, #328
	str	lr, [r4, #236]
	str	lr, [r4, #240]
	str	ip, [r4, #252]
	str	ip, [r4, #256]
	bl	init_timer_key(PLT)
	mov	r2, r6
	ldr	r1, .L3851+48
	add	lr, r4, #192
	ldr	r6, [r7, r10]
	add	ip, r4, #216
	add	r3, r4, #304
	str	r5, [r4, #204]
	add	r0, r4, #312
	str	r5, [r4, #200]
	str	r5, [r4, #228]
.LPIC795:
	add	r1, pc, r1
	str	r5, [r4, #224]
	add	r5, r4, #184
	str	lr, [r4, #192]
	str	r5, [r4, #184]
	str	r5, [r4, #188]
	str	lr, [r4, #196]
	str	ip, [r4, #216]
	str	ip, [r4, #220]
	str	r3, [r4, #304]
	str	r3, [r4, #308]
	str	r6, [r4, #280]
	str	r9, [r4, #284]
	str	r8, [r4, #208]
	str	r8, [r4, #212]
	str	fp, [r4, #328]
	str	fp, [r4, #332]
	bl	__init_waitqueue_head(PLT)
	ldr	r0, .L3851+52
.LPIC797:
	add	r0, pc, r0
	add	r0, r0, #300
	bl	misc_register(PLT)
	subs	r5, r0, #0
	bne	.L3849
	ldr	r0, .L3851+56
	mov	r1, r5
.LPIC801:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	ldr	r3, .L3851+60
	cmp	r0, #0
	ldr	r6, [r7, r3]
	str	r0, [r6]
	beq	.L3836
	cmn	r0, #4096
	bhi	.L3836
	ldr	ip, .L3851+64
	mov	r2, r0
	mov	r3, r4
	ldr	r0, .L3851+68
	mov	r1, #292
	ldr	ip, [r7, ip]
.LPIC800:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	subs	r5, r0, #0
	beq	.L3850
.L3836:
	mov	r0, #0
	b	.L3844
.L3849:
	ldr	r1, .L3851+72
	ldr	r0, .L3851+76
.LPIC799:
	add	r1, pc, r1
	add	r1, r1, #1200
.LPIC798:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, [r4, #368]
	bl	destroy_workqueue(PLT)
.L3833:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
.L3844:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3838:
	mov	r4, #16
	b	.L3831
.L3840:
	mvn	r5, #11
	b	.L3833
.L3850:
	ldr	r0, [r6]
	bl	debugfs_remove(PLT)
	str	r5, [r6]
	mov	r0, r5
	b	.L3844
.L3848:
	mvn	r0, #11
	b	.L3844
.L3852:
	.align	2
.L3851:
	.word	kmalloc_caches(GOT)
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC785+8)
	.word	.LANCHOR2-(.LPIC786+8)
	.word	.LC205-(.LPIC787+8)
	.word	rmnet_mux_disconnect_work-(.LPIC788+8)
	.word	rmnet_mux_smd_data_rx_tlet-(.LPIC789+8)
	.word	.LANCHOR4-(.LPIC792+8)
	.word	rmnet_mux_smd_data_tx_tlet-(.LPIC790+8)
	.word	.LC206-(.LPIC791+8)
	.word	rmnet_mux_sdio_data_rx_work-(.LPIC793+8)
	.word	rmnet_mux_open_sdio_work-(.LPIC794+8)
	.word	delayed_work_timer_fn(GOT)
	.word	.LC207-(.LPIC795+8)
	.word	.LANCHOR0-(.LPIC797+8)
	.word	.LC209-(.LPIC801+8)
	.word	dent_rmnet_mux(GOT)
	.word	rmnet_mux_svlte_debug_stats_ops(GOT)
	.word	.LC135-(.LPIC800+8)
	.word	.LANCHOR3-(.LPIC799+8)
	.word	.LC208-(.LPIC798+8)
	.fnend
	.size	rmnet_smd_sdio_function_init, .-rmnet_smd_sdio_function_init
	.section	.exit.text
	.align	2
	.type	gqti_ctrl_cleanup, %function
gqti_ctrl_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L3855
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
	ldr	r4, .L3855+4
.LPIC802:
	add	r0, pc, r0
	add	r0, r0, #120
.LPIC803:
	add	r4, pc, r4
	bl	misc_deregister(PLT)
	ldr	r0, [r4, #-508]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #-508]
	ldmfd	sp!, {r4, pc}
.L3856:
	.align	2
.L3855:
	.word	.LANCHOR0-(.LPIC802+8)
	.word	.LANCHOR4-(.LPIC803+8)
	.fnend
	.size	gqti_ctrl_cleanup, .-gqti_ctrl_cleanup
	.text
	.align	2
	.type	accessory_function_cleanup, %function
accessory_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L3859
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r4, .L3859+4
	str	lr, [sp, #4]
.LPIC805:
	add	r0, pc, r0
.LPIC806:
	add	r4, pc, r4
	add	r0, r0, #156
	bl	misc_deregister(PLT)
	ldr	r0, [r4, #2316]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #2316]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3860:
	.align	2
.L3859:
	.word	.LANCHOR0-(.LPIC805+8)
	.word	.LANCHOR2-(.LPIC806+8)
	.fnend
	.size	accessory_function_cleanup, .-accessory_function_cleanup
	.align	2
	.type	rndis_qc_function_cleanup, %function
rndis_qc_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L3863
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	ldr	r0, .L3863+4
	str	lr, [sp, #4]
.LPIC809:
	add	r1, pc, r1
	add	r1, r1, #1232
.LPIC808:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L3863+8
.LPIC810:
	add	r0, pc, r0
	add	r0, r0, #192
	bl	misc_deregister(PLT)
	ldr	r3, .L3863+12
	mov	r2, #0
	ldr	r0, [r4, #4]
.LPIC812:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r2, [r3]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree(PLT)
.L3864:
	.align	2
.L3863:
	.word	.LANCHOR3-(.LPIC809+8)
	.word	.LC210-(.LPIC808+8)
	.word	.LANCHOR0-(.LPIC810+8)
	.word	_rndis_qc(GOT_PREL)+(.-(.LPIC812+8))
	.fnend
	.size	rndis_qc_function_cleanup, .-rndis_qc_function_cleanup
	.align	2
	.type	mtp_function_cleanup, %function
mtp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L3868
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC813:
	add	r5, pc, r5
	ldr	r4, [r5, #2320]
	cmp	r4, #0
	beq	.L3865
	ldr	r0, .L3868+4
.LPIC814:
	add	r0, pc, r0
	add	r0, r0, #228
	bl	misc_deregister(PLT)
	ldr	r0, [r4, #172]
	bl	destroy_workqueue(PLT)
	mov	r3, #0
	mov	r0, r4
	str	r3, [r5, #2320]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree(PLT)
.L3865:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3869:
	.align	2
.L3868:
	.word	.LANCHOR2-(.LPIC813+8)
	.word	.LANCHOR0-(.LPIC814+8)
	.fnend
	.size	mtp_function_cleanup, .-mtp_function_cleanup
	.align	2
	.type	ccid_function_cleanup, %function
ccid_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r4, .L3872
	str	lr, [sp, #4]
.LPIC816:
	add	r4, pc, r4
	add	r0, r4, #336
	bl	misc_deregister(PLT)
	add	r0, r4, #372
	bl	misc_deregister(PLT)
	ldr	r3, .L3872+4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC818:
	add	r3, pc, r3
	ldr	r0, [r3, #2220]
	b	kfree(PLT)
.L3873:
	.align	2
.L3872:
	.word	.LANCHOR0-(.LPIC816+8)
	.word	.LANCHOR2-(.LPIC818+8)
	.fnend
	.size	ccid_function_cleanup, .-ccid_function_cleanup
	.align	2
	.type	adb_function_cleanup, %function
adb_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3876
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	ldr	r4, .L3876+4
	str	lr, [sp, #12]
	str	r6, [sp, #8]
.LPIC819:
	add	r3, pc, r3
.LPIC820:
	add	r4, pc, r4
	add	r0, r3, #264
	bl	misc_deregister(PLT)
	ldr	r0, [r4, #-644]
	bl	kfree(PLT)
	mov	r3, #0
	ldr	r0, [r5, #4]
	str	r3, [r4, #-644]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree(PLT)
.L3877:
	.align	2
.L3876:
	.word	.LANCHOR0-(.LPIC819+8)
	.word	.LANCHOR4-(.LPIC820+8)
	.fnend
	.size	adb_function_cleanup, .-adb_function_cleanup
	.align	2
	.type	rmnet_smd_sdio_function_cleanup, %function
rmnet_smd_sdio_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3880
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r2, .L3880+4
	str	lr, [sp, #4]
.LPIC825:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
.LPIC822:
	add	r2, pc, r2
	ldr	r4, [r2, #2312]
	ldr	r0, [r3]
	bl	debugfs_remove_recursive(PLT)
	ldr	r0, .L3880+8
.LPIC824:
	add	r0, pc, r0
	add	r0, r0, #300
	bl	misc_deregister(PLT)
	ldr	r0, [r4, #120]
	bl	smd_close(PLT)
	ldr	r0, [r4, #368]
	bl	destroy_workqueue(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
.L3881:
	.align	2
.L3880:
	.word	dent_rmnet_mux(GOT_PREL)+(.-(.LPIC825+8))
	.word	.LANCHOR2-(.LPIC822+8)
	.word	.LANCHOR0-(.LPIC824+8)
	.fnend
	.size	rmnet_smd_sdio_function_cleanup, .-rmnet_smd_sdio_function_cleanup
	.align	2
	.type	mbim_function_cleanup, %function
mbim_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L3887
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L3887+4
	str	lr, [sp, #4]
	ldr	r4, .L3887+8
.LPIC827:
	add	r1, pc, r1
	add	r1, r1, #1248
.LPIC826:
	add	r0, pc, r0
.LPIC828:
	add	r4, pc, r4
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r3, [r4, #-504]
	cmp	r3, #0
	beq	.L3884
	ldr	r0, [r4, #-500]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #-500]
.L3884:
	ldr	r0, .L3887+12
	mov	r4, #0
	ldr	r3, .L3887+16
.LPIC830:
	add	r0, pc, r0
.LPIC829:
	add	r3, pc, r3
	add	r0, r0, #408
	str	r4, [r3, #-504]
	bl	misc_deregister(PLT)
	ldr	r3, .L3887+20
.LPIC831:
	add	r3, pc, r3
	str	r4, [r3, #2396]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3888:
	.align	2
.L3887:
	.word	.LANCHOR3-(.LPIC827+8)
	.word	.LC211-(.LPIC826+8)
	.word	.LANCHOR4-(.LPIC828+8)
	.word	.LANCHOR0-(.LPIC830+8)
	.word	.LANCHOR4-(.LPIC829+8)
	.word	.LANCHOR2-(.LPIC831+8)
	.fnend
	.size	mbim_function_cleanup, .-mbim_function_cleanup
	.align	2
	.type	ffs_epfile_io_complete, %function
ffs_epfile_io_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L3889
	ldr	r2, [r3, #4]
	cmp	r2, #0
	beq	.L3889
	ldr	r2, [r1, #32]
	cmp	r2, #0
	beq	.L3889
	ldr	r2, [r1, #44]
	cmp	r2, #0
	ldreq	r2, [r1, #48]
	str	r2, [r3, #24]
	ldr	r0, [r1, #32]
	b	complete(PLT)
.L3889:
	bx	lr
	.fnend
	.size	ffs_epfile_io_complete, .-ffs_epfile_io_complete
	.align	2
	.type	tx_complete, %function
tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L3940
	ldmib	r4, {r2, r7}
	cmp	r2, #0
	beq	.L3940
	ldr	r3, [r1, #44]
	mov	r5, r1
	cmn	r3, #104
	beq	.L3923
	cmp	r3, #0
	beq	.L3906
	cmn	r3, #108
	beq	.L3923
	ldr	r3, [r7, #204]
	add	r3, r3, #1
	str	r3, [r7, #204]
	ldr	r2, [r4, #8]
.L3905:
	ldr	r3, [r2, #188]
	add	r6, r4, #16
	add	r8, r4, #20
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r2, #188]
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #24]
	add	r2, r5, #36
	str	r2, [r4, #24]
	str	r8, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	ldr	r3, [r4, #4]
	ldr	r9, [r5, #32]
	ldrb	r3, [r3, #116]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L3922
	cmp	r9, #0
	beq	.L3941
	ldr	r0, [r4, #48]
	cmp	r0, #0
	beq	.L3922
	movw	r1, #32800
	bl	__kmalloc(PLT)
	mov	r3, #0
	str	r0, [r5]
	str	r3, [r5, #32]
.L3917:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	mov	r0, r9
	bl	dev_kfree_skb_any(PLT)
.L3916:
	ldr	r3, [r4, #8]
	ldr	r2, [r3, #116]
	tst	r2, #4
	beq	.L3942
.L3901:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3906:
	ldrb	r3, [r1, #26]	@ zero_extendqisi2
	ldr	r2, [r1, #4]
	tst	r3, #2
	ldr	r3, [r7, #196]
	add	r3, r3, r2
	subeq	r3, r3, #1
	str	r3, [r7, #196]
	ldr	r2, [r4, #8]
	b	.L3905
.L3922:
	mov	r3, #0
	str	r3, [r5]
	b	.L3917
.L3942:
	ldr	r4, [r3, #576]
	mov	r0, #0
	add	r1, r4, #80
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	beq	.L3901
	ldr	r0, [r4, #4]
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__netif_schedule(PLT)
.L3923:
	mov	r2, r7
	b	.L3905
.L3940:
	ldr	r3, [r3, #8]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L3941:
	ldr	r3, [r4, #40]
	sub	r3, r3, #1
	str	r3, [r4, #40]
	str	r9, [r5, #4]
	ldr	r5, [r4, #20]
	ldr	r3, [r4, #4]
	cmp	r8, r5
	ldr	r9, [r3, #80]
	beq	.L3910
	ldr	r3, [r5, #4]
	mov	ip, #256
	mov	r1, #512
	ldr	r2, [r5]
	mov	r0, r6
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r5]
	str	r1, [r5, #4]
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r5, #-32]
	cmp	r3, #0
	beq	.L3911
	ldr	r2, [r4, #4]
	mov	r0, r3
	ldrb	r1, [r2, #96]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L3925
	ldr	r2, [r2, #104]
	cmp	r3, r2
	beq	.L3943
.L3925:
	mov	r1, #1
.L3912:
	ldrb	r2, [r5, #-10]	@ zero_extendqisi2
	bfi	r2, r1, #1, #1
	uxtb	r1, r2
	strb	r2, [r5, #-10]
	tst	r1, #2
	beq	.L3913
	ldrb	r2, [r4, #124]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L3913
	ldrh	ip, [r9, #20]
	sdiv	r2, r3, ip
	mls	r2, ip, r2, r3
	cmp	r2, #0
	bne	.L3913
	bfi	r1, r2, #1, #1
	add	r0, r3, #1
	strb	r1, [r5, #-10]
.L3913:
	str	r0, [r5, #-32]
	ldr	r3, [r9, #8]
	mov	r0, r9
	sub	r1, r5, #36
	mov	r2, #32
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L3915
	mov	r3, #0
	mov	r0, r6
	str	r3, [r5, #-32]
.L3939:
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #24]
	mov	r0, r6
	str	r5, [r4, #24]
	str	r8, [r5]
	str	r3, [r5, #4]
	str	r5, [r3]
	bl	_raw_spin_unlock(PLT)
	b	.L3916
.L3911:
	mov	r0, r6
	b	.L3939
.L3915:
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #40]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #40]
	bl	_raw_spin_unlock(PLT)
	ldr	r3, .L3944
.LPIC835:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3]
	str	r3, [r7, #604]
	b	.L3916
.L3910:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	b	.L3916
.L3943:
	ldrh	r1, [r9, #20]
	sdiv	r2, r3, r1
	mls	r1, r1, r2, r3
	adds	r1, r1, #0
	movne	r1, #1
	b	.L3912
.L3945:
	.align	2
.L3944:
	.word	jiffies(GOT_PREL)+(.-(.LPIC835+8))
	.fnend
	.size	tx_complete, .-tx_complete
	.align	2
	.type	eth_qc_open, %function
eth_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #1224]
	ldr	r3, [r0, #116]
	tst	r3, #4
	beq	.L3961
.L3948:
	add	r5, r4, #1216
	mov	r0, r5
	bl	_raw_spin_lock_irq(PLT)
	ldr	r0, [r4, #1220]
	cmp	r0, #0
	beq	.L3950
	ldr	r3, [r0, #104]
	cmp	r3, #0
	beq	.L3950
	blx	r3
.L3950:
	mov	r0, r5
	bl	_raw_spin_unlock_irq(PLT)
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3961:
	bl	netif_carrier_off(PLT)
	ldr	r0, [r4, #1224]
	bl	netif_carrier_on(PLT)
	ldr	r3, [r4, #1224]
	mov	r0, #0
	ldr	r5, [r3, #576]
	add	r1, r5, #80
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	beq	.L3948
	ldr	r0, [r5, #4]
	bl	__netif_schedule(PLT)
	b	.L3948
	.fnend
	.size	eth_qc_open, .-eth_qc_open
	.align	2
	.global	rndis_rm_hdr
	.type	rndis_rm_hdr, %function
rndis_rm_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3985
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	str	r8, [sp, #16]
	mov	r8, r2
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	ldr	r0, [r1, #80]
	.pad #8
	sub	sp, sp, #8
.LPIC843:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r2, [r3]
	cmp	r0, r2
	strhi	r0, [r3]
	bhi	.L3964
	cmp	r0, #0
	beq	.L3979
.L3964:
	cmp	r0, #43
	bls	.L3966
	ldr	r1, [r4, #172]
	ldr	r6, [r1, #4]	@ unaligned
	ldr	r3, [r1, #8]	@ unaligned
	ldr	r5, [r1, #12]	@ unaligned
	cmp	r0, r6
	bcc	.L3967
	add	r2, r3, r5
	add	r2, r2, #8
	cmp	r6, r2
	bcc	.L3967
	ldr	r1, [r1]	@ unaligned
	cmp	r1, #1
	moveq	r7, #0
	beq	.L3973
	b	.L3968
.L3974:
	cmp	r2, r5
	beq	.L3975
	bl	skb_clone(PLT)
	sub	r1, r6, #44
	subs	r6, r0, #0
	mov	r0, r4
	beq	.L3984
	bl	skb_pull(PLT)
	mov	r0, r6
	mov	r1, r5
	bl	skb_trim(PLT)
	mov	r0, r8
	mov	r1, r6
	bl	skb_queue_tail(PLT)
	ldr	r0, [r4, #80]
	cmp	r0, #0
	beq	.L3965
	cmp	r0, #43
	bls	.L3966
	ldr	r1, [r4, #172]
	ldr	r6, [r1, #4]	@ unaligned
	ldr	r3, [r1, #8]	@ unaligned
	ldr	r5, [r1, #12]	@ unaligned
	cmp	r0, r6
	add	r2, r3, r5
	bcc	.L3967
	add	r2, r2, #8
	cmp	r6, r2
	bcc	.L3967
	ldr	r1, [r1]	@ unaligned
	cmp	r1, #1
	bne	.L3968
.L3973:
	add	r1, r3, #8
	mov	r0, r4
	bl	skb_pull(PLT)
	ldr	r3, [r4, #80]
	mov	r1, #32
	mov	r0, r4
	add	r7, r7, #1
	cmp	r3, r5
	sub	r2, r3, #1
	bne	.L3974
.L3975:
	mov	r1, r5
	mov	r0, r4
	bl	skb_trim(PLT)
.L3965:
	ldr	r3, .L3985+4
	mov	r0, r8
	mov	r1, r4
.LPIC842:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r2, [r3]
	cmp	r7, r2
	strgt	r7, [r3]
	bl	skb_queue_tail(PLT)
	mov	r0, #0
.L3971:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3979:
	mov	r7, r0
	b	.L3965
.L3967:
	ldr	r1, [r1]	@ unaligned
	str	r0, [sp, #4]
	mov	r2, r6
	ldr	r0, .L3985+8
	str	r5, [sp]
.LPIC838:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	mvn	r0, #74
	b	.L3971
.L3966:
	mov	r1, r0
	ldr	r0, .L3985+12
	mov	r2, #44
.LPIC837:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	mvn	r0, #21
	b	.L3971
.L3984:
	ldr	r1, .L3985+16
	ldr	r0, .L3985+20
.LPIC841:
	add	r1, pc, r1
	add	r1, r1, #1264
.LPIC840:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	mvn	r0, #11
	b	.L3971
.L3968:
	str	r0, [sp, #4]
	ldr	r0, .L3985+24
	mov	r2, r6
	str	r5, [sp]
.LPIC839:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	mvn	r0, #21
	b	.L3971
.L3986:
	.align	2
.L3985:
	.word	rndis_ul_max_xfer_size_rcvd(GOT_PREL)+(.-(.LPIC843+8))
	.word	rndis_ul_max_pkt_per_xfer_rcvd(GOT_PREL)+(.-(.LPIC842+8))
	.word	.LC213-(.LPIC838+8)
	.word	.LC212-(.LPIC837+8)
	.word	.LANCHOR3-(.LPIC841+8)
	.word	.LC214-(.LPIC840+8)
	.word	.LC213-(.LPIC839+8)
	.fnend
	.size	rndis_rm_hdr, .-rndis_rm_hdr
	.align	2
	.global	rndis_qc_rm_hdr
	.type	rndis_qc_rm_hdr, %function
rndis_qc_rm_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r4, [r1, #172]
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldrb	r1, [r4, #3]	@ zero_extendqisi2
	mov	r3, r3, asl #16
	orr	r3, r3, r0, asl #8
	orr	r3, r3, r2
	orr	r3, r3, r1, asl #24
	cmp	r3, #1
	bne	.L3992
	ldrb	r2, [r4, #10]	@ zero_extendqisi2
	mov	r0, r6
	ldrb	r1, [r4, #9]	@ zero_extendqisi2
	ldrb	r3, [r4, #8]	@ zero_extendqisi2
	ldrb	ip, [r4, #11]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	orr	r1, r2, r1, asl #8
	orr	r1, r1, r3
	orr	r1, r1, ip, asl #24
	add	r1, r1, #8
	bl	skb_pull(PLT)
	cmp	r0, #0
	beq	.L3993
	ldrb	r2, [r4, #14]	@ zero_extendqisi2
	mov	r0, r6
	ldrb	r3, [r4, #13]	@ zero_extendqisi2
	ldrb	ip, [r4, #12]	@ zero_extendqisi2
	ldrb	r1, [r4, #15]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	orr	r3, r2, r3, asl #8
	orr	r3, r3, ip
	orr	r1, r3, r1, asl #24
	bl	skb_trim(PLT)
	mov	r0, r5
	mov	r1, r6
	bl	skb_queue_tail(PLT)
	mov	r0, #0
.L3989:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3992:
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
	mvn	r0, #21
	b	.L3989
.L3993:
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
	mvn	r0, #74
	b	.L3989
	.fnend
	.size	rndis_qc_rm_hdr, .-rndis_qc_rm_hdr
	.align	2
	.type	f_audio_complete, %function
f_audio_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r3, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r7, [r1, #44]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r1, #32]
	str	r3, [sp, #4]
	cmp	r7, r3
	bne	.L4020
	ldr	r6, [r5, #164]
	mov	r4, r1
	cmp	r6, r0
	beq	.L4023
	ldr	r6, [r5, #168]
	cmp	r6, r0
	beq	.L4024
	ldr	r6, [r5, #264]
	cmp	r6, #0
	beq	.L3994
	ldmia	r1, {r1, r2}
	add	r0, sp, #4
	bl	memcpy(PLT)
	ldrh	r2, [sp, #4]
	mov	r0, r6
	ldr	r3, [r6, #36]
	ldrb	r1, [r5, #260]	@ zero_extendqisi2
	blx	r3
	str	r7, [r5, #264]
.L3994:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L4023:
	ldr	r7, [r5, #176]
	cmp	r7, r3
	beq	.L3994
	ldr	r8, .L4028
	ldr	r0, [r7, #4]
	ldr	r2, [r1, #48]
.LPIC844:
	add	r8, pc, r8
	ldr	r3, [r8, #424]
	rsb	r3, r0, r3
	cmp	r3, r2
	bcs	.L4000
	ldr	r2, [r5, #200]
	add	r1, r7, #8
	add	r3, r5, #196
	add	r0, r5, #180
	str	r1, [r5, #200]
	str	r3, [r7, #8]
	str	r2, [r7, #12]
	str	r1, [r2]
	bl	schedule_work(PLT)
	ldr	r0, [r8, #424]
	bl	f_audio_buffer_alloc(PLT)
	cmn	r0, #4096
	mov	r7, r0
	bhi	.L4001
	ldr	r0, [r0, #4]
	ldr	r2, [r4, #48]
.L4000:
	ldr	r3, [r7]
	ldr	r1, [r4]
	add	r0, r3, r0
	bl	memcpy(PLT)
	ldr	r3, [r7, #4]
	mov	r1, r4
	mov	r0, r6
	ldr	ip, [r4, #48]
	mov	r2, #32
	add	r3, r3, ip
	str	r3, [r7, #4]
	str	r7, [r5, #176]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L3994
	ldr	r1, .L4028+4
	mov	r3, r0
	ldr	r0, .L4028+8
	ldr	r2, [r6, #4]
.LPIC849:
	add	r1, pc, r1
.LPIC848:
	add	r0, pc, r0
	add	r1, r1, #1280
.L4022:
	add	r1, r1, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk(PLT)
.L4024:
	ldr	r7, [r5, #208]
	cmp	r7, #0
	beq	.L4025
.L4004:
	ldmia	r7, {r1, r3}
	ldr	r2, [r4, #48]
	ldr	r0, [r4]
	add	r1, r1, r3
	bl	memcpy(PLT)
	ldr	r1, [r4, #48]
	ldr	r3, [r7, #4]
	ldr	r2, .L4028+12
	add	r3, r3, r1
.LPIC850:
	add	r2, pc, r2
	ldr	r2, [r2, #428]
	str	r3, [r7, #4]
	ldr	r1, [r4, #48]
	rsb	r3, r3, r2
	cmp	r3, r1
	bcc	.L4026
.L4006:
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	mov	r2, #32
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L3994
	ldr	r1, .L4028+16
	mov	r3, r0
	ldr	r0, .L4028+20
	ldr	r2, [r6, #4]
.LPIC852:
	add	r1, pc, r1
.LPIC851:
	add	r0, pc, r0
	add	r1, r1, #1312
	b	.L4022
.L4026:
	cmp	r7, #0
	beq	.L4007
	ldr	r0, [r7]
	bl	kfree(PLT)
	mov	r3, #0
	mov	r0, r7
	str	r3, [r7]
	bl	kfree(PLT)
.L4007:
	mov	r3, #0
	add	r0, r5, #212
	str	r3, [r5, #208]
	bl	schedule_work(PLT)
	b	.L4006
.L4025:
	add	r8, r5, #204
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r2, r5
	mov	r1, r0
	ldr	r3, [r2, #228]!
	cmp	r3, r2
	beq	.L4027
	ldr	r2, [r3, #4]
	mov	r9, #256
	mov	lr, #512
	ldr	ip, [r3]
	sub	r7, r3, #8
	mov	r0, r8
	str	r2, [ip, #4]
	str	ip, [r2]
	stmia	r3, {r9, lr}
	str	r7, [r5, #208]
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L4004
.L4001:
	ldr	r1, .L4028+24
	ldr	r0, .L4028+28
.LPIC847:
	add	r1, pc, r1
	add	r1, r1, #1280
.LPIC846:
	add	r0, pc, r0
	add	r1, r1, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk(PLT)
.L4027:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r0, r5, #212
	bl	schedule_work(PLT)
	b	.L4006
.L4020:
	ldr	r1, .L4028+32
	mov	r2, r7
	ldr	r0, .L4028+36
.LPIC854:
	add	r1, pc, r1
.LPIC853:
	add	r0, pc, r0
	add	r1, r1, #1344
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk(PLT)
.L4029:
	.align	2
.L4028:
	.word	.LANCHOR1-(.LPIC844+8)
	.word	.LANCHOR3-(.LPIC849+8)
	.word	.LC215-(.LPIC848+8)
	.word	.LANCHOR1-(.LPIC850+8)
	.word	.LANCHOR3-(.LPIC852+8)
	.word	.LC215-(.LPIC851+8)
	.word	.LANCHOR3-(.LPIC847+8)
	.word	.LC41-(.LPIC846+8)
	.word	.LANCHOR3-(.LPIC854+8)
	.word	.LC216-(.LPIC853+8)
	.fnend
	.size	f_audio_complete, .-f_audio_complete
	.align	2
	.type	acc_complete_set_hid_report_desc, %function
acc_complete_set_hid_report_desc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r1, #44]
	ldr	r4, [r1, #32]
	ldr	r5, [r1, #48]
	cmp	r3, #0
	ldr	r6, [r4, #12]
	bne	.L4034
	ldr	r3, [r4, #28]
	mov	r2, r5
	ldr	r0, [r4, #20]
	ldr	r1, [r1]
	add	r0, r0, r3
	bl	memcpy(PLT)
	ldr	r2, [r4, #28]
	ldr	r3, [r4, #24]
	add	r5, r5, r2
	cmp	r5, r3
	str	r5, [r4, #28]
	beq	.L4035
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4035:
	add	r0, r6, #1728
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	r0, r0, #12
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	schedule_work(PLT)
.L4034:
	ldr	r0, .L4036
	mov	r1, r3
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
.LPIC855:
	add	r0, pc, r0
	b	printk(PLT)
.L4037:
	.align	2
.L4036:
	.word	.LC217-(.LPIC855+8)
	.fnend
	.size	acc_complete_set_hid_report_desc, .-acc_complete_set_hid_report_desc
	.align	2
	.type	android_resume, %function
android_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata(PLT)
	ldr	r2, .L4050
.LPIC856:
	add	r2, pc, r2
	ldr	r3, [r2]
	cmp	r2, r3
	sub	r4, r3, #168
	bne	.L4042
	b	.L4039
.L4049:
	ldr	r3, [r4, #168]
	cmp	r2, r3
	sub	r4, r3, #168
	beq	.L4039
.L4042:
	ldr	r3, [r3, #-160]
	cmp	r0, r3
	bne	.L4049
.L4039:
	add	r5, r0, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldrb	r3, [r4, #58]	@ zero_extendqisi2
	mov	r7, r0
	cmp	r3, #0
	beq	.L4043
	mov	r3, #0
	add	r0, r4, #140
	strb	r3, [r4, #58]
	bl	schedule_work(PLT)
.L4043:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r4, [sp]
	mov	r0, r6
	ldr	r8, [sp, #16]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	composite_resume(PLT)
.L4051:
	.align	2
.L4050:
	.word	.LANCHOR2-(.LPIC856+8)
	.fnend
	.size	android_resume, .-android_resume
	.align	2
	.type	get_ether_addr, %function
get_ether_addr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r4, r0, #0
	strd	r8, [sp, #16]
	subne	r9, r1, #1
	addne	r8, r1, #5
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L4057
.L4056:
	ldrb	r0, [r4]	@ zero_extendqisi2
	mov	r6, r4
	cmp	r0, #46
	cmpne	r0, #58
	ldreqb	r0, [r4, #1]	@ zero_extendqisi2
	addeq	r6, r4, #1
	bl	hex_to_bin(PLT)
	mov	r5, r0
	ldrb	r0, [r6, #1]	@ zero_extendqisi2
	add	r4, r6, #2
	bl	hex_to_bin(PLT)
	orr	r0, r0, r5, asl #4
	strb	r0, [r9, #1]!
	cmp	r9, r8
	bne	.L4056
	ldrb	r3, [r7]	@ zero_extendqisi2
	ands	r0, r3, #1
	beq	.L4064
.L4057:
	mov	r0, r7
	mov	r1, #6
	bl	get_random_bytes(PLT)
	ldrb	r3, [r7]	@ zero_extendqisi2
	mov	r0, #1
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r7]
.L4054:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4064:
	ldrb	lr, [r7, #1]	@ zero_extendqisi2
	ldrb	ip, [r7, #2]	@ zero_extendqisi2
	ldrb	r1, [r7, #3]	@ zero_extendqisi2
	ldrb	r2, [r7, #4]	@ zero_extendqisi2
	orr	r3, r3, lr
	ldrb	lr, [r7, #5]	@ zero_extendqisi2
	orr	r3, r3, ip
	orr	r3, r3, r1
	orr	r3, r3, r2
	orrs	r3, r3, lr
	beq	.L4057
	b	.L4054
	.fnend
	.size	get_ether_addr, .-get_ether_addr
	.align	2
	.type	get_qc_ether_addr, %function
get_qc_ether_addr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r4, r0, #0
	strd	r8, [sp, #16]
	subne	r9, r1, #1
	addne	r8, r1, #5
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L4070
.L4069:
	ldrb	r0, [r4]	@ zero_extendqisi2
	mov	r6, r4
	cmp	r0, #46
	cmpne	r0, #58
	ldreqb	r0, [r4, #1]	@ zero_extendqisi2
	addeq	r6, r4, #1
	bl	hex_to_bin(PLT)
	mov	r5, r0
	ldrb	r0, [r6, #1]	@ zero_extendqisi2
	add	r4, r6, #2
	bl	hex_to_bin(PLT)
	orr	r0, r0, r5, asl #4
	strb	r0, [r9, #1]!
	cmp	r9, r8
	bne	.L4069
	ldrb	r3, [r7]	@ zero_extendqisi2
	ands	r0, r3, #1
	beq	.L4077
.L4070:
	mov	r0, r7
	mov	r1, #6
	bl	get_random_bytes(PLT)
	ldrb	r3, [r7]	@ zero_extendqisi2
	mov	r0, #1
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r7]
.L4067:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4077:
	ldrb	lr, [r7, #1]	@ zero_extendqisi2
	ldrb	ip, [r7, #2]	@ zero_extendqisi2
	ldrb	r1, [r7, #3]	@ zero_extendqisi2
	ldrb	r2, [r7, #4]	@ zero_extendqisi2
	orr	r3, r3, lr
	ldrb	lr, [r7, #5]	@ zero_extendqisi2
	orr	r3, r3, ip
	orr	r3, r3, r1
	orr	r3, r3, r2
	orrs	r3, r3, lr
	beq	.L4070
	b	.L4067
	.fnend
	.size	get_qc_ether_addr, .-get_qc_ether_addr
	.align	2
	.type	fsg_lun_open, %function
fsg_lun_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r5, [r0, #24]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
	ands	r5, r5, #1
	beq	.L4124
.L4079:
	mov	r0, r7
	mov	r1, #131072
	mov	r2, #0
	mov	r5, #1
	bl	filp_open(PLT)
	mov	r4, r0
	cmn	r4, #4096
	bhi	.L4125
.L4080:
	ldr	r2, [r4, #36]
	ldr	r3, [r4, #12]
	tst	r2, #2
	moveq	r5, #1
	cmp	r3, #0
	beq	.L4083
	ldr	r2, [r3, #40]
	cmp	r2, #0
	beq	.L4083
	ldrh	r3, [r2]
	and	r3, r3, #61440
	sub	r3, r3, #24576
	tst	r3, #53248
	bne	.L4083
	ldr	r3, [r4, #20]
	cmp	r3, #0
	beq	.L4086
	ldr	r1, [r3, #8]
	cmp	r1, #0
	beq	.L4126
.L4087:
	ldr	r1, [r3, #12]
	cmp	r1, #0
	beq	.L4127
.L4088:
	ldr	r3, [r2, #32]
	ldr	r3, [r3]
.L4123:
	ldr	r1, [r3, #104]
	tst	r1, #1
	bne	.L4113
#APP
@ 165 "/home/ikke/Workspace/kernel_oneplus_onyx/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	ldrd	r8, [r3, #96]
#APP
@ 221 "/home/ikke/Workspace/kernel_oneplus_onyx/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	ldr	r0, [r3, #104]
	cmp	r0, r1
	bne	.L4123
	cmp	r8, #0
	sbcs	r3, r9, #0
	blt	.L4128
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	tst	r3, #8
	bne	.L4129
	ldr	r3, [r2, #332]
	cmp	r3, #0
	beq	.L4096
	ldr	r3, [r3, #92]
	ldr	r3, [r3, #500]
	cmp	r3, #0
	moveq	r2, #512
	beq	.L4097
	add	r3, r3, #776
	ldrh	r2, [r3]
	cmp	r2, #0
	moveq	r2, #512
.L4097:
	mov	r3, #8
	str	r2, [r6, #44]
.L4098:
	mov	r2, r2, lsr #1
	add	r3, r3, #1
	cmp	r2, #256
	bhi	.L4098
	mov	r1, r3
	str	r3, [r6, #40]
.L4099:
	mov	r2, r8, lsr r1
	rsb	r0, r1, #32
	mov	r3, r9, asr r1
	orr	r2, r2, r9, asl r0
	subs	ip, r1, #32
	orrpl	r2, r2, r9, asr ip
	mov	r0, #1
	mov	r1, #0
	b	.L4095
.L4083:
	ldr	r1, .L4131
	mov	r2, r7
	add	r0, r6, #48
	mvn	r7, #21
.LPIC860:
	add	r1, pc, r1
	bl	_dev_info(PLT)
.L4085:
	mov	r3, sp
	mov	r0, r4
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #708]
	bl	filp_close(PLT)
	mov	r0, r7
.L4121:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4124:
	mov	r1, #2
	mov	r0, r7
	movt	r1, 2
	mov	r2, r5
	bl	filp_open(PLT)
	cmn	r0, #30
	cmnne	r0, #13
	mov	r4, r0
	beq	.L4079
	cmn	r4, #4096
	bls	.L4080
.L4125:
	ldr	r1, .L4131+4
	add	r0, r6, #48
	mov	r2, r7
.LPIC859:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	mov	r0, r4
	b	.L4121
.L4129:
	mov	r2, r8, lsr #11
	mov	r1, #11
	movw	r10, #37887
	orr	r2, r2, r9, asl #21
	movt	r10, 17
	str	r1, [r6, #40]
	mov	r3, r9, asr r1
	mov	fp, #0
	cmp	r10, r2
	mov	r0, #2048
	sbcs	r1, fp, r3
	str	r0, [r6, #44]
	blt	.L4094
	mov	r0, #300
	mov	r1, #0
.L4095:
	cmp	r2, r0
	sbcs	r1, r3, r1
	blt	.L4130
.L4100:
	add	r1, r4, #28
#APP
@ 45 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	ldrb	r1, [r6, #24]	@ zero_extendqisi2
	mov	r7, #0
	str	r4, [r6]
	strd	r8, [r6, #8]
	strd	r2, [r6, #16]
	bfi	r1, r5, #1, #1
	strb	r1, [r6, #24]
	b	.L4085
.L4130:
	ldr	r1, .L4131+8
	mov	r2, r7
	add	r0, r6, #48
	mvn	r7, #524
.LPIC865:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	b	.L4085
.L4126:
	ldr	r1, [r3, #16]
	cmp	r1, #0
	bne	.L4087
.L4086:
	ldr	r1, .L4131+12
	mov	r2, r7
	add	r0, r6, #48
	mvn	r7, #21
.LPIC861:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	b	.L4085
.L4127:
	ldr	r3, [r3, #20]
	cmp	r3, #0
	moveq	r5, #1
	b	.L4088
.L4128:
	ldr	r1, .L4131+16
	mov	r2, r7
	add	r0, r6, #48
	mov	r7, r8
.LPIC862:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	b	.L4085
.L4094:
	ldr	r1, .L4131+20
	add	r3, r6, #48
	mov	r2, r7
	mov	r0, r3
	mov	r7, r3
.LPIC863:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	ldr	r1, .L4131+24
	movw	r2, #37887
	mov	r0, r7
	movt	r2, 17
.LPIC864:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	mov	r2, r10
	mov	r3, fp
	b	.L4100
.L4113:
	b	.L4123
.L4096:
	mov	r3, #9
	mov	r2, #512
	mov	r1, r3
	str	r2, [r6, #44]
	str	r3, [r6, #40]
	b	.L4099
.L4132:
	.align	2
.L4131:
	.word	.LC219-(.LPIC860+8)
	.word	.LC218-(.LPIC859+8)
	.word	.LC224-(.LPIC865+8)
	.word	.LC220-(.LPIC861+8)
	.word	.LC221-(.LPIC862+8)
	.word	.LC222-(.LPIC863+8)
	.word	.LC223-(.LPIC864+8)
	.fnend
	.size	fsg_lun_open, .-fsg_lun_open
	.align	2
	.type	ncm_unwrap_ntb, %function
ncm_unwrap_ntb:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	mov	r4, r1
	strd	r8, [sp, #16]
	ldr	r3, .L4189
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	lr, [r1, #172]
	.pad #44
	sub	sp, sp, #44
	ldr	r6, [r0, #168]
.LPIC866:
	add	r3, pc, r3
	ldrb	r0, [r0, #172]	@ zero_extendqisi2
	ldr	ip, [r3, #16]
	ldrb	r2, [lr, #2]	@ zero_extendqisi2
	ldrb	r10, [lr, #1]	@ zero_extendqisi2
	ldrb	r1, [lr]	@ zero_extendqisi2
	cmp	r0, #0
	ldrb	r9, [lr, #3]	@ zero_extendqisi2
	movne	r3, #18
	moveq	r3, #14
	mov	r2, r2, asl #16
	ldr	r0, [r6]
	movne	r8, #4
	moveq	r8, #0
	orr	r2, r2, r10, asl #8
	orr	r2, r2, r1
	orr	r2, r2, r9, asl #24
	cmp	r0, r2
	beq	.L4135
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r1, .L4189+4
	ldr	r2, [r4, #80]
	ldr	r3, [r3, #24]
.LPIC867:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	ldr	r6, [r4, #172]
	mov	r3, #0
	mov	lr, #1
	ldr	r0, .L4189+8
	mov	ip, #32
	mov	r2, lr
	ldr	r1, .L4189+12
	str	r3, [sp, #12]
	mov	r3, ip
	str	lr, [sp]
	stmib	sp, {r6, ip}
.LPIC868:
	add	r0, pc, r0
.LPIC869:
	add	r1, pc, r1
	bl	print_hex_dump(PLT)
.L4136:
	mov	r0, r7
	bl	skb_queue_purge(PLT)
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	mov	r0, r5
.L4178:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4135:
	ldrb	r0, [lr, #5]	@ zero_extendqisi2
	ldrb	r1, [lr, #4]	@ zero_extendqisi2
	ldr	r2, [r6, #8]
	orr	r1, r1, r0, asl #8
	cmp	r1, r2
	beq	.L4137
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r1, .L4189+16
	ldr	r3, [r3, #24]
.LPIC870:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	b	.L4136
.L4137:
	ldr	r0, [r6, #24]
	cmp	r0, #1
	beq	.L4139
	cmp	r0, #2
	bne	.L4177
	ldrb	r2, [lr, #10]	@ zero_extendqisi2
	ldrb	fp, [lr, #9]	@ zero_extendqisi2
	ldrb	r9, [lr, #8]	@ zero_extendqisi2
	ldrb	r10, [lr, #11]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	orr	r2, r2, fp, asl #8
	orr	r2, r2, r9
	orr	r2, r2, r10, asl #24
.L4141:
	cmp	ip, r2
	bcc	.L4182
	ldr	r2, [r6, #28]
	add	ip, lr, #8
	add	r9, ip, r0, asl #1
	cmp	r2, #1
	beq	.L4144
	cmp	r2, #2
	bne	.L4177
	ldrb	r10, [r9, #2]	@ zero_extendqisi2
	ldrb	r2, [r9, #1]	@ zero_extendqisi2
	ldrb	r0, [ip, r0, asl #1]	@ zero_extendqisi2
	ldrb	ip, [r9, #3]	@ zero_extendqisi2
	mov	r10, r10, asl #16
	orr	r2, r10, r2, asl #8
	orr	r2, r2, r0
	orr	r2, r2, ip, asl #24
.L4146:
	ands	r0, r2, #3
	movne	r0, #1
	cmp	r1, r2
	movls	r1, #0
	andhi	r1, r0, #1
	cmp	r1, #0
	bne	.L4183
	add	ip, lr, r2
	ldrb	r1, [lr, r2]	@ zero_extendqisi2
	ldrb	r2, [ip, #2]	@ zero_extendqisi2
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	ldrb	r10, [ip, #3]	@ zero_extendqisi2
	ldr	r0, [r6, #4]
	mov	r2, r2, asl #16
	orr	r2, r2, lr, asl #8
	orr	r2, r2, r1
	orr	r10, r2, r10, asl #24
	cmp	r0, r10
	beq	.L4148
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r1, .L4189+20
	ldr	r3, [r3, #24]
.LPIC873:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	b	.L4136
.L4139:
	ldrb	r9, [lr, #9]	@ zero_extendqisi2
	ldrb	r2, [lr, #8]	@ zero_extendqisi2
	orr	r2, r2, r9, asl #8
	b	.L4141
.L4177:
#APP
@ 440 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_ncm.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_ncm.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 440, 0
.popsection
@ 0 "" 2
.L4182:
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r1, .L4189+24
	ldr	r3, [r3, #24]
.LPIC871:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	b	.L4136
.L4144:
	ldrb	r9, [r9, #1]	@ zero_extendqisi2
	ldrb	r2, [ip, r0, asl #1]	@ zero_extendqisi2
	orr	r2, r2, r9, asl #8
	b	.L4146
.L4148:
	ldrb	r1, [ip, #5]	@ zero_extendqisi2
	ldrb	r2, [ip, #4]	@ zero_extendqisi2
	ldr	r9, [r6, #12]
	ldr	fp, [r6, #20]
	orr	r2, r2, r1, asl #8
	add	r1, r9, fp, asl #3
	cmp	r2, r1
	bcc	.L4149
	ldr	r0, [r6, #16]
	udiv	r1, r2, r0
	mls	r1, r0, r1, r2
	cmp	r1, #0
	bne	.L4149
	ldr	lr, [r6, #40]
	add	r1, ip, #6
	cmp	fp, #1
	ldr	r0, [r6, #32]
	ldr	ip, [r6, #36]
	add	r0, lr, r0
	add	r0, r0, ip
	add	r10, r1, r0, asl #1
	beq	.L4152
	cmp	fp, #2
	bne	.L4177
	ldrb	ip, [r10, #2]	@ zero_extendqisi2
	add	lr, r10, #4
	ldrb	r1, [r1, r0, asl #1]	@ zero_extendqisi2
	str	lr, [sp, #24]
	ldrb	r0, [r10, #1]	@ zero_extendqisi2
	ldrb	lr, [r10, #6]	@ zero_extendqisi2
	mov	ip, ip, asl #16
	str	r1, [sp, #20]
	ldrb	r1, [r10, #5]	@ zero_extendqisi2
	str	ip, [sp, #16]
	ldrb	ip, [r10, #4]	@ zero_extendqisi2
	mov	lr, lr, asl #16
	orr	lr, lr, r1, asl #8
	ldrb	r1, [r10, #3]	@ zero_extendqisi2
	ldrb	r10, [r10, #7]	@ zero_extendqisi2
	str	ip, [sp, #28]
	ldr	ip, [sp, #16]
	orr	ip, ip, r0, asl #8
	ldr	r0, [sp, #20]
	orr	ip, ip, r0
	ldr	r0, [sp, #28]
	orr	r1, ip, r1, asl #24
	orr	r0, lr, r0
	str	r1, [sp, #16]
	mov	lr, #4
	orr	r1, r0, r10, asl #24
	str	r1, [sp, #20]
.L4154:
	rsb	r2, r9, r2
	str	r7, [sp, #28]
	ldr	r7, [sp, #20]
	mov	r10, r3
	str	r6, [sp, #36]
	str	r2, [sp, #32]
	ldr	r2, [sp, #24]
	str	r4, [sp, #24]
	add	ip, r2, lr
	mov	r4, ip
.L4163:
	cmp	r7, r10
	bcc	.L4184
	ldrb	r3, [r5, #172]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L4185
.L4156:
	cmp	fp, #1
	beq	.L4159
	cmp	fp, #2
	bne	.L4177
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
	add	r1, r4, #4
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	ldrb	r3, [r4, #6]	@ zero_extendqisi2
	ldrb	r6, [r4, #5]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	ldrb	lr, [r4]	@ zero_extendqisi2
	ldrb	ip, [r4, #7]	@ zero_extendqisi2
	orr	r2, r2, r0, asl #8
	mov	r3, r3, asl #16
	ldrb	r0, [r4, #4]	@ zero_extendqisi2
	orr	r3, r3, r6, asl #8
	ldrb	r6, [r4, #3]	@ zero_extendqisi2
	orr	r2, r2, lr
	orr	r3, r3, r0
	orr	r9, r3, ip, asl #24
	orr	r6, r2, r6, asl #24
	mov	r2, #4
.L4161:
	cmp	r6, #0
	cmpne	r9, #0
	add	r4, r1, r2
	moveq	r3, #1
	movne	r3, #0
	str	r3, [sp, #20]
	bne	.L4186
	ldr	r4, [sp, #24]
	str	r7, [sp, #20]
	ldr	r1, [sp, #16]
	ldr	r7, [sp, #28]
	mov	r0, r4
	bl	skb_pull(PLT)
	cmp	r0, #0
	beq	.L4187
	ldr	r3, [sp, #20]
	mov	r0, r4
	rsb	r1, r8, r3
	bl	skb_trim(PLT)
	mov	r0, r7
	mov	r1, r4
	bl	skb_queue_tail(PLT)
	mov	r0, #0
	b	.L4178
.L4149:
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r1, .L4189+28
	ldr	r3, [r3, #24]
.LPIC874:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	b	.L4136
.L4183:
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r1, .L4189+32
	ldr	r3, [r3, #24]
.LPIC872:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	b	.L4136
.L4152:
	ldrb	ip, [r1, r0, asl #1]	@ zero_extendqisi2
	add	r1, r10, #2
	mov	lr, #2
	ldrb	r0, [r10, #1]	@ zero_extendqisi2
	str	r1, [sp, #24]
	ldrb	r1, [r10, #3]	@ zero_extendqisi2
	ldrb	r10, [r10, #2]	@ zero_extendqisi2
	orr	r0, ip, r0, asl #8
	orr	r1, r10, r1, asl #8
	str	r0, [sp, #16]
	str	r1, [sp, #20]
	b	.L4154
.L4159:
	mov	r1, r4
	ldrb	r6, [r4, #1]	@ zero_extendqisi2
	mov	r2, #2
	ldrb	r0, [r1], #2	@ zero_extendqisi2
	ldrb	r9, [r4, #3]	@ zero_extendqisi2
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	orr	r6, r0, r6, asl #8
	orr	r9, r3, r9, asl #8
	b	.L4161
.L4185:
	ldr	r3, [sp, #24]
	mvn	r0, #0
	rsb	r2, r8, r7
	ldr	ip, [sp, #16]
	ldr	r1, [r3, #172]
	add	r3, ip, r7
	rsb	r3, r8, r3
	add	r6, r1, r3
	ldrb	r3, [r1, r3]	@ zero_extendqisi2
	add	r1, r1, ip
	ldrb	lr, [r6, #2]	@ zero_extendqisi2
	ldrb	r9, [r6, #1]	@ zero_extendqisi2
	ldrb	r6, [r6, #3]	@ zero_extendqisi2
	mov	lr, lr, asl #16
	orr	lr, lr, r9, asl #8
	orr	r3, lr, r3
	orr	r6, r3, r6, asl #24
	bl	crc32_le(PLT)
	mvn	r0, r0
	cmp	r0, r6
	bne	.L4157
	ldr	r3, [sp, #36]
	ldr	fp, [r3, #20]
	b	.L4156
.L4186:
	ldr	r0, [sp, #24]
	mov	r1, #32
	bl	skb_clone(PLT)
	subs	fp, r0, #0
	beq	.L4167
	ldr	r1, [sp, #16]
	bl	skb_pull(PLT)
	cmp	r0, #0
	beq	.L4168
	mov	r0, fp
	rsb	r1, r8, r7
	bl	skb_trim(PLT)
	ldr	r0, [sp, #28]
	mov	r1, fp
	bl	skb_queue_tail(PLT)
	ldr	r3, [sp, #36]
	ldr	r2, [sp, #32]
	ldr	fp, [r3, #20]
	mov	r3, fp, asl #2
	rsb	r2, r3, r2
	cmp	r3, r2
	str	r2, [sp, #32]
	bcs	.L4188
	mov	r7, r9
	str	r6, [sp, #16]
	b	.L4163
.L4184:
	ldr	r3, [r5, #20]
	mov	r2, r7
	mvn	r5, #21
	ldr	r1, .L4189+36
	ldr	r4, [sp, #24]
	ldr	r7, [sp, #28]
	ldr	r3, [r3, #24]
.LPIC875:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	b	.L4136
.L4188:
	ldr	r0, [sp, #20]
	b	.L4178
.L4168:
	ldr	r4, [sp, #24]
	mvn	r5, #74
	ldr	r7, [sp, #28]
	b	.L4136
.L4187:
	mvn	r5, #74
	b	.L4136
.L4167:
	ldr	r4, [sp, #24]
	mvn	r5, #21
	ldr	r7, [sp, #28]
	b	.L4136
.L4157:
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r1, .L4189+40
	ldr	r4, [sp, #24]
	ldr	r7, [sp, #28]
	ldr	r3, [r3, #24]
.LPIC876:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	b	.L4136
.L4190:
	.align	2
.L4189:
	.word	.LANCHOR1-(.LPIC866+8)
	.word	.LC225-(.LPIC867+8)
	.word	.LC226-(.LPIC868+8)
	.word	.LC227-(.LPIC869+8)
	.word	.LC228-(.LPIC870+8)
	.word	.LC231-(.LPIC873+8)
	.word	.LC229-(.LPIC871+8)
	.word	.LC232-(.LPIC874+8)
	.word	.LC230-(.LPIC872+8)
	.word	.LC233-(.LPIC875+8)
	.word	.LC234-(.LPIC876+8)
	.fnend
	.size	ncm_unwrap_ntb, .-ncm_unwrap_ntb
	.align	2
	.type	ncm_wrap_ntb, %function
ncm_wrap_ntb:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L4232
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	ip, r1
	strd	r8, [sp, #16]
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	mov	fp, r0
	str	lr, [sp, #32]
	ldr	r5, [r0, #168]
.LPIC877:
	add	r2, pc, r2
	ldr	r3, [r1, #80]
	.pad #20
	sub	sp, sp, #20
	ldrh	r1, [r2, #12]
	ldrb	r4, [r0, #172]	@ zero_extendqisi2
	ldr	r10, [r5, #8]
	ldr	r7, [r5, #20]
	sub	r6, r1, #1
	ldr	r0, [r5, #12]
	rsb	r1, r1, #0
	cmp	r4, #0
	ldrh	r4, [r2, #8]
	add	r6, r6, r10
	ldrh	r2, [r2, #10]
	movne	r9, #4
	and	r6, r6, r1
	ldr	r1, [fp, #104]
	moveq	r9, #0
	add	r7, r0, r7, asl #3
	add	r7, r7, r6
	mov	lr, r1
	str	r1, [sp, #4]
	sub	r1, r4, #1
	add	r1, r1, r7
	rsb	r4, r4, #0
	and	r4, r4, r1
	add	r4, r4, r2
	add	r2, r4, r3
	add	r2, r2, r9
	cmp	lr, r2
	bcc	.L4228
	rsb	r2, r3, lr
	mov	r0, ip
	str	ip, [sp, #8]
	rsb	r2, r4, r2
	mov	r1, r4
	rsb	r2, r9, r2
	mov	r3, #32
	bl	skb_copy_expand(PLT)
	ldr	ip, [sp, #8]
	mov	r8, r0
	mov	r0, ip
	bl	dev_kfree_skb_any(PLT)
	subs	r0, r8, #0
	beq	.L4194
	mov	r1, r4
	bl	skb_push(PLT)
	cmp	r4, #0
	mov	r3, r0
	bne	.L4229
.L4195:
	ldr	r2, [r5]
	mov	r1, r2, lsr #16
	strb	r2, [r3]
	ubfx	r0, r2, #8, #8
	mov	r2, r1, lsr #8
	strb	r0, [r3, #1]
	strb	r1, [r3, #2]
	strb	r2, [r3, #3]
	ldr	r2, [r5, #8]
	ubfx	r1, r2, #8, #8
	strb	r2, [r3, #4]
	strb	r1, [r3, #5]
	ldr	r2, [r5, #24]
	ldr	r1, [r8, #80]
	cmp	r2, #1
	beq	.L4197
	cmp	r2, #2
	bne	.L4226
	mov	r0, r1, lsr #16
	ubfx	ip, r1, #8, #8
	strb	r1, [r3, #8]
	mov	r1, r0, lsr #8
	strb	ip, [r3, #9]
	strb	r0, [r3, #10]
	strb	r1, [r3, #11]
.L4199:
	ldr	r0, [r5, #28]
	rsb	r6, r10, r6
	add	r3, r3, #8
	ldr	r1, [r5, #8]
	add	r10, r3, r2, asl #1
	cmp	r0, #1
	add	r1, r6, r1
	beq	.L4201
	cmp	r0, #2
	bne	.L4226
	mov	ip, r1, lsr #16
	ubfx	lr, r1, #8, #8
	str	lr, [sp, #8]
	mov	lr, ip, lsr #8
	strb	ip, [r10, #2]
	strb	lr, [r10, #3]
	strb	r1, [r3, r2, asl #1]
	ldrb	r3, [sp, #8]	@ zero_extendqisi2
	strb	r3, [r10, #1]
.L4203:
	ldr	r2, [r5, #4]
	uxth	r3, r4
	add	r0, r6, r0, asl #1
	rsb	r7, r7, r4
	str	r3, [sp, #8]
	add	r3, r10, r0
	mov	lr, r2, lsr #16
	ubfx	r1, r2, #8, #8
	add	r6, r3, #6
	mov	ip, lr, lsr #8
	strb	lr, [r3, #2]
	strb	ip, [r3, #3]
	strb	r2, [r10, r0]
	strb	r1, [r3, #1]
	ldr	r1, [sp, #8]
	ldr	r2, [r5, #8]
	rsb	r2, r2, r1
	rsb	r7, r7, r2
	uxth	r7, r7
	mov	r2, r7, lsr #8
	strb	r7, [r3, #4]
	strb	r2, [r3, #5]
	ldrb	r1, [fp, #172]	@ zero_extendqisi2
	ldr	r3, [r5, #40]
	ldr	r2, [r5, #32]
	ldr	fp, [r5, #36]
	cmp	r1, #0
	add	r3, r3, r2
	add	fp, r3, fp
	add	r7, r6, fp, asl #1
	bne	.L4230
.L4204:
	ldr	r3, [r5, #20]
	cmp	r3, #1
	beq	.L4206
	cmp	r3, #2
	bne	.L4226
	ldr	r1, [sp, #8]
	mov	r2, r4, lsr #16
	strb	r2, [r7, #2]
	mov	r10, r1, lsr #8
	mov	r1, r2, lsr #8
	strb	r1, [r7, #3]
	strb	r4, [r6, fp, asl #1]
	strb	r10, [r7, #1]
.L4208:
	ldr	r1, [r5, #20]
	add	r0, r7, r3, asl #1
	ldr	r2, [r8, #80]
	cmp	r1, #1
	rsb	r4, r4, r2
	beq	.L4210
	cmp	r1, #2
	bne	.L4226
	mov	r2, r4, lsr #16
	ubfx	r1, r4, #8, #8
	mov	ip, r2, lsr #8
	strb	r2, [r0, #2]
	strb	ip, [r0, #3]
	strb	r4, [r7, r3, asl #1]
	strb	r1, [r0, #1]
.L4212:
	ldr	r1, [r8, #80]
	cmp	r1, #1536
	bhi	.L4231
.L4216:
	mov	r0, r8
.L4194:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4226:
#APP
@ 422 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_ncm.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_ncm.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 422, 0
.popsection
@ 0 "" 2
.L4197:
	ubfx	r0, r1, #8, #8
	strb	r1, [r3, #8]
	strb	r0, [r3, #9]
	b	.L4199
.L4229:
	mov	r1, r4
	str	r0, [sp, #8]
	bl	__memzero(PLT)
	ldr	r3, [sp, #8]
	b	.L4195
.L4201:
	ubfx	ip, r1, #8, #8
	strb	r1, [r3, r2, asl #1]
	strb	ip, [r10, #1]
	b	.L4203
.L4206:
	ldr	r2, [sp, #8]
	strb	r4, [r6, fp, asl #1]
	mov	r10, r2, lsr #8
	strb	r10, [r7, #1]
	b	.L4208
.L4230:
	ldr	r1, [r8, #172]
	mvn	r0, #0
	ldr	r2, [r8, #80]
	add	r1, r1, r4
	rsb	r2, r4, r2
	bl	crc32_le(PLT)
	ldr	r3, [r8, #80]
	mvn	r2, r0
	mov	r1, r9
	ldr	lr, [r8, #172]
	mov	ip, r2, lsr #16
	ubfx	r10, r2, #8, #8
	mov	r0, r8
	mov	r9, ip, lsr #8
	str	r3, [sp, #12]
	add	r3, lr, r3
	strb	ip, [r3, #2]
	ldr	ip, [sp, #12]
	strb	r9, [r3, #3]
	strb	r2, [lr, ip]
	strb	r10, [r3, #1]
	bl	skb_put(PLT)
	b	.L4204
.L4228:
	mov	r0, ip
	bl	dev_kfree_skb_any(PLT)
	mov	r0, #0
	b	.L4194
.L4210:
	ubfx	r2, r4, #8, #8
	strb	r4, [r7, r3, asl #1]
	strb	r2, [r0, #1]
	b	.L4212
.L4231:
	ldr	r4, [sp, #4]
	mov	r0, r8
	rsb	r1, r1, r4
	bl	skb_put(PLT)
	ldr	r1, [r8, #80]
	subs	r1, r4, r1
	beq	.L4216
	bl	__memzero(PLT)
	mov	r0, r8
	b	.L4194
.L4233:
	.align	2
.L4232:
	.word	.LANCHOR1-(.LPIC877+8)
	.fnend
	.size	ncm_wrap_ntb, .-ncm_wrap_ntb
	.align	2
	.type	remote_wakeup_store, %function
remote_wakeup_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	ldr	r1, .L4244
	mov	r3, #0
	add	r2, sp, #8
	mov	r4, r0
	mov	r0, r6
	str	r3, [r2, #-4]!
.LPIC880:
	add	r1, pc, r1
	bl	sscanf(PLT)
	mov	r0, r4
	ldr	r3, [sp, #4]
	ldr	r2, [r0, #156]!
	cmp	r0, r2
	sub	r2, r2, #120
	beq	.L4242
	cmp	r3, #0
	bne	.L4239
.L4237:
	ldrb	r1, [r2, #22]	@ zero_extendqisi2
	ldr	r3, [r2, #120]
	bic	r1, r1, #32
	cmp	r0, r3
	strb	r1, [r2, #22]
	sub	r2, r3, #120
	bne	.L4237
.L4242:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4239:
	ldrb	r1, [r2, #22]	@ zero_extendqisi2
	ldr	ip, [r2, #120]
	orr	r1, r1, #32
	cmp	r0, ip
	strb	r1, [r2, #22]
	sub	r2, ip, #120
	bne	.L4239
	b	.L4242
.L4245:
	.align	2
.L4244:
	.word	.LC235-(.LPIC880+8)
	.fnend
	.size	remote_wakeup_store, .-remote_wakeup_store
	.align	2
	.type	bDeviceProtocol_store, %function
bDeviceProtocol_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4250
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	mov	r4, r3
	add	r2, sp, #4
.LPIC881:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4248
	ldr	r3, .L4250+4
	mov	r0, r4
	ldr	r2, [sp, #4]
.LPIC882:
	add	r3, pc, r3
	strb	r2, [r3, #222]
.L4247:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4248:
	mvn	r0, #0
	b	.L4247
.L4251:
	.align	2
.L4250:
	.word	.LC68-(.LPIC881+8)
	.word	.LANCHOR1-(.LPIC882+8)
	.fnend
	.size	bDeviceProtocol_store, .-bDeviceProtocol_store
	.align	2
	.type	bDeviceSubClass_store, %function
bDeviceSubClass_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4256
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	mov	r4, r3
	add	r2, sp, #4
.LPIC883:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4254
	ldr	r3, .L4256+4
	mov	r0, r4
	ldr	r2, [sp, #4]
.LPIC884:
	add	r3, pc, r3
	strb	r2, [r3, #221]
.L4253:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4254:
	mvn	r0, #0
	b	.L4253
.L4257:
	.align	2
.L4256:
	.word	.LC68-(.LPIC883+8)
	.word	.LANCHOR1-(.LPIC884+8)
	.fnend
	.size	bDeviceSubClass_store, .-bDeviceSubClass_store
	.align	2
	.type	bDeviceClass_store, %function
bDeviceClass_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4262
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	mov	r4, r3
	add	r2, sp, #4
.LPIC885:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4260
	ldr	r3, .L4262+4
	mov	r0, r4
	ldr	r2, [sp, #4]
.LPIC886:
	add	r3, pc, r3
	strb	r2, [r3, #220]
.L4259:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4260:
	mvn	r0, #0
	b	.L4259
.L4263:
	.align	2
.L4262:
	.word	.LC68-(.LPIC885+8)
	.word	.LANCHOR1-(.LPIC886+8)
	.fnend
	.size	bDeviceClass_store, .-bDeviceClass_store
	.align	2
	.type	bcdDevice_store, %function
bcdDevice_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4268
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	mov	r4, r3
	add	r2, sp, #4
.LPIC887:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4266
	ldr	r3, .L4268+4
	mov	r0, r4
	ldr	r2, [sp, #4]
.LPIC888:
	add	r3, pc, r3
	strh	r2, [r3, #228]	@ movhi
.L4265:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4266:
	mvn	r0, #0
	b	.L4265
.L4269:
	.align	2
.L4268:
	.word	.LC74-(.LPIC887+8)
	.word	.LANCHOR1-(.LPIC888+8)
	.fnend
	.size	bcdDevice_store, .-bcdDevice_store
	.align	2
	.type	idProduct_store, %function
idProduct_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4274
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	mov	r4, r3
	add	r2, sp, #4
.LPIC889:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4272
	ldr	r3, .L4274+4
	mov	r0, r4
	ldr	r2, [sp, #4]
.LPIC890:
	add	r3, pc, r3
	strh	r2, [r3, #226]	@ movhi
.L4271:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4272:
	mvn	r0, #0
	b	.L4271
.L4275:
	.align	2
.L4274:
	.word	.LC74-(.LPIC889+8)
	.word	.LANCHOR1-(.LPIC890+8)
	.fnend
	.size	idProduct_store, .-idProduct_store
	.align	2
	.type	idVendor_store, %function
idVendor_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4280
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	mov	r4, r3
	add	r2, sp, #4
.LPIC891:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4278
	ldr	r3, .L4280+4
	mov	r0, r4
	ldr	r2, [sp, #4]
.LPIC892:
	add	r3, pc, r3
	strh	r2, [r3, #224]	@ movhi
.L4277:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4278:
	mvn	r0, #0
	b	.L4277
.L4281:
	.align	2
.L4280:
	.word	.LC74-(.LPIC891+8)
	.word	.LANCHOR1-(.LPIC892+8)
	.fnend
	.size	idVendor_store, .-idVendor_store
	.align	2
	.type	mass_storage_inquiry_store, %function
mass_storage_inquiry_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata(PLT)
	cmp	r4, #28
	ldr	r3, [r0, #4]
	bhi	.L4285
	ldr	r2, [r3, #96]
	mov	r0, r5
	ldr	r1, .L4287
	add	r2, r2, #180
.LPIC893:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4285
	mov	r0, r4
.L4284:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4285:
	mvn	r0, #21
	b	.L4284
.L4288:
	.align	2
.L4287:
	.word	.LC236-(.LPIC893+8)
	.fnend
	.size	mass_storage_inquiry_store, .-mass_storage_inquiry_store
	.align	2
	.type	ncm_ethaddr_store, %function
ncm_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #20
	sub	sp, sp, #20
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r0, r5
	ldr	r1, .L4293
	add	lr, r3, #4
	add	ip, r3, #5
	add	r2, r3, #2
	add	r5, r3, #3
.LPIC894:
	add	r1, pc, r1
	str	ip, [sp, #12]
	str	r2, [sp]
	mov	r2, r3
	add	r3, r3, #1
	stmib	sp, {r5, lr}
	bl	sscanf(PLT)
	cmp	r0, #6
	moveq	r0, r4
	mvnne	r0, #21
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L4294:
	.align	2
.L4293:
	.word	.LC76-(.LPIC894+8)
	.fnend
	.size	ncm_ethaddr_store, .-ncm_ethaddr_store
	.align	2
	.type	ecm_ethaddr_store, %function
ecm_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #20
	sub	sp, sp, #20
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r0, r5
	ldr	r1, .L4299
	add	lr, r3, #4
	add	ip, r3, #5
	add	r2, r3, #2
	add	r5, r3, #3
.LPIC895:
	add	r1, pc, r1
	str	ip, [sp, #12]
	str	r2, [sp]
	mov	r2, r3
	add	r3, r3, #1
	stmib	sp, {r5, lr}
	bl	sscanf(PLT)
	cmp	r0, #6
	moveq	r0, r4
	mvnne	r0, #21
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L4300:
	.align	2
.L4299:
	.word	.LC76-(.LPIC895+8)
	.fnend
	.size	ecm_ethaddr_store, .-ecm_ethaddr_store
	.align	2
	.type	rndis_max_pkt_per_xfer_store, %function
rndis_max_pkt_per_xfer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	ldr	r1, .L4305
	add	r2, sp, #4
	ldr	r6, [r0, #4]
	mov	r0, r5
.LPIC896:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	ldreq	r3, [sp, #4]
	moveq	r0, r4
	mvnne	r0, #21
	streqb	r3, [r6, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4306:
	.align	2
.L4305:
	.word	.LC235-(.LPIC896+8)
	.fnend
	.size	rndis_max_pkt_per_xfer_store, .-rndis_max_pkt_per_xfer_store
	.align	2
	.type	rndis_vendorID_store, %function
rndis_vendorID_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	ldr	r1, .L4311
	add	r2, sp, #4
	ldr	r6, [r0, #4]
	mov	r0, r5
.LPIC897:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	ldreq	r3, [sp, #4]
	moveq	r0, r4
	mvnne	r0, #21
	streq	r3, [r6, #8]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4312:
	.align	2
.L4311:
	.word	.LC237-(.LPIC897+8)
	.fnend
	.size	rndis_vendorID_store, .-rndis_vendorID_store
	.align	2
	.type	rndis_ethaddr_store, %function
rndis_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #20
	sub	sp, sp, #20
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r0, r5
	ldr	r1, .L4317
	add	lr, r3, #4
	add	ip, r3, #5
	add	r2, r3, #2
	add	r5, r3, #3
.LPIC898:
	add	r1, pc, r1
	str	ip, [sp, #12]
	str	r2, [sp]
	mov	r2, r3
	add	r3, r3, #1
	stmib	sp, {r5, lr}
	bl	sscanf(PLT)
	cmp	r0, #6
	moveq	r0, r4
	mvnne	r0, #21
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L4318:
	.align	2
.L4317:
	.word	.LC76-(.LPIC898+8)
	.fnend
	.size	rndis_ethaddr_store, .-rndis_ethaddr_store
	.align	2
	.type	rndis_wceis_store, %function
rndis_wceis_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	ldr	r1, .L4323
	add	r2, sp, #4
	ldr	r6, [r0, #4]
	mov	r0, r5
.LPIC899:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4321
	ldr	r3, [sp, #4]
	mov	r0, r4
	adds	r3, r3, #0
	movne	r3, #1
	strb	r3, [r6, #269]
.L4320:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4321:
	mvn	r0, #21
	b	.L4320
.L4324:
	.align	2
.L4323:
	.word	.LC235-(.LPIC899+8)
	.fnend
	.size	rndis_wceis_store, .-rndis_wceis_store
	.align	2
	.type	rndis_manufacturer_store, %function
rndis_manufacturer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata(PLT)
	cmp	r4, #255
	ldr	r2, [r0, #4]
	bhi	.L4327
	ldr	r1, .L4330
	mov	r0, r5
	add	r2, r2, #13
.LPIC900:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	moveq	r0, r4
	mvnne	r0, #0
.L4326:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4327:
	mvn	r0, #21
	b	.L4326
.L4331:
	.align	2
.L4330:
	.word	.LC238-(.LPIC900+8)
	.fnend
	.size	rndis_manufacturer_store, .-rndis_manufacturer_store
	.align	2
	.type	iSerial_store, %function
iSerial_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L4334
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L4337
	mov	r1, r2
	mov	r2, #256
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC901:
	add	r5, pc, r5
	add	r5, r5, #2400
	mov	r0, r5
	bl	strlcpy(PLT)
	mov	r0, r5
	bl	strim(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4334:
	mvn	r0, #21
	bx	lr
.L4338:
	.align	2
.L4337:
	.word	.LANCHOR2-(.LPIC901+8)
	.fnend
	.size	iSerial_store, .-iSerial_store
	.align	2
	.type	iProduct_store, %function
iProduct_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L4341
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L4344
	mov	r1, r2
	mov	r2, #256
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC903:
	add	r5, pc, r5
	add	r5, r5, #2656
	mov	r0, r5
	bl	strlcpy(PLT)
	mov	r0, r5
	bl	strim(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4341:
	mvn	r0, #21
	bx	lr
.L4345:
	.align	2
.L4344:
	.word	.LANCHOR2-(.LPIC903+8)
	.fnend
	.size	iProduct_store, .-iProduct_store
	.align	2
	.type	iManufacturer_store, %function
iManufacturer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L4348
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L4351
	mov	r1, r2
	mov	r2, #256
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC905:
	add	r5, pc, r5
	add	r5, r5, #2912
	mov	r0, r5
	bl	strlcpy(PLT)
	mov	r0, r5
	bl	strim(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4348:
	mvn	r0, #21
	bx	lr
.L4352:
	.align	2
.L4351:
	.word	.LANCHOR2-(.LPIC905+8)
	.fnend
	.size	iManufacturer_store, .-iManufacturer_store
	.align	2
	.type	ffs_aliases_store, %function
ffs_aliases_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 264
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	ldr	r4, .L4360
	ldr	r5, .L4360+4
	strd	r8, [sp, #16]
	mov	r9, r2
	strd	r6, [sp, #8]
	mov	r6, r3
	str	lr, [sp, #24]
	.pad #268
	sub	sp, sp, #268
.LPIC909:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
.LPIC908:
	add	r5, pc, r5
	ldr	r7, [r5]
	ldr	r3, [r4]
	sub	r8, r7, #140
	mov	r0, r8
	str	r3, [sp, #260]
	bl	mutex_lock(PLT)
	ldrb	r3, [r7, #-148]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L4358
	add	r5, sp, #4
	mov	r1, r9
	mov	r2, #256
	mov	r0, r5
	bl	strlcpy(PLT)
	mov	r0, r5
	bl	strim(PLT)
	mov	r1, r0
	mov	r2, #256
	add	r0, r7, #8
	bl	strlcpy(PLT)
	mov	r0, r8
	bl	mutex_unlock(PLT)
	mov	r0, r6
.L4355:
	ldr	r2, [sp, #260]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L4359
	add	sp, sp, #268
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L4358:
	mov	r0, r8
	bl	mutex_unlock(PLT)
	mvn	r0, #15
	b	.L4355
.L4359:
	bl	__stack_chk_fail(PLT)
.L4361:
	.align	2
.L4360:
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC909+8))
	.word	.LANCHOR2-(.LPIC908+8)
	.fnend
	.size	ffs_aliases_store, .-ffs_aliases_store
	.align	2
	.type	functions_store, %function
functions_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 560
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4415
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	.pad #564
	sub	sp, sp, #564
	str	r3, [sp, #16]
.LPIC923:
	ldr	r3, [pc, r1]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	ldr	r3, [r3]
	str	r3, [sp, #556]
	bl	dev_get_drvdata(PLT)
	add	r3, r0, #28
	add	r2, r0, #156
	mov	r7, r0
	mov	r0, r3
	str	r3, [sp, #12]
	str	r2, [sp, #8]
	bl	mutex_lock(PLT)
	ldrb	r8, [r7, #20]	@ zero_extendqisi2
	cmp	r8, #0
	bne	.L4408
	ldr	r5, [r7, #156]
	ldr	r3, [sp, #8]
	cmp	r3, r5
	sub	r5, r5, #120
	movne	fp, r3
	movne	r9, #256
	beq	.L4366
.L4368:
	mov	r4, r5
	ldr	r3, [r4, #112]!
	cmp	r3, r4
	movne	r6, #512
	beq	.L4370
.L4367:
	ldr	r2, [r3, #-4]
	sub	r0, r3, #4
	str	r8, [r2, #20]
	ldmia	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r6, [r3, #4]
	bl	kfree(PLT)
	ldr	r3, [r5, #112]
	cmp	r3, r4
	bne	.L4367
.L4370:
	ldr	r3, [r5, #120]
	str	r4, [r5, #112]
	str	r4, [r5, #116]
	cmp	fp, r3
	sub	r5, r3, #120
	bne	.L4368
.L4366:
	add	r4, sp, #44
	mov	r1, r10
	mov	r2, #256
	mov	r0, r4
	bl	strlcpy(PLT)
	mov	r0, r4
	bl	strim(PLT)
	ldr	r3, [sp, #8]
	str	r0, [sp, #36]
	mov	r1, #0
	ldr	ip, [r7, #8]
	mov	r10, r1
	ldr	r2, .L4415+4
	str	r3, [sp, #4]
	ldr	r3, .L4415+8
	ldr	ip, [ip]
.LPIC922:
	add	r2, pc, r2
	add	r2, r2, #1376
.LPIC920:
	add	r3, pc, r3
	add	r2, r2, #12
	add	r3, r3, #1376
	strb	r1, [ip, #386]
	add	r3, r3, #12
	str	r2, [sp, #24]
	str	r3, [sp, #28]
.L4371:
	ldr	r5, .L4415+12
	cmp	r0, #0
	add	r4, sp, #36
.LPIC911:
	add	r5, pc, r5
	beq	.L4409
.L4384:
	mov	r0, r4
	mov	r1, r5
	bl	strsep(PLT)
	cmp	r0, #0
	str	r0, [sp, #32]
	beq	.L4410
	ldr	r3, [sp, #4]
	ldr	r2, [sp, #8]
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L4374
	sub	r9, r3, #120
	str	r3, [sp, #4]
.L4375:
	ldr	r8, .L4415+16
	cmp	r0, #0
	ldr	r5, .L4415+20
.LPIC916:
	add	r8, pc, r8
.LPIC917:
	add	r5, pc, r5
	beq	.L4411
.L4383:
	mov	r1, r8
	add	r0, sp, #32
	bl	strsep(PLT)
	add	fp, sp, #300
	mov	r6, r0
	add	r1, r7, #176
	mov	r0, fp
	mov	r2, #256
	bl	strlcpy(PLT)
	add	r4, sp, #560
	str	fp, [r4, #-520]!
.L4380:
	mov	r1, r5
	mov	r0, r4
	bl	strsep(PLT)
	subs	r1, r0, #0
	beq	.L4378
	mov	r0, r6
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L4379
.L4378:
	ldr	r3, [sp, #40]
	cmp	r3, #0
	bne	.L4380
	mov	r0, r7
	mov	r1, r9
	mov	r2, r6
	bl	android_enable_function(PLT)
	cmp	r0, #0
	bne	.L4412
.L4382:
	ldr	r0, [sp, #32]
	cmp	r0, #0
	bne	.L4383
.L4411:
	ldr	r0, [sp, #36]
	b	.L4371
.L4379:
	cmp	r10, #0
	bne	.L4382
	ldr	r2, .L4415+24
	mov	r0, r7
	mov	r1, r9
.LPIC918:
	add	r2, pc, r2
	bl	android_enable_function(PLT)
	subs	r2, r0, #0
	moveq	r10, #1
	beq	.L4382
	ldr	r0, .L4415+28
	ldr	r1, [sp, #28]
.LPIC919:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L4382
.L4410:
	ldr	r0, [sp, #36]
	cmp	r0, #0
	bne	.L4384
.L4409:
	ldr	r3, [sp, #4]
	ldr	r2, [sp, #8]
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L4387
	ldr	r8, [sp, #4]
	mov	r6, r2
	mov	r5, #256
	mov	r4, #512
.L4386:
	ldr	r2, [r3, #4]
	sub	r0, r3, #120
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r5, [r3]
	str	r4, [r3, #4]
	ldr	r3, [r7, #164]
	sub	r3, r3, #1
	str	r3, [r7, #164]
	bl	kfree(PLT)
	ldr	r3, [r8]
	cmp	r6, r3
	bne	.L4386
.L4387:
	ldr	r0, [sp, #12]
	bl	mutex_unlock(PLT)
	ldr	r0, [sp, #16]
.L4364:
	ldr	r3, [sp, #20]
	ldr	r2, [sp, #556]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L4413
	add	sp, sp, #564
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4374:
	ldr	r3, .L4415+32
.LPIC924:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L4391
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r9, r0, #0
	beq	.L4414
.L4376:
	ldr	r0, [r7, #164]
	add	r2, r9, #112
	add	r3, r9, #120
	ldr	r1, .L4415+36
	ldr	ip, [r7]
	add	r0, r0, #1
.LPIC915:
	add	r1, pc, r1
	str	r0, [r7, #164]
	str	ip, [r9]
	str	r1, [r9, #12]
	ldr	r1, [r7, #164]
	str	r2, [r9, #112]
	str	r2, [r9, #116]
	strb	r1, [r9, #20]
	ldr	r1, [sp, #8]
	ldr	r2, [r7, #160]
	str	r3, [r7, #160]
	str	r1, [r9, #120]
	str	r2, [r9, #124]
	str	r3, [r2]
	ldr	r3, [sp, #4]
	ldr	r0, [sp, #32]
	ldr	r3, [r3]
	str	r3, [sp, #4]
	b	.L4375
.L4391:
	mov	r9, #16
	b	.L4376
.L4414:
	ldr	r1, .L4415+40
	mvn	r9, #11
	ldr	r0, .L4415+44
.LPIC913:
	add	r1, pc, r1
	add	r1, r1, #1360
.LPIC912:
	add	r0, pc, r0
	add	r1, r1, #4
	mov	r2, r1
	bl	printk(PLT)
	ldr	r3, [sp, #4]
	ldr	r0, [sp, #32]
	ldr	r3, [r3]
	str	r3, [sp, #4]
	b	.L4375
.L4408:
	ldr	r0, [sp, #12]
	bl	mutex_unlock(PLT)
	mvn	r0, #15
	b	.L4364
.L4412:
	mov	r3, r0
	ldr	r0, .L4415+48
	mov	r2, r6
	ldr	r1, [sp, #24]
.LPIC921:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L4382
.L4413:
	bl	__stack_chk_fail(PLT)
.L4416:
	.align	2
.L4415:
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC923+8))
	.word	.LANCHOR3-(.LPIC922+8)
	.word	.LANCHOR3-(.LPIC920+8)
	.word	.LC239-(.LPIC911+8)
	.word	.LC241-(.LPIC916+8)
	.word	.LC241-(.LPIC917+8)
	.word	.LC242-(.LPIC918+8)
	.word	.LC243-(.LPIC919+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC924+8))
	.word	android_unbind_config-(.LPIC915+8)
	.word	.LANCHOR3-(.LPIC913+8)
	.word	.LC240-(.LPIC912+8)
	.word	.LC244-(.LPIC921+8)
	.fnend
	.size	functions_store, .-functions_store
	.align	2
	.type	acc_start_work, %function
acc_start_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L4419
	.save {lr}
	str	lr, [sp, #-4]!
	mov	ip, #0
	ldr	r3, .L4419+4
	.pad #12
	sub	sp, sp, #12
	mov	r1, #2
	mov	r2, sp
	str	ip, [sp, #4]
.LPIC926:
	add	r0, pc, r0
	ldr	r0, [r0, #180]
.LPIC925:
	add	r3, pc, r3
	str	r3, [sp]
	add	r0, r0, #8
	bl	kobject_uevent_env(PLT)
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L4420:
	.align	2
.L4419:
	.word	.LANCHOR0-(.LPIC926+8)
	.word	.LC245-(.LPIC925+8)
	.fnend
	.size	acc_start_work, .-acc_start_work
	.align	2
	.type	android_work, %function
android_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4467
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, #0
	strd	r8, [sp, #16]
	ldr	ip, .L4467+4
	mov	r4, r0
	strd	r6, [sp, #8]
	ldr	r1, .L4467+8
	str	lr, [sp, #24]
	.pad #52
	sub	sp, sp, #52
	ldr	r6, [r0, #-132]
.LPIC927:
	add	r3, pc, r3
	ldr	r2, .L4467+12
.LPIC928:
	add	ip, pc, ip
	str	r5, [sp, #12]
	str	r3, [sp, #8]
	ldr	r3, .L4467+16
.LPIC929:
	add	r1, pc, r1
	add	r7, r6, #60
	str	r5, [sp, #20]
.LPIC930:
	add	r2, pc, r2
	mov	r0, r7
	str	r5, [sp, #28]
	str	ip, [sp, #16]
.LPIC931:
	add	r3, pc, r3
	str	r1, [sp, #24]
	str	r2, [sp, #32]
	str	r3, [sp, #40]
	str	r5, [sp, #36]
	str	r5, [sp, #44]
	bl	_raw_spin_lock_irqsave(PLT)
	ldrb	r8, [r4, #-82]	@ zero_extendqisi2
	mov	r9, r0
	ldrb	r3, [r4, #-81]	@ zero_extendqisi2
	cmp	r3, r8
	beq	.L4422
	ldr	r3, [r6, #12]
	cmp	r3, r5
	beq	.L4423
	ldr	r1, .L4467+20
	sub	r0, r4, #80
	mov	r2, #3
.LPIC932:
	add	r1, pc, r1
	bl	strncmp(PLT)
	cmp	r0, r5
	beq	.L4424
	cmp	r8, r5
	moveq	r5, #1
	bne	.L4425
.L4426:
	mov	r2, #4
	add	r6, sp, #40
.L4438:
	ldr	r3, .L4467+24
	strb	r8, [r4, #-81]
	mov	r0, r7
	ldrb	ip, [r4, #-84]	@ zero_extendqisi2
	mov	r1, r9
.LPIC953:
	add	r3, pc, r3
	strb	ip, [r4, #-83]
	str	r2, [r3, #-492]
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmn	r5, #1
	beq	.L4435
	ldr	r3, [r4, #-88]
	add	r7, sp, #16
	cmp	r3, #0
	beq	.L4431
.L4440:
	ldr	r2, .L4467+28
.LPIC934:
	add	r2, pc, r2
	ldr	r2, [r2, #432]
	cmp	r5, r2
	beq	.L4431
	ldr	r1, [r3, #4]
	cmp	r1, #0
	beq	.L4431
	cmp	r5, #0
	addne	r1, r1, #1
	subne	r0, r4, #72
	subeq	r0, r4, #72
	mvneq	r1, #0
	bl	pm_qos_update_request(PLT)
	ldr	r3, .L4467+32
.LPIC935:
	add	r3, pc, r3
	str	r5, [r3, #432]
.L4431:
	cmp	r6, r7
	beq	.L4439
.L4463:
	add	r7, sp, #24
	cmp	r6, r7
	beq	.L4465
.L4435:
	ldr	r5, .L4467+36
.LPIC941:
	add	r5, pc, r5
	ldr	r3, [r5, #-492]
	sub	r3, r3, #3
	cmp	r3, #1
	bls	.L4437
	ldr	r0, [r4, #-128]
	mov	r1, #2
	mov	r2, r6
	add	r0, r0, #8
	bl	kobject_uevent_env(PLT)
	ldr	r3, [r5, #-492]
	str	r3, [r5, #-488]
.L4437:
	ldr	r1, .L4467+40
	ldr	r0, .L4467+44
	ldr	r3, [r6]
.LPIC945:
	add	r1, pc, r1
	add	r1, r1, #1392
.LPIC944:
	add	r0, pc, r0
	add	r1, r1, #12
	mov	r2, r1
	bl	printk(PLT)
.L4421:
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L4424:
	cmp	r8, #0
	mvn	r5, #0
	beq	.L4426
.L4425:
	mov	r2, #3
	add	r6, sp, #32
	b	.L4438
.L4422:
	ldr	r2, [r6, #12]
	cmp	r2, #0
	beq	.L4423
	strb	r3, [r4, #-81]
	ldr	r3, .L4467+48
	mov	r2, #2
	ldrb	ip, [r4, #-84]	@ zero_extendqisi2
	mov	r0, r7
	add	r7, sp, #24
	mov	r1, r9
	mov	r6, r7
.LPIC933:
	add	r3, pc, r3
	strb	ip, [r4, #-83]
	str	r2, [r3, #-492]
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, r7
	bne	.L4435
.L4465:
	ldr	r3, .L4467+52
.LPIC937:
	add	r3, pc, r3
	ldr	r3, [r3, #-488]
	cmp	r3, #2
	beq	.L4434
.L4436:
	mov	r0, #50
	mov	r6, r7
	bl	msleep(PLT)
	b	.L4435
.L4423:
	ldrb	r5, [r4, #-84]	@ zero_extendqisi2
	ldrb	r3, [r4, #-83]	@ zero_extendqisi2
	cmp	r3, r5
	beq	.L4428
	cmp	r5, #0
	beq	.L4466
	ldr	r3, .L4467+56
	mov	r6, #1
	mov	r2, #3
	ldr	r1, .L4467+60
	sub	r0, r4, #80
.LPIC947:
	add	r3, pc, r3
.LPIC948:
	add	r1, pc, r1
	str	r6, [r3, #-492]
	bl	strncmp(PLT)
	adds	r5, r0, #0
	strb	r6, [r4, #-83]
	mov	r0, r7
	strb	r8, [r4, #-81]
	mov	r1, r9
	movne	r5, #1
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #-88]
	add	r7, sp, #16
	cmp	r3, #0
	movne	r6, r7
	bne	.L4440
.L4439:
	ldr	r3, .L4467+64
	mov	r6, r7
.LPIC936:
	add	r3, pc, r3
	ldr	r3, [r3, #-488]
	cmp	r3, #0
	beq	.L4435
	add	r7, sp, #24
.L4434:
	ldr	r1, .L4467+68
	ldr	r0, .L4467+72
.LPIC939:
	add	r1, pc, r1
	add	r1, r1, #1392
.LPIC938:
	add	r0, pc, r0
	add	r1, r1, #12
	mov	r2, r1
	bl	printk(PLT)
	ldr	r0, [r4, #-128]
	mov	r1, #2
	add	r2, sp, #8
	add	r0, r0, #8
	bl	kobject_uevent_env(PLT)
	mov	r0, #20
	bl	msleep(PLT)
	cmp	r6, r7
	bne	.L4435
	b	.L4436
.L4428:
	mov	r0, r7
	mov	r1, r9
	strb	r8, [r4, #-81]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrb	r2, [r4, #-83]	@ zero_extendqisi2
	ldr	r1, .L4467+76
	ldrb	r3, [r4, #-84]	@ zero_extendqisi2
	ldr	r0, .L4467+80
	str	r2, [sp]
	ldr	ip, [r6, #12]
.LPIC951:
	add	r1, pc, r1
	add	r1, r1, #1392
	add	r1, r1, #12
.LPIC950:
	add	r0, pc, r0
	mov	r2, r1
	str	ip, [sp, #4]
	bl	printk(PLT)
	b	.L4421
.L4466:
	ldr	r3, .L4467+84
	strb	r5, [r4, #-83]
	mov	r0, r7
	strb	r8, [r4, #-81]
	mov	r1, r9
.LPIC949:
	add	r3, pc, r3
	str	r5, [r3, #-492]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #-88]
	add	r6, sp, #8
	cmp	r3, #0
	beq	.L4463
	add	r7, sp, #16
	b	.L4440
.L4468:
	.align	2
.L4467:
	.word	.LC246-(.LPIC927+8)
	.word	.LC247-(.LPIC928+8)
	.word	.LC248-(.LPIC929+8)
	.word	.LC249-(.LPIC930+8)
	.word	.LC250-(.LPIC931+8)
	.word	.LC251-(.LPIC932+8)
	.word	.LANCHOR4-(.LPIC953+8)
	.word	.LANCHOR1-(.LPIC934+8)
	.word	.LANCHOR1-(.LPIC935+8)
	.word	.LANCHOR4-(.LPIC941+8)
	.word	.LANCHOR3-(.LPIC945+8)
	.word	.LC253-(.LPIC944+8)
	.word	.LANCHOR4-(.LPIC933+8)
	.word	.LANCHOR4-(.LPIC937+8)
	.word	.LANCHOR4-(.LPIC947+8)
	.word	.LC251-(.LPIC948+8)
	.word	.LANCHOR4-(.LPIC936+8)
	.word	.LANCHOR3-(.LPIC939+8)
	.word	.LC252-(.LPIC938+8)
	.word	.LANCHOR3-(.LPIC951+8)
	.word	.LC254-(.LPIC950+8)
	.word	.LANCHOR4-(.LPIC949+8)
	.fnend
	.size	android_work, .-android_work
	.align	2
	.type	acc_complete_send_hid_event, %function
acc_complete_send_hid_event:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, r1
	ldr	r1, [r1, #44]
	ldr	r0, [r2, #32]
	ldr	r3, [r2, #48]
	cmp	r1, #0
	bne	.L4472
	.save {lr}
	str	lr, [sp, #-4]!
	mov	ip, #1
	ldr	r2, [r2]
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r0, #8]
	str	ip, [sp]
	bl	hid_report_raw_event(PLT)
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L4472:
	ldr	r0, .L4473
.LPIC954:
	add	r0, pc, r0
	b	printk(PLT)
.L4474:
	.align	2
.L4473:
	.word	.LC255-(.LPIC954+8)
	.fnend
	.size	acc_complete_send_hid_event, .-acc_complete_send_hid_event
	.align	2
	.type	acc_hid_work, %function
acc_hid_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4508
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC955:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r5, [r3, #2316]
	add	r7, sp, #16
	str	r7, [sp, #16]
	str	r7, [sp, #20]
	add	r6, r5, #80
	mov	r4, r5
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #1764]!
	mov	r1, r0
	cmp	r3, r4
	ldr	r2, [r3]
	bne	.L4480
	b	.L4481
.L4479:
	cmp	r4, r2
	ldr	r0, [r2]
	mov	r3, r2
	beq	.L4481
.L4495:
	mov	r2, r0
.L4480:
	ldr	ip, [r3, #28]
	ldr	r0, [r3, #24]
	cmp	ip, r0
	bne	.L4479
	ldr	r0, [r3, #4]
	cmp	r4, r2
	str	r0, [r2, #4]
	str	r2, [r0]
	ldr	r0, [sp, #16]
	str	r3, [r0, #4]
	stmia	r3, {r0, r7}
	str	r3, [sp, #16]
	mov	r3, r2
	ldr	r0, [r2]
	bne	.L4495
.L4481:
	ldr	r2, [r5, #1772]
	add	r3, r5, #1760
	add	r3, r3, #12
	cmp	r2, r3
	beq	.L4505
	ldr	r0, [r5, #1776]
	add	r8, sp, #32
	str	r2, [r8, #-8]!
	str	r0, [sp, #28]
	str	r8, [r2, #4]
	ldr	r2, [sp, #28]
	str	r8, [r2]
	str	r3, [r5, #1772]
	str	r3, [r5, #1776]
.L4482:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	fp, [sp, #16]
	cmp	fp, r7
	ldr	r4, [fp]
	beq	.L4492
	ldr	r2, .L4508+4
	add	r3, r5, #1744
	ldr	r10, .L4508+8
	add	r3, r3, #12
	mov	r9, r3
.LPIC959:
	add	r2, pc, r2
.LPIC956:
	add	r10, pc, r10
	str	r2, [sp, #8]
	ldr	r2, .L4508+12
.LPIC958:
	add	r2, pc, r2
	str	r2, [sp, #12]
	add	r2, r10, #444
	stmia	sp, {r2, r8}
	mov	r8, fp
	b	.L4491
.L4486:
	ldr	r3, [sp]
	str	r1, [r0, #36]
	ldr	ip, [r10, #180]
	str	r1, [r0, #40]
	str	r8, [r0, #3852]
	str	r3, [r0, #3556]
	mov	r3, #3
	str	ip, [r0, #3200]
	strh	r3, [r0, #32]	@ movhi
	bl	hid_add_device(PLT)
	cmp	r0, #0
	streq	fp, [r8, #8]
	bne	.L4506
.L4488:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r8, #4]
	mov	r1, r0
	mov	r0, r6
	ldr	ip, [r8]
	str	r2, [ip, #4]
	str	ip, [r2]
	ldr	r2, [r5, #1756]
	str	r8, [r2, #4]
	stmia	r8, {r2, r9}
	str	r8, [r5, #1756]
	bl	_raw_spin_unlock_irqrestore(PLT)
.L4490:
	cmp	r4, r7
	ldr	r2, [r4]
	mov	r8, r4
	beq	.L4507
	mov	r4, r2
.L4491:
	bl	hid_allocate_device(PLT)
	cmn	r0, #4096
	mov	fp, r0
	mvn	r1, #0
	bls	.L4486
	cmp	r0, #0
	beq	.L4488
.L4487:
	mov	r1, r8
	ldr	r0, [sp, #8]
	bl	printk(PLT)
	ldr	r0, [r8, #20]
	bl	kfree(PLT)
	mov	r0, r8
	bl	kfree(PLT)
	b	.L4490
.L4507:
	ldr	r8, [sp, #4]
.L4492:
	ldr	r4, [sp, #24]
	cmp	r4, r8
	ldr	r5, [r4]
	movne	r7, #256
	movne	r6, #512
	beq	.L4475
.L4494:
	ldr	r3, [r4, #4]
	str	r3, [r5, #4]
	str	r5, [r3]
	ldr	r0, [r4, #8]
	str	r7, [r4]
	str	r6, [r4, #4]
	cmp	r0, #0
	beq	.L4493
	bl	hid_destroy_device(PLT)
.L4493:
	ldr	r0, [r4, #20]
	bl	kfree(PLT)
	mov	r0, r4
	mov	r4, r5
	bl	kfree(PLT)
	cmp	r5, r8
	ldr	r5, [r5]
	bne	.L4494
.L4475:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4505:
	add	r8, sp, #24
	str	r8, [sp, #24]
	str	r8, [sp, #28]
	b	.L4482
.L4506:
	mov	r1, r0
	ldr	r0, [sp, #12]
	bl	printk(PLT)
	mov	r0, fp
	bl	hid_destroy_device(PLT)
	b	.L4487
.L4509:
	.align	2
.L4508:
	.word	.LANCHOR2-(.LPIC955+8)
	.word	.LC257-(.LPIC959+8)
	.word	.LANCHOR0-(.LPIC956+8)
	.word	.LC256-(.LPIC958+8)
	.fnend
	.size	acc_hid_work, .-acc_hid_work
	.align	2
	.type	acc_hid_parse, %function
acc_hid_parse:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #3852]
	ldr	r1, [r3, #20]
	ldr	r2, [r3, #24]
	bl	hid_parse_report(PLT)
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
	.fnend
	.size	acc_hid_parse, .-acc_hid_parse
	.align	2
	.type	fsg_show_file, %function
fsg_show_file:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	mov	r4, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	str	r8, [sp, #16]
	bl	dev_get_drvdata(PLT)
	mov	r7, r0
	bl	down_read(PLT)
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	beq	.L4513
	add	r0, r0, #8
	mov	r1, r5
	movw	r2, #4095
	bl	d_path(PLT)
	cmn	r0, #4096
	mov	r4, r0
	bhi	.L4515
	bl	strlen(PLT)
	mov	r6, r0
	mov	r1, r4
	mov	r2, r6
	mov	r0, r5
	bl	memmove(PLT)
	add	r4, r6, #1
	mov	r2, #10
	mov	r3, #0
	strb	r2, [r5, r6]
	strb	r3, [r5, r4]
.L4515:
	mov	r0, r7
	bl	up_read(PLT)
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4513:
	mov	r4, r0
	strb	r0, [r5]
	b	.L4515
	.fnend
	.size	fsg_show_file, .-fsg_show_file
	.align	2
	.type	fsg_store_ro, %function
fsg_store_ro:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r2
	mov	r4, r3
	strd	r6, [sp, #8]
	mov	r7, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata(PLT)
	mov	r6, r0
	mov	r1, #2
	mov	r0, r5
	add	r2, sp, #4
	bl	kstrtouint(PLT)
	cmp	r0, #0
	beq	.L4523
.L4518:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L4523:
	mov	r0, r6
	bl	down_read(PLT)
	ldr	r3, [r7, #-48]
	cmp	r3, #0
	mvnne	r4, #15
	beq	.L4524
.L4519:
	mov	r0, r6
	bl	up_read(PLT)
	mov	r0, r4
	b	.L4518
.L4524:
	ldr	r2, [sp, #4]
	ldrb	r3, [r7, #-24]	@ zero_extendqisi2
	and	r2, r2, #1
	bfi	r3, r2, #1, #1
	bfi	r3, r2, #0, #1
	strb	r3, [r7, #-24]
	b	.L4519
	.fnend
	.size	fsg_store_ro, .-fsg_store_ro
	.align	2
	.type	fsg_store_cdrom, %function
fsg_store_cdrom:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r2
	mov	r4, r3
	strd	r6, [sp, #8]
	mov	r7, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata(PLT)
	mov	r6, r0
	mov	r1, #2
	mov	r0, r5
	add	r2, sp, #4
	bl	kstrtouint(PLT)
	cmp	r0, #0
	beq	.L4531
.L4526:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L4531:
	mov	r0, r6
	bl	down_read(PLT)
	ldr	r3, [r7, #-48]
	cmp	r3, #0
	mvnne	r4, #15
	beq	.L4532
.L4527:
	mov	r0, r6
	bl	up_read(PLT)
	mov	r0, r4
	b	.L4526
.L4532:
	ldrb	r3, [r7, #-24]	@ zero_extendqisi2
	ldr	r2, [sp, #4]
	bfi	r3, r2, #3, #1
	strb	r3, [r7, #-24]
	b	.L4527
	.fnend
	.size	fsg_store_cdrom, .-fsg_store_cdrom
	.align	2
	.type	fsg_store_file, %function
fsg_store_file:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r3
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata(PLT)
	cmp	r4, #0
	mov	r6, r0
	beq	.L4534
	sub	r3, r4, #1
	ldrb	r2, [r7, r3]	@ zero_extendqisi2
	cmp	r2, #10
	moveq	r2, #0
	streqb	r2, [r7, r3]
	bl	down_write(PLT)
	ldr	r0, [r5, #-48]
	cmp	r0, #0
	beq	.L4543
	bl	fput(PLT)
	mov	r3, #14848
	mov	r2, #0
	movt	r3, 2
	str	r2, [r5, #-48]
	str	r3, [r5, #-12]
.L4543:
	ldrb	r3, [r7]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L4551
.L4537:
	mov	r0, r6
	bl	up_write(PLT)
.L4540:
	mov	r0, r4
.L4548:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4534:
	bl	down_write(PLT)
	ldr	r0, [r5, #-48]
	cmp	r0, #0
	beq	.L4537
	bl	fput(PLT)
	mov	r3, #14848
	str	r4, [r5, #-48]
	movt	r3, 2
	str	r3, [r5, #-12]
	b	.L4537
.L4551:
	mov	r1, r7
	sub	r0, r5, #48
	bl	fsg_lun_open(PLT)
	subs	r7, r0, #0
	bne	.L4538
	mov	r3, #10240
	movt	r3, 6
	str	r3, [r5, #-12]
	b	.L4537
.L4538:
	mov	r0, r6
	bl	up_write(PLT)
	cmp	r7, #0
	movlt	r0, r7
	blt	.L4548
	b	.L4540
	.fnend
	.size	fsg_store_file, .-fsg_store_file
	.align	2
	.type	bulk_out_complete, %function
bulk_out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	ldr	r6, [r1, #32]
	str	lr, [sp, #12]
	ldr	r4, [r0]
	cmn	r2, #104
	beq	.L4562
.L4553:
#APP
@ 600 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	mov	r2, #0
	mov	r3, #1
	str	r2, [r6, #28]
	str	r3, [r6, #4]
#APP
@ 518 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	ldr	r0, [r4, #168]
	str	r3, [r4, #148]
	cmp	r0, r2
	beq	.L4554
	bl	wake_up_process(PLT)
.L4554:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock(PLT)
.L4562:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L4553
	blx	r3
	b	.L4553
	.fnend
	.size	bulk_out_complete, .-bulk_out_complete
	.align	2
	.type	bulk_in_complete, %function
bulk_in_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	ldr	r6, [r1, #32]
	str	lr, [sp, #12]
	ldr	r4, [r0]
	cmn	r2, #104
	beq	.L4573
.L4564:
#APP
@ 579 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	mov	r3, #0
	str	r3, [r6, #20]
	str	r3, [r6, #4]
#APP
@ 518 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	ldr	r0, [r4, #168]
	mov	r3, #1
	str	r3, [r4, #148]
	cmp	r0, #0
	beq	.L4565
	bl	wake_up_process(PLT)
.L4565:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock(PLT)
.L4573:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L4564
	blx	r3
	b	.L4564
	.fnend
	.size	bulk_in_complete, .-bulk_in_complete
	.align	2
	.type	sleep_thread, %function
sleep_thread:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r3, sp
	strd	r6, [sp, #8]
	ldr	r7, .L4588
	bic	r5, r3, #8128
	strd	r8, [sp, #16]
	add	r6, r0, #44
	mov	r8, r0
	str	r10, [sp, #24]
	bic	r5, r5, #63
	mov	r9, #1
	str	lr, [sp, #28]
.LPIC961:
	ldr	r7, [pc, r7]		@ tls_load_dot_plus_eight
	b	.L4579
.L4575:
	str	r9, [r0]
#APP
@ 730 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	ldr	r2, [r5, #12]
	mov	r0, r6
	ldr	r3, [r2, #4]
	ldr	r3, [r3]
	ands	r4, r3, #1
	bne	.L4580
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r8, #148]
	mov	r0, r6
	cmp	r3, #0
	bne	.L4586
	bl	_raw_spin_unlock_irq(PLT)
	bl	schedule(PLT)
.L4579:
	ldr	r3, [r7]
	ldr	r0, [r5, #12]
	cmp	r3, #0
	beq	.L4575
	bl	freezing_slow_path(PLT)
	cmp	r0, #0
	bne	.L4587
.L4585:
	ldr	r0, [r5, #12]
	b	.L4575
.L4580:
	mvn	r4, #3
.L4577:
	mov	r5, #0
	mov	r0, r6
	str	r5, [r2]
	bl	_raw_spin_lock_irq(PLT)
	str	r5, [r8, #148]
	mov	r0, r6
	bl	_raw_spin_unlock_irq(PLT)
#APP
@ 747 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4586:
	bl	_raw_spin_unlock_irq(PLT)
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r2, [r3, #12]
	b	.L4577
.L4587:
	mov	r0, #0
	bl	__refrigerator(PLT)
	b	.L4585
.L4589:
	.align	2
.L4588:
	.word	system_freezing_cnt(GOT_PREL)+(.-(.LPIC961+8))
	.fnend
	.size	sleep_thread, .-sleep_thread
	.align	2
	.type	receive_file_work, %function
receive_file_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
#APP
@ 864 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	ldrd	r6, [r0, #32]
	ldr	r3, [r0, #16]
	ldrd	r4, [r0, #24]
	cmp	r6, #0
	str	r3, [sp, #4]
	sbcs	r3, r7, #0
	strd	r4, [sp, #8]
	blt	.L4591
	mov	r3, sp
	mov	r5, #0
	bic	r9, r3, #8128
	mov	r8, r0
	mov	r10, r5
	bic	r9, r9, #63
	b	.L4592
.L4629:
	ldr	r3, .L4631
	add	r1, r5, #40
	mov	lr, #0
	add	r1, r8, r1, asl #2
	mov	r2, #208
	eor	r5, r5, #1
	ldr	r4, [r1, #-192]
.LPIC964:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	mov	r1, r4
	ldr	r3, [r3]
	str	r3, [r4, #4]
	ldr	r0, [r8, #-104]
	str	lr, [r8, #-24]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L4625
	cmp	fp, #0
	beq	.L4598
	add	r3, sp, #8
	ldr	r0, [sp, #4]
	ldr	r1, [r10]
	ldr	r2, [r10, #48]
	bl	vfs_write(PLT)
	ldr	r3, [r10, #48]
	cmp	r0, r3
	bne	.L4625
.L4598:
	cmp	r4, #0
	beq	.L4600
	ldr	r2, [r8, #-24]
	ldr	r3, [r8, #-96]
	cmp	r2, #0
	bne	.L4602
	cmp	r3, #2
	beq	.L4626
.L4602:
	cmp	r3, #3
	cmpne	r3, #0
	beq	.L4627
.L4605:
	ldr	r2, [r4, #4]
	mov	r1, #0
	cmp	r6, r2
	sbcs	r3, r7, r1
	bge	.L4607
	ldr	r0, [r4, #48]
	mov	r1, #0
	mov	r3, r6
	cmp	r0, r6
	sbcs	ip, r1, r7
	movlt	r3, r0
	str	r3, [r4, #48]
.L4609:
	subs	r6, r6, r3
	sbc	r7, r7, #0
.L4611:
	cmp	r2, r3
	movhi	r6, #0
	movhi	r7, #0
.L4600:
	mov	r10, r4
.L4592:
	cmp	r6, #1
	sbcs	r3, r7, #0
	movge	r4, #1
	movlt	r4, #0
	adds	fp, r10, #0
	movne	fp, #1
	orrs	r3, fp, r4
	beq	.L4628
	cmp	r4, #0
	bne	.L4629
	cmp	fp, #0
	beq	.L4616
	add	r3, sp, #8
	ldr	r0, [sp, #4]
	ldr	r1, [r10]
	ldr	r2, [r10, #48]
	bl	vfs_write(PLT)
	ldr	r3, [r10, #48]
	cmp	r0, r3
	beq	.L4600
.L4625:
	ldr	r3, [r8, #-96]
	cmp	r3, #0
	movne	r3, #4
	mvneq	r7, #4
	mvnne	r7, #4
	strne	r3, [r8, #-96]
.L4597:
	str	r7, [r8, #52]
#APP
@ 952 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
.L4590:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4607:
	mov	r1, #0
	mvn	r0, #0
	ldr	r3, [r4, #48]
	cmp	r7, r1
	cmpeq	r6, r0
	beq	.L4611
	b	.L4609
.L4616:
	mov	r4, fp
	b	.L4600
.L4626:
	ldr	r1, .L4631+4
	add	r3, sp, #32
	add	r10, sp, #20
	ldr	r0, [r9, #12]
	sub	fp, r8, #68
	str	r2, [sp, #20]
	str	r3, [sp, #32]
	str	r3, [sp, #36]
.LPIC963:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	strd	r0, [sp, #24]
	b	.L4604
.L4630:
	bl	schedule(PLT)
.L4604:
	mov	r0, fp
	mov	r1, r10
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldr	r3, [r8, #-24]
	cmp	r3, #0
	bne	.L4603
	ldr	r3, [r8, #-96]
	cmp	r3, #2
	bne	.L4603
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L4630
.L4603:
	mov	r0, fp
	mov	r1, r10
	bl	finish_wait(PLT)
	ldr	r3, [r8, #-96]
	cmp	r3, #3
	cmpne	r3, #0
	bne	.L4605
.L4627:
	ldr	r2, [r8, #-24]
	cmp	r3, #0
	mvneq	r7, #4
	mvnne	r7, #124
	cmp	r2, #0
	bne	.L4597
	ldr	r0, [r8, #-104]
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L4597
.L4628:
	mov	r7, r3
	b	.L4597
.L4591:
	mvn	r3, #21
	str	r3, [r0, #52]
	b	.L4590
.L4632:
	.align	2
.L4631:
	.word	mtp_rx_req_len(GOT_PREL)+(.-(.LPIC964+8))
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC963+8))
	.fnend
	.size	receive_file_work, .-receive_file_work
	.align	2
	.type	ffs_function_cleanup, %function
ffs_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	ldr	r0, .L4635
	str	lr, [sp, #4]
.LPIC965:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L4635+4
.LPIC966:
	add	r0, pc, r0
	add	r0, r0, #472
	bl	unregister_filesystem(PLT)
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
.L4636:
	.align	2
.L4635:
	.word	.LC258-(.LPIC965+8)
	.word	.LANCHOR0-(.LPIC966+8)
	.fnend
	.size	ffs_function_cleanup, .-ffs_function_cleanup
	.align	2
	.type	ffs_ep0_complete, %function
ffs_ep0_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r1, #32]
	add	r0, r0, #36
	b	complete_all(PLT)
	.fnend
	.size	ffs_ep0_complete, .-ffs_ep0_complete
	.align	2
	.type	ffs_function_init, %function
ffs_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4646
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
.LPIC971:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L4639
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r4, #4]
	beq	.L4643
.L4642:
	ldr	r0, .L4646+4
.LPIC968:
	add	r0, pc, r0
	add	r0, r0, #472
	bl	register_filesystem(PLT)
	subs	r4, r0, #0
	bne	.L4641
	ldr	r0, .L4646+8
.LPIC969:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
.L4644:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4639:
	mov	r3, #16
	str	r3, [r4, #4]
	b	.L4642
.L4641:
	ldr	r0, .L4646+12
	mov	r1, r4
.LPIC970:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	b	.L4644
.L4643:
	mvn	r0, #11
	b	.L4644
.L4647:
	.align	2
.L4646:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC971+8))
	.word	.LANCHOR0-(.LPIC968+8)
	.word	.LC259-(.LPIC969+8)
	.word	.LC260-(.LPIC970+8)
	.fnend
	.size	ffs_function_init, .-ffs_function_init
	.align	2
	.type	audio_disable, %function
audio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldrb	r3, [r0, #144]	@ zero_extendqisi2
	cmp	r3, #0
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	strb	r3, [r4, #144]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_disable, .-audio_disable
	.align	2
	.type	audio_pcm_hw_free, %function
audio_pcm_hw_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r2, [r0, #136]
	.pad #8
	sub	sp, sp, #8
	cmp	r2, #0
	beq	.L4656
	ldr	r0, [r0]
	ldr	r1, [r4, #144]
	ldr	r3, [r4, #140]
	ldr	r0, [r0]
	ldr	r0, [r0, #500]
	cmp	r0, #0
	beq	.L4657
	ldr	ip, [r0, #284]
	cmp	ip, #0
	beq	.L4657
.L4658:
	mov	lr, #0
	str	lr, [sp]
	ldr	ip, [ip, #4]
	blx	ip
.L4656:
	mov	r3, #0
	mov	r0, r3
	str	r3, [r4, #136]
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4657:
	ldr	ip, .L4666
.LPIC973:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	b	.L4658
.L4667:
	.align	2
.L4666:
	.word	arm_dma_ops(GOT_PREL)+(.-(.LPIC973+8))
	.fnend
	.size	audio_pcm_hw_free, .-audio_pcm_hw_free
	.align	2
	.type	gser_complete_set_line_coding, %function
gser_complete_set_line_coding:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #44]
	ldr	ip, [r0]
	cmp	r2, #0
	bne	.L4668
	ldr	r2, [r1, #48]
	cmp	r2, #7
	bne	.L4671
	ldr	r3, [r1]
	ldr	r1, [r3]	@ unaligned
	str	r1, [ip, #160]
	ldrh	r1, [r3, #4]	@ unaligned
	strh	r1, [ip, #164]	@ movhi
	ldrb	r3, [r3, #6]	@ zero_extendqisi2
	strb	r3, [ip, #166]
.L4668:
	bx	lr
.L4671:
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	bx	r3
	.fnend
	.size	gser_complete_set_line_coding, .-gser_complete_set_line_coding
	.align	2
	.type	acm_complete_set_line_coding, %function
acm_complete_set_line_coding:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #44]
	ldr	ip, [r0]
	cmp	r2, #0
	bne	.L4672
	ldr	r2, [r1, #48]
	cmp	r2, #7
	bne	.L4675
	ldr	r3, [r1]
	ldr	r1, [r3]	@ unaligned
	str	r1, [ip, #160]
	ldrh	r1, [r3, #4]	@ unaligned
	strh	r1, [ip, #164]	@ movhi
	ldrb	r3, [r3, #6]	@ zero_extendqisi2
	strb	r3, [ip, #166]
.L4672:
	bx	lr
.L4675:
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	bx	r3
	.fnend
	.size	acm_complete_set_line_coding, .-acm_complete_set_line_coding
	.align	2
	.type	acc_hid_probe, %function
acc_hid_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	hid_open_report(PLT)
	subs	r4, r0, #0
	beq	.L4682
.L4677:
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4682:
	ldr	r3, [r5, #3556]
	mov	r0, r5
	ldr	r3, [r3]
	blx	r3
	cmp	r0, #0
	movne	r4, r0
	bne	.L4677
	mov	r0, r5
	mov	r1, #45
	bl	hid_connect(PLT)
	subs	r3, r0, #0
	beq	.L4677
	ldr	r2, [r5, #3556]
	mov	r4, r3
	mov	r0, r5
	ldr	r3, [r2, #4]
	blx	r3
	b	.L4677
	.fnend
	.size	acc_hid_probe, .-acc_hid_probe
	.align	2
	.type	ep_matches.part.10, %function
ep_matches.part.10:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L4744
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	ip, [r2, #3]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
.LPIC975:
	add	r6, pc, r6
	ands	r4, ip, #3
	beq	.L4686
	ldr	r7, [r1, #4]
	ldrb	ip, [r7]	@ zero_extendqisi2
	cmp	ip, #101
	beq	.L4740
.L4686:
	mov	r0, #0
.L4733:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4740:
	mov	r8, r3
	ldrb	r3, [r7, #2]	@ zero_extendqisi2
	mov	r5, r1
	mov	r9, r0
	mov	r10, r2
	cmp	r3, #45
	beq	.L4687
	mov	r0, r7
	mov	r1, #45
	bl	strrchr(PLT)
	subs	fp, r0, #0
	beq	.L4688
	cmp	r4, #2
	beq	.L4690
	cmp	r4, #3
	ldrb	r3, [fp, #2]	@ zero_extendqisi2
	bne	.L4734
	cmp	r3, #115
	beq	.L4686
	ldr	r0, .L4744+4
	ldr	r1, [r9, #28]
.LPIC974:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L4692
	ldrb	r3, [fp, #1]	@ zero_extendqisi2
	cmp	r3, #105
	beq	.L4686
.L4692:
	ldr	r3, .L4744+8
	ldrb	r2, [fp, #-1]	@ zero_extendqisi2
	ldr	r3, [r6, r3]
	ldrb	r3, [r3, r2]	@ zero_extendqisi2
	tst	r3, #4
	beq	.L4705
	ldrh	r2, [r10, #4]	@ unaligned
	cmp	r2, #0
	bne	.L4741
	mov	r7, r2
	b	.L4703
.L4734:
	cmp	r3, #115
	bne	.L4686
.L4693:
	ldr	r3, .L4744+8
	ldrb	r2, [fp, #-1]	@ zero_extendqisi2
	ldr	r3, [r6, r3]
	ldrb	r3, [r3, r2]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L4687
.L4705:
	ldrsb	r3, [r10, #2]
	cmp	r3, #0
	blt	.L4742
	cmp	r2, #116
	bne	.L4686
.L4687:
	sub	r7, r4, #2
	clz	r7, r7
	mov	r7, r7, lsr #5
	cmp	r8, #0
	moveq	r3, #0
	andne	r3, r7, #1
	cmp	r3, #0
	beq	.L4695
	ldr	r3, [r9, #20]
	cmp	r3, #4
	bls	.L4695
	ldrb	r3, [r8, #3]	@ zero_extendqisi2
	ldrh	r2, [r5, #22]
	and	r3, r3, #31
	cmp	r3, r2
	bgt	.L4686
.L4695:
	ldrh	r2, [r10, #4]	@ unaligned
	cmp	r2, #0
	bne	.L4696
.L4703:
	ldrh	r2, [r5, #20]
	strh	r2, [r10, #4]	@ unaligned
.L4696:
	cmp	r4, #1
	ubfx	r3, r2, #0, #11
	beq	.L4698
	cmp	r4, #3
	bne	.L4697
.L4699:
	ldr	r0, [r9, #20]
	cmp	r3, #64
	movhi	r1, #1
	movls	r1, #0
	cmp	r0, #2
	movhi	r1, #0
	cmp	r1, #0
	bne	.L4686
.L4698:
	ldrh	r1, [r5, #20]
	cmp	r1, r3
	bcc	.L4686
	ldr	r4, [r9, #20]
	cmp	r4, #2
	movhi	r4, #0
	movls	r4, #1
	cmp	r3, #1024
	movcc	r3, #0
	andcs	r3, r4, #1
	cmp	r3, #0
	bne	.L4686
	tst	r2, #6144
	moveq	r4, #0
	andne	r4, r4, #1
	cmp	r4, #0
	bne	.L4686
.L4697:
	ldrb	r2, [r10, #2]	@ zero_extendqisi2
	ldr	r3, .L4744+8
	bic	r2, r2, #127
	uxtb	r2, r2
	strb	r2, [r10, #2]
	ldr	r0, [r5, #4]
	ldr	r1, [r6, r3]
	ldrb	r3, [r0, #2]	@ zero_extendqisi2
	ldrb	r3, [r1, r3]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L4743
	ldr	r1, .L4744+12
.LPIC976:
	add	r1, pc, r1
	ldr	r3, [r1, #-484]
	add	r3, r3, #1
	cmp	r3, #15
	str	r3, [r1, #-484]
	bhi	.L4686
	orr	r3, r2, r3
	uxtb	r0, r3
	strb	r0, [r10, #2]
.L4701:
	cmp	r8, #0
	movne	r7, #0
	andeq	r7, r7, #1
	cmp	r7, #0
	beq	.L4702
	ldrh	r3, [r5, #20]
	cmp	r3, #64
	movge	r3, #64
	strh	r3, [r10, #4]	@ unaligned
.L4702:
	strb	r0, [r5, #25]
	mov	r0, #1
	b	.L4733
.L4690:
	ldrb	r3, [fp, #1]	@ zero_extendqisi2
	cmp	r3, #98
	bne	.L4686
	b	.L4693
.L4688:
	mov	r0, r7
	bl	strlen(PLT)
	add	fp, r7, r0
	b	.L4693
.L4743:
	add	r0, r0, #2
	mov	r1, #0
	mov	r2, #10
	bl	simple_strtoul(PLT)
	ldrb	r3, [r10, #2]	@ zero_extendqisi2
	orr	r0, r0, r3
	uxtb	r0, r0
	strb	r0, [r10, #2]
	b	.L4701
.L4742:
	cmp	r2, #110
	bne	.L4686
	b	.L4687
.L4741:
	ubfx	r3, r2, #0, #11
	mov	r7, #0
	b	.L4699
.L4745:
	.align	2
.L4744:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC975+8)
	.word	.LC261-(.LPIC974+8)
	.word	_ctype(GOT)
	.word	.LANCHOR4-(.LPIC976+8)
	.fnend
	.size	ep_matches.part.10, .-ep_matches.part.10
	.align	2
	.type	rmnet_ctrl_open, %function
rmnet_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L4751
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC978:
	add	r4, pc, r4
	ldr	r3, [r4, #-508]
	add	r2, r3, #16
#APP
@ 61 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r0, r5, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r5, #1
	beq	.L4747
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #15
.L4749:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4747:
	ldr	r0, [r4, #-508]
	str	r0, [r1, #124]
	add	r0, r0, #52
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	ldr	r0, [r4, #-508]
	strb	r5, [r0, #4]
	add	r0, r0, #52
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L4749
.L4752:
	.align	2
.L4751:
	.word	.LANCHOR4-(.LPIC978+8)
	.fnend
	.size	rmnet_ctrl_open, .-rmnet_ctrl_open
	.align	2
	.type	ffs_epfile_open, %function
ffs_epfile_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r0, #348]
	ldr	r3, [r2, #40]
	ldr	r3, [r3, #96]
	cmp	r3, #2
	bne	.L4759
	str	r2, [r1, #124]
	ldr	r3, [r2, #40]
	add	r1, r3, #88
#APP
@ 45 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	add	r1, r3, #92
#APP
@ 45 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #36]
	bx	lr
.L4759:
	ldr	r0, .L4760
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, #948
	str	lr, [sp, #4]
.LPIC981:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L4761:
	.align	2
.L4760:
	.word	.LC182-(.LPIC981+8)
	.fnend
	.size	ffs_epfile_open, .-ffs_epfile_open
	.align	2
	.type	audio_pcm_mmap, %function
audio_pcm_mmap:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r0, #164]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r2, #552]
	cmp	r3, #0
	beq	.L4763
	ldr	lr, [r2, #556]
	cmp	lr, #0
	beq	.L4763
	ldr	r0, [r0]
	ldr	r2, [r2, #548]
	ldr	r0, [r0]
	ldr	r0, [r0, #500]
	cmp	r0, #0
	beq	.L4764
	ldr	ip, [r0, #284]
	cmp	ip, #0
	beq	.L4764
.L4765:
	mov	r4, #0
	str	lr, [sp]
	str	r4, [sp, #4]
	ldr	ip, [ip, #8]
	blx	ip
.L4766:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4764:
	ldr	ip, .L4777
.LPIC984:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	b	.L4765
.L4763:
	ldr	r0, .L4777+4
.LPIC983:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #21
	b	.L4766
.L4778:
	.align	2
.L4777:
	.word	arm_dma_ops(GOT_PREL)+(.-(.LPIC984+8))
	.word	.LC262-(.LPIC983+8)
	.fnend
	.size	audio_pcm_mmap, .-audio_pcm_mmap
	.align	2
	.global	gsdio_ctrl_wq
	.type	gsdio_ctrl_wq, %function
gsdio_ctrl_wq:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #80
	beq	.L4781
	bx	lr
.L4781:
	ldr	r1, .L4782
	ldr	r0, .L4782+4
.LPIC986:
	add	r1, pc, r1
	add	r1, r1, #1408
.LPIC985:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L4783:
	.align	2
.L4782:
	.word	.LANCHOR3-(.LPIC986+8)
	.word	.LC27-(.LPIC985+8)
	.fnend
	.size	gsdio_ctrl_wq, .-gsdio_ctrl_wq
	.align	2
	.type	rmnet_ctrl_poll, %function
rmnet_ctrl_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	cmp	r4, #0
	beq	.L4797
	cmp	r1, #0
	beq	.L4787
	ldr	r3, [r1]
	cmp	r3, #0
	beq	.L4787
	mov	r2, r1
	add	r1, r4, #32
	blx	r3
.L4787:
	add	r5, r4, #52
	add	r4, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4]
	mov	r1, r0
	mov	r0, r5
	cmp	r3, r4
	movne	r4, #65
	moveq	r4, #0
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
.L4786:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4797:
	ldr	r1, .L4798
	ldr	r0, .L4798+4
.LPIC988:
	add	r1, pc, r1
	add	r1, r1, #1424
.LPIC987:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mov	r0, #8
	b	.L4786
.L4799:
	.align	2
.L4798:
	.word	.LANCHOR3-(.LPIC988+8)
	.word	.LC263-(.LPIC987+8)
	.fnend
	.size	rmnet_ctrl_poll, .-rmnet_ctrl_poll
	.align	2
	.type	ghsic_send_cbits_tomodem, %function
ghsic_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L4806
.LPIC989:
	add	r3, pc, r3
	ldr	ip, [r3, #1036]
	cmp	r0, #0
	cmpne	r1, ip
	bcs	.L4804
	mov	r0, #104
	mla	r1, r0, r1, r3
	ldr	r3, [r1, #1040]
	cmp	r3, #0
	beq	.L4805
	ldr	r1, [r3, #88]
	cmp	r2, r1
	ldrne	r1, [r3, #84]
	strne	r2, [r3, #88]
	bx	lr
.L4804:
	ldr	r3, .L4806+4
	mov	r2, r1
	ldr	r0, .L4806+8
.LPIC991:
	add	r3, pc, r3
	add	r1, r3, #1440
.LPIC990:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L4805:
	ldr	r1, .L4806+12
	ldr	r0, .L4806+16
.LPIC994:
	add	r1, pc, r1
	add	r1, r1, #1440
.LPIC993:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L4807:
	.align	2
.L4806:
	.word	.LANCHOR2-(.LPIC989+8)
	.word	.LANCHOR3-(.LPIC991+8)
	.word	.LC31-(.LPIC990+8)
	.word	.LANCHOR3-(.LPIC994+8)
	.word	.LC27-(.LPIC993+8)
	.fnend
	.size	ghsic_send_cbits_tomodem, .-ghsic_send_cbits_tomodem
	.align	2
	.type	ghsuart_send_cbits_tomodem, %function
ghsuart_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L4814
.LPIC995:
	add	r3, pc, r3
	ldr	ip, [r3, #1876]
	cmp	r0, #0
	cmpne	r1, ip
	bcs	.L4812
	mov	r0, #84
	mla	r1, r0, r1, r3
	ldr	r3, [r1, #1880]
	cmp	r3, #0
	beq	.L4813
	ldr	r1, [r3, #92]
	cmp	r2, r1
	ldrne	r1, [r3, #88]
	strne	r2, [r3, #92]
	bx	lr
.L4812:
	ldr	r3, .L4814+4
	mov	r2, r1
	ldr	r0, .L4814+8
.LPIC997:
	add	r3, pc, r3
	add	r1, r3, #1472
.LPIC996:
	add	r0, pc, r0
	add	r1, r1, #8
	b	printk(PLT)
.L4813:
	ldr	r1, .L4814+12
	ldr	r0, .L4814+16
.LPIC1000:
	add	r1, pc, r1
	add	r1, r1, #1472
.LPIC999:
	add	r0, pc, r0
	add	r1, r1, #8
	b	printk(PLT)
.L4815:
	.align	2
.L4814:
	.word	.LANCHOR2-(.LPIC995+8)
	.word	.LANCHOR3-(.LPIC997+8)
	.word	.LC31-(.LPIC996+8)
	.word	.LANCHOR3-(.LPIC1000+8)
	.word	.LC27-(.LPIC999+8)
	.fnend
	.size	ghsuart_send_cbits_tomodem, .-ghsuart_send_cbits_tomodem
	.align	2
	.type	bam_data_wake_cb, %function
bam_data_wake_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	cmp	r3, #0
	beq	.L4823
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L4824
	ldr	r0, [r3]
	cmp	r0, #0
	beq	.L4825
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L4821
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	bx	r3
.L4821:
	mvn	r0, #94
.L4818:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4825:
	ldr	r1, .L4826
	ldr	r0, .L4826+4
.LPIC1006:
	add	r1, pc, r1
	add	r1, r1, #1504
.LPIC1005:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L4818
.L4824:
	ldr	r1, .L4826+8
	ldr	r0, .L4826+12
.LPIC1004:
	add	r1, pc, r1
	add	r1, r1, #1504
.LPIC1003:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L4818
.L4823:
	ldr	r1, .L4826+16
	ldr	r0, .L4826+20
.LPIC1002:
	add	r1, pc, r1
	add	r1, r1, #1504
.LPIC1001:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L4818
.L4827:
	.align	2
.L4826:
	.word	.LANCHOR3-(.LPIC1006+8)
	.word	.LC266-(.LPIC1005+8)
	.word	.LANCHOR3-(.LPIC1004+8)
	.word	.LC265-(.LPIC1003+8)
	.word	.LANCHOR3-(.LPIC1002+8)
	.word	.LC264-(.LPIC1001+8)
	.fnend
	.size	bam_data_wake_cb, .-bam_data_wake_cb
	.align	2
	.type	rndis_qc_open_dev, %function
rndis_qc_open_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L4835
	mov	r5, r1
	ldr	r0, .L4835+4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC1008:
	add	r4, pc, r4
	add	r4, r4, #1520
.LPIC1007:
	add	r0, pc, r0
	add	r4, r4, #8
	mov	r1, r4
	bl	printk(PLT)
	ldr	r1, .L4835+8
.LPIC1016:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	ldr	r3, [r1]
	cmp	r3, #0
	beq	.L4834
	add	r2, r3, #144
#APP
@ 61 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r0, [r2]
	add	r0, r0, #1
	strex	ip, r0, [r2]
	teq	ip, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r0, #1
	beq	.L4831
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	ldr	r0, .L4835+12
	mov	r1, r4
.LPIC1012:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #15
.L4832:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4831:
	ldr	r3, [r1]
	mov	r1, r4
	ldr	r0, .L4835+16
	str	r3, [r5, #124]
.LPIC1014:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, #0
	b	.L4832
.L4834:
	ldr	r0, .L4835+20
	mov	r1, r4
.LPIC1010:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #18
	b	.L4832
.L4836:
	.align	2
.L4835:
	.word	.LANCHOR3-(.LPIC1008+8)
	.word	.LC267-(.LPIC1007+8)
	.word	_rndis_qc(GOT_PREL)+(.-(.LPIC1016+8))
	.word	.LC269-(.LPIC1012+8)
	.word	.LC270-(.LPIC1014+8)
	.word	.LC268-(.LPIC1010+8)
	.fnend
	.size	rndis_qc_open_dev, .-rndis_qc_open_dev
	.align	2
	.type	mtp_open, %function
mtp_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L4844
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
.LPIC1017:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r1, .L4844+4
.LPIC1018:
	add	r1, pc, r1
	ldr	r3, [r1, #2320]
	add	r2, r3, #100
#APP
@ 61 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r0, [r2]
	add	r0, r0, #1
	strex	ip, r0, [r2]
	teq	ip, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r0, #1
	beq	.L4838
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #15
	ldr	pc, [sp], #4
.L4838:
	ldr	r3, [r1, #2320]
	ldr	r2, [r3, #96]
	cmp	r2, #0
	strne	r0, [r3, #96]
	mov	r0, #0
	str	r3, [r4, #124]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4845:
	.align	2
.L4844:
	.word	.LC271-(.LPIC1017+8)
	.word	.LANCHOR2-(.LPIC1018+8)
	.fnend
	.size	mtp_open, .-mtp_open
	.align	2
	.type	gps_connect, %function
gps_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	beq	.L4848
	mov	r3, #1
	str	r3, [r0, #116]
	bx	lr
.L4848:
	ldr	r1, .L4849
	mov	r2, r0
	ldr	r0, .L4849+4
.LPIC1021:
	add	r1, pc, r1
	add	r1, r1, #1536
.LPIC1020:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L4850:
	.align	2
.L4849:
	.word	.LANCHOR3-(.LPIC1021+8)
	.word	.LC272-(.LPIC1020+8)
	.fnend
	.size	gps_connect, .-gps_connect
	.align	2
	.type	gps_disconnect, %function
gps_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L4870
	ldr	r3, [r0, #112]
	mov	r2, #0
	str	r2, [r0, #116]
	cmp	r3, r2
	bxeq	lr
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r0, #128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, r2
	beq	.L4855
	blx	r3
.L4855:
	ldr	r3, [r5, #132]
	mov	r1, #0
	mvn	r0, #94
	mov	r2, #32
	ldr	r3, [r3]
	strb	r0, [r3]
	strb	r1, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrh	r0, [r5, #108]
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	strh	r0, [r3, #4]	@ unaligned
	ldrd	r0, [r5, #128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L4871
.L4856:
	add	r9, r5, #124
	add	r6, r5, #136
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #136]
	mov	r10, r0
	cmp	r3, r6
	movne	r8, #256
	movne	r7, #512
	beq	.L4860
.L4859:
	ldr	r2, [r3, #4]
	mov	r4, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r4, #-8]!
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r3, [r5, #136]
	cmp	r3, r6
	bne	.L4859
.L4860:
	mov	r3, #0
	mov	r0, r9
	mov	r1, r10
	str	r3, [r5, #144]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L4871:
	ldr	r3, [r5, #112]
	cmp	r3, #0
	bne	.L4872
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4870:
	ldr	r1, .L4873
	mov	r2, r0
	ldr	r0, .L4873+4
.LPIC1023:
	add	r1, pc, r1
	add	r1, r1, #1552
.LPIC1022:
	add	r0, pc, r0
	add	r1, r1, #8
	b	printk(PLT)
.L4872:
	ldr	r1, .L4873+8
	mov	r2, r0
	ldr	r0, .L4873+12
.LPIC1025:
	add	r1, pc, r1
	add	r1, r1, #1552
.LPIC1024:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L4856
.L4874:
	.align	2
.L4873:
	.word	.LANCHOR3-(.LPIC1023+8)
	.word	.LC272-(.LPIC1022+8)
	.word	.LANCHOR3-(.LPIC1025+8)
	.word	.LC273-(.LPIC1024+8)
	.fnend
	.size	gps_disconnect, .-gps_disconnect
	.align	2
	.type	gps_cmd_complete, %function
gps_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r1, #32]
	mov	r2, r1
	cmp	r3, #0
	beq	.L4878
	ldr	ip, [r3, #88]
	cmp	ip, #0
	beq	.L4875
	ldrb	r0, [r3, #104]	@ zero_extendqisi2
	ldr	r1, [r1]
	ldr	r2, [r2, #48]
	bx	ip
.L4875:
	bx	lr
.L4878:
	ldr	r1, .L4879
	ldr	r0, .L4879+4
.LPIC1027:
	add	r1, pc, r1
	add	r1, r1, #1568
.LPIC1026:
	add	r0, pc, r0
	add	r1, r1, #8
	b	printk(PLT)
.L4880:
	.align	2
.L4879:
	.word	.LANCHOR3-(.LPIC1027+8)
	.word	.LC274-(.LPIC1026+8)
	.fnend
	.size	gps_cmd_complete, .-gps_cmd_complete
	.align	2
	.type	frmnet_connect, %function
frmnet_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	beq	.L4883
	mov	r3, #1
	str	r3, [r0, #116]
	bx	lr
.L4883:
	ldr	r1, .L4884
	mov	r2, r0
	ldr	r0, .L4884+4
.LPIC1029:
	add	r1, pc, r1
	add	r1, r1, #1584
.LPIC1028:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L4885:
	.align	2
.L4884:
	.word	.LANCHOR3-(.LPIC1029+8)
	.word	.LC272-(.LPIC1028+8)
	.fnend
	.size	frmnet_connect, .-frmnet_connect
	.align	2
	.type	frmnet_disconnect, %function
frmnet_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L4905
	ldr	r3, [r0, #112]
	mov	r2, #0
	str	r2, [r0, #116]
	cmp	r3, r2
	bxeq	lr
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r0, #128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, r2
	beq	.L4890
	blx	r3
.L4890:
	ldr	r3, [r5, #132]
	mov	r1, #0
	mvn	r0, #94
	mov	r2, #32
	ldr	r3, [r3]
	strb	r0, [r3]
	strb	r1, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrh	r0, [r5, #104]
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	strh	r0, [r3, #4]	@ unaligned
	ldrd	r0, [r5, #128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L4906
.L4891:
	add	r9, r5, #124
	add	r6, r5, #136
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #136]
	mov	r10, r0
	cmp	r3, r6
	movne	r8, #256
	movne	r7, #512
	beq	.L4895
.L4894:
	ldr	r2, [r3, #4]
	mov	r4, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r4, #-8]!
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r3, [r5, #136]
	cmp	r3, r6
	bne	.L4894
.L4895:
	mov	r3, #0
	mov	r0, r9
	mov	r1, r10
	str	r3, [r5, #144]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L4906:
	ldr	r3, [r5, #112]
	cmp	r3, #0
	bne	.L4907
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4905:
	ldr	r1, .L4908
	mov	r2, r0
	ldr	r0, .L4908+4
.LPIC1031:
	add	r1, pc, r1
	add	r1, r1, #1600
.LPIC1030:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L4907:
	ldr	r1, .L4908+8
	mov	r2, r0
	ldr	r0, .L4908+12
.LPIC1033:
	add	r1, pc, r1
	add	r1, r1, #1600
.LPIC1032:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L4891
.L4909:
	.align	2
.L4908:
	.word	.LANCHOR3-(.LPIC1031+8)
	.word	.LC272-(.LPIC1030+8)
	.word	.LANCHOR3-(.LPIC1033+8)
	.word	.LC275-(.LPIC1032+8)
	.fnend
	.size	frmnet_disconnect, .-frmnet_disconnect
	.align	2
	.type	frmnet_cmd_complete, %function
frmnet_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #32]
	mov	r2, r1
	cmp	r3, #0
	beq	.L4914
	ldr	ip, [r3, #88]
	cmp	ip, #0
	bxeq	lr
	.save {lr}
	str	lr, [sp, #-4]!
	ldrb	lr, [r3, #108]	@ zero_extendqisi2
	ldr	r3, .L4915
	ldr	r1, [r1]
	ldr	r2, [r2, #48]
	mov	r0, lr, asl #5
.LPIC1036:
	add	r3, pc, r3
	sub	r0, r0, lr, asl #3
	ldr	lr, [sp], #4
	add	r3, r3, r0
	ldrb	r0, [r3, #2336]	@ zero_extendqisi2
	bx	ip
.L4914:
	ldr	r1, .L4915+4
	ldr	r0, .L4915+8
.LPIC1035:
	add	r1, pc, r1
.LPIC1034:
	add	r0, pc, r0
	add	r1, r1, #1632
	b	printk(PLT)
.L4916:
	.align	2
.L4915:
	.word	.LANCHOR2-(.LPIC1036+8)
	.word	.LANCHOR3-(.LPIC1035+8)
	.word	.LC276-(.LPIC1034+8)
	.fnend
	.size	frmnet_cmd_complete, .-frmnet_cmd_complete
	.align	2
	.type	mbim_open, %function
mbim_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L4928
	ldr	r5, .L4928+4
	str	r6, [sp, #8]
	mov	r6, r1
	ldr	r0, .L4928+8
	str	lr, [sp, #12]
.LPIC1038:
	add	r4, pc, r4
	add	r4, r4, #1648
.LPIC1039:
	add	r5, pc, r5
	add	r4, r4, #4
.LPIC1037:
	add	r0, pc, r0
	mov	r1, r4
	bl	printk(PLT)
	ldr	r3, [r5, #2396]
	cmp	r3, #0
	beq	.L4926
	add	r2, r3, #84
#APP
@ 61 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r1, #1
	beq	.L4920
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	ldr	r0, .L4928+12
	mov	r1, r4
.LPIC1042:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #15
.L4923:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4920:
	ldr	r0, .L4928+16
	mov	r1, r4
.LPIC1049:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, [r5, #2396]
	ldr	r2, [r3, #80]
	cmp	r2, #0
	beq	.L4927
.L4922:
	ldr	r1, .L4928+20
	mov	r4, #0
	str	r3, [r6, #124]
	ldr	r0, .L4928+24
	str	r4, [r3, #224]
.LPIC1048:
	add	r1, pc, r1
	add	r1, r1, #1648
.LPIC1047:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	b	.L4923
.L4926:
	ldr	r0, .L4928+28
	mov	r1, r4
.LPIC1040:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #18
	b	.L4923
.L4927:
	ldr	r0, .L4928+32
	mov	r1, r4
.LPIC1044:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, [r5, #2396]
	b	.L4922
.L4929:
	.align	2
.L4928:
	.word	.LANCHOR3-(.LPIC1038+8)
	.word	.LANCHOR2-(.LPIC1039+8)
	.word	.LC277-(.LPIC1037+8)
	.word	.LC269-(.LPIC1042+8)
	.word	.LC281-(.LPIC1049+8)
	.word	.LANCHOR3-(.LPIC1048+8)
	.word	.LC280-(.LPIC1047+8)
	.word	.LC278-(.LPIC1040+8)
	.word	.LC279-(.LPIC1044+8)
	.fnend
	.size	mbim_open, .-mbim_open
	.align	2
	.type	ghsic_ctrl_connect_w, %function
ghsic_ctrl_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #16
	beq	.L4930
	ldr	r3, [r0, #68]
	tst	r3, #2
	bne	.L4938
.L4930:
	bx	lr
.L4938:
	ldr	r1, .L4939
	mvn	r2, #18
	ldr	r0, .L4939+4
.LPIC1053:
	add	r1, pc, r1
.LPIC1052:
	add	r0, pc, r0
	add	r1, r1, #1664
	b	printk(PLT)
.L4940:
	.align	2
.L4939:
	.word	.LANCHOR3-(.LPIC1053+8)
	.word	.LC282-(.LPIC1052+8)
	.fnend
	.size	ghsic_ctrl_connect_w, .-ghsic_ctrl_connect_w
	.align	2
	.type	ghsuart_ctrl_disconnect_w, %function
ghsuart_ctrl_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #36]
	mov	r3, r0
	tst	r2, #1
	bne	.L4943
	bx	lr
.L4943:
	mov	r2, #0
	add	r1, r0, #36
	mov	r0, #2
	str	r2, [r3, #-36]
	b	_clear_bit(PLT)
	.fnend
	.size	ghsuart_ctrl_disconnect_w, .-ghsuart_ctrl_disconnect_w
	.align	2
	.type	ghsuart_data_disconnect_w, %function
ghsuart_data_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #60]
	mov	r3, r0
	tst	r2, #1
	bne	.L4946
	bx	lr
.L4946:
	mov	r2, #0
	add	r1, r0, #60
	mov	r0, #2
	str	r2, [r3, #-100]
	b	_clear_bit(PLT)
	.fnend
	.size	ghsuart_data_disconnect_w, .-ghsuart_data_disconnect_w
	.section	.init.text
	.align	2
	.type	gether_init, %function
gether_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L4951
	mov	r1, #10
	mov	r2, #1
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
	mov	r4, #0
	.pad #8
	sub	sp, sp, #8
	mov	r3, r4
.LPIC1054:
	add	r0, pc, r0
	str	r4, [sp]
	bl	__alloc_workqueue_key(PLT)
	ldr	r3, .L4951+4
	cmp	r0, r4
.LPIC1055:
	add	r3, pc, r3
	str	r0, [r3, #-668]
	movne	r0, r4
	bne	.L4948
	ldr	r1, .L4951+8
	ldr	r0, .L4951+12
.LPIC1057:
	add	r1, pc, r1
	add	r1, r1, #1680
.LPIC1056:
	add	r0, pc, r0
	add	r1, r1, #8
	mov	r2, r1
	bl	printk(PLT)
	mvn	r0, #11
.L4948:
	add	sp, sp, #8
	@ sp needed
	ldmfd	sp!, {r4, pc}
.L4952:
	.align	2
.L4951:
	.word	.LC283-(.LPIC1054+8)
	.word	.LANCHOR4-(.LPIC1055+8)
	.word	.LANCHOR3-(.LPIC1057+8)
	.word	.LC284-(.LPIC1056+8)
	.fnend
	.size	gether_init, .-gether_init
	.text
	.align	2
	.type	rmnet_sdio_suspend, %function
rmnet_sdio_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #184]
	mov	r3, r0
	cmp	r2, #0
	bne	.L4955
	bx	lr
.L4955:
	ldr	r2, [r0, #320]
	add	r1, r0, #324
	ldr	r0, [r0, #192]
	bic	r2, r2, #2
	str	r2, [r3, #320]
	b	queue_work(PLT)
	.fnend
	.size	rmnet_sdio_suspend, .-rmnet_sdio_suspend
	.align	2
	.global	gsdio_read_complete
	.type	gsdio_read_complete, %function
gsdio_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L4959
	add	r6, r4, #4
	mov	r5, r1
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #24]
	mov	r7, r0
	add	ip, r4, #20
	add	r0, r5, #36
	ldr	r3, .L4960
	add	r1, r4, #28
	str	r0, [r4, #24]
	str	ip, [r5, #36]
	str	r2, [r5, #40]
.LPIC1061:
	add	r3, pc, r3
	str	r0, [r2]
	ldr	r5, [r4, #48]
	ldr	r0, [r3, #3416]
	add	r3, r5, #1
	str	r3, [r4, #48]
	bl	queue_work(PLT)
	ldrd	r4, [sp]
	mov	r0, r6
	mov	r1, r7
	ldr	r8, [sp, #16]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L4959:
	ldr	r1, .L4960+4
	ldr	r0, .L4960+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC1060:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	add	r1, r1, #1696
	ldr	lr, [sp, #20]
.LPIC1059:
	add	r0, pc, r0
	add	r1, r1, #4
	add	sp, sp, #24
	b	printk(PLT)
.L4961:
	.align	2
.L4960:
	.word	.LANCHOR2-(.LPIC1061+8)
	.word	.LANCHOR3-(.LPIC1060+8)
	.word	.LC27-(.LPIC1059+8)
	.fnend
	.size	gsdio_read_complete, .-gsdio_read_complete
	.align	2
	.type	ghsic_data_unthrottle_tx, %function
ghsic_data_unthrottle_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxeq	lr
	ldr	r3, [r0, #4]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #80
	mov	r4, r0
	mov	r0, r5
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #208]
	mov	r1, r0
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #208]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	add	r1, r4, #120
	ldr	r0, [r4, #84]
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_work(PLT)
	.fnend
	.size	ghsic_data_unthrottle_tx, .-ghsic_data_unthrottle_tx
	.align	2
	.type	gsmd_ctrl_send_cbits_tomodem, %function
gsmd_ctrl_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #5
	bhi	.L4972
	ldr	r3, .L4992
	mov	ip, #84
.LPIC1062:
	add	r3, pc, r3
	mla	r3, ip, r1, r3
	ldr	ip, [r3, #532]
	cmp	ip, #0
	beq	.L4972
	cmp	r0, #0
	beq	.L4990
	ands	r3, r2, #1
	moveq	r2, #2
	moveq	r1, r3
	beq	.L4974
	mov	r1, #2
	mov	r2, #0
	mov	r3, r1
.L4974:
	ldr	r0, [ip, #88]
	cmp	r0, r3
	beq	.L4971
	ldr	r0, [ip, #8]
	str	r3, [ip, #88]
	tst	r0, #1
	bne	.L4991
.L4971:
	bx	lr
.L4972:
	ldr	r3, .L4992+4
	mov	r2, r1
	ldr	r0, .L4992+8
.LPIC1066:
	add	r3, pc, r3
	add	r1, r3, #1712
.LPIC1065:
	add	r0, pc, r0
	add	r1, r1, #8
	b	printk(PLT)
.L4991:
	ldr	r0, [ip]
	b	smd_tiocmset(PLT)
.L4990:
	ldr	r1, .L4992+12
	ldr	r0, .L4992+16
.LPIC1064:
	add	r1, pc, r1
	add	r1, r1, #1712
.LPIC1063:
	add	r0, pc, r0
	add	r1, r1, #8
	b	printk(PLT)
.L4993:
	.align	2
.L4992:
	.word	.LANCHOR2-(.LPIC1062+8)
	.word	.LANCHOR3-(.LPIC1066+8)
	.word	.LC31-(.LPIC1065+8)
	.word	.LANCHOR3-(.LPIC1064+8)
	.word	.LC285-(.LPIC1063+8)
	.fnend
	.size	gsmd_ctrl_send_cbits_tomodem, .-gsmd_ctrl_send_cbits_tomodem
	.section	.init.text
	.align	2
	.type	init, %function
init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5000
	ldr	r1, .L5000+4
	stmfd	sp!, {r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r5, #0
	ldr	r4, .L5000+8
.LPIC1067:
	add	r3, pc, r3
	ldr	lr, .L5000+12
.LPIC1068:
	add	r1, pc, r1
	ldr	ip, .L5000+16
	add	r0, r3, #32
	ldr	r2, .L5000+20
	str	r1, [r3, #520]
	ldr	r1, .L5000+24
.LPIC1070:
	add	r4, pc, r4
.LPIC1072:
	add	lr, pc, lr
.LPIC1074:
	add	ip, pc, ip
	str	r4, [r3, #524]
.LPIC1075:
	add	r2, pc, r2
	str	lr, [r3, #528]
.LPIC1079:
	add	r1, pc, r1
	str	ip, [r3, #532]
	str	r2, [r2]
	str	r2, [r2, #4]
	str	r5, [r1, #-480]
	bl	platform_driver_register(PLT)
	subs	r4, r0, #0
	beq	.L4995
	ldr	r1, .L5000+28
	ldr	r0, .L5000+32
.LPIC1082:
	add	r1, pc, r1
	add	r1, r1, #1744
.LPIC1081:
	add	r0, pc, r0
	add	r1, r1, #8
	mov	r2, r1
	bl	printk(PLT)
.L4995:
	mov	r0, r4
	ldmfd	sp!, {r4, r5, r6, pc}
.L5001:
	.align	2
.L5000:
	.word	.LANCHOR0-(.LPIC1067+8)
	.word	android_setup-(.LPIC1068+8)
	.word	android_disconnect-(.LPIC1070+8)
	.word	android_suspend-(.LPIC1072+8)
	.word	android_resume-(.LPIC1074+8)
	.word	.LANCHOR2-(.LPIC1075+8)
	.word	.LANCHOR4-(.LPIC1079+8)
	.word	.LANCHOR3-(.LPIC1082+8)
	.word	.LC286-(.LPIC1081+8)
	.fnend
	.size	init, .-init
	.text
	.align	2
	.type	ghsuart_data_write_tohost, %function
ghsuart_data_write_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #160
	bxeq	lr
	ldr	r3, [r0, #-156]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #88
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r9, [r4, #-152]
	mov	r8, r0
	cmp	r9, #0
	beq	.L5005
	ldr	r3, [r4, #-112]
	sub	r2, r4, #112
	str	r2, [sp]
	cmp	r2, r3
	beq	.L5005
	ldr	r6, [r4, #-104]
	sub	r3, r4, #104
	str	r3, [sp, #4]
	cmp	r3, r6
	cmpne	r6, #0
	beq	.L5005
	ldr	fp, .L5022
	mov	r10, #0
	mov	r1, r0
.LPIC1087:
	ldr	fp, [pc, fp]		@ tls_load_dot_plus_eight
	mov	r8, fp
.L5007:
	ldr	r3, [r4, #-96]
	sub	r3, r3, #1
	str	r3, [r4, #-96]
	ldrd	r2, [r6]
	str	r10, [r6]
	str	r10, [r6, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r5, [r4, #-112]
	mov	r2, #256
	str	r6, [r5, #-4]
	ldr	r3, [r6, #172]
	sub	fp, r5, #36
	str	r3, [r5, #-36]
	ldr	r3, [r6, #80]
	str	r3, [r5, #-32]
	ldr	r3, [r4, #32]
	ldr	r0, [r8]
	add	r3, r3, #1
	cmp	r3, r0
	mov	r0, r7
	str	r3, [r4, #32]
	ldrb	r3, [r5, #-10]	@ zero_extendqisi2
	bfceq	r3, #0, #1
	orrne	r3, r3, #1
	streqb	r3, [r5, #-10]
	strneb	r3, [r5, #-10]
	streq	r10, [r4, #32]
	ldr	lr, [r5]
	ldr	r3, [r5, #4]
	str	r3, [lr, #4]
	str	lr, [r3]
	mov	r3, #512
	stmia	r5, {r2, r3}
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r9, #8]
	mov	r1, fp
	mov	r2, #208
	mov	r0, r9
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	fp, #0
	mov	r1, r0
	bne	.L5021
	ldr	r3, [r4, #48]
	ldr	r2, [r4, #-112]
	ldr	r0, [sp]
	add	r3, r3, #1
	cmp	r2, r0
	str	r3, [r4, #48]
	beq	.L5020
	ldr	r6, [r4, #-104]
	ldr	r3, [sp, #4]
	cmp	r6, r3
	cmpne	r6, #0
	bne	.L5007
.L5020:
	mov	r8, r1
.L5005:
	mov	r0, r7
	mov	r1, r8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L5021:
	ldr	r1, .L5022+4
	mov	r8, r0
	ldr	r0, .L5022+8
.LPIC1086:
	add	r1, pc, r1
	add	r1, r1, #1760
.LPIC1085:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, [r4, #-112]
	mov	r0, r6
	str	r5, [r3, #4]
	str	r3, [r5]
	ldr	r3, [sp]
	str	r3, [r5, #4]
	str	r5, [r4, #-112]
	bl	dev_kfree_skb_any(PLT)
	b	.L5005
.L5023:
	.align	2
.L5022:
	.word	ghsuart_data_tx_intr_thld(GOT_PREL)+(.-(.LPIC1087+8))
	.word	.LANCHOR3-(.LPIC1086+8)
	.word	.LC287-(.LPIC1085+8)
	.fnend
	.size	ghsuart_data_write_tohost, .-ghsuart_data_write_tohost
	.align	2
	.type	gsdio_ch_probe, %function
gsdio_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L5033
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC1088:
	add	r5, pc, r5
	ldr	r7, [r5, #92]
	cmp	r7, #0
	ldreq	r6, [r0]
	beq	.L5026
	ldr	r4, [r5, #120]
	mov	r2, #9
	ldr	r6, [r0]
	ldr	r3, [r4, #120]
	mov	r1, r6
	ldr	r0, [r3]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5027
	cmp	r7, #1
	bls	.L5026
	ldr	r4, [r5, #228]
	mov	r1, r6
	mov	r2, #9
	ldr	r3, [r4, #120]
	ldr	r0, [r3]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5027
.L5026:
	ldr	r1, .L5033+4
	mov	r2, r6
	ldr	r0, .L5033+8
.LPIC1093:
	add	r1, pc, r1
	add	r1, r1, #1776
.LPIC1092:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #18
.L5028:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5027:
	ldr	r3, .L5033+12
	mov	r2, #1
	movw	r0, #10000
	str	r2, [r4, #112]
.LPIC1091:
	add	r3, pc, r3
	ldr	r5, [r3, #3416]
	bl	msecs_to_jiffies(PLT)
	mov	r2, r0
	add	r1, r4, #124
	mov	r0, r5
	bl	queue_delayed_work(PLT)
	mov	r0, #0
	b	.L5028
.L5034:
	.align	2
.L5033:
	.word	.LANCHOR2-(.LPIC1088+8)
	.word	.LANCHOR3-(.LPIC1093+8)
	.word	.LC288-(.LPIC1092+8)
	.word	.LANCHOR2-(.LPIC1091+8)
	.fnend
	.size	gsdio_ch_probe, .-gsdio_ch_probe
	.align	2
	.type	gsmd_connect_work, %function
gsmd_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r4, [r0, #-4]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r4, #8]
	tst	r3, #2
	bne	.L5044
.L5035:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L5044:
	ldr	ip, .L5045
	mov	r5, r0
	mov	r1, #0
	ldr	r0, [r4, #4]
	mov	r2, r4
	sub	r3, r5, #76
.LPIC1094:
	add	ip, pc, ip
	str	ip, [sp]
	bl	smd_named_open_on_edge(PLT)
	cmp	r0, #0
	beq	.L5035
	cmn	r0, #11
	bne	.L5039
	ldr	r3, .L5045+4
	mov	r0, #250
.LPIC1095:
	add	r3, pc, r3
	ldr	r4, [r3, #-512]
	bl	msecs_to_jiffies(PLT)
	mov	r2, r0
	mov	r1, r5
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_delayed_work(PLT)
.L5039:
	ldr	r1, .L5045+8
	mov	r3, r0
	ldr	r0, .L5045+12
	ldr	r2, [r4, #4]
.LPIC1097:
	add	r1, pc, r1
	add	r1, r1, #1792
.LPIC1096:
	add	r0, pc, r0
	add	r1, r1, #12
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	printk(PLT)
.L5046:
	.align	2
.L5045:
	.word	gsmd_notify-(.LPIC1094+8)
	.word	.LANCHOR4-(.LPIC1095+8)
	.word	.LANCHOR3-(.LPIC1097+8)
	.word	.LC148-(.LPIC1096+8)
	.fnend
	.size	gsmd_connect_work, .-gsmd_connect_work
	.align	2
	.type	gbam_disconnect_work, %function
gbam_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-280]
	tst	r3, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-276]
	bl	msm_bam_dmux_close(PLT)
	ldr	lr, [sp, #4]
	sub	r1, r4, #280
	mov	r0, #1
	ldr	r4, [sp]
	add	sp, sp, #8
	b	_clear_bit(PLT)
	.fnend
	.size	gbam_disconnect_work, .-gbam_disconnect_work
	.align	2
	.type	gbam2bam_disconnect_work, %function
gbam2bam_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-168]
	cmp	r3, #7
	bxne	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	sub	r0, r0, #164
	str	lr, [sp, #4]
	bl	usb_bam_disconnect_ipa(PLT)
	cmp	r0, #0
	bne	.L5059
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5059:
	ldr	r1, .L5060
	mov	r2, r0
	ldr	r0, .L5060+4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC1099:
	add	r1, pc, r1
.LPIC1098:
	add	r0, pc, r0
	add	r1, r1, #1824
	b	printk(PLT)
.L5061:
	.align	2
.L5060:
	.word	.LANCHOR3-(.LPIC1099+8)
	.word	.LC289-(.LPIC1098+8)
	.fnend
	.size	gbam2bam_disconnect_work, .-gbam2bam_disconnect_work
	.align	2
	.type	bam2bam_data_disconnect_work, %function
bam2bam_data_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-124]
	cmp	r3, #7
	bxne	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	sub	r0, r0, #120
	str	lr, [sp, #4]
	bl	usb_bam_disconnect_ipa(PLT)
	cmp	r0, #0
	bne	.L5071
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5071:
	ldr	r1, .L5072
	mov	r2, r0
	ldr	r0, .L5072+4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC1101:
	add	r1, pc, r1
	add	r1, r1, #1840
.LPIC1100:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L5073:
	.align	2
.L5072:
	.word	.LANCHOR3-(.LPIC1101+8)
	.word	.LC289-(.LPIC1100+8)
	.fnend
	.size	bam2bam_data_disconnect_work, .-bam2bam_data_disconnect_work
	.align	2
	.type	show_timestamp, %function
show_timestamp:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L5091
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC1102:
	add	r5, pc, r5
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r5, #-476]
	cmp	r4, #0
	moveq	r0, r4
	beq	.L5075
	strd	r2, [sp, #12]
	ldr	r3, .L5091+4
	mov	r10, r1
.LPIC1110:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #48]
	cmp	r0, #0
	beq	.L5081
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r7, r0, #0
	beq	.L5090
.L5076:
	ldr	r4, .L5091+8
.LPIC1104:
	add	r4, pc, r4
	add	r0, r4, #3616
	add	r0, r0, #12
	bl	_raw_read_lock_irqsave(PLT)
	ldr	r5, [r4, #3624]
	str	r0, [sp, #20]
	add	ip, r5, #1
	and	r8, ip, #31
	cmp	r5, r8
	beq	.L5083
	ldr	fp, .L5091+12
	mov	r5, #0
	sub	r6, r4, #472
.LPIC1107:
	add	fp, pc, fp
	b	.L5079
.L5078:
	ldr	r3, [r4, #3624]
	add	r8, r8, #1
	and	r8, r8, #31
	cmp	r8, r3
	beq	.L5077
.L5079:
	add	r9, r6, r8, asl #7
	mov	r1, #128
	mov	r0, r9
	bl	strnlen(PLT)
	cmp	r0, #0
	beq	.L5078
	add	r0, r7, r5
	rsb	r1, r5, #4096
	mov	r3, r9
	mov	r2, fp
	bl	scnprintf(PLT)
	add	r5, r5, r0
	b	.L5078
.L5090:
	mvn	r0, #11
.L5075:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5083:
	mov	r5, #0
.L5077:
	ldr	r0, .L5091+16
	ldr	r1, [sp, #20]
.LPIC1109:
	add	r0, pc, r0
	add	r0, r0, #3616
	add	r0, r0, #12
	bl	_raw_read_unlock_irqrestore(PLT)
	ldr	r1, [sp, #12]
	mov	r3, r7
	str	r5, [sp]
	ldr	r2, [sp, #16]
	mov	r0, r10
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r7
	bl	kfree(PLT)
	mov	r0, r4
	b	.L5075
.L5081:
	mov	r7, #16
	b	.L5076
.L5092:
	.align	2
.L5091:
	.word	.LANCHOR4-(.LPIC1102+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1110+8))
	.word	.LANCHOR4-(.LPIC1104+8)
	.word	.LC72-(.LPIC1107+8)
	.word	.LANCHOR4-(.LPIC1109+8)
	.fnend
	.size	show_timestamp, .-show_timestamp
	.align	2
	.type	ghsic_data_connect_w, %function
ghsic_data_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #88
	beq	.L5093
	ldr	r3, [r0, #-84]
	cmp	r3, #0
	beq	.L5093
	ldr	r3, [r0, #92]
	tst	r3, #2
	bne	.L5104
.L5093:
	bx	lr
.L5104:
	ldr	r1, .L5105
	mvn	r3, #18
	ldr	r2, [r0, #68]
	ldr	r0, .L5105+4
.LPIC1112:
	add	r1, pc, r1
	add	r1, r1, #1872
.LPIC1111:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L5106:
	.align	2
.L5105:
	.word	.LANCHOR3-(.LPIC1112+8)
	.word	.LC290-(.LPIC1111+8)
	.fnend
	.size	ghsic_data_connect_w, .-ghsic_data_connect_w
	.align	2
	.type	ghsuart_ctrl_connect_w, %function
ghsuart_ctrl_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #36
	bxeq	lr
	ldr	r3, [r0, #52]
	tst	r3, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #52]
	tst	r3, #1
	beq	.L5109
	sub	r0, r0, #20
	mov	r1, #900
	bl	wait_for_completion_timeout(PLT)
	cmp	r0, #0
	beq	.L5121
.L5109:
	ldr	r1, .L5122
	ldr	r0, .L5122+4
.LPIC1116:
	add	r1, pc, r1
.LPIC1115:
	add	r0, pc, r0
.L5120:
	add	r1, r1, #1904
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	r1, r1, #4
	add	sp, sp, #8
	b	printk(PLT)
.L5121:
	ldr	r1, .L5122+8
	ldr	r0, .L5122+12
.LPIC1114:
	add	r1, pc, r1
.LPIC1113:
	add	r0, pc, r0
	b	.L5120
.L5123:
	.align	2
.L5122:
	.word	.LANCHOR3-(.LPIC1116+8)
	.word	.LC292-(.LPIC1115+8)
	.word	.LANCHOR3-(.LPIC1114+8)
	.word	.LC291-(.LPIC1113+8)
	.fnend
	.size	ghsuart_ctrl_connect_w, .-ghsuart_ctrl_connect_w
	.align	2
	.type	ghsuart_data_connect_w, %function
ghsuart_data_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #112
	bxeq	lr
	ldr	r3, [r0, #-108]
	cmp	r3, #0
	bxeq	lr
	ldr	r3, [r0, #76]
	tst	r3, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #76]
	tst	r3, #1
	beq	.L5126
	sub	r0, r0, #84
	mov	r1, #900
	bl	wait_for_completion_timeout(PLT)
	cmp	r0, #0
	beq	.L5140
.L5126:
	ldr	r1, .L5141
	mvn	r3, #18
	ldr	r0, .L5141+4
	ldr	r2, [r4, #68]
	ldr	lr, [sp, #4]
.LPIC1120:
	add	r1, pc, r1
	ldr	r4, [sp]
	add	sp, sp, #8
	add	r1, r1, #1920
.LPIC1119:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L5140:
	ldr	r1, .L5141+8
	ldr	r0, .L5141+12
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC1118:
	add	r1, pc, r1
	add	r1, r1, #1920
.LPIC1117:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L5142:
	.align	2
.L5141:
	.word	.LANCHOR3-(.LPIC1120+8)
	.word	.LC293-(.LPIC1119+8)
	.word	.LANCHOR3-(.LPIC1118+8)
	.word	.LC291-(.LPIC1117+8)
	.fnend
	.size	ghsuart_data_connect_w, .-ghsuart_data_connect_w
	.align	2
	.type	str_to_xport.part.61, %function
str_to_xport.part.61:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	ldr	r0, .L5152
	mov	r2, #12
	mov	r1, r4
	str	lr, [sp, #4]
.LPIC1121:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r0, #6
	bne	.L5151
.L5144:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5151:
	ldr	r0, .L5152+4
	mov	r1, r4
	mov	r2, #12
.LPIC1122:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r0, #7
	beq	.L5144
	ldr	r0, .L5152+8
	mov	r1, r4
	mov	r2, #12
.LPIC1123:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r0, #8
	beq	.L5144
	ldr	r0, .L5152+12
	mov	r1, r4
	mov	r2, #12
.LPIC1124:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r0, #9
	beq	.L5144
	ldr	r0, .L5152+16
	mov	r1, r4
	mov	r2, #12
.LPIC1125:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r0, #10
	movne	r0, #0
	b	.L5144
.L5153:
	.align	2
.L5152:
	.word	.LC5-(.LPIC1121+8)
	.word	.LC6-(.LPIC1122+8)
	.word	.LC7-(.LPIC1123+8)
	.word	.LC8-(.LPIC1124+8)
	.word	.LC294-(.LPIC1125+8)
	.fnend
	.size	str_to_xport.part.61, .-str_to_xport.part.61
	.align	2
	.type	_snd_pcm_hw_param_set.constprop.105, %function
_snd_pcm_hw_param_set.constprop.105:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	mov	r4, r0
	str	lr, [sp, #4]
	.pad #16
	sub	sp, sp, #16
	add	r0, r0, #284
	ldrb	r3, [sp, #12]	@ zero_extendqisi2
	add	r1, sp, #4
	str	r2, [sp, #8]
	str	r2, [sp, #4]
	and	r3, r3, #244
	orr	r3, r3, #4
	strb	r3, [sp, #12]
	bl	snd_interval_refine(PLT)
	cmp	r0, #0
	beq	.L5155
	ldr	r2, [r4, #516]
	ldr	r3, [r4, #512]
	orr	r2, r2, #1024
	orr	r3, r3, #1024
	str	r2, [r4, #516]
	str	r3, [r4, #512]
.L5155:
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.105, .-_snd_pcm_hw_param_set.constprop.105
	.align	2
	.type	mbim_function_init, %function
mbim_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L5171
	mov	r2, #1
	ldr	r0, .L5171+4
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC1127:
	add	r5, pc, r5
	add	r5, r5, #1952
.LPIC1126:
	add	r0, pc, r0
	add	r5, r5, #4
	mov	r1, r5
	bl	printk(PLT)
	ldr	r3, .L5171+8
.LPIC1151:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L5165
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L5169
.L5161:
	ldr	r6, .L5171+12
	mov	r5, #0
	add	ip, r4, #200
	ldr	r1, .L5171+16
	add	r3, r4, #208
	add	r0, r4, #100
	str	ip, [r4, #200]
	str	ip, [r4, #204]
.LPIC1131:
	add	r6, pc, r6
	str	r3, [r4, #208]
	add	r7, r6, #3632
	str	r3, [r4, #212]
.LPIC1133:
	add	r1, pc, r1
	strb	r5, [r4, #128]
	mov	r2, r7
	str	r5, [r4, #196]
	str	r4, [r6, #-500]
	str	r5, [r6, #-496]
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L5171+20
	add	r0, r4, #112
	mov	r2, r7
.LPIC1135:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r2, [r6, #-504]
	str	r5, [r4, #84]
	ldr	r0, .L5171+24
	str	r5, [r4, #88]
	ldr	r3, .L5171+28
	str	r5, [r4, #92]
	str	r5, [r4, #96]
	add	r5, r2, #1
.LPIC1140:
	add	r0, pc, r0
.LPIC1139:
	add	r3, pc, r3
	add	r0, r0, #408
	str	r5, [r6, #-504]
	str	r4, [r3, #2396]
	bl	misc_register(PLT)
	subs	r4, r0, #0
	bne	.L5170
	ldr	r1, .L5171+32
	ldr	r0, .L5171+36
	ldr	r2, [r6, #-504]
.LPIC1144:
	add	r1, pc, r1
	add	r1, r1, #1952
.LPIC1143:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
.L5164:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5165:
	mov	r4, #16
	b	.L5161
.L5169:
	ldr	r0, .L5171+40
	mov	r1, r5
	mvn	r4, #11
.LPIC1129:
	add	r0, pc, r0
	bl	printk(PLT)
.L5162:
	ldr	r1, .L5171+44
	ldr	r5, .L5171+48
	ldr	r0, .L5171+52
.LPIC1147:
	add	r1, pc, r1
	add	r1, r1, #1952
.LPIC1148:
	add	r5, pc, r5
.LPIC1146:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r3, [r5, #-504]
	cmp	r3, #0
	beq	.L5164
	ldr	r0, [r5, #-500]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r5, #-500]
	b	.L5164
.L5170:
	ldr	r1, .L5171+56
	ldr	r0, .L5171+60
.LPIC1142:
	add	r1, pc, r1
	add	r1, r1, #1952
.LPIC1141:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L5162
.L5172:
	.align	2
.L5171:
	.word	.LANCHOR3-(.LPIC1127+8)
	.word	.LC295-(.LPIC1126+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1151+8))
	.word	.LANCHOR4-(.LPIC1131+8)
	.word	.LC196-(.LPIC1133+8)
	.word	.LC197-(.LPIC1135+8)
	.word	.LANCHOR0-(.LPIC1140+8)
	.word	.LANCHOR2-(.LPIC1139+8)
	.word	.LANCHOR3-(.LPIC1144+8)
	.word	.LC298-(.LPIC1143+8)
	.word	.LC296-(.LPIC1129+8)
	.word	.LANCHOR3-(.LPIC1147+8)
	.word	.LANCHOR4-(.LPIC1148+8)
	.word	.LC299-(.LPIC1146+8)
	.word	.LANCHOR3-(.LPIC1142+8)
	.word	.LC297-(.LPIC1141+8)
	.fnend
	.size	mbim_function_init, .-mbim_function_init
	.align	2
	.type	gen_ndis_query_resp.constprop.114, %function
gen_ndis_query_resp.constprop.114:
	.fnstart
	@ args = 0, pretend = 0, frame = 184
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L5215
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #8]
	.pad #184
	sub	sp, sp, #184
	cmp	r5, #0
	beq	.L5216
	ldr	r8, .L5244
	mov	r3, #16
	mov	r4, r0
	mov	r6, r1
	mov	r1, sp
	str	r3, [r5, #20]
	add	r7, r5, #24
.LPIC1152:
	add	r8, pc, r8
	ldr	r0, [r8, #3660]
	bl	dev_get_stats(PLT)
	movw	r3, #278
	movt	r3, 1
	cmp	r4, r3
	beq	.L5207
	bhi	.L5177
	movw	r3, #266
	movt	r3, 1
	cmp	r4, r3
	beq	.L5178
	bls	.L5238
	movw	r3, #270
	movt	r3, 1
	cmp	r4, r3
	beq	.L5187
	bhi	.L5188
	mov	r3, #268
	movt	r3, 1
	cmp	r4, r3
	beq	.L5189
	bhi	.L5239
	ldr	r3, .L5244+4
.LPIC1160:
	add	r3, pc, r3
	ldr	r4, [r3, #3660]
	cmp	r4, #0
	beq	.L5226
.L5232:
	ldr	r1, [r4, #316]
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5212
.L5177:
	movw	r3, #257
	movt	r3, 257
	cmp	r4, r3
	beq	.L5195
	movw	r3, #257
	movt	r3, 257
	cmp	r4, r3
	bls	.L5240
	movw	r3, #261
	movt	r3, 257
	cmp	r4, r3
	beq	.L5210
	bhi	.L5205
	movw	r3, #259
	movt	r3, 257
	cmp	r4, r3
	beq	.L5206
	bhi	.L5207
	ldr	r2, .L5244+8
.LPIC1167:
	add	r2, pc, r2
	ldr	r4, [r2, #3660]
	cmp	r4, #0
	beq	.L5226
	ldr	r1, [r2, #3652]
.L5233:
	ldr	r0, [r1]	@ unaligned
	mov	r2, #30
	mov	r3, #0
	mov	r4, #6
	str	r0, [r5, #24]	@ unaligned
	ldrh	r1, [r1, #4]	@ unaligned
	strh	r1, [r7, #4]	@ unaligned
	b	.L5212
.L5238:
	movw	r3, #259
	movt	r3, 1
	cmp	r4, r3
	beq	.L5180
	bls	.L5241
	movw	r3, #262
	movt	r3, 1
	cmp	r4, r3
	beq	.L5184
	movw	r3, #263
	movt	r3, 1
	cmp	r4, r3
	beq	.L5185
	mov	r3, #260
	movt	r3, 1
	cmp	r4, r3
	bne	.L5175
	ldr	r1, .L5244+12
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
.LPIC1155:
	add	r1, pc, r1
	ldr	r1, [r1, #3640]
	str	r1, [r5, #24]
	b	.L5212
.L5240:
	movw	r3, #258
	movt	r3, 2
	cmp	r4, r3
	beq	.L5197
	bls	.L5242
	mov	r3, #260
	movt	r3, 2
	cmp	r4, r3
	beq	.L5201
	bcc	.L5202
	movw	r3, #261
	movt	r3, 2
	cmp	r4, r3
	bne	.L5175
	cmp	r0, #0
	beq	.L5227
	ldr	r1, [r0, #48]
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5212
.L5188:
	movw	r3, #275
	movt	r3, 1
	cmp	r4, r3
	beq	.L5192
	mov	r3, #276
	movt	r3, 1
	cmp	r4, r3
	beq	.L5193
	movw	r3, #273
	movt	r3, 1
	cmp	r4, r3
	bne	.L5175
	movw	r1, #1558
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5212
.L5205:
	movw	r3, #258
	movt	r3, 258
	cmp	r4, r3
	beq	.L5210
	movw	r3, #259
	movt	r3, 258
	cmp	r4, r3
	beq	.L5210
	movw	r3, #257
	movt	r3, 258
	cmp	r4, r3
	bne	.L5175
	cmp	r0, #0
	beq	.L5227
	ldr	r1, [r0, #104]
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5212
.L5242:
	movw	r3, #514
	movt	r3, 1
	cmp	r4, r3
	bne	.L5243
.L5210:
	mov	r1, #0
	mov	r2, #28
	mov	r3, r1
	mov	r4, #4
	str	r1, [r5, #24]
.L5212:
	mov	r0, r3
	str	r4, [r5, #16]
	str	r2, [r6, #12]
	str	r2, [r5, #4]
.L5174:
	add	sp, sp, #184
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5207:
	mov	r1, #1
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5212
.L5241:
	movw	r3, #257
	movt	r3, 1
	cmp	r4, r3
	beq	.L5182
	movw	r3, #258
	movt	r3, 1
	cmp	r4, r3
	beq	.L5210
.L5175:
	ldr	r1, .L5244+16
	mov	r2, r4
	mov	r4, #0
	ldr	r0, .L5244+20
.LPIC1170:
	add	r1, pc, r1
.LPIC1169:
	add	r0, pc, r0
	add	r1, r1, #2080
	bl	printk(PLT)
	movw	r3, #65012
	mov	r2, #24
	movt	r3, 65535
	b	.L5212
.L5243:
	movw	r3, #257
	movt	r3, 2
	cmp	r4, r3
	bne	.L5175
	cmp	r0, #0
	beq	.L5227
	ldr	r1, [r0, #8]
	mov	r2, #28
	mov	r3, #0
	ldr	ip, [r0, #40]
	mov	r4, #4
	ldr	r0, [r0, #56]
	rsb	r1, ip, r1
	rsb	r1, r0, r1
	str	r1, [r5, #24]
	b	.L5212
.L5202:
	cmp	r0, #0
	beq	.L5227
	ldr	r1, [r0, #40]
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5212
.L5197:
	cmp	r0, #0
	beq	.L5227
	ldr	r1, [r0]
	mov	r2, #28
	mov	r3, #0
	ldr	ip, [r0, #32]
	mov	r4, #4
	ldr	r0, [r0, #48]
	rsb	r1, ip, r1
	rsb	r1, r0, r1
	str	r1, [r5, #24]
	b	.L5212
.L5180:
	ldr	r1, [r8, #3640]
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5212
.L5193:
	ldr	r1, .L5244+24
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
.LPIC1164:
	add	r1, pc, r1
	ldr	r1, [r1, #3648]
	str	r1, [r5, #24]
	b	.L5212
.L5182:
	ldr	r1, .L5244+28
	mov	r2, #112
	mov	r0, r7
	mov	r4, r2
.LPIC1153:
	add	r1, pc, r1
	add	r1, r1, #1968
	bl	memcpy(PLT)
	mov	r2, #136
	mov	r3, #0
	b	.L5212
.L5239:
	ldr	r3, .L5244+32
.LPIC1162:
	add	r3, pc, r3
	ldr	r8, [r3, #3672]
	cmp	r8, #0
	beq	.L5214
	mov	r0, r8
	bl	strlen(PLT)
	mov	r4, r0
	mov	r1, r8
	mov	r2, r4
	mov	r0, r7
	bl	memcpy(PLT)
	add	r2, r4, #24
	mov	r3, #0
	b	.L5212
.L5185:
	ldr	r3, .L5244+36
.LPIC1157:
	add	r3, pc, r3
	ldr	r2, [r3, #3648]
	cmp	r2, #1
	beq	.L5210
	ldr	r1, [r3, #3644]
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5212
.L5192:
	mov	r1, #18
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5212
.L5189:
	ldr	r1, [r8, #3664]
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5212
.L5206:
	mov	r1, #-536870912
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5212
.L5201:
	cmp	r0, #0
	beq	.L5223
	ldr	r1, [r0, #32]
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5212
.L5184:
	ldr	r3, [r8, #3660]
	cmp	r3, #0
	beq	.L5223
	ldr	r1, [r3, #316]
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5212
.L5187:
	ldr	r1, [r8, #3656]
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	ldrh	r1, [r1]
	str	r1, [r5, #24]
	b	.L5212
.L5195:
	ldr	r4, [r8, #3660]
	cmp	r4, #0
	beq	.L5226
	ldr	r1, [r8, #3652]
	b	.L5233
.L5178:
	ldr	r4, [r8, #3660]
	cmp	r4, #0
	bne	.L5232
.L5226:
	movw	r3, #65012
	mov	r2, #24
	movt	r3, 65535
	b	.L5212
.L5227:
	movw	r3, #65012
	mov	r4, r0
	movt	r3, 65535
	mov	r2, #24
	b	.L5212
.L5216:
	mvn	r0, #11
	b	.L5174
.L5214:
	str	r8, [r5, #24]
	mov	r3, r8
	mov	r2, #28
	mov	r4, #4
	b	.L5212
.L5223:
	movw	r3, #65012
	mov	r2, #24
	movt	r3, 65535
	mov	r4, #0
	b	.L5212
.L5215:
	mvn	r0, #11
	bx	lr
.L5245:
	.align	2
.L5244:
	.word	.LANCHOR4-(.LPIC1152+8)
	.word	.LANCHOR4-(.LPIC1160+8)
	.word	.LANCHOR4-(.LPIC1167+8)
	.word	.LANCHOR4-(.LPIC1155+8)
	.word	.LANCHOR3-(.LPIC1170+8)
	.word	.LC300-(.LPIC1169+8)
	.word	.LANCHOR4-(.LPIC1164+8)
	.word	.LANCHOR3-(.LPIC1153+8)
	.word	.LANCHOR4-(.LPIC1162+8)
	.word	.LANCHOR4-(.LPIC1157+8)
	.fnend
	.size	gen_ndis_query_resp.constprop.114, .-gen_ndis_query_resp.constprop.114
	.align	2
	.type	ccid_function_init, %function
ccid_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5259
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC1191:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L5252
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L5257
.L5247:
	ldr	r5, .L5259+4
	mov	r1, #0
	add	r2, r4, #112
	ldr	r7, .L5259+8
	add	r0, r4, #120
	ldr	r3, .L5259+12
	str	r1, [r4, #84]
	ldr	r1, .L5259+16
	str	r2, [r4, #112]
.LPIC1174:
	add	r5, pc, r5
	str	r2, [r4, #116]
	add	r5, r5, #3680
.LPIC1175:
	add	r7, pc, r7
.LPIC1172:
	add	r3, pc, r3
	add	r5, r5, #12
.LPIC1173:
	add	r1, pc, r1
	mov	r2, r5
	add	r8, r7, #372
	str	r4, [r3, #2220]
	bl	__init_waitqueue_head(PLT)
	mov	r0, r8
	bl	misc_register(PLT)
	subs	r6, r0, #0
	bne	.L5258
	ldr	r1, .L5259+20
	add	r0, r4, #152
	mov	r2, r5
.LPIC1186:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L5259+24
	mov	r2, r5
	add	r0, r4, #164
.LPIC1188:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	add	r3, r4, #184
	add	r0, r7, #336
	str	r3, [r4, #184]
	str	r3, [r4, #188]
	bl	misc_register(PLT)
	subs	r6, r0, #0
	bne	.L5251
	mov	r0, r6
.L5254:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5252:
	mov	r4, #16
	b	.L5247
.L5257:
	mvn	r0, #11
	b	.L5254
.L5251:
	ldr	r5, .L5259+28
	ldr	r0, .L5259+32
.LPIC1181:
	add	r5, pc, r5
	add	r1, r5, #2128
.LPIC1180:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	ldr	r0, .L5259+36
	add	r1, r5, #2112
	mov	r2, r6
	add	r1, r1, #12
.LPIC1182:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r8
	bl	misc_deregister(PLT)
.L5250:
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r0, .L5259+40
.LPIC1185:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r6
	b	.L5254
.L5258:
	ldr	r5, .L5259+44
	ldr	r0, .L5259+48
.LPIC1177:
	add	r5, pc, r5
	add	r1, r5, #2096
.LPIC1176:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, .L5259+52
	add	r1, r5, #2112
	mov	r2, r6
	add	r1, r1, #12
.LPIC1178:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L5250
.L5260:
	.align	2
.L5259:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1191+8))
	.word	.LANCHOR4-(.LPIC1174+8)
	.word	.LANCHOR0-(.LPIC1175+8)
	.word	.LANCHOR2-(.LPIC1172+8)
	.word	.LC207-(.LPIC1173+8)
	.word	.LC304-(.LPIC1186+8)
	.word	.LC305-(.LPIC1188+8)
	.word	.LANCHOR3-(.LPIC1181+8)
	.word	.LC208-(.LPIC1180+8)
	.word	.LC302-(.LPIC1182+8)
	.word	.LC303-(.LPIC1185+8)
	.word	.LANCHOR3-(.LPIC1177+8)
	.word	.LC208-(.LPIC1176+8)
	.word	.LC301-(.LPIC1178+8)
	.fnend
	.size	ccid_function_init, .-ccid_function_init
	.align	2
	.type	acm_cdc_notify_complete, %function
acm_cdc_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	add	r5, r4, #148
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r6, #44]
	cmn	r3, #108
	beq	.L5262
	ldrb	r7, [r4, #144]	@ zero_extendqisi2
	str	r6, [r4, #156]
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	cmp	r7, #0
	beq	.L5261
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r6, [r4, #156]
	cmp	r6, #0
	moveq	r3, #1
	streqb	r3, [r4, #144]
	beq	.L5267
	mov	r1, #0
	mov	lr, #10
	ldr	r7, [r4, #152]
	mvn	r2, #94
	mov	r8, #32
	str	r1, [r4, #156]
	mov	ip, #2
	mov	r0, r5
	strb	r1, [r4, #144]
	ldr	r3, [r6]
	str	lr, [r6, #4]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	strb	r2, [r3]
	strb	r8, [r3, #1]
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	strb	ip, [r3, #6]
	strb	r1, [r3, #7]
	strh	r2, [r3, #4]	@ unaligned
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r7, #8]
	mov	r2, r8
	mov	r0, r7
	mov	r1, r6
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	cmp	r7, #0
	blt	.L5268
.L5267:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L5261:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5262:
	str	r6, [r4, #156]
	b	.L5267
.L5268:
	ldr	r0, [r4, #20]
	mov	r3, r7
	ldr	r1, .L5269
	ldrb	r2, [r4, #138]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
.LPIC1192:
	add	r1, pc, r1
	ldr	r0, [r0]
	add	r0, r0, r8
	bl	dev_err(PLT)
	str	r6, [r4, #156]
	b	.L5267
.L5270:
	.align	2
.L5269:
	.word	.LC306-(.LPIC1192+8)
	.fnend
	.size	acm_cdc_notify_complete, .-acm_cdc_notify_complete
	.align	2
	.type	gser_notify_complete, %function
gser_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r1, #32]
	.pad #4
	sub	sp, sp, #4
	add	r6, r4, #148
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #44]
	mov	r1, r0
	cmn	r3, #108
	beq	.L5272
	ldrb	r7, [r4, #144]	@ zero_extendqisi2
	str	r5, [r4, #156]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r7, #0
	beq	.L5271
	ldrb	r3, [r4, #138]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L5284
.L5271:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5284:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #156]
	mov	r7, r0
	cmp	r5, #0
	moveq	r3, #1
	streqb	r3, [r4, #144]
	beq	.L5275
	ldr	r3, [r4, #20]
	mov	ip, #0
	mov	r9, #32
	mov	r0, #10
	mvn	fp, #94
	ldr	lr, [r4, #152]
	mov	r2, r9
	mov	r10, #2
	mov	r1, r5
	ldr	r8, [r3, #24]
	str	ip, [r4, #156]
	strb	ip, [r4, #144]
	ldr	r3, [r5]
	str	r0, [r5, #4]
	mov	r0, lr
	strb	ip, [r3, #2]
	strb	ip, [r3, #3]
	strb	fp, [r3]
	strb	r9, [r3, #1]
	ldrb	r9, [r4, #136]	@ zero_extendqisi2
	strb	ip, [r3, #7]
	strb	r10, [r3, #6]
	strh	r9, [r3, #4]	@ unaligned
	ldrh	ip, [r4, #170]	@ unaligned
	strh	ip, [r3, #8]	@ unaligned
	ldr	r3, [lr, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	blt	.L5285
.L5275:
	mov	r0, r6
	mov	r1, r7
.L5283:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L5272:
	str	r5, [r4, #156]
	mov	r0, r6
	b	.L5283
.L5285:
	ldr	r0, [r8]
	ldr	r1, .L5286
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	add	r0, r0, #32
.LPIC1193:
	add	r1, pc, r1
	bl	dev_err(PLT)
	str	r5, [r4, #156]
	b	.L5275
.L5287:
	.align	2
.L5286:
	.word	.LC307-(.LPIC1193+8)
	.fnend
	.size	gser_notify_complete, .-gser_notify_complete
	.align	2
	.type	ghsuart_send_controlbits_tomodem, %function
ghsuart_send_controlbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L5310
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC1194:
	add	ip, pc, ip
	ldr	r3, [ip, #1876]
	cmp	r0, #0
	cmpne	r1, r3
	movcs	r5, #1
	movcc	r5, #0
	bcs	.L5307
	mov	r3, #84
	mla	r1, r3, r1, ip
	ldr	r4, [r1, #2052]
	cmp	r4, #0
	beq	.L5308
	ldr	r3, [r4, #196]
	cmp	r2, r3
	beq	.L5288
	ldr	r3, [r4, #188]
	str	r2, [r4, #196]
	tst	r3, #4
	beq	.L5288
	tst	r2, #1
	bne	.L5309
.L5288:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5309:
	add	r6, r4, #20
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	mov	r0, r6
	ldr	r6, [r4, #24]
	str	r5, [r4, #200]
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	beq	.L5288
	ldr	r3, [r6, #128]
	cmp	r3, #0
	beq	.L5288
	mov	r0, r6
	mov	r1, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L5307:
	ldr	r3, .L5310+4
	mov	r2, r1
	ldr	r0, .L5310+8
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
.LPIC1196:
	add	r3, pc, r3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
.LPIC1195:
	add	r0, pc, r0
	add	r1, r3, #2160
	b	printk(PLT)
.L5308:
	ldr	r1, .L5310+12
	ldr	r0, .L5310+16
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
.LPIC1199:
	add	r1, pc, r1
	ldr	lr, [sp, #12]
	add	sp, sp, #16
.LPIC1198:
	add	r0, pc, r0
	add	r1, r1, #2160
	b	printk(PLT)
.L5311:
	.align	2
.L5310:
	.word	.LANCHOR2-(.LPIC1194+8)
	.word	.LANCHOR3-(.LPIC1196+8)
	.word	.LC31-(.LPIC1195+8)
	.word	.LANCHOR3-(.LPIC1199+8)
	.word	.LC27-(.LPIC1198+8)
	.fnend
	.size	ghsuart_send_controlbits_tomodem, .-ghsuart_send_controlbits_tomodem
	.align	2
	.type	ffs_fs_mount, %function
ffs_fs_mount:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #33152
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r4, r3, #0
	strd	r8, [sp, #16]
	mov	r3, #0
	movt	ip, 65535
	strd	r10, [sp, #24]
	mov	r9, r0
	mov	r8, r1
	str	lr, [sp, #32]
	movw	lr, #16704
	strd	r6, [sp, #8]
	.pad #52
	sub	sp, sp, #52
	mov	r7, r2
	str	r3, [sp, #28]
	str	r3, [sp, #40]
	strh	ip, [sp, #28]	@ movhi
	str	r3, [sp, #32]
	str	r3, [sp, #36]
	str	r3, [sp, #44]
	strh	lr, [sp, #40]	@ movhi
	beq	.L5313
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L5313
	ldr	r3, .L5348
.LPIC1204:
	add	r3, pc, r3
	str	r3, [sp, #4]
	ldr	r3, .L5348+4
.LPIC1202:
	add	r3, pc, r3
	str	r3, [sp, #8]
	ldr	r3, .L5348+8
.LPIC1203:
	add	r3, pc, r3
	str	r3, [sp, #16]
	ldr	r3, .L5348+12
.LPIC1205:
	add	r3, pc, r3
	str	r3, [sp, #12]
	ldr	r3, .L5348+16
.LPIC1206:
	add	r3, pc, r3
	str	r3, [sp, #20]
.L5326:
	mov	r1, #44
	mov	r0, r4
	bl	strchr(PLT)
	subs	r6, r0, #0
	mov	r1, #61
	movne	r3, #0
	mov	r0, r4
	strneb	r3, [r6]
	bl	strchr(PLT)
	subs	r5, r0, #0
	beq	.L5344
	mov	r3, #0
	mov	r10, r5
	mov	r2, r3
	add	r1, sp, #24
	strb	r3, [r10], #1
	mov	r0, r10
	bl	simple_strtoul(PLT)
	ldr	r3, [sp, #24]
	mov	fp, r0
	ldrb	r3, [r3]	@ zero_extendqisi2
	cmp	r3, #0
	cmpne	r3, #44
	bne	.L5345
	rsb	r5, r4, r5
	cmp	r5, #4
	beq	.L5319
	cmp	r5, #5
	beq	.L5320
	cmp	r5, #3
	beq	.L5346
.L5318:
	ldr	r0, .L5348+20
	mov	r1, r4
.LPIC1207:
	add	r0, pc, r0
	bl	printk(PLT)
.L5316:
	mvn	r0, #21
	b	.L5340
.L5313:
	ldr	r3, .L5348+24
	mov	r0, r9
	mov	r1, r8
	add	r2, sp, #28
	str	r7, [sp, #44]
.LPIC1208:
	add	r3, pc, r3
	bl	mount_single(PLT)
.L5340:
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5346:
	mov	r0, r4
	ldr	r1, [sp, #12]
	mov	r2, r5
	bl	memcmp(PLT)
	cmp	r0, #0
	streq	fp, [sp, #32]
	beq	.L5323
	mov	r2, r5
	mov	r0, r4
	ldr	r1, [sp, #20]
	bl	memcmp(PLT)
	cmp	r0, #0
	bne	.L5318
	str	fp, [sp, #36]
.L5323:
	cmp	r6, #0
	beq	.L5313
	add	r4, r6, #1
	b	.L5326
.L5320:
	mov	r0, r4
	ldr	r1, [sp, #8]
	mov	r2, r5
	bl	memcmp(PLT)
	cmp	r0, #0
	beq	.L5347
	mov	r2, r5
	mov	r0, r4
	ldr	r1, [sp, #16]
	bl	memcmp(PLT)
	cmp	r0, #0
	bne	.L5318
	movw	r3, #438
	and	r3, r3, fp
	mvn	r3, r3, asl #17
	mvn	r3, r3, lsr #17
	strh	r3, [sp, #28]	@ movhi
	b	.L5323
.L5319:
	mov	r2, r5
	mov	r0, r4
	ldr	r1, [sp, #4]
	bl	memcmp(PLT)
	cmp	r0, #0
	bne	.L5318
	uxth	fp, fp
	movw	r5, #438
	movw	r4, #365
	and	r5, r5, fp
	and	r4, r4, fp
	mvn	r3, r5, asl #17
	orr	r4, r4, #16384
	mvn	r3, r3, lsr #17
	strh	r4, [sp, #40]	@ movhi
	strh	r3, [sp, #28]	@ movhi
	b	.L5323
.L5347:
	movw	r3, #365
	and	r3, r3, fp
	orr	r3, r3, #16384
	strh	r3, [sp, #40]	@ movhi
	b	.L5323
.L5344:
	ldr	r0, .L5348+28
	mov	r1, r4
.LPIC1200:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L5316
.L5345:
	ldr	r0, .L5348+32
	mov	r1, r4
	mov	r2, r10
.LPIC1201:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L5316
.L5349:
	.align	2
.L5348:
	.word	.LC312-(.LPIC1204+8)
	.word	.LC310-(.LPIC1202+8)
	.word	.LC311-(.LPIC1203+8)
	.word	.LC313-(.LPIC1205+8)
	.word	.LC314-(.LPIC1206+8)
	.word	.LC315-(.LPIC1207+8)
	.word	ffs_sb_fill-(.LPIC1208+8)
	.word	.LC308-(.LPIC1200+8)
	.word	.LC309-(.LPIC1201+8)
	.fnend
	.size	ffs_fs_mount, .-ffs_fs_mount
	.align	2
	.type	gps_send_cpkt_response, %function
gps_send_cpkt_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	cmpne	r0, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L5380
	ldr	r3, .L5381
	mov	r6, r2
.LPIC1214:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r4, [r3, #24]
	cmp	r4, #0
	beq	.L5353
	mov	r0, r4
	movw	r1, #32800
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L5363
	mov	r0, r6
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L5364
	cmn	r4, #4096
	str	r6, [r4, #4]
	bhi	.L5363
.L5356:
	mov	r1, r7
	mov	r2, r6
	bl	memcpy(PLT)
	str	r6, [r4, #4]
	ldr	r3, [r5, #112]
	cmp	r3, #0
	beq	.L5357
	ldr	r3, [r5, #116]
	cmp	r3, #0
	bne	.L5358
.L5357:
	ldr	r0, [r4]
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, #0
.L5370:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5358:
	add	r7, r5, #124
	add	r8, r5, #136
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #140]
	add	r2, r4, #8
	mov	r1, r0
	mov	r0, r7
	str	r2, [r5, #140]
	str	r8, [r4, #8]
	str	r3, [r4, #12]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r7
	ldr	r4, [r5, #132]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	ldr	r0, [r5, #112]
	cmp	r4, #0
	cmpne	r0, #0
	moveq	r6, #1
	movne	r6, #0
	beq	.L5359
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L5359
	add	r9, r5, #144
#APP
@ 61 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r9]
	add	r2, r2, #1
	strex	r3, r2, [r9]
	teq	r3, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #1
	bne	.L5359
	ldr	r3, [r4]
	mvn	ip, #94
	mov	r0, r7
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r6, [r3, #2]
	strb	r6, [r3, #3]
	ldrh	r2, [r5, #108]
	strb	r6, [r3, #6]
	strb	r6, [r3, #7]
	strh	r2, [r3, #4]	@ unaligned
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r5, #128]
	mov	r2, #32
	ldr	r1, [r5, #132]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L5370
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #136]
	mov	r6, r0
	cmp	r8, r3
	beq	.L5362
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r9]
	sub	r2, r2, #1
	strex	r1, r2, [r9]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r0, [r3]
	mov	ip, #256
	mov	r1, #512
	ldr	r2, [r3, #4]
	mov	r4, r3
	str	r2, [r0, #4]
	str	r0, [r2]
	str	ip, [r3]
	str	r1, [r3, #4]
	ldr	r0, [r4, #-8]!
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
.L5362:
	mov	r0, r7
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L5370
.L5359:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L5370
.L5353:
	mov	r0, r2
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r4, #16]
	strne	r6, [r4, #20]
	movne	r4, #16
	bne	.L5356
	mov	r4, #16
.L5364:
	mov	r0, r4
	bl	kfree(PLT)
.L5363:
	ldr	r1, .L5381+4
	ldr	r0, .L5381+8
.LPIC1213:
	add	r1, pc, r1
	add	r1, r1, #2192
.LPIC1212:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #11
	b	.L5370
.L5380:
	ldr	r1, .L5381+12
	mov	r2, r0
	mov	r3, r7
	ldr	r0, .L5381+16
.LPIC1210:
	add	r1, pc, r1
	add	r1, r1, #2192
.LPIC1209:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L5370
.L5382:
	.align	2
.L5381:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1214+8))
	.word	.LANCHOR3-(.LPIC1213+8)
	.word	.LC317-(.LPIC1212+8)
	.word	.LANCHOR3-(.LPIC1210+8)
	.word	.LC316-(.LPIC1209+8)
	.fnend
	.size	gps_send_cpkt_response, .-gps_send_cpkt_response
	.align	2
	.type	grmnet_ctrl_smd_send_cpkt_tomodem, %function
grmnet_ctrl_smd_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #5
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bhi	.L5384
	ldr	r3, .L5408
	mov	r4, r2
	mov	r2, #84
.LPIC1215:
	add	r3, pc, r3
	mla	r3, r2, r0, r3
	ldr	r7, [r3, #532]
	cmp	r7, #0
	beq	.L5384
	ldr	r3, .L5408+4
	mov	r5, r1
.LPIC1222:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r6, [r3, #24]
	cmp	r6, #0
	beq	.L5388
	mov	r0, r6
	movw	r1, #32800
	bl	kmem_cache_alloc(PLT)
	subs	r6, r0, #0
	beq	.L5391
	mov	r0, r4
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L5393
	cmn	r6, #4096
	str	r4, [r6, #4]
	bhi	.L5391
.L5392:
	mov	r1, r5
	mov	r2, r4
	add	r5, r7, #108
	bl	memcpy(PLT)
	str	r4, [r6, #4]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r7, #8]
	mov	r8, r0
	ands	r4, r4, #1
	beq	.L5407
	ldr	r3, .L5408+8
	add	ip, r6, #8
	add	r0, r7, #40
	ldr	r2, [r7, #44]
	add	r1, r7, #68
	mov	r4, #0
	str	ip, [r7, #44]
	str	r0, [r6, #8]
.LPIC1218:
	add	r3, pc, r3
	str	r2, [r6, #12]
	ldr	r0, [r3, #-648]
	str	ip, [r2]
	bl	queue_work(PLT)
	mov	r0, r5
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L5403
.L5384:
	ldr	r1, .L5408+12
	mov	r2, r0
	mvn	r4, #18
	ldr	r0, .L5408+16
.LPIC1221:
	add	r1, pc, r1
	add	r1, r1, #2208
.LPIC1220:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
.L5403:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5407:
	ldr	r0, [r6]
	bl	kfree(PLT)
	mov	r0, r6
	bl	kfree(PLT)
	mov	r0, r5
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L5403
.L5388:
	mov	r0, r4
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r6, #16]
	strne	r4, [r6, #20]
	movne	r6, #16
	bne	.L5392
	mov	r6, #16
.L5393:
	mov	r0, r6
	bl	kfree(PLT)
.L5391:
	ldr	r1, .L5408+20
	mvn	r4, #11
	ldr	r0, .L5408+24
.LPIC1217:
	add	r1, pc, r1
	add	r1, r1, #2208
.LPIC1216:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L5403
.L5409:
	.align	2
.L5408:
	.word	.LANCHOR2-(.LPIC1215+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1222+8))
	.word	.LANCHOR4-(.LPIC1218+8)
	.word	.LANCHOR3-(.LPIC1221+8)
	.word	.LC31-(.LPIC1220+8)
	.word	.LANCHOR3-(.LPIC1217+8)
	.word	.LC317-(.LPIC1216+8)
	.fnend
	.size	grmnet_ctrl_smd_send_cpkt_tomodem, .-grmnet_ctrl_smd_send_cpkt_tomodem
	.align	2
	.type	frmnet_send_cpkt_response, %function
frmnet_send_cpkt_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	cmpne	r0, #0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L5441
	ldr	r3, .L5442
	mov	r6, r2
.LPIC1228:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r4, [r3, #24]
	cmp	r4, #0
	beq	.L5413
	mov	r0, r4
	movw	r1, #32800
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L5424
	mov	r0, r6
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L5425
	cmn	r4, #4096
	str	r6, [r4, #4]
	bhi	.L5424
.L5416:
	mov	r1, r7
	mov	r2, r6
	bl	memcpy(PLT)
	str	r6, [r4, #4]
	ldr	r3, [r5, #112]
	cmp	r3, #0
	beq	.L5417
	ldr	r3, [r5, #116]
	cmp	r3, #0
	bne	.L5418
.L5417:
	ldr	r0, [r4]
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, #0
.L5431:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5418:
	add	r6, r5, #124
	add	r7, r5, #136
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #140]
	add	r2, r4, #8
	mov	r1, r0
	mov	r0, r6
	str	r2, [r5, #140]
	str	r7, [r4, #8]
	str	r3, [r4, #12]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	ldr	r4, [r5, #132]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	ldr	r0, [r5, #112]
	cmp	r4, #0
	cmpne	r0, #0
	moveq	r8, #1
	movne	r8, #0
	beq	.L5419
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L5419
	ldr	r3, [r5, #144]
	add	r3, r3, #1
	cmp	r3, #1
	str	r3, [r5, #144]
	bne	.L5419
	ldr	r2, [r4]
	mvn	ip, #94
	mov	r0, r6
	strb	ip, [r2]
	strb	r3, [r2, #1]
	strb	r8, [r2, #2]
	strb	r8, [r2, #3]
	ldrh	r3, [r5, #104]
	strb	r8, [r2, #6]
	strb	r8, [r2, #7]
	strh	r3, [r2, #4]	@ unaligned
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r5, #128]
	mov	r2, #32
	ldr	r1, [r5, #132]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L5431
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #136]
	mov	r8, r0
	cmp	r7, r3
	beq	.L5422
	ldr	r4, [r5, #144]
	cmp	r4, #0
	beq	.L5423
	sub	r4, r4, #1
	mov	ip, #256
	mov	r0, #512
	mov	r7, r3
	str	r4, [r5, #144]
	ldmia	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	ip, [r3]
	str	r0, [r3, #4]
	ldr	r0, [r7, #-8]!
	bl	kfree(PLT)
	mov	r0, r7
	bl	kfree(PLT)
.L5422:
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L5431
.L5419:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L5431
.L5413:
	mov	r0, r2
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r4, #16]
	strne	r6, [r4, #20]
	movne	r4, #16
	bne	.L5416
	mov	r4, #16
.L5425:
	mov	r0, r4
	bl	kfree(PLT)
.L5424:
	ldr	r1, .L5442+4
	ldr	r0, .L5442+8
.LPIC1227:
	add	r1, pc, r1
.LPIC1226:
	add	r0, pc, r0
	add	r1, r1, #2256
	bl	printk(PLT)
	mvn	r0, #11
	b	.L5431
.L5423:
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
	b	.L5431
.L5441:
	ldr	r1, .L5442+12
	mov	r2, r0
	mov	r3, r7
	ldr	r0, .L5442+16
.LPIC1224:
	add	r1, pc, r1
.LPIC1223:
	add	r0, pc, r0
	add	r1, r1, #2256
	bl	printk(PLT)
	mvn	r0, #18
	b	.L5431
.L5443:
	.align	2
.L5442:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1228+8))
	.word	.LANCHOR3-(.LPIC1227+8)
	.word	.LC317-(.LPIC1226+8)
	.word	.LANCHOR3-(.LPIC1224+8)
	.word	.LC316-(.LPIC1223+8)
	.fnend
	.size	frmnet_send_cpkt_response, .-frmnet_send_cpkt_response
	.align	2
	.type	rmnet_sdio_command_complete, %function
rmnet_sdio_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r1, #32]
	ldr	r7, [r1, #48]
	cmp	r2, #0
	ldr	r8, [r4, #76]
	blt	.L5458
	ldr	r3, [r4, #312]
	tst	r3, #2
	bne	.L5459
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5459:
	ldr	r3, .L5460
	mov	r5, r1
.LPIC1232:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r6, [r3, #24]
	cmp	r6, #0
	beq	.L5447
	mov	r0, r6
	mov	r1, #32
	bl	kmem_cache_alloc(PLT)
	subs	r6, r0, #0
	beq	.L5451
	mov	r0, r7
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L5452
	cmn	r6, #4096
	bhi	.L5451
.L5450:
	ldr	r1, [r5]
	mov	r2, r7
	add	r5, r4, #180
	bl	memcpy(PLT)
	mov	r0, r5
	str	r7, [r6, #4]
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #104]
	add	r2, r6, #8
	add	r1, r4, #100
	mov	r0, r5
	str	r2, [r4, #104]
	str	r1, [r6, #8]
	str	r3, [r6, #12]
	str	r2, [r3]
	ldr	r3, [r4, #108]
	add	r3, r3, #1
	str	r3, [r4, #108]
	bl	_raw_spin_unlock(PLT)
	ldrd	r6, [sp, #8]
	add	r1, r4, #212
	ldr	r0, [r4, #192]
	ldr	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work(PLT)
.L5447:
	mov	r0, r7
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r6, #16]
	mov	r6, #16
	bne	.L5450
.L5452:
	mov	r0, r6
	bl	kfree(PLT)
.L5451:
	ldr	r0, [r8]
	ldr	r1, .L5460+4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
.LPIC1231:
	add	r1, pc, r1
	add	sp, sp, #24
	b	dev_err(PLT)
.L5458:
	ldr	r0, [r8]
	ldr	r1, .L5460+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
.LPIC1229:
	add	r1, pc, r1
	add	sp, sp, #24
	b	dev_err(PLT)
.L5461:
	.align	2
.L5460:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1232+8))
	.word	.LC318-(.LPIC1231+8)
	.word	.LC115-(.LPIC1229+8)
	.fnend
	.size	rmnet_sdio_command_complete, .-rmnet_sdio_command_complete
	.align	2
	.type	ffs_do_descs.constprop.142, %function
ffs_do_descs.constprop.142:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	cmpne	r0, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, [sp, #16]
	str	r6, [sp, #8]
	moveq	r4, #1
	str	lr, [sp, #12]
	movne	r4, #0
	beq	.L5480
	cmp	r2, #1
	bls	.L5468
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r2, r3
	bcc	.L5468
	mov	lr, r2
.L5467:
	ldrb	ip, [r1, #1]	@ zero_extendqisi2
	sub	ip, ip, #4
	cmp	ip, #44
	addls	pc, pc, ip, asl #2
	b	.L5468
.L5470:
	b	.L5469
	b	.L5471
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5472
	b	.L5468
	b	.L5473
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5468
	b	.L5474
	.p2align 1
.L5474:
	cmp	r3, #6
	beq	.L5477
.L5468:
	mvn	r0, #21
.L5487:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5472:
	cmp	r3, #5
	bne	.L5468
.L5477:
	adds	r1, r1, r3
	add	r4, r4, #1
	moveq	ip, #1
	movne	ip, #0
	cmp	r0, r4
	orreq	ip, ip, #1
	rsb	lr, r3, lr
	cmp	ip, #0
	bne	.L5492
	cmp	lr, #1
	bls	.L5468
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	lr, r3
	bcs	.L5467
	b	.L5468
.L5471:
	sub	ip, r3, #7
	tst	ip, #253
	bne	.L5468
	ldrb	ip, [r1, #2]	@ zero_extendqisi2
	ands	ip, ip, #15
	beq	.L5468
	ldrh	r6, [r5, #184]
	cmp	ip, r6
	strgth	ip, [r5, #184]	@ movhi
	b	.L5477
.L5469:
	cmp	r3, #9
	bne	.L5468
	ldrb	ip, [r1, #2]	@ zero_extendqisi2
	ldrh	r6, [r5, #182]
	cmp	r6, ip
	addls	ip, ip, #1
	strlsh	ip, [r5, #182]	@ movhi
	ldrb	ip, [r1, #8]	@ zero_extendqisi2
	cmp	ip, #0
	beq	.L5477
	ldrh	r6, [r5, #180]
	uxth	ip, ip
	cmp	r6, ip
	strcch	ip, [r5, #180]	@ movhi
	b	.L5477
.L5473:
	cmp	r3, #8
	bne	.L5468
	ldrb	ip, [r1, #7]	@ zero_extendqisi2
	cmp	ip, #0
	beq	.L5477
	ldrh	r6, [r5, #180]
	uxth	ip, ip
	cmp	r6, ip
	strcch	ip, [r5, #180]	@ movhi
	b	.L5477
.L5492:
	rsb	r0, lr, r2
	b	.L5487
.L5480:
	mov	r0, #0
	b	.L5487
	.fnend
	.size	ffs_do_descs.constprop.142, .-ffs_do_descs.constprop.142
	.align	2
	.type	__ffs_data_do_entity, %function
__ffs_data_do_entity:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #2
	beq	.L5495
	cmp	r0, #3
	beq	.L5496
	cmp	r0, #1
	beq	.L5498
	mov	r0, #0
	bx	lr
.L5498:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #182]
	cmp	r1, r2
	addls	r2, r2, #1
	strlsh	r2, [r3, #182]	@ movhi
	bx	lr
.L5496:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #184]
	and	r2, r2, #15
	cmp	r2, r1
	strgth	r2, [r3, #184]	@ movhi
	bx	lr
.L5495:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #180]
	cmp	r1, r2
	strcch	r2, [r3, #180]	@ movhi
	bx	lr
	.fnend
	.size	__ffs_data_do_entity, .-__ffs_data_do_entity
	.align	2
	.type	acc_complete_in, %function
acc_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r3, .L5502
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
.LPIC1233:
	add	r3, pc, r3
	ldr	r4, [r3, #2316]
	cmn	r2, #108
	bne	.L5500
	ldrb	r3, [r4, #92]	@ zero_extendqisi2
	and	r3, r3, #254
	orr	r3, r3, #2
	strb	r3, [r4, #92]
.L5500:
	add	r6, r4, #80
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #1652]
	add	r2, r5, #36
	add	ip, r4, #1648
	mov	r1, r0
	mov	r0, r6
	str	r2, [r4, #1652]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r0, r4, #1664
	ldr	r6, [sp, #8]
	mov	r1, #3
	ldrd	r4, [sp]
	add	r0, r0, #4
	mov	r2, #1
	ldr	lr, [sp, #12]
	mov	r3, #0
	add	sp, sp, #16
	b	__wake_up(PLT)
.L5503:
	.align	2
.L5502:
	.word	.LANCHOR2-(.LPIC1233+8)
	.fnend
	.size	acc_complete_in, .-acc_complete_in
	.align	2
	.type	audio_data_complete, %function
audio_data_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	add	r6, r4, #100
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #92]
	add	r2, r5, #36
	add	ip, r4, #88
	mov	r1, r0
	mov	r0, r6
	str	r2, [r4, #92]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L5504
	ldr	r6, [r5, #44]
	cmp	r6, #0
	bne	.L5504
	ldr	r3, [r5, #48]
	ldr	r1, [r4, #120]
	ldr	r2, [r4, #116]
	add	r3, r3, r1
	cmp	r3, r2
	str	r3, [r4, #120]
	bcs	.L5511
.L5506:
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	audio_send(PLT)
.L5504:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5511:
	ldr	r0, [r4, #84]
	bl	snd_pcm_period_elapsed(PLT)
	str	r6, [r4, #120]
	b	.L5506
	.fnend
	.size	audio_data_complete, .-audio_data_complete
	.align	2
	.type	f_audio_set_alt, %function
f_audio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5557
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r10, [sp, #24]
	mov	r10, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
.LPIC1264:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r6, [r0, #164]
	ldr	r4, [r0, #168]
	ldrb	r2, [r3, #8]	@ zero_extendqisi2
	cmp	r2, r1
	beq	.L5548
	ldrb	r3, [r3, #9]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L5524
	cmp	r10, #1
	beq	.L5549
	ldr	r7, [r0, #176]
	cmp	r7, #0
	beq	.L5533
	ldr	r1, .L5557+4
	ldr	r0, .L5557+8
.LPIC1259:
	add	r1, pc, r1
	add	r1, r1, #2272
.LPIC1258:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r2, [r5, #200]
	add	r1, r7, #8
	add	r3, r5, #196
	add	r0, r5, #180
	str	r1, [r5, #200]
	str	r3, [r7, #8]
	str	r2, [r7, #12]
	str	r1, [r2]
	bl	schedule_work(PLT)
	mov	r3, #0
	mov	r7, r3
	str	r3, [r5, #176]
.L5529:
	strb	r10, [r5, #241]
.L5516:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5548:
	cmp	r10, #1
	beq	.L5550
	add	r9, r0, #204
	add	r6, r0, #228
	mov	r8, #256
	mov	r0, r9
	mov	r7, #512
	bl	_raw_spin_lock_irqsave(PLT)
	str	r0, [sp, #4]
.L5522:
	ldr	r4, [r5, #228]
	cmp	r4, r6
	beq	.L5551
.L5523:
	ldr	r3, [r4, #4]
	subs	fp, r4, #8
	ldr	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r8, [r4]
	str	r7, [r4, #4]
	beq	.L5522
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r3, #0
	mov	r0, fp
	str	r3, [r4, #-8]
	bl	kfree(PLT)
	ldr	r4, [r5, #228]
	cmp	r4, r6
	bne	.L5523
.L5551:
	mov	r0, r9
	ldr	r1, [sp, #4]
	mov	r7, #0
	bl	_raw_spin_unlock_irqrestore(PLT)
.L5520:
	strb	r10, [r5, #240]
	b	.L5516
.L5533:
	ldr	r1, .L5557+12
	ldr	r0, .L5557+16
.LPIC1261:
	add	r1, pc, r1
	add	r1, r1, #2272
.LPIC1260:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L5529
.L5549:
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r1, [r6, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r7, r0, #0
	bne	.L5552
	ldr	r4, .L5557+20
	str	r5, [r6]
.LPIC1248:
	add	r4, pc, r4
	ldr	r0, [r4, #424]
	bl	f_audio_buffer_alloc(PLT)
	cmn	r0, #4096
	str	r0, [r5, #176]
	bhi	.L5527
	ldr	r3, [r4, #440]
	cmp	r3, #0
	ble	.L5529
	ldr	r9, .L5557+24
	mov	r8, r7
	ldr	fp, .L5557+28
.LPIC1252:
	add	r9, pc, r9
.LPIC1254:
	add	fp, pc, fp
	b	.L5528
.L5554:
	ldr	r3, [r9, #444]
	str	r5, [r4, #32]
	str	fp, [r4, #28]
	str	r3, [r4, #4]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bne	.L5553
	ldr	r3, [r9, #440]
	cmp	r3, r8
	ble	.L5529
.L5528:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	add	r8, r8, #1
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	movw	r1, #32800
	beq	.L5530
	ldr	r0, [r9, #444]
	bl	__kmalloc(PLT)
	mov	r3, r0
	mov	r1, r4
	cmp	r3, #0
	mov	r0, r6
	mov	r2, #32
	str	r3, [r4]
	bne	.L5554
.L5531:
	ldr	r1, .L5557+32
	mvn	r7, #11
	ldr	r0, .L5557+36
.LPIC1241:
	add	r1, pc, r1
	add	r1, r1, #2272
.LPIC1240:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L5516
.L5550:
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r1, [r4, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r7, r0, #0
	bne	.L5555
	str	r5, [r4]
	mov	r0, r4
	mov	r1, #32
	str	r7, [r5, #208]
	ldr	r3, [r4, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L5530
	ldr	r7, .L5557+40
	movw	r1, #32800
.LPIC1239:
	add	r7, pc, r7
	ldr	r0, [r7, #436]
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L5531
	ldr	r3, .L5557+44
	str	r5, [r6, #32]
	mov	r1, r6
	ldr	ip, [r7, #436]
	mov	r0, r4
	mov	r2, #32
.LPIC1243:
	add	r3, pc, r3
	str	ip, [r6, #4]
	str	r3, [r6, #28]
	str	r6, [r5, #236]
	ldr	r3, [r4, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bne	.L5556
.L5519:
	add	r0, r5, #212
	bl	schedule_work(PLT)
	b	.L5520
.L5527:
	ldr	r1, .L5557+48
	mvn	r7, #11
	ldr	r0, .L5557+52
.LPIC1251:
	add	r1, pc, r1
	add	r1, r1, #2272
.LPIC1250:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L5516
.L5530:
	ldr	r1, .L5557+56
	mvn	r7, #11
	ldr	r0, .L5557+60
.LPIC1238:
	add	r1, pc, r1
	add	r1, r1, #2272
.LPIC1237:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L5516
.L5553:
	ldr	r1, .L5557+64
	mov	r3, r7
	ldr	r0, .L5557+68
	ldr	r2, [r6, #4]
.LPIC1256:
	add	r1, pc, r1
	add	r1, r1, #2272
.LPIC1255:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L5529
.L5524:
	ldr	ip, .L5557+72
	mov	r2, r1
	mov	r3, #0
	ldr	r0, .L5557+76
	mov	r7, r3
.LPIC1263:
	add	ip, pc, ip
	add	r1, ip, #2272
.LPIC1262:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L5516
.L5556:
	ldr	r1, .L5557+80
	mov	r3, r7
	ldr	r0, .L5557+84
	ldr	r2, [r4, #4]
.LPIC1245:
	add	r1, pc, r1
	add	r1, r1, #2272
.LPIC1244:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L5519
.L5552:
	ldr	r1, .L5557+88
	ldr	r0, .L5557+92
.LPIC1247:
	add	r1, pc, r1
	add	r1, r1, #2272
.LPIC1246:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L5516
.L5555:
	ldr	r1, .L5557+96
	ldr	r0, .L5557+100
.LPIC1236:
	add	r1, pc, r1
	add	r1, r1, #2272
.LPIC1235:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L5516
.L5558:
	.align	2
.L5557:
	.word	uac1_ac_header_desc(GOT_PREL)+(.-(.LPIC1264+8))
	.word	.LANCHOR3-(.LPIC1259+8)
	.word	.LC325-(.LPIC1258+8)
	.word	.LANCHOR3-(.LPIC1261+8)
	.word	.LC326-(.LPIC1260+8)
	.word	.LANCHOR1-(.LPIC1248+8)
	.word	.LANCHOR1-(.LPIC1252+8)
	.word	f_audio_complete-(.LPIC1254+8)
	.word	.LANCHOR3-(.LPIC1241+8)
	.word	.LC321-(.LPIC1240+8)
	.word	.LANCHOR1-(.LPIC1239+8)
	.word	f_audio_complete-(.LPIC1243+8)
	.word	.LANCHOR3-(.LPIC1251+8)
	.word	.LC41-(.LPIC1250+8)
	.word	.LANCHOR3-(.LPIC1238+8)
	.word	.LC320-(.LPIC1237+8)
	.word	.LANCHOR3-(.LPIC1256+8)
	.word	.LC324-(.LPIC1255+8)
	.word	.LANCHOR3-(.LPIC1263+8)
	.word	.LC327-(.LPIC1262+8)
	.word	.LANCHOR3-(.LPIC1245+8)
	.word	.LC322-(.LPIC1244+8)
	.word	.LANCHOR3-(.LPIC1247+8)
	.word	.LC323-(.LPIC1246+8)
	.word	.LANCHOR3-(.LPIC1236+8)
	.word	.LC319-(.LPIC1235+8)
	.fnend
	.size	f_audio_set_alt, .-f_audio_set_alt
	.align	2
	.type	qdss_unbind, %function
qdss_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r3, [r0, #24]
	ldr	r0, [r1, #188]
	ldr	r5, [r3]
	bl	flush_workqueue(PLT)
	ldr	r0, .L5584
	ldr	r1, [r5, #28]
.LPIC1265:
	add	r0, pc, r0
	bl	strcmp(PLT)
	subs	r1, r0, #0
	beq	.L5583
.L5560:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #100]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L5564
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L5565
	bl	kfree(PLT)
	ldr	r3, [r5, #20]
.L5564:
	cmp	r3, #2
	bls	.L5559
.L5565:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L5559
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree(PLT)
.L5559:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5583:
	ldr	r0, [r4, #100]
	bl	dwc3_tx_fifo_resize_request(PLT)
	b	.L5560
.L5585:
	.align	2
.L5584:
	.word	.LC328-(.LPIC1265+8)
	.fnend
	.size	qdss_unbind, .-qdss_unbind
	.align	2
	.type	rmnet_smd_free_buf, %function
rmnet_smd_free_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r8, [sp, #16]
	mov	r8, r0
	str	r10, [sp, #24]
	strd	r6, [sp, #8]
	str	lr, [sp, #28]
	str	r3, [r0, #416]
	str	r3, [r0, #420]
	str	r3, [r0, #424]
	str	r3, [r0, #428]
	str	r3, [r0, #432]
	str	r3, [r0, #436]
	str	r3, [r0, #440]
	str	r3, [r0, #444]
	ldr	r3, [r8, #132]!
	cmp	r3, r8
	ldr	r4, [r3]
	movne	r10, #256
	movne	r9, #512
	bne	.L5590
	b	.L5591
.L5599:
	mov	r4, r2
.L5590:
	ldr	r2, [r3, #4]
	mov	r6, r3
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r7, [r5, #80]
	ldr	r0, [r6, #-36]!
	bl	kfree(PLT)
	ldr	r3, [r7, #8]
	mov	r0, r7
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r8, r4
	ldr	r2, [r4]
	mov	r3, r4
	bne	.L5599
.L5591:
	mov	r8, r5
	ldr	r3, [r8, #140]!
	cmp	r3, r8
	ldr	r4, [r3]
	movne	r10, #256
	movne	r9, #512
	bne	.L5594
	b	.L5589
.L5600:
	mov	r4, r2
.L5594:
	ldr	r2, [r3, #4]
	mov	r6, r3
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r7, [r5, #84]
	ldr	r0, [r6, #-36]!
	bl	kfree(PLT)
	ldr	r3, [r7, #8]
	mov	r0, r7
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r8, r4
	ldr	r2, [r4]
	mov	r3, r4
	bne	.L5600
.L5589:
	mov	r7, r5
	ldr	r3, [r7, #100]!
	cmp	r3, r7
	ldr	r4, [r3]
	movne	r9, #256
	movne	r8, #512
	bne	.L5597
	b	.L5593
.L5601:
	mov	r4, r2
.L5597:
	ldr	r2, [r3, #4]
	mov	r6, r3
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r6, #-8]!
	bl	kfree(PLT)
	mov	r0, r6
	bl	kfree(PLT)
	cmp	r7, r4
	ldr	r2, [r4]
	mov	r3, r4
	bne	.L5601
.L5593:
	mov	r7, r5
	ldr	r3, [r7, #108]!
	cmp	r3, r7
	ldr	r4, [r3]
	movne	r9, #256
	movne	r8, #512
	bne	.L5598
	b	.L5596
.L5602:
	mov	r4, r2
.L5598:
	ldr	r2, [r3, #4]
	mov	r6, r3
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r6, #-8]!
	bl	kfree(PLT)
	mov	r0, r6
	bl	kfree(PLT)
	cmp	r7, r4
	ldr	r2, [r4]
	mov	r3, r4
	bne	.L5602
.L5596:
	ldr	r6, [r5, #92]
	ldr	r4, [r5, #88]
	ldr	r0, [r6]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r6
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	rmnet_smd_free_buf, .-rmnet_smd_free_buf
	.align	2
	.type	rmnet_smd_unbind, %function
rmnet_smd_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	add	r0, r1, #276
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	tasklet_kill(PLT)
	add	r0, r4, #256
	bl	tasklet_kill(PLT)
	add	r0, r4, #340
	bl	tasklet_kill(PLT)
	add	r0, r4, #320
	bl	tasklet_kill(PLT)
	ldr	r0, [r4, #380]
	bl	flush_workqueue(PLT)
	mov	r0, r4
	bl	rmnet_smd_free_buf(PLT)
	mov	r3, #0
	ldr	r0, [r4, #380]
	str	r3, [r4, #88]
	str	r3, [r4, #84]
	str	r3, [r4, #80]
	bl	destroy_workqueue(PLT)
	ldr	r3, .L5606
.LPIC1267:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3]
	bl	debugfs_remove_recursive(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
.L5607:
	.align	2
.L5606:
	.word	dent_smd(GOT_PREL)+(.-(.LPIC1267+8))
	.fnend
	.size	rmnet_smd_unbind, .-rmnet_smd_unbind
	.align	2
	.type	ffs_epfile_read, %function
ffs_epfile_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r5, r2, #1
	strd	r6, [sp, #8]
	mvn	r7, r5, lsr #10
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mvn	r7, r7, asl #10
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #44
	sub	sp, sp, #44
	add	r3, r7, #1
	str	r3, [sp, #4]
	ldr	r9, [r4, #36]
	ldr	r6, [r4, #40]
	cmp	r9, #0
	bne	.L5633
.L5610:
	str	r2, [sp, #8]
	ldr	r2, [r6, #96]
	mov	r8, r0
	str	r1, [sp, #12]
	cmp	r2, #2
	bne	.L5634
	mov	r3, sp
	mov	r5, r9
	bic	fp, r3, #8128
	bic	fp, fp, #63
.L5612:
	ldr	r7, [r4, #44]
	cmp	r7, #0
	beq	.L5653
.L5629:
	ldrb	r10, [r4, #57]	@ zero_extendqisi2
	adds	r10, r10, #0
	movne	r10, #1
	cmp	r10, #0
	bne	.L5654
	cmp	r5, #0
	bne	.L5631
	ldr	r0, [sp, #4]
	movw	r1, #32976
	bl	__kmalloc(PLT)
	subs	r5, r0, #0
	beq	.L5655
.L5631:
	ldr	r2, [r8, #32]
	mov	r0, r4
	tst	r2, #2048
	beq	.L5618
	bl	mutex_trylock(PLT)
	cmp	r0, #0
	beq	.L5638
.L5621:
	ldr	r0, [r4, #40]
	add	r0, r0, #28
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [r4, #44]
	cmp	r2, r7
	bne	.L5619
	cmp	r10, #0
	bne	.L5656
	ldr	r0, .L5662
	mov	r2, #32
	ldr	r8, [r7, #4]
	ldr	r3, [sp, #4]
.LPIC1271:
	add	r0, pc, r0
	str	r5, [r8]
	mov	r1, r8
	str	r3, [r8, #4]
	str	r0, [r8, #28]
	str	r10, [r6, #72]!
	str	r6, [r8, #32]
	ldr	r0, [r7]
	ldr	ip, [r0, #8]
	ldr	ip, [ip, #16]
	blx	ip
	mov	r9, r0
	ldr	r0, [r4, #40]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r9, #0
	blt	.L5639
	mov	r0, r6
	bl	wait_for_completion_interruptible(PLT)
	cmp	r0, #0
	ldr	r0, [r4, #40]
	add	r0, r0, #28
	bne	.L5657
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [r4, #44]
	ldr	r0, [r4, #40]
	cmp	r2, r7
	beq	.L5658
	add	r0, r0, #28
	mvn	r9, #18
	bl	_raw_spin_unlock_irq(PLT)
.L5624:
	mov	r0, r4
	bl	mutex_unlock(PLT)
.L5613:
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r9
.L5648:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5654:
	ldrb	r2, [r4, #58]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L5631
	mvn	r9, #21
	b	.L5613
.L5618:
	bl	mutex_lock_interruptible(PLT)
	subs	r9, r0, #0
	beq	.L5621
	b	.L5613
.L5653:
	ldr	r2, [r8, #32]
	tst	r2, #2048
	bne	.L5638
	ldr	r2, [r4, #36]
	cmp	r2, #0
	bne	.L5636
	ldr	r1, .L5662+4
	add	r10, sp, #20
	add	r9, r4, #24
	ldr	r0, [fp, #12]
	str	r2, [sp, #20]
	add	r2, sp, #32
	str	r2, [sp, #32]
.LPIC1272:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	str	r2, [sp, #36]
	strd	r0, [sp, #24]
	b	.L5616
.L5659:
	bl	schedule(PLT)
.L5616:
	mov	r0, r9
	mov	r1, r10
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldr	r7, [r4, #44]
	cmp	r7, #0
	bne	.L5614
	ldr	r2, [fp, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L5659
	mov	r0, r9
	mov	r1, r10
	mov	r9, #65024
	bl	finish_wait(PLT)
	movt	r9, 65535
	b	.L5613
.L5634:
	mov	r5, r9
.L5611:
	ldr	r0, .L5662+8
	movw	r1, #787
	mvn	r9, #18
.LPIC1268:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L5613
.L5619:
	ldr	r0, [r4, #40]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r4
	bl	mutex_unlock(PLT)
	ldr	r2, [r4, #40]
	ldr	r2, [r2, #96]
	cmp	r2, #2
	beq	.L5612
	b	.L5611
.L5658:
	ldr	r9, [r7, #24]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r9, #0
	ble	.L5624
	ldr	r3, [sp, #8]
	cmp	r3, r9
	mvncc	r9, #74
	bcc	.L5624
	mov	r3, sp
	bic	r2, r3, #8128
	ldr	r3, [sp, #12]
	bic	r2, r2, #63
	ldr	r2, [r2, #8]
#APP
@ 448 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r9; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	cmp	r2, #0
	mvnne	r9, #13
	bne	.L5624
	mov	r2, r9
	mov	r0, r3
	mov	r1, r5
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	mvnne	r9, #13
	b	.L5624
.L5636:
	mvn	r9, #18
	b	.L5613
.L5655:
	mvn	r0, #11
	b	.L5648
.L5614:
	mov	r0, r9
	mov	r1, r10
	bl	finish_wait(PLT)
	b	.L5629
.L5639:
	mvn	r9, #4
	b	.L5624
.L5656:
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L5660
	ldr	r2, [r0, #8]
	mov	r1, #1
	ldr	r2, [r2, #24]
	blx	r2
.L5630:
	ldr	r0, [r4, #40]
	mvn	r9, #73
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq(PLT)
	b	.L5624
.L5657:
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [r4, #44]
	cmp	r2, r7
	beq	.L5661
.L5626:
	ldr	r0, [r4, #40]
	mvn	r9, #3
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq(PLT)
	b	.L5624
.L5661:
	ldr	r0, [r7]
	mov	r1, r8
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
	b	.L5626
.L5638:
	mvn	r9, #10
	b	.L5613
.L5633:
	mvn	r0, #18
	b	.L5648
.L5660:
	ldr	r0, .L5662+12
	movw	r1, #862
.LPIC1270:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L5630
.L5663:
	.align	2
.L5662:
	.word	ffs_epfile_io_complete-(.LPIC1271+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1272+8))
	.word	.LC182-(.LPIC1268+8)
	.word	.LC182-(.LPIC1270+8)
	.fnend
	.size	ffs_epfile_read, .-ffs_epfile_read
	.align	2
	.type	ccid_bulk_complete_in, %function
ccid_bulk_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5670
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r2, [r1, #44]
.LPIC1273:
	add	r3, pc, r3
	ldr	r4, [r3, #2220]
	cmp	r2, #0
	movne	r3, #1
	add	r6, r4, #84
	strne	r3, [r4, #140]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #188]
	add	r2, r5, #36
	add	ip, r4, #184
	mov	r1, r0
	mov	r0, r6
	str	r2, [r4, #188]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	add	r0, r4, #164
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up(PLT)
.L5671:
	.align	2
.L5670:
	.word	.LANCHOR2-(.LPIC1273+8)
	.fnend
	.size	ccid_bulk_complete_in, .-ccid_bulk_complete_in
	.align	2
	.type	ghsic_data_probe, %function
ghsic_data_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L5702
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
.LPIC1274:
	add	r5, pc, r5
	ldr	r7, [r5, #1456]
	cmp	r7, #0
	beq	.L5673
	ldr	r4, [r5, #1460]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5674
	cmp	r7, #1
	bls	.L5673
	ldr	r4, [r5, #1564]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5674
	cmp	r7, #2
	beq	.L5673
	ldr	r4, [r5, #1668]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5674
	cmp	r7, #3
	beq	.L5673
	ldr	r4, [r5, #1772]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5674
.L5673:
	ldr	r1, .L5702+4
	mvn	r2, #21
	ldr	r0, .L5702+8
.LPIC1280:
	add	r1, pc, r1
	add	r1, r1, #2288
.LPIC1279:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #21
.L5676:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5674:
	mov	r0, #1
	add	r1, r4, #180
	bl	_set_bit(PLT)
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L5676
	ldr	r0, [r4, #84]
	add	r1, r4, #88
	bl	queue_work(PLT)
	mov	r0, #0
	b	.L5676
.L5703:
	.align	2
.L5702:
	.word	.LANCHOR2-(.LPIC1274+8)
	.word	.LANCHOR3-(.LPIC1280+8)
	.word	.LC91-(.LPIC1279+8)
	.fnend
	.size	ghsic_data_probe, .-ghsic_data_probe
	.align	2
	.type	ghsic_ctrl_probe, %function
ghsic_ctrl_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L5735
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
.LPIC1281:
	add	r5, pc, r5
	ldr	r7, [r5, #1036]
	cmp	r7, #0
	beq	.L5705
	ldr	r4, [r5, #1040]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5706
	cmp	r7, #1
	bls	.L5705
	ldr	r4, [r5, #1144]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5706
	cmp	r7, #2
	beq	.L5705
	ldr	r4, [r5, #1248]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5706
	cmp	r7, #3
	beq	.L5705
	ldr	r4, [r5, #1352]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5706
.L5705:
	ldr	r1, .L5735+4
	mvn	r2, #21
	ldr	r0, .L5735+8
.LPIC1287:
	add	r1, pc, r1
.LPIC1286:
	add	r0, pc, r0
	add	r1, r1, #2320
	bl	printk(PLT)
	mvn	r0, #21
.L5708:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5706:
	mov	r0, #1
	add	r1, r4, #84
	add	r5, r4, #4
	bl	_set_bit(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #8]
	mov	r6, r0
	cmp	r3, #0
	beq	.L5709
	ldr	r0, [r4, #12]
	add	r1, r4, #16
	bl	queue_work(PLT)
.L5709:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L5708
.L5736:
	.align	2
.L5735:
	.word	.LANCHOR2-(.LPIC1281+8)
	.word	.LANCHOR3-(.LPIC1287+8)
	.word	.LC91-(.LPIC1286+8)
	.fnend
	.size	ghsic_ctrl_probe, .-ghsic_ctrl_probe
	.align	2
	.type	audio_unbind, %function
audio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	add	r6, r1, #100
	strd	r8, [sp, #16]
	mov	r9, #256
	mov	r8, #512
	strd	r10, [sp, #24]
	add	r10, r1, #88
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.L5738:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r7, #88]
	mov	r3, r0
	mov	r0, r6
	mov	r1, r3
	cmp	r4, r10
	sub	r5, r4, #36
	beq	.L5739
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r5, #0
	beq	.L5741
	ldr	fp, [r7, #96]
	ldr	r0, [r4, #-36]
	bl	kfree(PLT)
	mov	r1, r5
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	b	.L5738
.L5739:
	mov	r0, r6
	mov	r1, r3
	bl	_raw_spin_unlock_irqrestore(PLT)
.L5741:
	ldr	r0, [r7, #76]
	bl	snd_card_free_when_closed(PLT)
	mov	r3, #0
	str	r3, [r7, #76]
	str	r3, [r7, #80]
	str	r3, [r7, #84]
	str	r3, [r7, #96]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
	.fnend
	.size	audio_unbind, .-audio_unbind
	.align	2
	.type	gsmd_read_complete, %function
gsmd_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0]
	cmp	r7, #0
	beq	.L5753
	add	r6, r7, #4
	mov	r5, r0
	mov	r0, r6
	mov	r4, r1
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r7, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	beq	.L5747
	ldr	r3, [r4, #44]
	cmn	r3, #108
	beq	.L5747
	ldr	r3, .L5754
	add	ip, r4, #36
	add	r0, r7, #20
	ldr	r2, [r7, #24]
	add	r1, r7, #28
	str	ip, [r7, #24]
	str	r0, [r4, #36]
.LPIC1290:
	add	r3, pc, r3
	str	r2, [r4, #40]
	ldr	r0, [r3, #-512]
	str	ip, [r2]
	bl	queue_work(PLT)
	ldrd	r4, [sp]
	mov	r0, r6
	ldr	r8, [sp, #16]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L5747:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4]
	bl	kfree(PLT)
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L5753:
	ldr	r1, .L5754+4
	ldr	r0, .L5754+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC1289:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	add	r1, r1, #2336
	ldr	lr, [sp, #20]
.LPIC1288:
	add	r0, pc, r0
	add	r1, r1, #4
	add	sp, sp, #24
	b	printk(PLT)
.L5755:
	.align	2
.L5754:
	.word	.LANCHOR4-(.LPIC1290+8)
	.word	.LANCHOR3-(.LPIC1289+8)
	.word	.LC27-(.LPIC1288+8)
	.fnend
	.size	gsmd_read_complete, .-gsmd_read_complete
	.align	2
	.type	mtp_complete_in, %function
mtp_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5762
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r2, [r1, #44]
.LPIC1291:
	add	r3, pc, r3
	ldr	r4, [r3, #2320]
	cmp	r2, #0
	movne	r3, #4
	add	r6, r4, #80
	strne	r3, [r4, #96]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #112]
	add	r2, r5, #36
	add	ip, r4, #108
	mov	r1, r0
	mov	r0, r6
	str	r2, [r4, #112]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	add	r0, r4, #136
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up(PLT)
.L5763:
	.align	2
.L5762:
	.word	.LANCHOR2-(.LPIC1291+8)
	.fnend
	.size	mtp_complete_in, .-mtp_complete_in
	.align	2
	.type	mtp_complete_intr, %function
mtp_complete_intr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5770
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r2, [r1, #44]
.LPIC1292:
	add	r3, pc, r3
	ldr	r4, [r3, #2320]
	cmp	r2, #0
	movne	r3, #4
	add	r6, r4, #80
	strne	r3, [r4, #96]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #120]
	add	r2, r5, #36
	add	ip, r4, #116
	mov	r1, r0
	mov	r0, r6
	str	r2, [r4, #120]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	add	r0, r4, #148
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up(PLT)
.L5771:
	.align	2
.L5770:
	.word	.LANCHOR2-(.LPIC1292+8)
	.fnend
	.size	mtp_complete_intr, .-mtp_complete_intr
	.align	2
	.type	gsmd_write_complete, %function
gsmd_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r5, [r0]
	.pad #12
	sub	sp, sp, #12
	cmp	r5, #0
	beq	.L5784
	add	r7, r5, #4
	mov	r6, r0
	mov	r0, r7
	mov	r4, r1
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r5, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	beq	.L5774
	ldr	r3, [r4, #44]
	cmn	r3, #108
	beq	.L5774
	cmp	r3, #0
	bne	.L5785
.L5776:
	mov	r3, r5
	ldr	r2, .L5786
	add	ip, r4, #36
	ldr	lr, [r3, #44]!
	add	r1, r5, #52
.LPIC1297:
	add	r2, pc, r2
	str	ip, [lr, #4]
	ldr	r0, [r2, #-512]
	str	r3, [r4, #40]
	str	lr, [r4, #36]
	str	ip, [r5, #44]
	bl	queue_work(PLT)
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock(PLT)
.L5774:
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	bx	r3	@ indirect register sibling call
.L5784:
	ldr	r1, .L5786+4
	ldr	r0, .L5786+8
.LPIC1294:
	add	r1, pc, r1
	add	r1, r1, #2352
.LPIC1293:
	add	r0, pc, r0
	add	r1, r1, #8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk(PLT)
.L5785:
	ldr	r1, .L5786+12
	str	r3, [sp, #4]
	mov	r2, r5
	ldr	r3, [r6, #4]
	ldr	r0, .L5786+16
.LPIC1296:
	add	r1, pc, r1
	add	r1, r1, #2352
	str	r3, [sp]
	ldr	r3, [r5]
	add	r1, r1, #8
.LPIC1295:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L5776
.L5787:
	.align	2
.L5786:
	.word	.LANCHOR4-(.LPIC1297+8)
	.word	.LANCHOR3-(.LPIC1294+8)
	.word	.LC27-(.LPIC1293+8)
	.word	.LANCHOR3-(.LPIC1296+8)
	.word	.LC87-(.LPIC1295+8)
	.fnend
	.size	gsmd_write_complete, .-gsmd_write_complete
	.align	2
	.type	ghsic_data_free_buffers, %function
ghsic_data_free_buffers:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxeq	lr
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r8, [sp, #16]
	add	r8, r0, #48
	mov	r0, r8
	str	r10, [sp, #24]
	strd	r6, [sp, #8]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r10, [r4, #8]
	mov	r9, r0
	cmp	r10, #0
	moveq	r0, r8
	moveq	r1, r9
	beq	.L5811
	ldr	r3, [r4, #24]
	add	r5, r4, #24
	cmp	r5, r3
	movne	r7, #256
	movne	r6, #512
	beq	.L5795
.L5794:
	ldr	r2, [r3, #4]
	sub	r1, r3, #36
	mov	r0, r10
	ldr	ip, [r3]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r7, [r3]
	str	r6, [r3, #4]
	ldr	r3, [r10, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #24]
	cmp	r5, r3
	bne	.L5794
.L5795:
	ldr	r3, [r4, #32]
	add	r5, r4, #32
	cmp	r3, r5
	cmpne	r3, #0
	movne	r6, #0
	beq	.L5793
.L5796:
	ldr	r2, [r4, #40]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #40]
	ldmia	r3, {r1, r2}
	str	r6, [r3]
	str	r6, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #32]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L5796
.L5793:
	mov	r0, r8
	mov	r1, r9
	add	r7, r4, #80
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r10, [r4, #12]
	mov	r8, r0
	cmp	r10, #0
	beq	.L5799
	ldr	r3, [r4, #56]
	add	r5, r4, #56
	cmp	r3, r5
	movne	r9, #256
	movne	r6, #512
	beq	.L5801
.L5800:
	ldr	r2, [r3, #4]
	sub	r1, r3, #36
	mov	r0, r10
	ldr	ip, [r3]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r9, [r3]
	str	r6, [r3, #4]
	ldr	r3, [r10, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #56]
	cmp	r3, r5
	bne	.L5800
.L5801:
	ldr	r3, [r4, #64]
	add	r5, r4, #64
	cmp	r3, r5
	cmpne	r3, #0
	movne	r6, #0
	beq	.L5799
.L5802:
	ldr	r2, [r4, #72]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #72]
	ldmia	r3, {r1, r2}
	str	r6, [r3]
	str	r6, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #64]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L5802
.L5799:
	mov	r0, r7
	mov	r1, r8
.L5811:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
	.fnend
	.size	ghsic_data_free_buffers, .-ghsic_data_free_buffers
	.align	2
	.type	ghsic_data_remove, %function
ghsic_data_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L5853
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
.LPIC1298:
	add	r5, pc, r5
	ldr	r7, [r5, #1456]
	cmp	r7, #0
	beq	.L5813
	ldr	r4, [r5, #1460]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5814
	cmp	r7, #1
	bls	.L5813
	ldr	r4, [r5, #1564]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5814
	cmp	r7, #2
	beq	.L5813
	ldr	r4, [r5, #1668]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5814
	cmp	r7, #3
	beq	.L5813
	ldr	r4, [r5, #1772]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5814
.L5813:
	ldr	r1, .L5853+4
	mvn	r2, #21
	ldr	r0, .L5853+8
.LPIC1304:
	add	r1, pc, r1
	add	r1, r1, #2368
.LPIC1303:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #21
.L5816:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5814:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L5817
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5817
	blx	r3
.L5817:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L5818
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5818
	blx	r3
.L5818:
	add	r0, r4, #120
	add	r5, r4, #180
	bl	cancel_work_sync(PLT)
	mov	r0, r4
	bl	ghsic_data_free_buffers(PLT)
	add	r0, r4, #88
	bl	cancel_work_sync(PLT)
	mov	r1, r5
	mov	r0, #0
	bl	_test_and_clear_bit(PLT)
	mov	r0, #1
	mov	r1, r5
	bl	_clear_bit(PLT)
	mov	r0, #0
	b	.L5816
.L5854:
	.align	2
.L5853:
	.word	.LANCHOR2-(.LPIC1298+8)
	.word	.LANCHOR3-(.LPIC1304+8)
	.word	.LC91-(.LPIC1303+8)
	.fnend
	.size	ghsic_data_remove, .-ghsic_data_remove
	.align	2
	.type	ghsuart_data_free_buffers, %function
ghsuart_data_free_buffers:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxeq	lr
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r8, [sp, #16]
	add	r8, r0, #72
	mov	r0, r8
	str	r10, [sp, #24]
	strd	r6, [sp, #8]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r10, [r4, #8]
	mov	r9, r0
	cmp	r10, #0
	moveq	r0, r8
	moveq	r1, r9
	beq	.L5878
	ldr	r3, [r4, #48]
	add	r5, r4, #48
	cmp	r5, r3
	movne	r7, #256
	movne	r6, #512
	beq	.L5862
.L5861:
	ldr	r2, [r3, #4]
	sub	r1, r3, #36
	mov	r0, r10
	ldr	ip, [r3]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r7, [r3]
	str	r6, [r3, #4]
	ldr	r3, [r10, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #48]
	cmp	r5, r3
	bne	.L5861
.L5862:
	ldr	r3, [r4, #56]
	add	r5, r4, #56
	cmp	r3, r5
	cmpne	r3, #0
	movne	r6, #0
	beq	.L5860
.L5863:
	ldr	r2, [r4, #64]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #64]
	ldmia	r3, {r1, r2}
	str	r6, [r3]
	str	r6, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #56]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L5863
.L5860:
	mov	r0, r8
	mov	r1, r9
	add	r7, r4, #104
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r10, [r4, #12]
	mov	r8, r0
	cmp	r10, #0
	beq	.L5866
	ldr	r3, [r4, #80]
	add	r5, r4, #80
	cmp	r3, r5
	movne	r9, #256
	movne	r6, #512
	beq	.L5868
.L5867:
	ldr	r2, [r3, #4]
	sub	r1, r3, #36
	mov	r0, r10
	ldr	ip, [r3]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r9, [r3]
	str	r6, [r3, #4]
	ldr	r3, [r10, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #80]
	cmp	r3, r5
	bne	.L5867
.L5868:
	ldr	r3, [r4, #88]
	add	r5, r4, #88
	cmp	r3, r5
	cmpne	r3, #0
	movne	r6, #0
	beq	.L5866
.L5869:
	ldr	r2, [r4, #96]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #96]
	ldmia	r3, {r1, r2}
	str	r6, [r3]
	str	r6, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #88]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L5869
.L5866:
	mov	r0, r7
	mov	r1, r8
.L5878:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
	.fnend
	.size	ghsuart_data_free_buffers, .-ghsuart_data_free_buffers
	.align	2
	.type	ghsuart_data_remove, %function
ghsuart_data_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5908
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0, #4]
.LPIC1305:
	add	r3, pc, r3
	ldr	r1, [r3, #2048]
	cmp	r2, r1
	bcs	.L5906
	mov	r1, #84
	mla	r2, r1, r2, r3
	ldr	r4, [r2, #2052]
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L5882
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5882
	blx	r3
.L5882:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L5883
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5883
	blx	r3
.L5883:
	mov	r0, r4
	bl	ghsuart_data_free_buffers(PLT)
	ldr	r5, [r4, #16]
	cmp	r5, #0
	beq	.L5907
.L5885:
	ldr	r1, .L5908+4
	add	r5, r4, #188
	ldr	r0, .L5908+8
	ldr	r2, [r4, #180]
.LPIC1310:
	add	r1, pc, r1
	add	r1, r1, #2400
.LPIC1309:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r1, r5
	mov	r0, #1
	bl	_clear_bit(PLT)
	mov	r1, r5
	mov	r0, #0
	bl	_clear_bit(PLT)
	mov	r0, #2
	mov	r1, r5
	bl	_clear_bit(PLT)
	mov	r0, #0
.L5881:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5907:
	add	r6, r4, #20
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	mov	r0, r6
	ldr	r6, [r4, #24]
	str	r5, [r4, #200]
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	beq	.L5885
	ldr	r3, [r6, #112]
	cmp	r3, #0
	beq	.L5885
	mov	r0, r6
	blx	r3
	b	.L5885
.L5906:
	ldr	r1, .L5908+12
	ldr	r0, .L5908+16
.LPIC1307:
	add	r1, pc, r1
.LPIC1306:
	add	r0, pc, r0
	add	r1, r1, #2400
	bl	printk(PLT)
	mvn	r0, #21
	b	.L5881
.L5909:
	.align	2
.L5908:
	.word	.LANCHOR2-(.LPIC1305+8)
	.word	.LANCHOR3-(.LPIC1310+8)
	.word	.LC329-(.LPIC1309+8)
	.word	.LANCHOR3-(.LPIC1307+8)
	.word	.LC91-(.LPIC1306+8)
	.fnend
	.size	ghsuart_data_remove, .-ghsuart_data_remove
	.align	2
	.type	bam_data_start, %function
bam_data_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	beq	.L5925
	cmp	r3, #0
	beq	.L5910
	ldr	r3, [r3, #8]
	mov	r2, #32
	ldr	r1, [r0, #40]
	ldr	ip, [r3, #8]
	mov	r0, r3
	ldr	r3, [ip, #16]
	blx	r3
	cmp	r0, #0
	bne	.L5926
.L5910:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5925:
	cmp	r3, #0
	beq	.L5910
	ldr	r3, [r3, #12]
	mov	r2, #32
	ldr	r1, [r0, #36]
	ldr	ip, [r3, #8]
	mov	r0, r3
	ldr	r3, [ip, #16]
	blx	r3
	cmp	r0, #0
	beq	.L5910
	ldr	r1, .L5927
	mov	r2, r0
	ldr	r0, .L5927+4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC1312:
	add	r1, pc, r1
	add	r1, r1, #2416
.LPIC1311:
	add	r0, pc, r0
	add	r1, r1, #4
	b	printk(PLT)
.L5926:
	ldr	r1, .L5927+8
	mov	r2, r0
	ldr	r0, .L5927+12
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC1314:
	add	r1, pc, r1
.LPIC1313:
	add	r0, pc, r0
	add	r1, r1, #2448
	b	printk(PLT)
.L5928:
	.align	2
.L5927:
	.word	.LANCHOR3-(.LPIC1312+8)
	.word	.LC191-(.LPIC1311+8)
	.word	.LANCHOR3-(.LPIC1314+8)
	.word	.LC191-(.LPIC1313+8)
	.fnend
	.size	bam_data_start, .-bam_data_start
	.align	2
	.type	mbim_notify_complete, %function
mbim_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r1, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r7, [r1]
	add	r6, r5, #196
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #44]
	cmn	r3, #104
	beq	.L5931
	cmp	r3, #0
	beq	.L5932
	cmn	r3, #108
	beq	.L5931
	ldr	r1, .L5984
	ldr	r0, .L5984+4
	ldrb	r2, [r7, #1]	@ zero_extendqisi2
.LPIC1319:
	add	r1, pc, r1
	add	r1, r1, #2464
.LPIC1318:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
.L5933:
	ldr	r4, [r5, #152]
	cmp	r4, #0
	beq	.L5946
	ldrb	r3, [r5, #156]	@ zero_extendqisi2
	ldr	r2, [r4]
	cmp	r3, #0
	beq	.L5948
	cmp	r3, #3
	bne	.L5980
	ldr	r3, [r5, #160]
	cmp	r3, #0
	ble	.L5946
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r5, #148]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r4, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	cmp	r4, #0
	bne	.L5981
.L5946:
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock(PLT)
.L5931:
	ldr	r1, .L5984+8
	mov	r3, #0
	mov	r7, r5
	ldr	r0, .L5984+12
	strb	r3, [r5, #156]
	str	r3, [r5, #160]
.LPIC1316:
	add	r1, pc, r1
	add	r1, r1, #2464
.LPIC1315:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r7, #200]!
	cmp	r3, r7
	ldr	r4, [r3]
	movne	r9, #256
	movne	r8, #512
	bne	.L5938
	b	.L5939
.L5951:
	mov	r4, r2
.L5938:
	ldr	r2, [r3, #4]
	subs	r10, r3, #8
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	beq	.L5937
	ldr	r0, [r3, #-8]
	bl	kfree(PLT)
	mov	r0, r10
	bl	kfree(PLT)
.L5937:
	cmp	r7, r4
	ldr	r2, [r4]
	mov	r3, r4
	bne	.L5951
.L5939:
	mov	r8, r5
	ldr	r3, [r8, #208]!
	cmp	r3, r8
	ldr	r4, [r3]
	movne	r10, #256
	movne	r9, #512
	bne	.L5943
	b	.L5936
.L5953:
	mov	r4, r2
.L5943:
	ldr	r2, [r3, #4]
	subs	fp, r3, #8
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	beq	.L5942
	ldr	r0, [r3, #-8]
	bl	kfree(PLT)
	mov	r0, fp
	bl	kfree(PLT)
.L5942:
	cmp	r4, r8
	ldr	r2, [r4]
	mov	r3, r4
	bne	.L5953
.L5936:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, .L5984+16
.LPIC1326:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L5982
	movw	r1, #32800
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	beq	.L5983
.L5940:
	mov	r1, #16
	mov	r2, #0
	mov	r3, r0
	stmia	r0, {r1, r2}
.L5944:
	ldr	r2, [r5, #204]
	add	r1, r3, #8
	mov	r0, r6
	str	r1, [r5, #204]
	str	r7, [r3, #8]
	str	r2, [r3, #12]
	str	r1, [r2]
	bl	_raw_spin_unlock(PLT)
	add	r0, r5, #100
	mov	r1, #3
	mov	r2, #1
	mov	r3, #0
	bl	__wake_up(PLT)
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	b	.L5933
.L5932:
	add	r3, r5, #160
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r3, [r5, #160]
	b	.L5933
.L5980:
	mvn	r3, #94
	add	r7, r5, #160
	strb	r3, [r2]
	ldrb	r3, [r5, #188]	@ zero_extendqisi2
	strh	r3, [r2, #4]	@ unaligned
#APP
@ 45 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r3, [r7]
	add	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, r6
	ldr	r3, [r5, #160]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r5, #148]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r4, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	cmp	r4, #0
	beq	.L5946
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L5984+20
	mov	r2, r4
	ldr	r0, .L5984+24
.LPIC1325:
	add	r1, pc, r1
	add	r1, r1, #2496
.LPIC1324:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L5946
.L5948:
	ldr	r3, [r5, #160]
	cmp	r3, #0
	ble	.L5946
	ldr	r1, .L5984+28
	ldr	r0, .L5984+32
.LPIC1321:
	add	r1, pc, r1
	add	r1, r1, #2496
.LPIC1320:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L5946
.L5982:
	mov	r0, #16
	b	.L5940
.L5983:
	mvn	r3, #11
	b	.L5944
.L5981:
	add	r3, r5, #160
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L5984+36
	mov	r2, r4
	ldr	r0, .L5984+40
.LPIC1323:
	add	r1, pc, r1
	add	r1, r1, #2496
.LPIC1322:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L5946
.L5985:
	.align	2
.L5984:
	.word	.LANCHOR3-(.LPIC1319+8)
	.word	.LC331-(.LPIC1318+8)
	.word	.LANCHOR3-(.LPIC1316+8)
	.word	.LC330-(.LPIC1315+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1326+8))
	.word	.LANCHOR3-(.LPIC1325+8)
	.word	.LC334-(.LPIC1324+8)
	.word	.LANCHOR3-(.LPIC1321+8)
	.word	.LC332-(.LPIC1320+8)
	.word	.LANCHOR3-(.LPIC1323+8)
	.word	.LC333-(.LPIC1322+8)
	.fnend
	.size	mbim_notify_complete, .-mbim_notify_complete
	.align	2
	.type	ghsic_data_write_tohost, %function
ghsic_data_write_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #136
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #88
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r8, [r4, #-128]
	mov	r2, r0
	cmp	r8, #0
	beq	.L5990
	sub	r3, r4, #112
	ldr	r10, .L6016
	movw	fp, #16960
	movt	fp, 15
	str	r3, [sp, #4]
	ldr	r3, .L6016+4
.LPIC1331:
	add	r10, pc, r10
.LPIC1328:
	add	r3, pc, r3
	str	r3, [sp, #8]
.L5989:
	ldr	r3, [r4, #-112]
	ldr	r1, [sp, #4]
	cmp	r1, r3
	beq	.L5990
	mov	r3, r4
	ldr	r6, [r3, #-104]!
	cmp	r6, r3
	cmpne	r6, #0
	beq	.L5990
	ldr	r3, [r4, #-96]
	mov	r0, #0
	ldr	r1, .L6016+8
	sub	r3, r3, #1
.LPIC1333:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	str	r3, [r4, #-96]
	ldr	ip, [r6]
	ldr	r3, [r6, #4]
	str	r0, [r6]
	str	r0, [r6, #4]
	str	r3, [ip, #4]
	str	ip, [r3]
	ldr	r5, [r4, #-112]
	str	r6, [r5, #-4]
	ldr	ip, [r6, #172]
	sub	r9, r5, #36
	ldrb	r3, [r5, #-10]	@ zero_extendqisi2
	str	ip, [r5, #-36]
	ldr	ip, [r6, #80]
	orr	r3, r3, #2
	strb	r3, [r5, #-10]
	str	ip, [r5, #-32]
	ldr	r3, [r4, #48]
	mov	ip, #256
	ldr	r1, [r1]
	add	r3, r3, #1
	cmp	r3, r1
	str	r3, [r4, #48]
	ldrb	r3, [r5, #-10]	@ zero_extendqisi2
	bfieq	r3, r0, #0, #1
	orrne	r3, r3, #1
	streqb	r3, [r5, #-10]
	strneb	r3, [r5, #-10]
	streq	r0, [r4, #48]
	ldr	r3, [r5, #4]
	mov	r0, #512
	ldr	r1, [r5]
	str	r3, [r1, #4]
	str	r1, [r3]
	ldr	r3, [sp, #8]
	str	ip, [r5]
	str	r0, [r5, #4]
	ldr	r3, [r3, #-476]
	cmp	r3, #0
	bne	.L6014
.L5993:
	mov	r1, r2
	str	r3, [r6, #44]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r8, #8]
	mov	r1, r9
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r9, #0
	mov	r2, r0
	bne	.L6015
	ldr	r3, [r4, #56]
	ldr	r1, [r10, #340]
	add	r3, r3, #1
	cmp	r1, #0
	str	r3, [r4, #56]
	beq	.L5989
	ldr	r1, [r4, #-96]
	ldr	r3, [r10, #448]
	cmp	r1, r3
	bhi	.L5989
	str	r0, [sp, #12]
	add	r1, r4, #28
	mov	r0, #2
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	ldr	r2, [sp, #12]
	beq	.L5989
	ldr	r3, [r4, #64]
	ldr	r1, [r4, #-96]
	add	r3, r3, #1
	str	r1, [r4, #80]
	str	r3, [r4, #64]
	b	.L5989
.L6015:
	ldr	r1, .L6016+12
	str	r0, [sp, #8]
	ldr	r0, .L6016+16
.LPIC1330:
	add	r1, pc, r1
	add	r1, r1, #2512
.LPIC1329:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r3, [r4, #-112]
	mov	r0, r6
	str	r5, [r3, #4]
	str	r3, [r5]
	ldr	r3, [sp, #4]
	str	r3, [r5, #4]
	str	r5, [r4, #-112]
	bl	dev_kfree_skb_any(PLT)
	ldr	r2, [sp, #8]
.L5990:
	mov	r0, r7
	mov	r1, r2
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6014:
	add	r0, sp, #16
	str	r2, [sp, #12]
	bl	do_gettimeofday(PLT)
	ldr	r3, [sp, #16]
	ldr	r1, [sp, #20]
	ldr	r2, [sp, #12]
	ubfx	r3, r3, #0, #12
	mla	r3, fp, r3, r1
	b	.L5993
.L6017:
	.align	2
.L6016:
	.word	.LANCHOR1-(.LPIC1331+8)
	.word	.LANCHOR4-(.LPIC1328+8)
	.word	ghsic_data_tx_intr_thld(GOT_PREL)+(.-(.LPIC1333+8))
	.word	.LANCHOR3-(.LPIC1330+8)
	.word	.LC287-(.LPIC1329+8)
	.fnend
	.size	ghsic_data_write_tohost, .-ghsic_data_write_tohost
	.align	2
	.type	ghsic_data_write_tomdm, %function
ghsic_data_write_tomdm:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #120
	bxeq	lr
	ldr	r3, [r0, #-116]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #40
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #44]
	mov	r8, r0
	ubfx	r3, r3, #1, #1
	cmp	r3, #0
	bne	.L6023
	mov	r2, r5
	ldr	r4, [r2, #-56]!
	cmp	r4, r2
	cmpne	r4, #0
	beq	.L6023
	ldr	r1, [r5, #-48]
	ldr	r2, .L6077
	sub	r1, r1, #1
.LPIC1338:
	add	r2, pc, r2
	str	r1, [r5, #-48]
	ldrd	r0, [r4]
	str	r3, [r4]
	str	r3, [r4, #4]
	str	r1, [r0, #4]
	str	r0, [r1]
	ldr	r3, [r2, #-476]
	cmp	r3, #0
	bne	.L6071
.L6024:
	mov	r1, r8
	str	r3, [r4, #40]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, .L6077+4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	ldr	r0, .L6077+8
.LPIC1335:
	add	r6, pc, r6
	add	r6, r6, #2528
.LPIC1334:
	add	r0, pc, r0
	add	r6, r6, #12
	add	r0, r0, #452
	mov	r1, r6
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L6072
.L6022:
	ldr	r3, [r5, #92]
	mov	r0, r4
	add	r3, r3, #1
	str	r3, [r5, #92]
	bl	dev_kfree_skb_any(PLT)
.L6023:
.L6021:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r8, [r5, #-108]
	mov	r6, r0
	cmp	r8, #0
	beq	.L6027
	movw	r3, #16960
	sub	r2, r5, #64
	ldr	fp, .L6077+12
	movt	r3, 15
	ldr	r9, .L6077+16
	mov	ip, r0
	str	r2, [sp, #8]
	ldr	r2, .L6077+20
	str	r3, [sp, #20]
	ldr	r3, .L6077+24
.LPIC1339:
	add	fp, pc, fp
.LPIC1341:
	add	r9, pc, r9
	mov	r6, fp
.LPIC1340:
	add	r2, pc, r2
	mov	fp, r9
.LPIC1343:
	add	r3, pc, r3
	str	r2, [sp, #12]
	str	r3, [sp, #16]
	b	.L6031
.L6028:
	ldr	r0, [fp, #480]
	mov	r1, #208
	mov	r2, #0
	mvn	r3, #0
	str	ip, [sp, #4]
	bl	__alloc_skb(PLT)
	subs	r10, r0, #0
	ldr	ip, [sp, #4]
	beq	.L6073
	ldr	r3, [r10, #172]
	str	ip, [r10, #28]
	str	r3, [r4, #-36]
	ldr	r3, [fp, #480]
	str	r10, [r4, #-4]
	str	r3, [r4, #-32]
	ldr	r3, [sp, #16]
	ldr	r3, [r3, #-476]
	cmp	r3, #0
	bne	.L6074
.L6030:
	str	r3, [r10, #32]
	ldr	r3, [r8, #8]
	mov	r1, r9
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	str	r0, [sp, #4]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp, #4]
	mov	ip, r0
	cmp	r3, #0
	bne	.L6075
.L6031:
	ldr	lr, [r5, #-116]
	mov	r3, #256
	mov	r2, #512
	mov	r1, ip
	mov	r0, r7
	cmp	lr, #0
	beq	.L6066
	ldr	r4, [r5, #-64]
	ldr	lr, [sp, #8]
	sub	r9, r4, #36
	cmp	r4, lr
	beq	.L6066
	ldr	r10, [r5, #-48]
	ldr	lr, [r6, #476]
	cmp	r10, lr
	bhi	.L6066
	ldr	ip, [r4, #4]
	ldr	lr, [r4]
	str	ip, [lr, #4]
	str	lr, [ip]
	str	r3, [r4]
	str	r2, [r4, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [sp, #12]
	ldr	ip, [r3, #-476]
	cmp	ip, #0
	beq	.L6028
	add	r0, sp, #24
	bl	do_gettimeofday(PLT)
	ldr	r3, [sp, #24]
	ldr	ip, [sp, #28]
	ldr	r2, [sp, #20]
	ubfx	r3, r3, #0, #12
	mla	ip, r2, r3, ip
	b	.L6028
.L6074:
	add	r0, sp, #24
	bl	do_gettimeofday(PLT)
	ldr	r3, [sp, #24]
	ldr	r2, [sp, #28]
	ldr	r1, [sp, #20]
	ubfx	r3, r3, #0, #12
	mla	r3, r1, r3, r2
	b	.L6030
.L6073:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
.L6069:
	ldr	r3, [r5, #-64]
	str	r4, [r3, #4]
	str	r3, [r4]
	ldr	r3, [sp, #8]
	str	r3, [r4, #4]
	str	r4, [r5, #-64]
.L6027:
	mov	r0, r7
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6071:
	add	r0, sp, #24
	bl	do_gettimeofday(PLT)
	ldr	r2, [sp, #24]
	movw	r3, #16960
	ldr	r1, [sp, #28]
	movt	r3, 15
	ubfx	r2, r2, #0, #12
	mla	r3, r3, r2, r1
	b	.L6024
.L6066:
	mov	r6, ip
	b	.L6027
.L6075:
	mov	fp, r9
	ldr	r9, .L6077+28
	mov	r6, r0
	mov	r0, r10
	bl	dev_kfree_skb_any(PLT)
	ldr	r0, .L6077+32
.LPIC1345:
	add	r9, pc, r9
	add	r9, r9, #2560
	add	r9, r9, #4
.LPIC1344:
	add	r0, pc, r0
	mov	r1, r9
	add	r0, r0, #484
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L6076
.L6032:
	ldr	r3, [r5, #-116]
	cmp	r3, #0
	bne	.L6069
	ldr	r3, [r8, #8]
	mov	r1, fp
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L6027
.L6076:
	ldr	r0, .L6077+36
	mov	r1, r9
.LPIC1346:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L6032
.L6072:
	ldr	r0, .L6077+40
	mov	r1, r6
	mvn	r2, #18
.LPIC1336:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L6022
.L6078:
	.align	2
.L6077:
	.word	.LANCHOR4-(.LPIC1338+8)
	.word	.LANCHOR3-(.LPIC1335+8)
	.word	.LANCHOR1-(.LPIC1334+8)
	.word	.LANCHOR1-(.LPIC1339+8)
	.word	.LANCHOR1-(.LPIC1341+8)
	.word	.LANCHOR4-(.LPIC1340+8)
	.word	.LANCHOR4-(.LPIC1343+8)
	.word	.LANCHOR3-(.LPIC1345+8)
	.word	.LANCHOR1-(.LPIC1344+8)
	.word	.LC147-(.LPIC1346+8)
	.word	.LC85-(.LPIC1336+8)
	.fnend
	.size	ghsic_data_write_tomdm, .-ghsic_data_write_tomdm
	.align	2
	.type	ffs_sb_fill, %function
ffs_sb_fill:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6104
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
.LPIC1365:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L6089
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L6086
.L6080:
	ldr	r5, .L6104+4
	mov	r8, #0
	mov	r10, #1
	ldr	r1, .L6104+8
	add	r0, r4, #4
	str	r10, [r4, #88]
	ldr	r9, .L6104+12
	str	r8, [r4, #92]
.LPIC1350:
	add	r5, pc, r5
	str	r8, [r4, #96]
	add	r5, r5, #3680
.LPIC1349:
	add	r1, pc, r1
	add	r5, r5, #12
.LPIC1353:
	add	r9, pc, r9
	mov	r2, r5
	bl	__mutex_init(PLT)
	ldr	r1, .L6104+16
	mov	r2, r5
	add	r0, r4, #120
	str	r8, [r4, #28]
.LPIC1351:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	mov	r2, r5
	mov	r1, r9
	str	r8, [r4, #36]
	add	r0, r4, #40
	bl	__init_waitqueue_head(PLT)
	mov	r2, r5
	mov	r1, r9
	str	r8, [r4, #72]
	add	r0, r4, #76
	bl	__init_waitqueue_head(PLT)
	mov	r2, r5
	mov	r1, r9
	str	r8, [r4, #56]
	add	r0, r4, #60
	mov	r5, #4096
	bl	__init_waitqueue_head(PLT)
	strh	r10, [r4, #110]	@ movhi
	ldr	r1, .L6104+20
	movw	ip, #29537
	str	r6, [r4, #204]
	ldr	r3, [r7, #16]
	movt	ip, 2660
	mov	lr, #12
	mov	r0, r6
.LPIC1359:
	add	r1, pc, r1
	str	r3, [r4, #140]
	ldrd	r2, [r7]
	strd	r2, [r4, #208]
	ldr	r3, [r7, #8]
	str	r3, [r4, #216]
	str	r5, [r6, #16]
	str	r10, [r6, #508]
	str	r4, [r6, #496]
	str	ip, [r6, #56]
	str	r1, [r6, #36]
	strb	lr, [r6, #13]
	ldrh	r3, [r7, #12]
	strh	r3, [r7]	@ movhi
	bl	new_inode(PLT)
	subs	r5, r0, #0
	beq	.L6082
	mov	r0, sp
	bl	current_kernel_time(PLT)
	bl	get_next_ino(PLT)
	str	r0, [r5, #40]
	ldrh	ip, [r7]
	ldr	r0, .L6104+24
	ldr	r1, .L6104+28
	ldrd	r2, [sp]
	strh	ip, [r5]	@ movhi
	ldr	ip, [r7, #4]
.LPIC1364:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
.LPIC1363:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	str	ip, [r5, #4]
	ldr	ip, [r7, #8]
	str	r8, [r5, #348]
	str	r0, [r5, #208]
	str	r1, [r5, #24]
	str	ip, [r5, #8]
	strd	r2, [r5, #52]
	strd	r2, [r5, #60]
	strd	r2, [r5, #68]
.L6082:
	mov	r0, r5
	bl	d_make_root(PLT)
	cmp	r0, #0
	str	r0, [r6, #60]
	beq	.L6086
	ldr	r1, .L6104+32
	ldr	r7, [r6, #496]
.LPIC1360:
	add	r1, pc, r1
	bl	d_alloc_name(PLT)
	subs	r8, r0, #0
	beq	.L6086
	mov	r0, r6
	bl	new_inode(PLT)
	subs	r5, r0, #0
	beq	.L6087
	mov	r0, sp
	bl	current_kernel_time(PLT)
	bl	get_next_ino(PLT)
	str	r0, [r5, #40]
	ldrh	r2, [r7, #208]
	ldr	r3, .L6104+36
	ldrd	r0, [sp]
	strh	r2, [r5]	@ movhi
	ldr	r2, [r7, #212]
.LPIC1361:
	add	r3, pc, r3
	adds	r3, r3, #108
	str	r2, [r5, #4]
	ldr	r2, [r7, #216]
	strd	r0, [r5, #52]
	strd	r0, [r5, #60]
	strd	r0, [r5, #68]
	mov	r1, r5
	mov	r0, r8
	str	r2, [r5, #8]
	strne	r3, [r5, #208]
	str	r4, [r5, #348]
	bl	d_instantiate(PLT)
	mov	r0, r8
	bl	d_rehash(PLT)
	mov	r0, #0
.L6102:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6087:
	mov	r0, r8
	bl	dput(PLT)
.L6086:
	mvn	r0, #11
	b	.L6102
.L6089:
	mov	r4, #16
	b	.L6080
.L6105:
	.align	2
.L6104:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1365+8))
	.word	.LANCHOR4-(.LPIC1350+8)
	.word	.LC335-(.LPIC1349+8)
	.word	.LC337-(.LPIC1353+8)
	.word	.LC336-(.LPIC1351+8)
	.word	.LANCHOR6-(.LPIC1359+8)
	.word	simple_dir_operations(GOT_PREL)+(.-(.LPIC1364+8))
	.word	simple_dir_inode_operations(GOT_PREL)+(.-(.LPIC1363+8))
	.word	.LC338-(.LPIC1360+8)
	.word	.LANCHOR6-(.LPIC1361+8)
	.fnend
	.size	ffs_sb_fill, .-ffs_sb_fill
	.align	2
	.type	_snd_pcm_hw_param_set.constprop.104, %function
_snd_pcm_hw_param_set.constprop.104:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #36]
	cmp	r3, #0
	beq	.L6107
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L6124
	ldr	r4, [r0, #40]
	adds	r4, r4, #0
	movne	r4, #1
.L6108:
	mov	r6, r1, lsr #5
	and	r2, r1, #31
	mov	r7, #1
	add	r6, r5, r6, asl #2
	add	r0, r5, #36
	mov	r1, #32
	ldr	r3, [r6, #36]
	and	r7, r3, r7, asl r2
	bl	__memzero(PLT)
	str	r7, [r6, #36]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L6110
	ldr	r3, [r5, #40]
	cmp	r3, #0
	mvneq	r0, #21
	bne	.L6110
.L6111:
	ldr	r2, [r5, #516]
	ldr	r3, [r5, #512]
	orr	r2, r2, #2
	orr	r3, r3, #2
	str	r2, [r5, #516]
	str	r3, [r5, #512]
	b	.L6120
.L6110:
	cmp	r4, #0
	movne	r0, #1
	bne	.L6111
	mov	r0, r4
.L6120:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6107:
	ldr	r0, [r0, #40]
	cmp	r0, #0
	beq	.L6114
	sub	r3, r0, #1
	tst	r3, r0
	movne	r4, #1
	moveq	r4, #0
	b	.L6108
.L6124:
	mov	r4, #1
	b	.L6108
.L6114:
	mov	r4, r0
	b	.L6108
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.104, .-_snd_pcm_hw_param_set.constprop.104
	.align	2
	.type	_snd_pcm_hw_param_set.constprop.103, %function
_snd_pcm_hw_param_set.constprop.103:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #4]
	cmp	r3, #0
	beq	.L6126
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L6143
	ldr	r4, [r0, #8]
	adds	r4, r4, #0
	movne	r4, #1
.L6127:
	mov	r6, r1, lsr #5
	and	r2, r1, #31
	mov	r7, #1
	add	r6, r5, r6, asl #2
	add	r0, r5, #4
	mov	r1, #32
	ldr	r3, [r6, #4]
	and	r7, r3, r7, asl r2
	bl	__memzero(PLT)
	str	r7, [r6, #4]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L6129
	ldr	r3, [r5, #8]
	cmp	r3, #0
	mvneq	r0, #21
	bne	.L6129
.L6130:
	ldr	r2, [r5, #516]
	ldr	r3, [r5, #512]
	orr	r2, r2, #1
	orr	r3, r3, #1
	str	r2, [r5, #516]
	str	r3, [r5, #512]
	b	.L6139
.L6129:
	cmp	r4, #0
	movne	r0, #1
	bne	.L6130
	mov	r0, r4
.L6139:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6126:
	ldr	r0, [r0, #8]
	cmp	r0, #0
	beq	.L6133
	sub	r3, r0, #1
	tst	r3, r0
	movne	r4, #1
	moveq	r4, #0
	b	.L6127
.L6143:
	mov	r4, #1
	b	.L6127
.L6133:
	mov	r4, r0
	b	.L6127
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.103, .-_snd_pcm_hw_param_set.constprop.103
	.align	2
	.type	_snd_pcm_hw_param_set.constprop.106, %function
_snd_pcm_hw_param_set.constprop.106:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	mov	r4, r0
	str	lr, [sp, #4]
	.pad #16
	sub	sp, sp, #16
	add	r0, r0, #296
	ldrb	r3, [sp, #12]	@ zero_extendqisi2
	add	r1, sp, #4
	str	r2, [sp, #8]
	str	r2, [sp, #4]
	and	r3, r3, #244
	orr	r3, r3, #4
	strb	r3, [sp, #12]
	bl	snd_interval_refine(PLT)
	cmp	r0, #0
	beq	.L6145
	ldr	r2, [r4, #516]
	ldr	r3, [r4, #512]
	orr	r2, r2, #2048
	orr	r3, r3, #2048
	str	r2, [r4, #516]
	str	r3, [r4, #512]
.L6145:
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.106, .-_snd_pcm_hw_param_set.constprop.106
	.align	2
	.type	ffs_func_suspend, %function
ffs_func_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #-44]
	add	r4, r6, #120
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #100]
	mov	r5, r0
	add	r0, r6, #104
	ldrh	ip, [r6, #108]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r6, #100]
	cmp	ip, #0
	beq	.L6156
	add	ip, r0, ip
	mov	r3, r0
	mov	r1, r0
.L6154:
	ldrb	r2, [r3], #1	@ zero_extendqisi2
	cmp	r2, #5
	strneb	r2, [r1]
	addne	r1, r1, #1
	cmp	r3, ip
	bne	.L6154
	rsb	r1, r0, r1
	add	r3, r1, #1
	uxth	ip, r1
	uxth	r3, r3
.L6152:
	add	ip, r6, ip
	strh	r3, [r6, #108]	@ movhi
	mov	r2, #5
	mov	r0, r4
	mov	r1, #3
	strb	r2, [ip, #104]
	mov	r2, #1
	bl	__wake_up_locked(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	mov	r1, r5
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L6156:
	mov	r3, #1
	b	.L6152
	.fnend
	.size	ffs_func_suspend, .-ffs_func_suspend
	.align	2
	.type	ffs_func_resume, %function
ffs_func_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r6, [r0, #-44]
	add	r4, r6, #120
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #100]
	mov	r5, r0
	add	lr, r6, #104
	ldrh	ip, [r6, #108]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r6, #100]
	cmp	ip, #0
	beq	.L6165
	add	ip, lr, ip
	mov	r3, lr
	mov	r1, lr
.L6163:
	ldrb	r2, [r3], #1	@ zero_extendqisi2
	sub	r0, r2, #5
	cmp	r0, #1
	strhib	r2, [r1]
	addhi	r1, r1, #1
	cmp	r3, ip
	bne	.L6163
	rsb	r1, lr, r1
	add	r3, r1, #1
	uxth	ip, r1
	uxth	r3, r3
.L6161:
	add	ip, r6, ip
	strh	r3, [r6, #108]	@ movhi
	mov	r2, #6
	mov	r0, r4
	mov	r1, #3
	strb	r2, [ip, #104]
	mov	r2, #1
	bl	__wake_up_locked(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	mov	r1, r5
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L6165:
	mov	r3, #1
	b	.L6161
	.fnend
	.size	ffs_func_resume, .-ffs_func_resume
	.align	2
	.type	gs_put_char, %function
gs_put_char:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r4, [r0, #280]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #92]
	mov	r1, r0
	ldr	r3, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r3, r5
	rsb	r3, r0, r3
	sub	r3, r3, #1
	udiv	r2, r3, r5
	mls	r3, r5, r2, r3
	cmp	r3, #0
	moveq	r5, r3
	beq	.L6169
	ldr	r3, [r4, #96]
	add	r5, r3, r5
	subs	r5, r5, r0
	bne	.L6181
	strb	r6, [r3]
	ldr	r3, [r4, #96]
	mov	r5, #1
	add	r3, r3, r5
	str	r3, [r4, #104]
.L6169:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6181:
	cmp	r5, #1
	strb	r6, [r0]
	ldrne	r3, [r4, #104]
	movne	r5, #1
	ldreq	r3, [r4, #96]
	addne	r3, r3, r5
	str	r3, [r4, #104]
	b	.L6169
	.fnend
	.size	gs_put_char, .-gs_put_char
	.align	2
	.type	fsg_store_nofua, %function
fsg_store_nofua:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r1, #2
	mov	r5, r0
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r2
	add	r2, sp, #4
	mov	r4, r3
	bl	kstrtouint(PLT)
	cmp	r0, #0
	bne	.L6183
	ldr	r3, [sp, #4]
	cmp	r3, #0
	beq	.L6190
.L6184:
	ldrb	r2, [r5, #-24]	@ zero_extendqisi2
	mov	r0, r4
	bfi	r2, r3, #7, #1
	strb	r2, [r5, #-24]
.L6183:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L6190:
	ldrb	r2, [r5, #-24]	@ zero_extendqisi2
	tst	r2, #128
	beq	.L6184
	ldr	r0, [r5, #-48]
	ubfx	r2, r2, #1, #1
	cmp	r0, #0
	orreq	r2, r2, #1
	cmp	r2, #0
	bne	.L6184
	mov	r1, #1
	bl	vfs_fsync(PLT)
	ldr	r3, [sp, #4]
	b	.L6184
	.fnend
	.size	fsg_store_nofua, .-fsg_store_nofua
	.align	2
	.type	acc_function_unbind, %function
acc_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r5, r1, #80
	strd	r8, [sp, #16]
	mov	r9, #256
	mov	r8, #512
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r10, [sp, #24]
	add	r10, r1, #1648
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.L6192:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r6, #1648]
	mov	r3, r0
	mov	r0, r5
	mov	r1, r3
	cmp	r4, r10
	sub	r7, r4, #36
	beq	.L6193
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r7, #0
	beq	.L6204
	ldr	fp, [r6, #84]
	ldr	r0, [r4, #-36]
	bl	kfree(PLT)
	mov	r1, r7
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	b	.L6192
.L6193:
	mov	r1, r3
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
.L6204:
	mov	r7, #0
.L6196:
	add	r3, r7, #420
	ldr	r8, [r6, #88]
	ldr	r4, [r6, r3, asl #2]
	cmp	r4, #0
	beq	.L6195
	ldr	r0, [r4]
	bl	kfree(PLT)
	ldr	r3, [r8, #8]
	mov	r1, r4
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L6195:
	cmp	r7, #1
	mov	r7, #1
	bne	.L6196
	ldr	r0, .L6213
.LPIC1366:
	add	r0, pc, r0
	add	r0, r0, #596
	bl	hid_unregister_driver(PLT)
	cmp	r6, #0
	beq	.L6191
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	ip, r6
	mov	r1, r0
	ldr	r3, [ip, #1756]!
	cmp	ip, r3
	ldr	r2, [r3]
	addne	lr, r6, #1760
	movne	r7, #256
	addne	lr, lr, #12
	movne	r4, #512
	beq	.L6202
.L6201:
	ldr	r0, [r3, #4]
	cmp	r2, ip
	str	r0, [r2, #4]
	str	r2, [r0]
	str	r7, [r3]
	str	r4, [r3, #4]
	ldr	r0, [r6, #1772]
	str	r3, [r0, #4]
	stmia	r3, {r0, lr}
	str	r3, [r6, #1772]
	mov	r3, r2
	ldr	r2, [r2]
	bne	.L6201
.L6202:
	mov	ip, r6
	ldr	r3, [ip, #1764]!
	cmp	r3, ip
	ldr	r2, [r3]
	addne	lr, r6, #1760
	movne	r7, #256
	addne	lr, lr, #12
	movne	r4, #512
	beq	.L6200
.L6203:
	ldr	r0, [r3, #4]
	cmp	ip, r2
	str	r0, [r2, #4]
	str	r2, [r0]
	str	r7, [r3]
	str	r4, [r3, #4]
	ldr	r0, [r6, #1772]
	str	r3, [r0, #4]
	stmia	r3, {r0, lr}
	str	r3, [r6, #1772]
	mov	r3, r2
	ldr	r2, [r2]
	bne	.L6203
.L6200:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r0, r6, #1728
	add	r0, r0, #12
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	schedule_work(PLT)
.L6191:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6214:
	.align	2
.L6213:
	.word	.LANCHOR0-(.LPIC1366+8)
	.fnend
	.size	acc_function_unbind, .-acc_function_unbind
	.align	2
	.type	qdss_disable, %function
qdss_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #180
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #84]
	mov	r1, r0
	cmp	r3, #0
	beq	.L6230
	mov	r6, #0
	mov	r0, r5
	str	r6, [r4, #84]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrb	r3, [r4, #184]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L6231
	tst	r3, #4
	bne	.L6232
.L6218:
	tst	r3, #1
	bne	.L6233
.L6219:
	ldr	r0, [r4, #188]
	add	r1, r4, #164
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work(PLT)
.L6233:
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #184]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r4, #184]
	b	.L6219
.L6230:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L6232:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #184]	@ zero_extendqisi2
	bfc	r2, #2, #1
	uxtb	r3, r2
	strb	r2, [r4, #184]
	tst	r3, #1
	beq	.L6219
	b	.L6233
.L6231:
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #184]	@ zero_extendqisi2
	bfi	r2, r6, #1, #1
	uxtb	r3, r2
	strb	r2, [r4, #184]
	tst	r3, #4
	beq	.L6218
	b	.L6232
	.fnend
	.size	qdss_disable, .-qdss_disable
	.align	2
	.type	ffs_func_setup, %function
ffs_func_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #-44]
	ldr	r3, [r4, #96]
	cmp	r3, #2
	bne	.L6246
	ldrb	r3, [r1]	@ zero_extendqisi2
	and	r3, r3, #31
	cmp	r3, #1
	beq	.L6236
	cmp	r3, #2
	beq	.L6237
	mvn	r0, #94
.L6255:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6237:
	ldrh	r3, [r1, #4]	@ unaligned
	and	r3, r3, #15
	add	r0, r0, r3
	ldrb	r2, [r0, #-36]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L6250
	mov	r8, r2
.L6239:
	add	r5, r4, #120
	mov	r7, r1
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r1, [r4, #100]
	mov	r6, r0
	add	r0, r4, #104
	ldr	r3, [r7, #4]	@ unaligned
	ldr	r2, [r7]	@ unaligned
	ldrh	ip, [r4, #108]
	cmp	r1, #1
	strd	r2, [r4, #112]
	moveq	r3, #2
	strh	r8, [r4, #116]	@ movhi
	streq	r3, [r4, #100]
	cmp	ip, #0
	beq	.L6251
	add	ip, r0, ip
	mov	r3, r0
	mov	r1, r0
.L6244:
	ldrb	r2, [r3], #1	@ zero_extendqisi2
	cmp	r2, #4
	strneb	r2, [r1]
	addne	r1, r1, #1
	cmp	r3, ip
	bne	.L6244
	rsb	r1, r0, r1
	add	r3, r1, #1
	uxth	ip, r1
	uxth	r3, r3
.L6242:
	add	ip, r4, ip
	strh	r3, [r4, #108]	@ movhi
	mov	r2, #4
	mov	r0, r5
	mov	r1, #3
	strb	r2, [ip, #104]
	mov	r2, #1
	bl	__wake_up_locked(PLT)
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L6255
.L6236:
	ldrh	ip, [r4, #182]
	ldrh	r6, [r1, #4]	@ unaligned
	ldr	lr, [r0, #-8]
	cmp	ip, #0
	uxtb	r5, r6
	beq	.L6250
	mov	r2, lr
.L6240:
	mov	r0, r2
	ldrh	r3, [r2], #2
	sxth	r3, r3
	cmp	r3, #0
	blt	.L6238
	cmp	r3, r5
	beq	.L6259
.L6238:
	subs	ip, ip, #1
	bne	.L6240
.L6250:
	mvn	r0, #32
	b	.L6255
.L6259:
	rsb	r3, lr, r0
	mov	r3, r3, asr #1
	cmp	r3, #0
	mov	r8, r3
	bge	.L6239
	mov	r0, r3
	b	.L6255
.L6246:
	mvn	r0, #18
	b	.L6255
.L6251:
	mov	r3, #1
	b	.L6242
	.fnend
	.size	ffs_func_setup, .-ffs_func_setup
	.align	2
	.type	rmnet_sdio_complete_epout, %function
rmnet_sdio_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #44]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [r0]
	ldr	r6, [r1, #32]
	cmn	r3, #104
	ldr	r8, [r4, #76]
	beq	.L6262
	cmp	r3, #0
	beq	.L6263
	cmn	r3, #108
	beq	.L6262
	ldr	lr, [r1, #48]
	ldr	ip, [r1, #4]
	ldr	r0, [r8]
	ldr	r1, .L6289
	ldr	r2, [r7, #4]
	str	lr, [sp]
	str	ip, [sp, #4]
	add	r0, r0, #32
.LPIC1369:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #308]
	tst	r3, #2
	beq	.L6265
	add	r7, r4, #180
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
.L6270:
	ldr	r3, .L6289+4
	ldr	r2, [r4, #316]
.LPIC1372:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3]
	cmp	r2, r3
	bcs	.L6287
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	movw	r0, #2056
	mov	r1, #32
	mov	r2, #0
	mvn	r3, #0
	bl	__alloc_skb(PLT)
	subs	r6, r0, #0
	beq	.L6271
	ldr	r3, [r6, #172]
	mov	ip, #2048
	mov	r1, r5
	ldr	r0, [r6, #160]
	mov	r2, #32
	add	r3, r3, #8
	add	r0, r0, #8
	str	r3, [r6, #172]
	str	r0, [r6, #160]
	str	r3, [r5]
	str	r6, [r5, #32]
	str	ip, [r5, #4]
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bne	.L6288
.L6260:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6265:
	ldr	r1, .L6289+8
	ldr	r0, .L6289+12
.LPIC1368:
	add	r1, pc, r1
	add	r1, r1, #2576
.LPIC1367:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
.L6262:
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
	mov	r3, #0
	mov	r0, r3
	str	r3, [r5]
	bl	kfree(PLT)
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L6263:
	mov	r0, r6
	ldr	r1, [r1, #48]
	bl	skb_put(PLT)
	ldr	r3, [r4, #308]
	tst	r3, #2
	beq	.L6265
	add	r7, r4, #180
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #168]
	add	r2, r4, #164
	add	r1, r4, #228
	strd	r2, [r6]
	str	r6, [r3]
	ldr	r3, [r4, #172]
	str	r6, [r4, #168]
	ldr	r0, [r4, #192]
	add	r3, r3, #1
	str	r3, [r4, #172]
	bl	queue_work(PLT)
	b	.L6270
.L6287:
	ldr	r3, [r4, #156]
	add	r2, r5, #36
	add	r1, r4, #152
	mov	r0, r7
	str	r2, [r4, #156]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	ldr	r3, [r4, #160]
	add	r3, r3, #1
	str	r3, [r4, #160]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L6288:
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
.L6268:
	ldr	r0, [r8]
	mov	r2, r7
	ldr	r1, .L6289+16
	add	r0, r0, #32
.LPIC1371:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldr	r3, [r4, #156]
	add	r2, r5, #36
	add	r1, r4, #152
	str	r2, [r4, #156]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	ldr	r3, [r4, #160]
	add	r3, r3, #1
	str	r3, [r4, #160]
	b	.L6260
.L6271:
	mvn	r7, #11
	b	.L6268
.L6290:
	.align	2
.L6289:
	.word	.LC118-(.LPIC1369+8)
	.word	sdio_rx_fctrl_en_thld(GOT_PREL)+(.-(.LPIC1372+8))
	.word	.LANCHOR3-(.LPIC1368+8)
	.word	.LC142-(.LPIC1367+8)
	.word	.LC20-(.LPIC1371+8)
	.fnend
	.size	rmnet_sdio_complete_epout, .-rmnet_sdio_complete_epout
	.align	2
	.type	gs_close, %function
gs_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r4, [r0, #280]
	.pad #28
	sub	sp, sp, #28
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #1
	beq	.L6292
	cmp	r3, #0
	subne	r3, r3, #1
	strne	r3, [r4, #12]
	beq	.L6332
.L6294:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L6292:
	ldr	r0, [r4, #4]
	mov	r2, #0
	strb	r3, [r4, #16]
	str	r2, [r4, #12]
	cmp	r0, r2
	beq	.L6295
	ldr	r3, [r0, #112]
	cmp	r3, r2
	beq	.L6296
	blx	r3
.L6296:
	ldr	r1, [r4, #92]
	ldr	r0, [r4, #104]
	ldr	r2, [r4, #100]
	add	r3, r0, r1
	rsb	r3, r2, r3
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	beq	.L6303
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L6297
	ldr	r1, [r4, #92]
	ldrd	r2, [r4, #100]
	add	r3, r3, r1
	rsb	r3, r2, r3
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	beq	.L6297
	mov	r0, r4
	add	r8, r4, #108
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r2, .L6333
	mov	r3, sp
	movw	r7, #4500
	bic	r6, r3, #8128
	mov	r3, #0
	bic	r6, r6, #63
	add	r9, sp, #4
	ldr	r1, [r6, #12]
	str	r3, [sp, #4]
	add	r3, sp, #16
.LPIC1375:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
.L6302:
	mov	r0, r8
	mov	r1, r9
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #4]
	mov	r0, r4
	cmp	r3, #0
	beq	.L6299
	ldr	r1, [r4, #92]
	ldrd	r2, [r4, #100]
	add	r3, r3, r1
	rsb	r3, r2, r3
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	beq	.L6299
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r6, #12]
	mov	r0, r7
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L6305
	bl	schedule_timeout(PLT)
	subs	r7, r0, #0
	bne	.L6302
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
.L6305:
	mov	r0, r8
	mov	r1, r9
	bl	finish_wait(PLT)
.L6306:
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L6295
	ldr	r0, [r4, #104]
.L6303:
	str	r0, [r4, #100]
.L6304:
	mov	ip, #0
	mov	r1, #1
	mov	r3, ip
	mov	r2, r1
	str	ip, [r5, #280]
	add	r0, r4, #20
	str	ip, [r4, #8]
	strb	ip, [r4, #16]
	bl	__wake_up(PLT)
	b	.L6294
.L6332:
	ldr	r0, .L6333+4
	movw	r1, #890
.LPIC1373:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L6294
.L6299:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	b	.L6305
.L6297:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	b	.L6306
.L6295:
	ldr	r0, [r4, #96]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #96]
	b	.L6304
.L6334:
	.align	2
.L6333:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1375+8))
	.word	.LC339-(.LPIC1373+8)
	.fnend
	.size	gs_close, .-gs_close
	.align	2
	.type	acc_write, %function
acc_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #124]
	.pad #52
	sub	sp, sp, #52
	str	r2, [sp, #4]
	ldrb	r3, [r6, #92]	@ zero_extendqisi2
	and	r2, r3, #3
	cmp	r2, #1
	bne	.L6353
	cmp	r4, #0
	beq	.L6354
	tst	r3, #1
	beq	.L6337
	mov	r3, sp
	mov	r9, r1
	bic	r8, r3, #8128
	add	r10, r6, #1648
	bic	r8, r8, #63
	add	r7, r6, #80
.L6338:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #1648]
	mov	r1, r0
	cmp	r10, r3
	beq	.L6339
	ldr	r2, [r3, #4]
	mov	lr, #512
	mov	fp, #256
	ldr	ip, [r3]
	sub	r5, r3, #36
	mov	r0, r7
	str	r2, [ip, #4]
	str	ip, [r2]
	stmia	r3, {fp, lr}
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r5, #0
	beq	.L6351
.L6340:
	cmp	r4, #16384
	movhi	fp, #16384
	movhi	r3, #0
	bhi	.L6345
	ldr	r3, [r6, #84]
	mov	fp, r4
	ldrh	r2, [r3, #20]
	sdiv	r3, r4, r2
	mls	r3, r2, r3, r4
	clz	r3, r3
	mov	r3, r3, lsr #5
.L6345:
	ldrb	r2, [r5, #26]	@ zero_extendqisi2
	ldr	r0, [r5]
	bfi	r2, r3, #1, #1
	strb	r2, [r5, #26]
	ldr	r3, [r8, #8]
#APP
@ 439 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, fp; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L6373
	mov	r1, fp
	mvn	r4, #13
	bl	__memzero(PLT)
.L6346:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #1652]
	add	r2, r5, #36
	mov	r1, r0
	mov	r0, r7
	str	r2, [r6, #1652]
	str	r10, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
.L6367:
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6373:
	mov	r1, r9
	mov	r2, fp
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	bne	.L6374
	str	fp, [r5, #4]
	ldr	r0, [r6, #84]
	mov	r1, r5
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L6360
	subs	r4, r4, fp
	add	r9, r9, fp
	beq	.L6375
	ldrb	r3, [r6, #92]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L6338
.L6337:
	mvn	r0, #4
	b	.L6367
.L6339:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
.L6351:
	ldrb	r0, [r6, #92]	@ zero_extendqisi2
	ands	r0, r0, #1
	beq	.L6367
	ldr	r2, .L6377
	add	r3, r6, #1664
	add	ip, sp, #28
	ldr	r1, [r8, #12]
	mov	r0, r3
	mov	r3, #0
	add	r0, r0, #4
	str	r9, [sp, #16]
	mov	r9, ip
	str	r3, [sp, #28]
	add	r3, sp, #40
.LPIC1377:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r4, [sp, #20]
	mov	r4, r0
	str	r0, [sp, #8]
	str	ip, [sp, #12]
	str	r3, [sp, #40]
	str	r3, [sp, #44]
	str	r1, [sp, #32]
	str	r2, [sp, #36]
	b	.L6344
.L6376:
	bl	schedule(PLT)
.L6344:
	mov	r1, r9
	mov	r2, #1
	mov	r0, r4
	mov	fp, #256
	bl	prepare_to_wait(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #1648]
	mov	r2, r0
	mov	lr, #512
	mov	r0, r7
	mov	r1, r2
	cmp	r10, r3
	sub	r5, r3, #36
	beq	.L6341
	ldr	r2, [r3, #4]
	ldr	ip, [r3]
	str	r2, [ip, #4]
	str	ip, [r2]
	stmia	r3, {fp, lr}
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r5, #0
	bne	.L6342
.L6352:
	ldrb	r3, [r6, #92]	@ zero_extendqisi2
	ands	r3, r3, #1
	beq	.L6356
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L6376
	mov	r5, #65024
	movt	r5, 65535
.L6343:
	ldrd	r0, [sp, #8]
	bl	finish_wait(PLT)
	mov	r0, r5
	b	.L6367
.L6353:
	mvn	r0, #18
	b	.L6367
.L6354:
	mov	r0, r4
	b	.L6367
.L6342:
	ldrd	r0, [sp, #8]
	ldr	r9, [sp, #16]
	ldr	r4, [sp, #20]
	bl	finish_wait(PLT)
	b	.L6340
.L6356:
	mov	r5, r3
	b	.L6343
.L6341:
	mov	r1, r2
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L6352
.L6360:
	mvn	r4, #4
	b	.L6346
.L6375:
	ldr	r0, [sp, #4]
	b	.L6367
.L6374:
	mvn	r4, #13
	b	.L6346
.L6378:
	.align	2
.L6377:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1377+8))
	.fnend
	.size	acc_write, .-acc_write
	.align	2
	.type	fmbim_reset_cmd_complete, %function
fmbim_reset_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	add	r5, r4, #196
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, .L6387
.LPIC1379:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L6382
	movw	r1, #32800
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	beq	.L6386
.L6380:
	mov	r1, #16
	mov	r2, #0
	mov	r3, r0
	stmia	r0, {r1, r2}
.L6381:
	ldr	r2, [r4, #204]
	add	r1, r3, #8
	add	ip, r4, #200
	mov	r0, r5
	str	r1, [r4, #204]
	str	ip, [r3, #8]
	str	r2, [r3, #12]
	str	r1, [r2]
	bl	_raw_spin_unlock(PLT)
	ldr	r6, [sp, #8]
	add	r0, r4, #100
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up(PLT)
.L6382:
	mov	r0, #16
	b	.L6380
.L6386:
	mvn	r3, #11
	b	.L6381
.L6388:
	.align	2
.L6387:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1379+8))
	.fnend
	.size	fmbim_reset_cmd_complete, .-fmbim_reset_cmd_complete
	.align	2
	.type	gqti_ctrl_notify_modem, %function
gqti_ctrl_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6399
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC1380:
	add	r3, pc, r3
	ldr	r4, [r3, #-508]
	add	r5, r4, #52
	str	r2, [r4, #12]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldrb	r3, [r4, #4]	@ zero_extendqisi2
	mov	r6, r0
	cmp	r3, #0
	beq	.L6397
	ldr	r3, .L6399+4
.LPIC1384:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L6393
	movw	r1, #32800
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	beq	.L6398
.L6391:
	mov	r1, #16
	mov	r2, #0
	mov	r3, r0
	stmia	r0, {r1, r2}
.L6392:
	ldr	r2, [r4, #48]
	add	ip, r3, #8
	add	lr, r4, #44
	mov	r0, r5
	mov	r1, r6
	str	ip, [r4, #48]
	str	lr, [r3, #8]
	str	r2, [r3, #12]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	add	r0, r4, #32
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up(PLT)
.L6393:
	mov	r0, #16
	b	.L6391
.L6398:
	mvn	r3, #11
	b	.L6392
.L6397:
	ldr	r1, .L6399+8
	mov	r2, r4
	ldr	r0, .L6399+12
.LPIC1382:
	add	r1, pc, r1
	add	r1, r1, #2608
.LPIC1381:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	lr, [sp, #12]
	mov	r0, r5
	mov	r1, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L6400:
	.align	2
.L6399:
	.word	.LANCHOR4-(.LPIC1380+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1384+8))
	.word	.LANCHOR3-(.LPIC1382+8)
	.word	.LC340-(.LPIC1381+8)
	.fnend
	.size	gqti_ctrl_notify_modem, .-gqti_ctrl_notify_modem
	.align	2
	.type	rmnet_mux_disable, %function
rmnet_mux_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #360]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r3, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #88]
	str	r3, [r4, #360]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L6403
	blx	r2
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
.L6403:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r6, [r4, #92]
	ldr	r5, [r4, #88]
	ldr	r0, [r6]
	bl	kfree(PLT)
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L6404
	blx	r2
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
.L6404:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L6405
	blx	r2
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
.L6405:
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	ldr	r0, [r4, #368]
	add	r1, r4, #372
	str	r3, [r4, #340]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work(PLT)
	.fnend
	.size	rmnet_mux_disable, .-rmnet_mux_disable
	.align	2
	.type	fsg_disable, %function
fsg_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r3, [r0, #86]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L6432
.L6417:
	tst	r3, #2
	beq	.L6418
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #86]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r2, [r4, #96]
	bfc	r3, #1, #1
	strb	r3, [r4, #86]
	str	r1, [r2]
.L6418:
	ldr	r3, [r4, #80]
	mov	r2, #0
	str	r2, [r3, #12]
	ldr	r4, [r4, #80]
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #112]
	mov	r6, r0
	cmp	r3, #4
	bgt	.L6420
	ldr	r2, [r4, #168]
	mov	r1, #4
	ldr	r3, [r4, #56]
	str	r1, [r4, #112]
	cmp	r2, #0
	str	r3, [r4, #116]
	beq	.L6420
	mov	r0, #10
	mov	r1, #2
	bl	send_sig_info(PLT)
.L6420:
	mov	r0, r5
	mov	r1, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L6432:
	ldr	r0, [r0, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #86]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r2, [r4, #92]
	bfc	r3, #0, #1
	strb	r3, [r4, #86]
	str	r1, [r2]
	ldrb	r3, [r4, #86]	@ zero_extendqisi2
	b	.L6417
	.fnend
	.size	fsg_disable, .-fsg_disable
	.align	2
	.type	mbim_setup, %function
mbim_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #80]
	.pad #28
	sub	sp, sp, #28
	ldr	r8, [r0, #76]
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	r10, [r1, #2]	@ unaligned
	cmp	r3, #0
	ldrh	r7, [r1, #6]	@ unaligned
	ldr	r6, [r8, #4]
	beq	.L6476
	ldrb	r3, [r1]	@ zero_extendqisi2
	movw	r2, #8582
	ldrb	r0, [r1, #1]	@ zero_extendqisi2
	orr	r1, r0, r3, asl #8
	cmp	r1, r2
	beq	.L6437
	ble	.L6477
	movw	r2, #41344
	cmp	r1, r2
	beq	.L6442
	ble	.L6478
	movw	r2, #41347
	cmp	r1, r2
	beq	.L6445
	movw	r2, #41349
	cmp	r1, r2
	bne	.L6436
	cmp	r7, #3
	movhi	r2, #0
	movls	r2, #1
	cmp	r10, #0
	orrne	r2, r2, #1
	cmp	r2, #0
	bne	.L6449
	ldrb	r1, [r5, #188]	@ zero_extendqisi2
	cmp	r1, r9
	beq	.L6479
.L6472:
	mov	r10, r2
	b	.L6449
.L6477:
	movw	r2, #8453
	cmp	r1, r2
	beq	.L6439
	movw	r2, #8580
	cmp	r1, r2
	beq	.L6440
	cmp	r1, #8448
	beq	.L6480
.L6436:
	ldr	r1, .L6485
	mov	r2, r3
	mov	r3, r0
	ldr	r0, .L6485+4
	str	r9, [sp, #4]
	str	r7, [sp, #8]
	str	r10, [sp]
.LPIC1401:
	add	r1, pc, r1
	add	r1, r1, #2624
.LPIC1400:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldrb	r3, [r4]	@ zero_extendqisi2
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
.L6449:
	ldr	r1, .L6485+8
	stmia	sp, {r0, r10}
	mvn	r2, #94
	ldr	r0, .L6485+12
	str	r9, [sp, #8]
	str	r7, [sp, #12]
.LPIC1405:
	add	r1, pc, r1
	add	r1, r1, #2624
.LPIC1404:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #94
.L6469:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6440:
	cmp	r7, #0
	bne	.L6449
	ldrb	r2, [r5, #188]	@ zero_extendqisi2
	cmp	r2, r9
	bne	.L6449
	cmp	r10, #0
	beq	.L6464
	cmp	r10, #1
	bne	.L6481
	ldr	r3, .L6485+16
	mov	r9, r7
	mov	fp, r7
.LPIC1399:
	add	r3, pc, r3
	add	r3, r3, #552
	str	r3, [r5, #192]
	b	.L6447
.L6445:
	cmp	r7, #1
	movhi	r2, #0
	movls	r2, #1
	cmp	r10, #0
	orrne	r2, r2, #1
	cmp	r2, #0
	bne	.L6449
	ldrb	r1, [r5, #188]	@ zero_extendqisi2
	cmp	r1, r9
	bne	.L6472
	ldr	r3, .L6485+20
	cmp	r7, #2
	mov	r9, #2
	ldr	r1, [r5, #192]
	movle	fp, #0
	movgt	fp, #1
	ldr	r0, [r6]
.LPIC1397:
	add	r3, pc, r3
	add	r3, r3, #508
	subs	r3, r1, r3
	strb	r2, [r0, #1]
	movne	r3, #1
	strb	r3, [r0]
	b	.L6447
.L6478:
	movw	r2, #41217
	cmp	r1, r2
	bne	.L6436
	cmp	r10, #0
	bne	.L6482
	add	r3, r5, #196
	mov	r0, r3
	str	r3, [sp, #20]
	bl	_raw_spin_lock(PLT)
	ldr	fp, [r5, #208]!
	ldr	r3, [sp, #20]
	cmp	fp, r5
	beq	.L6483
	ldr	r2, [fp, #4]
	mov	lr, #256
	mov	ip, #512
	ldr	r1, [fp]
	mov	r0, r3
	sub	r5, fp, #8
	str	r2, [r1, #4]
	str	r1, [r2]
	str	lr, [fp]
	str	ip, [fp, #4]
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [fp, #-4]
	ldr	r0, [r6]
	ldr	r1, [fp, #-8]
	cmp	r7, r3
	movcc	r9, r7
	movcs	r9, r3
	mov	r2, r9
	bl	memcpy(PLT)
	cmp	r5, #0
	beq	.L6451
	ldr	r0, [fp, #-8]
	cmp	r9, r7
	movge	fp, #0
	movlt	fp, #1
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
.L6447:
	ldrb	r3, [r6, #26]	@ zero_extendqisi2
	str	r9, [r6, #4]
	mov	r1, r6
	mov	r2, #32
	bfi	r3, fp, #1, #1
	strb	r3, [r6, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	blt	.L6466
	mov	r0, r5
	b	.L6469
.L6442:
	clz	fp, r7
	mov	fp, fp, lsr #5
	cmp	r10, #0
	orrne	fp, fp, #1
	cmp	fp, #0
	bne	.L6449
	ldrb	r2, [r5, #188]	@ zero_extendqisi2
	cmp	r2, r9
	movne	r10, fp
	bne	.L6449
	ldr	r1, .L6485+24
	cmp	r7, #28
	movls	r9, r7
	movhi	r9, #28
	ldr	r0, [r6]
	mov	r2, r9
	movhi	fp, #1
	movls	fp, #0
.LPIC1393:
	add	r1, pc, r1
	add	r1, r1, #128
	bl	memcpy(PLT)
	b	.L6447
.L6480:
	ldr	r3, .L6485+28
	str	r5, [r6, #32]
	mov	r9, r7
	mov	fp, #0
.LPIC1388:
	add	r3, pc, r3
	str	r3, [r6, #28]
	b	.L6447
.L6439:
	ldr	r3, .L6485+32
	adds	fp, r7, #0
	str	r5, [r6, #32]
	movne	fp, #1
	mov	r9, #0
.LPIC1387:
	add	r3, pc, r3
	str	r3, [r6, #28]
	b	.L6447
.L6437:
	sub	r2, r7, #4
	bic	r2, r2, #4
	uxth	r2, r2
	cmp	r2, #0
	bne	.L6484
	cmp	r10, #0
	bne	.L6449
	ldrb	r2, [r5, #188]	@ zero_extendqisi2
	cmp	r2, r9
	bne	.L6449
	ldr	r3, .L6485+36
	str	r5, [r6, #32]
	mov	r9, r7
	mov	fp, r10
.LPIC1396:
	add	r3, pc, r3
	str	r3, [r6, #28]
	b	.L6447
.L6479:
	ldr	r2, [r5, #216]
	cmp	r7, #4
	mov	r9, #4
	ldr	r3, [r6]
	movle	fp, #0
	movgt	fp, #1
	mov	r1, r2, lsr #16
	ubfx	r0, r2, #8, #8
	strb	r2, [r3]
	mov	r2, r1, lsr #8
	strb	r0, [r3, #1]
	strb	r1, [r3, #2]
	strb	r2, [r3, #3]
	b	.L6447
.L6451:
	cmp	r9, r7
	movge	fp, #0
	movlt	fp, #1
	b	.L6447
.L6481:
	mov	r9, r7
	mov	fp, r7
	b	.L6447
.L6464:
	ldr	r3, .L6485+40
	mov	r9, r10
	mov	fp, r10
.LPIC1398:
	add	r3, pc, r3
	add	r3, r3, #508
	str	r3, [r5, #192]
	b	.L6447
.L6476:
	ldr	r1, .L6485+44
	ldr	r0, .L6485+48
.LPIC1386:
	add	r1, pc, r1
	add	r1, r1, #2624
.LPIC1385:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #106
	b	.L6469
.L6466:
	ldr	r1, .L6485+52
	str	r5, [sp]
	ldr	r0, .L6485+56
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
.LPIC1403:
	add	r1, pc, r1
	add	r1, r1, #2624
.LPIC1402:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mov	r0, r5
	b	.L6469
.L6484:
	ldr	r1, .L6485+60
	mov	r2, r7
	ldr	r0, .L6485+64
.LPIC1395:
	add	r1, pc, r1
.LPIC1394:
	add	r0, pc, r0
.L6473:
	add	r1, r1, #2624
	add	r1, r1, #12
	bl	printk(PLT)
	ldrb	r3, [r4]	@ zero_extendqisi2
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	b	.L6449
.L6483:
	ldr	r1, .L6485+68
	ldr	r0, .L6485+72
.LPIC1392:
	add	r1, pc, r1
	add	r1, r1, #2624
.LPIC1391:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r3, [sp, #20]
	mov	r0, r3
	bl	_raw_spin_unlock(PLT)
	ldrb	r3, [r4]	@ zero_extendqisi2
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	b	.L6449
.L6482:
	ldr	r1, .L6485+76
	mov	r2, r7
	ldr	r0, .L6485+80
.LPIC1390:
	add	r1, pc, r1
.LPIC1389:
	add	r0, pc, r0
	b	.L6473
.L6486:
	.align	2
.L6485:
	.word	.LANCHOR3-(.LPIC1401+8)
	.word	.LC345-(.LPIC1400+8)
	.word	.LANCHOR3-(.LPIC1405+8)
	.word	.LC347-(.LPIC1404+8)
	.word	.LANCHOR1-(.LPIC1399+8)
	.word	.LANCHOR1-(.LPIC1397+8)
	.word	.LANCHOR1-(.LPIC1393+8)
	.word	fmbim_cmd_complete-(.LPIC1388+8)
	.word	fmbim_reset_cmd_complete-(.LPIC1387+8)
	.word	mbim_ep0out_complete-(.LPIC1396+8)
	.word	.LANCHOR1-(.LPIC1398+8)
	.word	.LANCHOR3-(.LPIC1386+8)
	.word	.LC341-(.LPIC1385+8)
	.word	.LANCHOR3-(.LPIC1403+8)
	.word	.LC346-(.LPIC1402+8)
	.word	.LANCHOR3-(.LPIC1395+8)
	.word	.LC344-(.LPIC1394+8)
	.word	.LANCHOR3-(.LPIC1392+8)
	.word	.LC343-(.LPIC1391+8)
	.word	.LANCHOR3-(.LPIC1390+8)
	.word	.LC342-(.LPIC1389+8)
	.fnend
	.size	mbim_setup, .-mbim_setup
	.align	2
	.type	rmnet_mux_smd_complete_epin, %function
rmnet_mux_smd_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r3, [r4, #352]
	ldr	r1, [r4, #76]
	cmp	r3, #0
	beq	.L6511
	cmn	r2, #104
	beq	.L6490
	cmp	r2, #0
	beq	.L6491
	cmn	r2, #108
	beq	.L6490
	ldr	r0, [r1]
	ldr	r1, .L6513
	add	r0, r0, #32
.LPIC1406:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L6491:
	add	r6, r4, #356
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r2, [r4, #96]
	add	r3, r4, #96
	cmp	r2, r3
	beq	.L6512
	ldr	r2, [r4, #100]
	add	r1, r5, #36
	str	r1, [r4, #100]
	str	r3, [r5, #36]
	str	r2, [r5, #40]
	str	r1, [r2]
.L6495:
	mov	r0, r6
.L6508:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L6490:
	add	r6, r4, #356
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #100]
	add	r2, r5, #36
	add	r1, r4, #96
	mov	r0, r6
	str	r2, [r4, #100]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	b	.L6508
.L6511:
	mov	r6, r0
	ldr	r0, [r5]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L6512:
	ldr	r3, [r4, #100]
	add	ip, r5, #36
	mov	r0, #0
	add	r1, r4, #128
	add	r7, r4, #124
	str	ip, [r4, #100]
	strd	r2, [r5, #36]
	str	ip, [r3]
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	bne	.L6495
	mov	r0, r7
	bl	__tasklet_schedule(PLT)
	b	.L6495
.L6514:
	.align	2
.L6513:
	.word	.LC348-(.LPIC1406+8)
	.fnend
	.size	rmnet_mux_smd_complete_epin, .-rmnet_mux_smd_complete_epin
	.align	2
	.type	rmnet_mux_smd_complete_epout, %function
rmnet_mux_smd_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #16]
	ldr	r4, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r1, #44]
	ldr	r2, [r4, #352]
	ldr	r7, [r4, #76]
	cmp	r2, #0
	beq	.L6532
	cmn	r3, #104
	beq	.L6518
	cmp	r3, #0
	beq	.L6519
	cmn	r3, #108
	beq	.L6518
	ldr	r0, [r7]
	add	r7, r4, #356
	ldr	lr, [r1, #48]
	ldr	ip, [r1, #4]
	ldr	r1, .L6534
	ldr	r2, [r6, #4]
	add	r0, r0, #32
	str	lr, [sp]
	str	ip, [sp, #4]
.LPIC1407:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	add	r2, r5, #36
	add	r1, r4, #104
	ldr	r3, [r4, #108]
	mov	r0, r7
	str	r2, [r4, #108]
.L6531:
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock(PLT)
.L6519:
	add	r6, r4, #356
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #168]
	cmp	r3, #0
	bne	.L6520
	ldr	r0, [r4, #120]
	bl	smd_write_avail(PLT)
	ldr	r3, [r5, #48]
	cmp	r0, r3
	strcc	r3, [r4, #168]
	bcs	.L6533
.L6520:
	add	r2, r5, #36
	ldr	r3, [r4, #116]
	add	r1, r4, #112
	mov	r0, r6
	str	r2, [r4, #116]
	b	.L6531
.L6518:
	add	r6, r4, #356
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	add	r2, r5, #36
	ldr	r3, [r4, #108]
	add	r1, r4, #104
	mov	r0, r6
	str	r2, [r4, #108]
	b	.L6531
.L6532:
	ldr	r0, [r1]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	bx	r3	@ indirect register sibling call
.L6533:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4, #120]
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	smd_write(PLT)
	ldr	r3, [r5, #48]
	cmp	r0, r3
	beq	.L6522
	ldr	r0, [r7]
	ldr	r1, .L6534+4
	add	r0, r0, #32
.LPIC1408:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L6522:
	ldr	r3, [r4, #388]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #388]
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #108]
	add	r2, r5, #36
	add	r1, r4, #104
	mov	r0, r6
	str	r2, [r4, #108]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock(PLT)
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	rmnet_mux_smd_start_rx(PLT)
.L6535:
	.align	2
.L6534:
	.word	.LC349-(.LPIC1407+8)
	.word	.LC350-(.LPIC1408+8)
	.fnend
	.size	rmnet_mux_smd_complete_epout, .-rmnet_mux_smd_complete_epout
	.align	2
	.type	acm_send_modem_ctrl_bits, %function
acm_send_modem_ctrl_bits:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #148
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	strh	r1, [r0, #170]	@ movhi
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r5, [r4, #156]
	cmp	r5, #0
	beq	.L6537
	mov	r1, #0
	mov	lr, #10
	ldr	r7, [r4, #152]
	mvn	r2, #94
	mov	r8, #32
	str	r1, [r4, #156]
	mov	ip, #2
	mov	r0, r6
	strb	r1, [r4, #144]
	ldr	r3, [r5]
	str	lr, [r5, #4]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	strb	r2, [r3]
	strb	r8, [r3, #1]
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	strb	ip, [r3, #6]
	strb	r1, [r3, #7]
	strh	r2, [r3, #4]	@ unaligned
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r7, #8]
	mov	r2, r8
	mov	r0, r7
	mov	r1, r5
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	cmp	r7, #0
	blt	.L6540
.L6538:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldrd	r4, [sp]
	mov	r0, r7
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6537:
	mov	r3, #1
	mov	r7, r5
	strb	r3, [r4, #144]
	b	.L6538
.L6540:
	ldr	r0, [r4, #20]
	mov	r3, r7
	ldr	r1, .L6541
	ldrb	r2, [r4, #138]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
.LPIC1409:
	add	r1, pc, r1
	ldr	r0, [r0]
	add	r0, r0, r8
	bl	dev_err(PLT)
	str	r5, [r4, #156]
	b	.L6538
.L6542:
	.align	2
.L6541:
	.word	.LC306-(.LPIC1409+8)
	.fnend
	.size	acm_send_modem_ctrl_bits, .-acm_send_modem_ctrl_bits
	.align	2
	.type	acm_send_break, %function
acm_send_break:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	cmp	r1, #0
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #148
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r0, #170]
	bic	r3, r3, #4
	uxth	r3, r3
	orrne	r3, r3, #4
	strh	r3, [r0, #170]	@ movhi
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r5, [r4, #156]
	cmp	r5, #0
	beq	.L6545
	mov	r1, #0
	mov	lr, #10
	ldr	r7, [r4, #152]
	mvn	r2, #94
	mov	r8, #32
	str	r1, [r4, #156]
	mov	ip, #2
	mov	r0, r6
	strb	r1, [r4, #144]
	ldr	r3, [r5]
	str	lr, [r5, #4]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	strb	r2, [r3]
	strb	r8, [r3, #1]
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	strb	ip, [r3, #6]
	strb	r1, [r3, #7]
	strh	r2, [r3, #4]	@ unaligned
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r7, #8]
	mov	r2, r8
	mov	r0, r7
	mov	r1, r5
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	cmp	r7, #0
	blt	.L6551
.L6546:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldrd	r4, [sp]
	mov	r0, r7
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6545:
	mov	r3, #1
	mov	r7, r5
	strb	r3, [r4, #144]
	b	.L6546
.L6551:
	ldr	r0, [r4, #20]
	mov	r3, r7
	ldr	r1, .L6552
	ldrb	r2, [r4, #138]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
.LPIC1410:
	add	r1, pc, r1
	ldr	r0, [r0]
	add	r0, r0, r8
	bl	dev_err(PLT)
	str	r5, [r4, #156]
	b	.L6546
.L6553:
	.align	2
.L6552:
	.word	.LC306-(.LPIC1410+8)
	.fnend
	.size	acm_send_break, .-acm_send_break
	.align	2
	.type	composite_disconnect, %function
composite_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r0, r0, #32
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata(PLT)
	add	r5, r0, #60
	mov	r8, r0
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r8, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L6555
	ldr	r4, [r3, #36]!
	cmp	r4, r3
	sub	r4, r4, #64
	movne	r7, #0
	beq	.L6561
.L6560:
	ldr	r3, [r4, #40]
	mov	r0, r4
	cmp	r3, #0
	beq	.L6559
	blx	r3
.L6559:
	str	r7, [r4, #72]
	ldr	r3, [r8, #12]
	ldr	r4, [r4, #64]
	add	r3, r3, #36
	cmp	r4, r3
	sub	r4, r4, #64
	bne	.L6560
.L6561:
	ldr	r3, .L6575
	mov	r2, #0
	str	r2, [r8, #12]
	str	r2, [r8, #56]
.LPIC1411:
	add	r3, pc, r3
	ldr	r3, [r3, #88]
	ldr	r3, [r3, #32]
	cmp	r3, r2
	beq	.L6562
.L6557:
	mov	r0, r8
	blx	r3
.L6563:
	ldr	r3, [r8, #56]
	cmp	r3, #0
	beq	.L6562
	ldr	r0, [r8]
	ldr	r1, .L6575+4
	add	r0, r0, #32
.LPIC1413:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	mov	r3, #0
	str	r3, [r8, #56]
.L6562:
	mov	r0, r5
	mov	r1, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L6555:
	ldr	r3, .L6575+8
.LPIC1412:
	add	r3, pc, r3
	ldr	r3, [r3, #88]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	bne	.L6557
	b	.L6563
.L6576:
	.align	2
.L6575:
	.word	.LANCHOR2-(.LPIC1411+8)
	.word	.LC351-(.LPIC1413+8)
	.word	.LANCHOR2-(.LPIC1412+8)
	.fnend
	.size	composite_disconnect, .-composite_disconnect
	.align	2
	.type	acm_disconnect, %function
acm_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r5, r0, #148
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r0, #170]
	mov	r0, r5
	bic	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock(PLT)
	ldr	r6, [r4, #156]
	cmp	r6, #0
	moveq	r3, #1
	streqb	r3, [r4, #144]
	beq	.L6579
	mov	r1, #0
	mov	lr, #10
	ldr	r7, [r4, #152]
	mvn	r2, #94
	mov	r8, #32
	str	r1, [r4, #156]
	mov	ip, #2
	mov	r0, r5
	strb	r1, [r4, #144]
	ldr	r3, [r6]
	str	lr, [r6, #4]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	strb	r2, [r3]
	strb	r8, [r3, #1]
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	strb	ip, [r3, #6]
	strb	r1, [r3, #7]
	strh	r2, [r3, #4]	@ unaligned
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r7, #8]
	mov	r2, r8
	mov	r0, r7
	mov	r1, r6
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	cmp	r7, #0
	blt	.L6581
.L6579:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L6581:
	ldr	r0, [r4, #20]
	mov	r3, r7
	ldr	r1, .L6582
	ldrb	r2, [r4, #138]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
.LPIC1414:
	add	r1, pc, r1
	ldr	r0, [r0]
	add	r0, r0, r8
	bl	dev_err(PLT)
	str	r6, [r4, #156]
	b	.L6579
.L6583:
	.align	2
.L6582:
	.word	.LC306-(.LPIC1414+8)
	.fnend
	.size	acm_disconnect, .-acm_disconnect
	.align	2
	.type	acm_connect, %function
acm_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r5, r0, #148
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r0, #170]
	mov	r0, r5
	orr	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock(PLT)
	ldr	r6, [r4, #156]
	cmp	r6, #0
	moveq	r3, #1
	streqb	r3, [r4, #144]
	beq	.L6586
	mov	r1, #0
	mov	lr, #10
	ldr	r7, [r4, #152]
	mvn	r2, #94
	mov	r8, #32
	str	r1, [r4, #156]
	mov	ip, #2
	mov	r0, r5
	strb	r1, [r4, #144]
	ldr	r3, [r6]
	str	lr, [r6, #4]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	strb	r2, [r3]
	strb	r8, [r3, #1]
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	strb	ip, [r3, #6]
	strb	r1, [r3, #7]
	strh	r2, [r3, #4]	@ unaligned
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r7, #8]
	mov	r2, r8
	mov	r0, r7
	mov	r1, r6
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	cmp	r7, #0
	blt	.L6588
.L6586:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L6588:
	ldr	r0, [r4, #20]
	mov	r3, r7
	ldr	r1, .L6589
	ldrb	r2, [r4, #138]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
.LPIC1415:
	add	r1, pc, r1
	ldr	r0, [r0]
	add	r0, r0, r8
	bl	dev_err(PLT)
	str	r6, [r4, #156]
	b	.L6586
.L6590:
	.align	2
.L6589:
	.word	.LC306-(.LPIC1415+8)
	.fnend
	.size	acm_connect, .-acm_connect
	.align	2
	.type	mtp_function_unbind, %function
mtp_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r5, r1, #80
	strd	r8, [sp, #16]
	mov	r9, #256
	mov	r8, #512
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r10, [sp, #24]
	add	r10, r1, #108
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.L6592:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r6, #108]
	mov	r3, r0
	mov	r0, r5
	mov	r1, r3
	cmp	r10, r4
	sub	r7, r4, #36
	beq	.L6593
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r7, #0
	beq	.L6600
	ldr	fp, [r6, #84]
	ldr	r0, [r4, #-36]
	bl	kfree(PLT)
	mov	r1, r7
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	b	.L6592
.L6593:
	mov	r1, r3
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
.L6600:
	mov	r7, #0
.L6596:
	add	r3, r7, #40
	ldr	r8, [r6, #88]
	ldr	r4, [r6, r3, asl #2]
	cmp	r4, #0
	beq	.L6595
	ldr	r0, [r4]
	bl	kfree(PLT)
	ldr	r3, [r8, #8]
	mov	r1, r4
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L6595:
	cmp	r7, #1
	mov	r7, #1
	bne	.L6596
	add	r10, r6, #116
	mov	r9, #256
	mov	r8, #512
.L6597:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r6, #116]
	mov	r3, r0
	mov	r0, r5
	mov	r1, r3
	cmp	r4, r10
	sub	r7, r4, #36
	beq	.L6598
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r7, #0
	beq	.L6602
	ldr	fp, [r6, #92]
	ldr	r0, [r4, #-36]
	bl	kfree(PLT)
	mov	r1, r7
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	b	.L6597
.L6598:
	mov	r0, r5
	mov	r1, r3
	bl	_raw_spin_unlock_irqrestore(PLT)
.L6602:
	mov	r3, #0
	str	r3, [r6, #96]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
	.fnend
	.size	mtp_function_unbind, .-mtp_function_unbind
	.align	2
	.type	gps_suspend, %function
gps_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r8, [sp, #16]
	add	r9, r0, #124
	strd	r6, [sp, #8]
	add	r6, r0, #136
	mov	r0, r9
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #136]
	mov	r10, r0
	cmp	r3, r6
	movne	r8, #256
	movne	r7, #512
	beq	.L6613
.L6612:
	ldr	r2, [r3, #4]
	mov	r4, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r4, #-8]!
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r3, [r5, #136]
	cmp	r3, r6
	bne	.L6612
.L6613:
	mov	r3, #0
	mov	r0, r9
	mov	r1, r10
	str	r3, [r5, #144]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
	.fnend
	.size	gps_suspend, .-gps_suspend
	.align	2
	.type	rmnet_sdio_free_buf, %function
rmnet_sdio_free_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r3, r0, #180
	mov	r4, r0
	strd	r8, [sp, #16]
	mov	r8, #0
	mov	r9, r0
	strd	r10, [sp, #24]
	mov	r0, r3
	strd	r6, [sp, #8]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	bl	_raw_spin_lock_irqsave(PLT)
	str	r8, [r4, #344]
	str	r8, [r4, #348]
	str	r8, [r4, #356]
	str	r8, [r4, #360]
	str	r8, [r4, #316]
	str	r8, [r4, #352]
	ldr	r3, [r9, #124]!
	str	r0, [sp, #4]
	cmp	r3, r9
	ldr	r5, [r3]
	movne	fp, #256
	movne	r10, #512
	bne	.L6620
	b	.L6621
.L6635:
	mov	r5, r2
.L6620:
	ldr	r2, [r3, #4]
	mov	r7, r3
	mov	r0, #0
	str	r2, [r5, #4]
	str	r5, [r2]
	str	fp, [r3]
	str	r10, [r3, #4]
	ldr	r3, [r4, #132]
	sub	r3, r3, #1
	str	r3, [r4, #132]
	str	r8, [r7, #-36]!
	ldr	r6, [r4, #80]
	bl	kfree(PLT)
	mov	r1, r7
	ldr	r2, [r6, #8]
	mov	r0, r6
	ldr	r3, [r2, #12]
	blx	r3
	cmp	r9, r5
	ldr	r2, [r5]
	mov	r3, r5
	bne	.L6635
.L6621:
	mov	r8, r4
	ldr	r3, [r8, #152]!
	cmp	r3, r8
	ldr	r5, [r3]
	movne	fp, #256
	movne	r10, #512
	movne	r9, #0
	bne	.L6624
	b	.L6619
.L6636:
	mov	r5, r2
.L6624:
	ldr	r2, [r3, #4]
	mov	r6, r3
	mov	r0, #0
	str	r2, [r5, #4]
	str	r5, [r2]
	str	fp, [r3]
	str	r10, [r3, #4]
	ldr	r3, [r4, #160]
	sub	r3, r3, #1
	str	r3, [r4, #160]
	str	r9, [r6, #-36]!
	ldr	r7, [r4, #84]
	bl	kfree(PLT)
	mov	r1, r6
	ldr	r2, [r7, #8]
	mov	r0, r7
	ldr	r3, [r2, #12]
	blx	r3
	cmp	r8, r5
	ldr	r2, [r5]
	mov	r3, r5
	bne	.L6636
.L6619:
	mov	r8, r4
	ldr	r3, [r8, #100]!
	cmp	r3, r8
	ldr	r5, [r3]
	movne	r10, #256
	movne	r9, #512
	bne	.L6627
	b	.L6623
.L6637:
	mov	r5, r2
.L6627:
	ldr	r2, [r3, #4]
	mov	fp, r3
	str	r2, [r5, #4]
	str	r5, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [r4, #108]
	sub	r3, r3, #1
	str	r3, [r4, #108]
	ldr	r0, [fp, #-8]!
	bl	kfree(PLT)
	mov	r0, fp
	bl	kfree(PLT)
	cmp	r8, r5
	ldr	r2, [r5]
	mov	r3, r5
	bne	.L6637
.L6623:
	mov	r8, r4
	ldr	r3, [r8, #112]!
	cmp	r3, r8
	ldr	r5, [r3]
	movne	r10, #256
	movne	r9, #512
	bne	.L6630
	b	.L6626
.L6638:
	mov	r5, r2
.L6630:
	ldr	r2, [r3, #4]
	mov	fp, r3
	str	r2, [r5, #4]
	str	r5, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [r4, #120]
	sub	r3, r3, #1
	str	r3, [r4, #120]
	ldr	r0, [fp, #-8]!
	bl	kfree(PLT)
	mov	r0, fp
	bl	kfree(PLT)
	cmp	r8, r5
	ldr	r2, [r5]
	mov	r3, r5
	bne	.L6638
.L6626:
	ldr	r3, [r4, #136]
	add	r5, r4, #136
	cmp	r3, r5
	cmpne	r3, #0
	movne	r8, #0
	beq	.L6629
.L6632:
	ldr	r2, [r4, #144]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #144]
	ldmia	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #136]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L6632
.L6629:
	ldr	r3, [r4, #164]
	add	r5, r4, #164
	cmp	r3, r5
	cmpne	r3, #0
	movne	r8, #0
	beq	.L6634
.L6633:
	ldr	r2, [r4, #172]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #172]
	ldmia	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #164]
	cmp	r5, r3
	cmpne	r3, #0
	bne	.L6633
.L6634:
	ldrd	r4, [r4, #88]
	ldr	r0, [r5]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	ldrd	r0, [sp]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
	.fnend
	.size	rmnet_sdio_free_buf, .-rmnet_sdio_free_buf
	.align	2
	.type	rmnet_sdio_disable, %function
rmnet_sdio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #184]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r0, [r0, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r4
	str	r5, [r4, #184]
	str	r5, [r4, #188]
	bl	rmnet_sdio_free_buf(PLT)
	add	r1, r4, #196
	ldr	r0, [r4, #192]
	bl	queue_work(PLT)
	str	r5, [r4, #320]
	ldr	r0, [r4, #192]
	add	r1, r4, #324
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work(PLT)
	.fnend
	.size	rmnet_sdio_disable, .-rmnet_sdio_disable
	.align	2
	.type	rmnet_sdio_start_io, %function
rmnet_sdio_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #180
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #184]
	mov	r7, r0
	cmp	r5, #0
	beq	.L6674
	ldr	r3, [r4, #308]
	tst	r3, #2
	beq	.L6657
	ldr	r3, [r4, #312]
	tst	r3, #2
	beq	.L6657
	ldr	r9, .L6676
	mov	r5, #16
	add	r8, r4, #152
.LPIC1416:
	add	r9, pc, r9
.L6649:
	ldr	r0, [r4, #80]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	beq	.L6663
	cmn	r0, #4096
	bhi	.L6673
	str	r9, [r0, #28]
	ldr	r2, [r4, #156]
	subs	r5, r5, #1
	str	r3, [r4, #156]
	str	r8, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	ldr	r3, [r4, #160]
	add	r3, r3, #1
	str	r3, [r4, #160]
	bne	.L6649
	ldr	r10, .L6676+4
	mov	r5, #200
	add	r9, r4, #124
.LPIC1417:
	add	r10, pc, r10
.L6655:
	ldr	r0, [r4, #84]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	beq	.L6663
	cmn	r0, #4096
	bhi	.L6673
	str	r10, [r0, #28]
	ldr	r2, [r4, #128]
	subs	r5, r5, #1
	str	r3, [r4, #128]
	str	r9, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	ldr	r3, [r4, #132]
	add	r3, r3, #1
	str	r3, [r4, #132]
	bne	.L6655
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r5, [r4, #184]
	ldr	r3, [r4, #76]
	cmp	r5, #0
	str	r3, [sp, #4]
	beq	.L6675
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #152]
	mov	r7, r0
	cmp	r5, r8
	beq	.L6657
	mov	fp, #256
	mov	r9, #512
	b	.L6660
.L6659:
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #152]
	mov	r7, r0
	cmp	r5, r8
	beq	.L6657
.L6660:
	ldr	r3, [r5, #4]
	mov	r1, r7
	mov	r0, r6
	ldr	r2, [r5]
	sub	r7, r5, #36
	str	r3, [r2, #4]
	str	r2, [r3]
	str	fp, [r5]
	str	r9, [r5, #4]
	ldr	r3, [r4, #160]
	sub	r3, r3, #1
	str	r3, [r4, #160]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r1, #32
	mov	r2, #0
	movw	r0, #2056
	mvn	r3, #0
	bl	__alloc_skb(PLT)
	mov	r1, r7
	subs	r7, r0, #0
	mov	ip, #2048
	mov	r2, #32
	beq	.L6664
	ldr	r3, [r7, #172]
	ldr	r0, [r7, #160]
	add	r3, r3, #8
	add	r0, r0, #8
	str	r3, [r7, #172]
	str	r0, [r7, #160]
	str	r3, [r5, #-36]
	str	ip, [r5, #-32]
	str	r7, [r5, #-4]
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r10, r0, #0
	mov	r0, r6
	beq	.L6659
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
.L6658:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp, #4]
	mov	r7, r0
	mov	r2, r10
	ldr	r1, .L6676+8
	ldr	r0, [r3]
.LPIC1420:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r3, [r4, #156]
	str	r5, [r4, #156]
	str	r8, [r5]
	str	r3, [r5, #4]
	str	r5, [r3]
	ldr	r3, [r4, #160]
	add	r3, r3, #1
	str	r3, [r4, #160]
.L6657:
	mov	r0, r6
	mov	r1, r7
	mov	r5, #0
	bl	_raw_spin_unlock_irqrestore(PLT)
.L6671:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6674:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L6671
.L6663:
	mvn	r5, #11
.L6653:
.L6652:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
	bl	rmnet_sdio_free_buf(PLT)
	mov	r3, #0
	str	r3, [r4, #88]
	str	r3, [r4, #84]
	str	r3, [r4, #80]
	b	.L6671
.L6664:
	mvn	r10, #11
	b	.L6658
.L6675:
	ldr	r1, .L6676+12
	ldr	r0, .L6676+16
.LPIC1419:
	add	r1, pc, r1
	add	r1, r1, #2640
.LPIC1418:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L6671
.L6673:
	mov	r5, r0
	b	.L6653
.L6677:
	.align	2
.L6676:
	.word	rmnet_sdio_complete_epout-(.LPIC1416+8)
	.word	rmnet_sdio_complete_epin-(.LPIC1417+8)
	.word	.LC20-(.LPIC1420+8)
	.word	.LANCHOR3-(.LPIC1419+8)
	.word	.LC352-(.LPIC1418+8)
	.fnend
	.size	rmnet_sdio_start_io, .-rmnet_sdio_start_io
	.align	2
	.type	rmnet_open_sdio_work, %function
rmnet_open_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #68]
	ldr	r3, [r0, #64]
	ldr	r3, [r0, #64]
	ldr	r5, [r0, #-168]
	tst	r3, #2
	beq	.L6679
	ldr	r3, [r0, #68]
	tst	r3, #2
	bne	.L6694
.L6679:
	ldr	r2, .L6697
.LPIC1425:
	add	r2, pc, r2
	ldr	r3, [r2, #3692]
	add	r3, r3, #1
	cmp	r3, #90
	str	r3, [r2, #3692]
	ble	.L6682
	ldr	r3, [r4, #68]
	tst	r3, #2
	beq	.L6695
.L6683:
	ldr	r3, [r4, #64]
	tst	r3, #2
	beq	.L6696
.L6678:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6682:
	ldr	r5, [r4, #-52]
	mov	r0, #2000
	bl	msecs_to_jiffies(PLT)
	mov	r2, r0
	mov	r1, r4
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_delayed_work(PLT)
.L6696:
	ldr	r0, [r5]
	ldr	r1, .L6697+4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	r0, r0, #32
	add	sp, sp, #16
.LPIC1428:
	add	r1, pc, r1
	b	dev_err(PLT)
.L6695:
	ldr	r0, [r5]
	ldr	r1, .L6697+8
	add	r0, r0, #32
.LPIC1427:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L6683
.L6694:
	sub	r0, r0, #244
	bl	rmnet_sdio_start_io(PLT)
	ldr	r3, [r4, #-60]
	cmp	r3, #0
	beq	.L6680
	ldr	r0, [r4, #-52]
	add	r1, r4, #80
	bl	queue_work(PLT)
.L6680:
	ldr	r1, .L6697+12
	ldr	r4, .L6697+16
	ldr	r0, .L6697+20
.LPIC1422:
	add	r1, pc, r1
.LPIC1423:
	add	r4, pc, r4
	add	r1, r1, #2656
.LPIC1421:
	add	r0, pc, r0
	add	r1, r1, #12
	ldr	r2, [r4, #3692]
	bl	printk(PLT)
	mov	r3, #0
	str	r3, [r4, #3692]
	b	.L6678
.L6698:
	.align	2
.L6697:
	.word	.LANCHOR4-(.LPIC1425+8)
	.word	.LC355-(.LPIC1428+8)
	.word	.LC354-(.LPIC1427+8)
	.word	.LANCHOR3-(.LPIC1422+8)
	.word	.LANCHOR4-(.LPIC1423+8)
	.word	.LC353-(.LPIC1421+8)
	.fnend
	.size	rmnet_open_sdio_work, .-rmnet_open_sdio_work
	.align	2
	.type	rmnet_mux_disconnect_work, %function
rmnet_mux_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-20]
	.pad #12
	sub	sp, sp, #12
	cmp	r3, #3
	beq	.L6738
.L6700:
	sub	r5, r4, #16
	sub	r7, r4, #188
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #-188]
	str	r0, [sp, #4]
	cmp	r7, r3
	movne	r10, #256
	movne	r9, #512
	movne	r8, #0
	beq	.L6705
.L6704:
	ldr	r2, [r3, #4]
	mov	fp, r3
	mov	r0, #0
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	str	r8, [fp, #-36]!
	ldr	r6, [r4, #-292]
	bl	kfree(PLT)
	mov	r1, fp
	ldr	r2, [r6, #8]
	mov	r0, r6
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r3, [r4, #-188]
	cmp	r7, r3
	bne	.L6704
.L6705:
	ldr	r3, [r4, #-164]
	sub	r7, r4, #164
	cmp	r7, r3
	movne	r10, #256
	movne	r9, #512
	movne	r8, #0
	beq	.L6703
.L6708:
	ldr	r2, [r3, #4]
	mov	fp, r3
	mov	r0, #0
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	str	r8, [fp, #-36]!
	ldr	r6, [r4, #-288]
	bl	kfree(PLT)
	mov	r1, fp
	ldr	r2, [r6, #8]
	mov	r0, r6
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r3, [r4, #-164]
	cmp	r7, r3
	bne	.L6708
.L6703:
	ldr	r3, [r4, #-180]
	sub	r7, r4, #180
	cmp	r3, r7
	cmpne	r3, #0
	movne	r8, #0
	beq	.L6707
.L6711:
	ldr	r2, [r4, #-172]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #-172]
	ldmia	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #-180]
	cmp	r3, r7
	cmpne	r3, #0
	bne	.L6711
.L6707:
	ldr	r3, [r4, #-156]
	sub	r7, r4, #156
	cmp	r3, r7
	cmpne	r3, #0
	movne	r8, #0
	beq	.L6710
.L6712:
	ldr	r2, [r4, #-148]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #-148]
	ldmia	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #-156]
	cmp	r3, r7
	cmpne	r3, #0
	bne	.L6712
.L6710:
	ldr	r3, [r4, #-276]
	sub	r8, r4, #276
	cmp	r3, r8
	movne	r10, #256
	movne	r9, #512
	beq	.L6727
.L6713:
	ldr	r2, [r3, #4]
	mov	r7, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	fp, [r4, #-292]
	ldr	r0, [r7, #-36]!
	bl	kfree(PLT)
	ldr	r3, [fp, #8]
	mov	r0, fp
	mov	r1, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #-276]
	cmp	r3, r8
	bne	.L6713
.L6727:
	ldr	r3, [r4, #-268]
	sub	r8, r4, #268
	cmp	r8, r3
	movne	r10, #256
	movne	r9, #512
	beq	.L6718
.L6717:
	ldr	r2, [r3, #4]
	mov	r7, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	fp, [r4, #-288]
	ldr	r0, [r7, #-36]!
	bl	kfree(PLT)
	ldr	r3, [fp, #8]
	mov	r0, fp
	mov	r1, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #-268]
	cmp	r8, r3
	bne	.L6717
.L6718:
	ldr	r3, [r4, #-260]
	sub	r8, r4, #260
	cmp	r8, r3
	movne	r10, #256
	movne	r9, #512
	beq	.L6716
.L6721:
	ldr	r2, [r3, #4]
	mov	r7, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	fp, [r4, #-288]
	ldr	r0, [r7, #-36]!
	bl	kfree(PLT)
	ldr	r3, [fp, #8]
	mov	r0, fp
	mov	r1, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #-260]
	cmp	r8, r3
	bne	.L6721
.L6716:
	ldr	r3, [r4, #-68]
	sub	r7, r4, #68
	cmp	r7, r3
	movne	r9, #256
	movne	r8, #512
	beq	.L6720
.L6724:
	ldr	r2, [r3, #4]
	mov	r10, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r10, #-8]!
	bl	kfree(PLT)
	mov	r0, r10
	bl	kfree(PLT)
	ldr	r2, [r4, #-48]
	ldr	r3, [r4, #-68]
	sub	r2, r2, #1
	cmp	r7, r3
	str	r2, [r4, #-48]
	bne	.L6724
.L6720:
	ldr	r3, [r4, #-44]
	sub	r7, r4, #44
	cmp	r7, r3
	movne	r9, #256
	movne	r8, #512
	beq	.L6723
.L6725:
	ldr	r2, [r3, #4]
	mov	r10, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r10, #-8]!
	bl	kfree(PLT)
	mov	r0, r10
	bl	kfree(PLT)
	ldr	r2, [r4, #-36]
	ldr	r3, [r4, #-44]
	sub	r2, r2, #1
	cmp	r7, r3
	str	r2, [r4, #-36]
	bne	.L6725
.L6723:
	mov	r0, r5
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r2, #0
	sub	r0, r4, #60
	mov	r3, r2
	mov	r1, #3
	str	r2, [r4, #-20]
	mov	r2, #1
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__wake_up(PLT)
.L6738:
	sub	r0, r0, #228
	bl	tasklet_kill(PLT)
	sub	r0, r4, #248
	bl	tasklet_kill(PLT)
	b	.L6700
	.fnend
	.size	rmnet_mux_disconnect_work, .-rmnet_mux_disconnect_work
	.align	2
	.type	mbim_read, %function
mbim_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #4]
	cmp	r4, #0
	beq	.L6767
	cmp	r2, #4096
	mov	fp, r2
	bhi	.L6768
	add	r7, r4, #92
#APP
@ 61 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r7]
	add	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L6769
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L6775
	ldr	r0, .L6775+4
.LPIC1434:
	add	r1, pc, r1
	add	r1, r1, #2688
.LPIC1433:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #15
.L6764:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6769:
	ldr	r5, .L6775+8
	ldr	r6, .L6775+12
.LPIC1436:
	add	r5, pc, r5
	add	r5, r5, #2688
.LPIC1435:
	add	r6, pc, r6
	add	r5, r5, #4
.L6743:
	ldr	r3, [r4, #80]
	cmp	r3, #0
	bne	.L6748
	ldr	r3, [r4, #224]
	cmp	r3, #0
	beq	.L6749
.L6748:
	ldr	r3, [r4, #224]
	cmp	r3, #0
	bne	.L6770
	add	r6, r4, #196
	add	r5, r4, #200
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r8, [r4, #200]
	mov	r1, r0
	cmp	r5, r8
	bne	.L6751
	mov	r3, sp
	bic	r10, r3, #8128
	bic	r10, r10, #63
	b	.L6756
.L6752:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r8, [r4, #200]
	mov	r1, r0
	cmp	r8, r5
	bne	.L6751
.L6756:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #200]
	cmp	r5, r3
	bne	.L6752
	ldr	r2, .L6775+16
	mov	r3, #0
	add	r8, sp, #12
	ldr	r1, [r10, #12]
	add	r9, r4, #100
	str	r3, [sp, #12]
	add	r3, sp, #24
.LPIC1444:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #24]
	str	r3, [sp, #28]
	str	r1, [sp, #16]
	str	r2, [sp, #20]
	b	.L6755
.L6771:
	bl	schedule(PLT)
.L6755:
	mov	r0, r9
	mov	r1, r8
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #200]
	cmp	r5, r3
	bne	.L6753
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L6771
	mov	r0, r9
	mov	r1, r8
	bl	finish_wait(PLT)
	ldr	r1, .L6775+20
	ldr	r0, .L6775+24
.LPIC1443:
	add	r1, pc, r1
	add	r1, r1, #2688
.LPIC1442:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, #65024
	movt	r0, 65535
	b	.L6764
.L6753:
	mov	r0, r9
	mov	r1, r8
	bl	finish_wait(PLT)
	b	.L6752
.L6751:
	ldr	r3, [r8, #-4]
	sub	r5, r8, #8
	cmp	fp, r3
	bcc	.L6772
	ldr	r3, [r8, #4]
	mov	lr, #256
	mov	ip, #512
	ldr	r2, [r8]
	mov	r0, r6
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r8]
	str	ip, [r8, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r3, sp
	ldr	r2, [r8, #-4]
	bic	r3, r3, #8128
	ldr	ip, [sp, #4]
	bic	r3, r3, #63
	ldr	r1, [r8, #-8]
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r0, ip, r2; sbcccs r0, r0, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L6773
.L6758:
	cmp	r2, #0
	ldreq	r4, [r8, #-4]
	bne	.L6774
.L6760:
	cmp	r5, #0
	moveq	r0, r4
	beq	.L6764
	ldr	r0, [r8, #-8]
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r4
	b	.L6764
.L6773:
	mov	r0, ip
	bl	__copy_to_user(PLT)
	mov	r2, r0
	b	.L6758
.L6770:
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #4
	b	.L6764
.L6768:
	ldr	r1, .L6775+28
	mov	r3, #4096
	ldr	r0, .L6775+32
.LPIC1432:
	add	r1, pc, r1
	add	r1, r1, #2688
.LPIC1431:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #21
	b	.L6764
.L6767:
	ldr	r1, .L6775+36
	ldr	r0, .L6775+40
.LPIC1430:
	add	r1, pc, r1
	add	r1, r1, #2688
.LPIC1429:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L6764
.L6772:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L6775+44
	mov	r3, fp
	ldr	r0, .L6775+48
	ldr	r2, [r8, #-4]
.LPIC1439:
	add	r1, pc, r1
	add	r1, r1, #2688
.LPIC1438:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #11
	b	.L6764
.L6774:
	ldr	r1, .L6775+52
	mvn	r4, #11
	ldr	r0, .L6775+56
.LPIC1441:
	add	r1, pc, r1
	add	r1, r1, #2688
.LPIC1440:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L6760
.L6749:
	mov	r0, r6
	mov	r1, r5
	bl	printk(PLT)
	ldr	r3, [r4, #80]
	cmp	r3, #0
	bne	.L6743
	ldr	r1, [r4, #224]
	cmp	r1, #0
	bne	.L6743
	add	r8, sp, #12
	mov	r2, #20
	mov	r0, r8
	add	r10, r4, #100
	bl	memset(PLT)
	ldr	r2, .L6775+60
	mov	r3, sp
	bic	r9, r3, #8128
	add	r3, sp, #24
	bic	r9, r9, #63
	ldr	r1, [r9, #12]
	str	r3, [sp, #24]
.LPIC1445:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #28]
	str	r1, [sp, #16]
	str	r2, [sp, #20]
.L6747:
	mov	r0, r10
	mov	r1, r8
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #80]
	cmp	r3, #0
	bne	.L6745
	ldr	r3, [r4, #224]
	cmp	r3, #0
	bne	.L6745
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L6746
	bl	schedule(PLT)
	b	.L6747
.L6745:
	mov	r0, r10
	mov	r1, r8
	bl	finish_wait(PLT)
	b	.L6743
.L6746:
	mov	r0, r10
	mov	r1, r8
	bl	finish_wait(PLT)
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, #65024
	movt	r0, 65535
	b	.L6764
.L6776:
	.align	2
.L6775:
	.word	.LANCHOR3-(.LPIC1434+8)
	.word	.LC358-(.LPIC1433+8)
	.word	.LANCHOR3-(.LPIC1436+8)
	.word	.LC359-(.LPIC1435+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1444+8))
	.word	.LANCHOR3-(.LPIC1443+8)
	.word	.LC362-(.LPIC1442+8)
	.word	.LANCHOR3-(.LPIC1432+8)
	.word	.LC357-(.LPIC1431+8)
	.word	.LANCHOR3-(.LPIC1430+8)
	.word	.LC356-(.LPIC1429+8)
	.word	.LANCHOR3-(.LPIC1439+8)
	.word	.LC360-(.LPIC1438+8)
	.word	.LANCHOR3-(.LPIC1441+8)
	.word	.LC361-(.LPIC1440+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1445+8))
	.fnend
	.size	mbim_read, .-mbim_read
	.align	2
	.type	gbam_start, %function
gbam_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L6791
	add	r5, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L6792
	ldr	r0, [r3, #76]
	mov	r2, #32
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L6793
.L6782:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock(PLT)
.L6791:
	add	r5, r0, #4
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L6794
	ldr	r0, [r3, #80]
	mov	r2, #32
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L6782
	ldr	r1, .L6795
	mov	r2, r0
	ldr	r0, .L6795+4
.LPIC1449:
	add	r1, pc, r1
	add	r1, r1, #1104
.LPIC1448:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L6782
.L6793:
	ldr	r1, .L6795+8
	mov	r2, r0
	ldr	r0, .L6795+12
.LPIC1453:
	add	r1, pc, r1
	add	r1, r1, #1136
.LPIC1452:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L6782
.L6792:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L6795+16
	ldr	r0, .L6795+20
.LPIC1451:
	add	r1, pc, r1
	add	r1, r1, #1136
.LPIC1450:
	add	r0, pc, r0
	add	r1, r1, #4
.L6790:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk(PLT)
.L6794:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L6795+24
	ldr	r0, .L6795+28
.LPIC1447:
	add	r1, pc, r1
	add	r1, r1, #1104
.LPIC1446:
	add	r0, pc, r0
	add	r1, r1, #12
	b	.L6790
.L6796:
	.align	2
.L6795:
	.word	.LANCHOR3-(.LPIC1449+8)
	.word	.LC191-(.LPIC1448+8)
	.word	.LANCHOR3-(.LPIC1453+8)
	.word	.LC191-(.LPIC1452+8)
	.word	.LANCHOR3-(.LPIC1451+8)
	.word	.LC29-(.LPIC1450+8)
	.word	.LANCHOR3-(.LPIC1447+8)
	.word	.LC29-(.LPIC1446+8)
	.fnend
	.size	gbam_start, .-gbam_start
	.align	2
	.type	android_disconnect, %function
android_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	add	r0, r0, #32
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	dev_get_drvdata(PLT)
	ldr	r2, .L6817
	mov	r6, r0
.LPIC1454:
	add	r2, pc, r2
	ldr	r3, [r2]
	cmp	r2, r3
	sub	r5, r3, #168
	bne	.L6801
	b	.L6798
.L6816:
	ldr	r3, [r5, #168]
	cmp	r2, r3
	sub	r5, r3, #168
	beq	.L6798
.L6801:
	ldr	r3, [r3, #-160]
	cmp	r6, r3
	bne	.L6816
.L6798:
	mov	r0, r4
	bl	composite_disconnect(PLT)
	ldr	r3, .L6817+4
.LPIC1457:
	add	r3, pc, r3
	ldr	r4, [r3, #2316]
	cmp	r4, #0
	beq	.L6802
	add	r7, r4, #80
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	ip, r4
	mov	r1, r0
	ldr	r3, [ip, #1756]!
	cmp	r3, ip
	ldr	r2, [r3]
	addne	lr, r4, #1760
	movne	r9, #256
	addne	lr, lr, #12
	movne	r8, #512
	beq	.L6807
.L6806:
	ldr	r0, [r3, #4]
	cmp	ip, r2
	str	r0, [r2, #4]
	str	r2, [r0]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r4, #1772]
	str	r3, [r0, #4]
	stmia	r3, {r0, lr}
	str	r3, [r4, #1772]
	mov	r3, r2
	ldr	r2, [r2]
	bne	.L6806
.L6807:
	mov	ip, r4
	ldr	r3, [ip, #1764]!
	cmp	r3, ip
	ldr	r2, [r3]
	addne	lr, r4, #1760
	movne	r9, #256
	addne	lr, lr, #12
	movne	r8, #512
	beq	.L6805
.L6808:
	ldr	r0, [r3, #4]
	cmp	ip, r2
	str	r0, [r2, #4]
	str	r2, [r0]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r4, #1772]
	str	r3, [r0, #4]
	stmia	r3, {r0, lr}
	str	r3, [r4, #1772]
	mov	r3, r2
	ldr	r2, [r2]
	bne	.L6808
.L6805:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r0, r4, #1728
	add	r0, r0, #12
	bl	schedule_work(PLT)
.L6802:
	add	r6, r6, #60
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, #0
	mov	r4, r0
	add	r0, r5, #140
	strb	r3, [r5, #56]
	bl	schedule_work(PLT)
	ldrd	r8, [sp, #16]
	mov	r0, r6
	mov	r1, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L6818:
	.align	2
.L6817:
	.word	.LANCHOR2-(.LPIC1454+8)
	.word	.LANCHOR2-(.LPIC1457+8)
	.fnend
	.size	android_disconnect, .-android_disconnect
	.align	2
	.type	gser_send_modem_ctrl_bits, %function
gser_send_modem_ctrl_bits:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #148
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	strh	r1, [r0, #170]	@ movhi
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #156]
	mov	r8, r0
	cmp	r5, #0
	beq	.L6820
	ldr	r3, [r4, #20]
	mov	ip, #0
	mov	r7, #32
	mov	r0, #10
	mvn	fp, #94
	ldr	lr, [r4, #152]
	mov	r2, r7
	mov	r10, #2
	mov	r1, r5
	ldr	r9, [r3, #24]
	str	ip, [r4, #156]
	strb	ip, [r4, #144]
	ldr	r3, [r5]
	str	r0, [r5, #4]
	mov	r0, lr
	strb	ip, [r3, #2]
	strb	ip, [r3, #3]
	strb	fp, [r3]
	strb	r7, [r3, #1]
	ldrb	r7, [r4, #136]	@ zero_extendqisi2
	strb	ip, [r3, #7]
	strb	r10, [r3, #6]
	strh	r7, [r3, #4]	@ unaligned
	ldrh	ip, [r4, #170]	@ unaligned
	strh	ip, [r3, #8]	@ unaligned
	ldr	r3, [lr, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	blt	.L6823
.L6821:
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6820:
	mov	r3, #1
	mov	r7, r5
	strb	r3, [r4, #144]
	b	.L6821
.L6823:
	ldr	r0, [r9]
	mov	r3, r7
	ldr	r1, .L6824
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	add	r0, r0, #32
.LPIC1458:
	add	r1, pc, r1
	bl	dev_err(PLT)
	str	r5, [r4, #156]
	b	.L6821
.L6825:
	.align	2
.L6824:
	.word	.LC307-(.LPIC1458+8)
	.fnend
	.size	gser_send_modem_ctrl_bits, .-gser_send_modem_ctrl_bits
	.align	2
	.type	fsg_setup, %function
fsg_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #80]
	ldrh	lr, [r1, #4]	@ unaligned
	ldrh	r5, [r1, #2]	@ unaligned
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r2, [r3, #8]
	ldr	r0, [r3, #52]
	cmp	r2, #0
	beq	.L6851
	ldr	r2, [r3, #56]
	mov	ip, #0
	add	r2, r2, #1
	str	r2, [r3, #56]
	str	ip, [r0, #32]
	str	ip, [r0, #4]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	cmp	r3, #254
	beq	.L6833
	cmp	r3, #255
	bne	.L6849
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #33
	bne	.L6849
	ldrh	r3, [r4, #84]
	cmp	r3, lr
	bne	.L6840
	orrs	r3, r6, r5
	bne	.L6840
	ldr	r5, [r4, #80]
	add	r6, r5, #44
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #112]
	mov	r7, r0
	cmp	r3, #2
	bgt	.L6831
	ldr	r2, [r5, #168]
	mov	r1, #2
	ldr	r3, [r5, #56]
	str	r1, [r5, #112]
	cmp	r2, #0
	str	r3, [r5, #116]
	beq	.L6831
	mov	r0, #10
	bl	send_sig_info(PLT)
.L6831:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, [r4, #80]
	movw	r3, #32767
	movw	r2, #1255
	ldr	r4, [r1, #4]
	cmp	r4, #0
	movne	r4, r3
	moveq	r4, r2
	b	.L6844
.L6849:
	mvn	r4, #94
.L6844:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6833:
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #161
	bne	.L6849
	ldrh	r3, [r4, #84]
	cmp	r3, lr
	bne	.L6840
	cmp	r6, #1
	cmpeq	r5, #0
	bne	.L6840
	ldr	r3, [r4, #80]
	mov	r1, #1
	mov	r2, #32
	ldr	ip, [r0]
	ldr	r3, [r3, #92]
	sub	r3, r3, #1
	strb	r3, [ip]
	str	r1, [r0, #4]
	ldr	r5, [r4, #80]
	ldrd	r0, [r5, #48]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	ldr	r3, [r5, #48]
	cmp	r0, #0
	cmnne	r0, #108
	mov	r4, r0
	str	r5, [r3]
	beq	.L6844
	ldr	r0, [r5]
	mov	r3, r4
	ldr	r2, [r5, #48]
	ldr	r1, .L6852
	add	r0, r0, #32
	ldr	r2, [r2, #4]
.LPIC1462:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	b	.L6844
.L6840:
	mvn	r4, #32
	b	.L6844
.L6851:
	ldr	r2, .L6852+4
	mvn	r4, #94
	ldr	r0, [r3]
	movw	r3, #617
	ldr	r1, .L6852+8
.LPIC1460:
	add	r2, pc, r2
	add	r2, r2, #2704
	add	r0, r0, #32
.LPIC1459:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldr	r0, .L6852+12
	movw	r1, #461
.LPIC1461:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L6844
.L6853:
	.align	2
.L6852:
	.word	.LC365-(.LPIC1462+8)
	.word	.LANCHOR3-(.LPIC1460+8)
	.word	.LC363-(.LPIC1459+8)
	.word	.LC364-(.LPIC1461+8)
	.fnend
	.size	fsg_setup, .-fsg_setup
	.align	2
	.type	rmnet_mux_sdio_complete_epout, %function
rmnet_mux_sdio_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r4, [r0]
	.pad #12
	sub	sp, sp, #12
	ldr	r7, [r1, #32]
	ldr	r3, [r1, #44]
	ldr	r8, [r4, #352]
	ldr	r9, [r4, #76]
	cmp	r8, #0
	beq	.L6876
	cmn	r3, #104
	beq	.L6857
	cmp	r3, #0
	beq	.L6858
	cmn	r3, #108
	beq	.L6857
	ldr	r2, [r0, #4]
	add	r6, r4, #356
	ldr	lr, [r1, #48]
	ldr	ip, [r1, #4]
	ldr	r0, [r9]
	ldr	r1, .L6879
	str	lr, [sp]
	str	ip, [sp, #4]
	add	r0, r0, #32
.LPIC1463:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
.L6859:
	ldr	r3, .L6879+4
	ldr	r2, [r4, #300]
.LPIC1464:
	add	r3, pc, r3
	ldr	r3, [r3, #596]
	cmp	r2, r3
	bcs	.L6877
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	movw	r0, #2056
	mov	r1, #32
	mov	r2, #0
	mvn	r3, #0
	bl	__alloc_skb(PLT)
	subs	r6, r0, #0
	beq	.L6863
	ldr	r3, [r6, #172]
	mov	ip, #2048
	mov	r1, r5
	ldr	r0, [r6, #160]
	mov	r2, #32
	add	r3, r3, #8
	add	r0, r0, #8
	str	r3, [r6, #172]
	str	r0, [r6, #160]
	str	r3, [r5]
	str	r6, [r5, #32]
	str	ip, [r5, #4]
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bne	.L6878
.L6854:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L6858:
	ldr	r1, [r1, #48]
	mov	r0, r7
	add	r6, r4, #356
	bl	skb_put(PLT)
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #220]
	add	r2, r4, #216
	add	r1, r4, #232
	strd	r2, [r7]
	str	r7, [r3]
	ldr	r3, [r4, #224]
	str	r7, [r4, #220]
	ldr	r0, [r4, #368]
	add	r3, r3, #1
	str	r3, [r4, #224]
	bl	queue_work(PLT)
	b	.L6859
.L6857:
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	mov	r3, #0
	mov	r0, r3
	str	r3, [r5]
.L6875:
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L6876:
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	str	r8, [r5]
	mov	r0, r8
	b	.L6875
.L6877:
	ldr	r3, [r4, #212]
	add	r2, r5, #36
	add	r1, r4, #208
	mov	r0, r6
	str	r2, [r4, #212]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock(PLT)
.L6878:
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
.L6861:
	ldr	r0, [r9]
	mov	r2, r7
	ldr	r1, .L6879+8
	add	r0, r0, #32
.LPIC1465:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldr	r3, [r4, #212]
	add	r2, r5, #36
	add	r1, r4, #208
	str	r2, [r4, #212]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	b	.L6854
.L6863:
	mvn	r7, #11
	b	.L6861
.L6880:
	.align	2
.L6879:
	.word	.LC349-(.LPIC1463+8)
	.word	.LANCHOR1-(.LPIC1464+8)
	.word	.LC366-(.LPIC1465+8)
	.fnend
	.size	rmnet_mux_sdio_complete_epout, .-rmnet_mux_sdio_complete_epout
	.align	2
	.global	gser_send_ring_indicator
	.type	gser_send_ring_indicator, %function
gser_send_ring_indicator:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r1, #0
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #148
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r0, #170]
	.pad #4
	sub	sp, sp, #4
	bic	r3, r3, #8
	uxth	r3, r3
	orrne	r3, r3, #8
	strh	r3, [r0, #170]	@ movhi
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #156]
	mov	r8, r0
	cmp	r5, #0
	beq	.L6883
	ldr	r3, [r4, #20]
	mov	ip, #0
	mov	r6, #32
	mov	r0, #10
	mvn	fp, #94
	ldr	lr, [r4, #152]
	mov	r2, r6
	mov	r10, #2
	mov	r1, r5
	ldr	r9, [r3, #24]
	str	ip, [r4, #156]
	strb	ip, [r4, #144]
	ldr	r3, [r5]
	str	r0, [r5, #4]
	mov	r0, lr
	strb	ip, [r3, #2]
	strb	ip, [r3, #3]
	strb	fp, [r3]
	strb	r6, [r3, #1]
	ldrb	r6, [r4, #136]	@ zero_extendqisi2
	strb	ip, [r3, #7]
	strb	r10, [r3, #6]
	strh	r6, [r3, #4]	@ unaligned
	ldrh	ip, [r4, #170]	@ unaligned
	strh	ip, [r3, #8]	@ unaligned
	ldr	r3, [lr, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	movge	r6, r3
	blt	.L6890
.L6885:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6883:
	mov	r3, #1
	mov	r6, r5
	strb	r3, [r4, #144]
	b	.L6885
.L6890:
	ldr	r0, [r9]
	mov	r6, r3
	ldr	r1, .L6891
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	add	r0, r0, #32
.LPIC1466:
	add	r1, pc, r1
	bl	dev_err(PLT)
	str	r5, [r4, #156]
	b	.L6885
.L6892:
	.align	2
.L6891:
	.word	.LC307-(.LPIC1466+8)
	.fnend
	.size	gser_send_ring_indicator, .-gser_send_ring_indicator
	.align	2
	.type	gser_send_break, %function
gser_send_break:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r1, #0
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #148
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r0, #170]
	.pad #4
	sub	sp, sp, #4
	bic	r3, r3, #4
	uxth	r3, r3
	orrne	r3, r3, #4
	strh	r3, [r0, #170]	@ movhi
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #156]
	mov	r8, r0
	cmp	r5, #0
	beq	.L6895
	ldr	r3, [r4, #20]
	mov	ip, #0
	mov	r7, #32
	mov	r0, #10
	mvn	fp, #94
	ldr	lr, [r4, #152]
	mov	r2, r7
	mov	r10, #2
	mov	r1, r5
	ldr	r9, [r3, #24]
	str	ip, [r4, #156]
	strb	ip, [r4, #144]
	ldr	r3, [r5]
	str	r0, [r5, #4]
	mov	r0, lr
	strb	ip, [r3, #2]
	strb	ip, [r3, #3]
	strb	fp, [r3]
	strb	r7, [r3, #1]
	ldrb	r7, [r4, #136]	@ zero_extendqisi2
	strb	ip, [r3, #7]
	strb	r10, [r3, #6]
	strh	r7, [r3, #4]	@ unaligned
	ldrh	ip, [r4, #170]	@ unaligned
	strh	ip, [r3, #8]	@ unaligned
	ldr	r3, [lr, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	blt	.L6901
.L6896:
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6895:
	mov	r3, #1
	mov	r7, r5
	strb	r3, [r4, #144]
	b	.L6896
.L6901:
	ldr	r0, [r9]
	mov	r3, r7
	ldr	r1, .L6902
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	add	r0, r0, #32
.LPIC1467:
	add	r1, pc, r1
	bl	dev_err(PLT)
	str	r5, [r4, #156]
	b	.L6896
.L6903:
	.align	2
.L6902:
	.word	.LC307-(.LPIC1467+8)
	.fnend
	.size	gser_send_break, .-gser_send_break
	.align	2
	.global	gser_send_carrier_detect
	.type	gser_send_carrier_detect, %function
gser_send_carrier_detect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r1, #0
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #148
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r0, #170]
	.pad #4
	sub	sp, sp, #4
	bic	r3, r3, #1
	uxth	r3, r3
	orrne	r3, r3, #1
	strh	r3, [r0, #170]	@ movhi
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #156]
	mov	r8, r0
	cmp	r5, #0
	beq	.L6906
	ldr	r3, [r4, #20]
	mov	ip, #0
	mov	r6, #32
	mov	r0, #10
	mvn	fp, #94
	ldr	lr, [r4, #152]
	mov	r2, r6
	mov	r10, #2
	mov	r1, r5
	ldr	r9, [r3, #24]
	str	ip, [r4, #156]
	strb	ip, [r4, #144]
	ldr	r3, [r5]
	str	r0, [r5, #4]
	mov	r0, lr
	strb	ip, [r3, #2]
	strb	ip, [r3, #3]
	strb	fp, [r3]
	strb	r6, [r3, #1]
	ldrb	r6, [r4, #136]	@ zero_extendqisi2
	strb	ip, [r3, #7]
	strb	r10, [r3, #6]
	strh	r6, [r3, #4]	@ unaligned
	ldrh	ip, [r4, #170]	@ unaligned
	strh	ip, [r3, #8]	@ unaligned
	ldr	r3, [lr, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	movge	r6, r3
	blt	.L6913
.L6908:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6906:
	mov	r3, #1
	mov	r6, r5
	strb	r3, [r4, #144]
	b	.L6908
.L6913:
	ldr	r0, [r9]
	mov	r6, r3
	ldr	r1, .L6914
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	add	r0, r0, #32
.LPIC1468:
	add	r1, pc, r1
	bl	dev_err(PLT)
	str	r5, [r4, #156]
	b	.L6908
.L6915:
	.align	2
.L6914:
	.word	.LC307-(.LPIC1468+8)
	.fnend
	.size	gser_send_carrier_detect, .-gser_send_carrier_detect
	.align	2
	.type	gser_disconnect, %function
gser_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #148
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r0, #170]
	.pad #4
	sub	sp, sp, #4
	mov	r0, r6
	bic	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #156]
	mov	r7, r0
	cmp	r5, #0
	moveq	r3, #1
	streqb	r3, [r4, #144]
	beq	.L6918
	ldr	r3, [r4, #20]
	mov	ip, #0
	mov	r9, #32
	mov	r0, #10
	mvn	fp, #94
	ldr	lr, [r4, #152]
	mov	r2, r9
	mov	r10, #2
	mov	r1, r5
	ldr	r8, [r3, #24]
	str	ip, [r4, #156]
	strb	ip, [r4, #144]
	ldr	r3, [r5]
	str	r0, [r5, #4]
	mov	r0, lr
	strb	ip, [r3, #2]
	strb	ip, [r3, #3]
	strb	fp, [r3]
	strb	r9, [r3, #1]
	ldrb	r9, [r4, #136]	@ zero_extendqisi2
	strb	ip, [r3, #7]
	strb	r10, [r3, #6]
	strh	r9, [r3, #4]	@ unaligned
	ldrh	ip, [r4, #170]	@ unaligned
	strh	ip, [r3, #8]	@ unaligned
	ldr	r3, [lr, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	blt	.L6920
.L6918:
	mov	r0, r6
	mov	r1, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L6920:
	ldr	r0, [r8]
	ldr	r1, .L6921
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	add	r0, r0, #32
.LPIC1469:
	add	r1, pc, r1
	bl	dev_err(PLT)
	str	r5, [r4, #156]
	b	.L6918
.L6922:
	.align	2
.L6921:
	.word	.LC307-(.LPIC1469+8)
	.fnend
	.size	gser_disconnect, .-gser_disconnect
	.align	2
	.type	gser_connect, %function
gser_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #148
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r0, #170]
	.pad #4
	sub	sp, sp, #4
	mov	r0, r6
	orr	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #156]
	mov	r7, r0
	cmp	r5, #0
	moveq	r3, #1
	streqb	r3, [r4, #144]
	beq	.L6925
	ldr	r3, [r4, #20]
	mov	ip, #0
	mov	r9, #32
	mov	r0, #10
	mvn	fp, #94
	ldr	lr, [r4, #152]
	mov	r2, r9
	mov	r10, #2
	mov	r1, r5
	ldr	r8, [r3, #24]
	str	ip, [r4, #156]
	strb	ip, [r4, #144]
	ldr	r3, [r5]
	str	r0, [r5, #4]
	mov	r0, lr
	strb	ip, [r3, #2]
	strb	ip, [r3, #3]
	strb	fp, [r3]
	strb	r9, [r3, #1]
	ldrb	r9, [r4, #136]	@ zero_extendqisi2
	strb	ip, [r3, #7]
	strb	r10, [r3, #6]
	strh	r9, [r3, #4]	@ unaligned
	ldrh	ip, [r4, #170]	@ unaligned
	strh	ip, [r3, #8]	@ unaligned
	ldr	r3, [lr, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	blt	.L6927
.L6925:
	mov	r0, r6
	mov	r1, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L6927:
	ldr	r0, [r8]
	ldr	r1, .L6928
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	add	r0, r0, #32
.LPIC1470:
	add	r1, pc, r1
	bl	dev_err(PLT)
	str	r5, [r4, #156]
	b	.L6925
.L6929:
	.align	2
.L6928:
	.word	.LC307-(.LPIC1470+8)
	.fnend
	.size	gser_connect, .-gser_connect
	.align	2
	.type	gbam_free_buffers, %function
gbam_free_buffers:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r8, [sp, #16]
	add	r8, r0, #4
	strd	r6, [sp, #8]
	add	r7, r0, #8
	mov	r0, r8
	str	lr, [sp, #32]
	strd	r10, [sp, #24]
	.pad #4
	sub	sp, sp, #4
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r9, r0
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	cmp	r4, #0
	beq	.L6932
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L6932
	ldr	r3, [r4, #28]
	add	r5, r4, #28
	ldr	fp, [r2, #76]
	cmp	r5, r3
	beq	.L6933
	mov	r10, #256
	mov	r6, #512
.L6934:
	ldr	r2, [r3, #4]
	sub	r1, r3, #36
	mov	r0, fp
	ldr	ip, [r3]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r10, [r3]
	str	r6, [r3, #4]
	ldr	r3, [fp, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #28]
	cmp	r5, r3
	bne	.L6934
	ldr	r2, [r4, #12]
.L6933:
	ldr	r3, [r4, #52]
	add	r5, r4, #52
	ldr	fp, [r2, #80]
	cmp	r3, r5
	movne	r10, #256
	movne	r6, #512
	beq	.L6939
.L6938:
	ldr	r2, [r3, #4]
	sub	r1, r3, #36
	mov	r0, fp
	ldr	ip, [r3]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r10, [r3]
	str	r6, [r3, #4]
	ldr	r3, [fp, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #52]
	cmp	r3, r5
	bne	.L6938
.L6939:
	ldr	r3, [r4, #36]
	add	r5, r4, #36
	cmp	r3, r5
	cmpne	r3, #0
	movne	r6, #0
	beq	.L6937
.L6941:
	ldr	r2, [r4, #44]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #44]
	ldmia	r3, {r1, r2}
	str	r6, [r3]
	str	r6, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #36]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L6941
.L6937:
	ldr	r3, [r4, #60]
	add	r5, r4, #60
	cmp	r3, r5
	cmpne	r3, #0
	movne	r6, #0
	beq	.L6932
.L6942:
	ldr	r2, [r4, #68]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #68]
	ldmia	r3, {r1, r2}
	str	r6, [r3]
	str	r6, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #60]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L6942
.L6932:
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	mov	r0, r8
	mov	r1, r9
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
	.fnend
	.size	gbam_free_buffers, .-gbam_free_buffers
	.align	2
	.type	gbam_data_ch_remove, %function
gbam_data_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r4, .L6978
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC1471:
	add	r4, pc, r4
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r4, #2224]
	cmp	r7, #0
	ble	.L6975
	ldr	r3, .L6978+4
	mov	r4, #0
	mov	r6, r0
	ldr	fp, .L6978+8
	mov	r5, r4
	mov	r9, r4
	mov	r8, r4
.LPIC1473:
	add	r3, pc, r3
.LPIC1472:
	add	fp, pc, fp
	str	r3, [sp, #4]
	ldr	r3, .L6978+12
.LPIC1474:
	add	r3, pc, r3
	str	r3, [sp, #8]
.L6957:
	mov	r0, fp
	ldr	r1, [r6]
	mov	r2, #20
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L6977
.L6953:
	add	r5, r5, #1
	add	r4, r4, #84
	cmp	r5, r7
	blt	.L6957
.L6975:
	mov	r0, #0
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6977:
	ldr	r3, [sp, #4]
	add	r3, r3, #2224
	add	r3, r3, #4
	ldr	r7, [r4, r3]
	add	r3, r7, #8
	add	r10, r7, #4
	mov	r0, r10
	str	r3, [sp]
	bl	_raw_spin_lock_irqsave(PLT)
	str	r0, [sp, #12]
	ldr	r0, [sp]
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r7, #12]
	cmp	r3, #0
	ldrned	r8, [r3, #76]
.L6954:
	ldr	r0, [sp]
	bl	_raw_spin_unlock(PLT)
	ldr	r1, [sp, #12]
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r8, #0
	beq	.L6955
	ldr	r3, [r8, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6955
	mov	r0, r8
	blx	r3
.L6955:
	cmp	r9, #0
	beq	.L6956
	ldr	r3, [r9, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6956
	mov	r0, r9
	blx	r3
.L6956:
	mov	r0, r7
	add	r10, r7, #20
	bl	gbam_free_buffers(PLT)
	ldr	r0, [r7, #24]
	bl	msm_bam_dmux_close(PLT)
	mov	r3, #0
	mov	r1, r10
	mov	r0, #2
	str	r3, [r7, #240]
	bl	_clear_bit(PLT)
	mov	r1, r10
	mov	r0, #1
	bl	_clear_bit(PLT)
	ldr	r3, [sp, #8]
	ldr	r7, [r3, #2224]
	b	.L6953
.L6979:
	.align	2
.L6978:
	.word	.LANCHOR2-(.LPIC1471+8)
	.word	.LANCHOR2-(.LPIC1473+8)
	.word	.LC187-(.LPIC1472+8)
	.word	.LANCHOR2-(.LPIC1474+8)
	.fnend
	.size	gbam_data_ch_remove, .-gbam_data_ch_remove
	.align	2
	.type	transport_store, %function
transport_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L7088
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC1475:
	add	r1, pc, r1
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	ldr	r7, [r1, #2312]
	str	r3, [sp, #4]
	ldr	r3, [r7, #360]
	cmp	r3, #0
	beq	.L7082
	ldr	r1, .L7088+4
	mov	r0, r2
	add	r2, sp, #16
.LPIC1478:
	add	r1, pc, r1
	bl	sscanf(PLT)
	ldr	r3, [sp, #16]
	ldr	r5, [r7, #352]
	cmp	r3, #0
	movne	r4, #2
	moveq	r4, #3
	cmp	r5, r4
	beq	.L7083
	mov	r3, #0
	cmp	r5, #0
	str	r3, [r7, #352]
	beq	.L6985
	ldr	r0, [r7, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6986
	blx	r3
.L6986:
	ldr	r0, [r7, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6987
	blx	r3
.L6987:
	cmp	r5, #2
	beq	.L6988
	cmp	r5, #3
	bne	.L6985
	add	r0, r7, #144
	add	r9, r7, #356
	bl	tasklet_kill(PLT)
	add	r0, r7, #124
	add	r5, r7, #96
	bl	tasklet_kill(PLT)
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r7, #96]
	str	r0, [sp, #8]
	cmp	r5, r3
	movne	r8, #256
	movne	r6, #512
	beq	.L7004
.L7003:
	ldr	r2, [r3, #4]
	mov	fp, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r6, [r3, #4]
	ldr	r10, [r7, #80]
	ldr	r0, [fp, #-36]!
	bl	kfree(PLT)
	ldr	r2, [r10, #8]
	mov	r0, r10
	mov	r1, fp
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r3, [r7, #96]
	cmp	r5, r3
	bne	.L7003
.L7004:
	ldr	r3, [r7, #104]
	add	r5, r7, #104
	cmp	r5, r3
	movne	r8, #256
	movne	r6, #512
	beq	.L7002
.L7007:
	ldr	r2, [r3, #4]
	mov	fp, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r6, [r3, #4]
	ldr	r10, [r7, #84]
	ldr	r0, [fp, #-36]!
	bl	kfree(PLT)
	ldr	r2, [r10, #8]
	mov	r0, r10
	mov	r1, fp
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r3, [r7, #104]
	cmp	r5, r3
	bne	.L7007
.L7002:
	ldr	r3, [r7, #112]
	add	r5, r7, #112
	cmp	r5, r3
	movne	r8, #256
	movne	r6, #512
	beq	.L7006
.L7008:
	ldr	r2, [r3, #4]
	mov	fp, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r6, [r3, #4]
	ldr	r10, [r7, #84]
	ldr	r0, [fp, #-36]!
	bl	kfree(PLT)
	ldr	r2, [r10, #8]
	mov	r0, r10
	mov	r1, fp
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r3, [r7, #112]
	cmp	r5, r3
	bne	.L7008
.L7006:
	mov	r0, r9
	ldr	r1, [sp, #8]
	bl	_raw_spin_unlock_irqrestore(PLT)
.L6985:
	cmp	r4, #2
	str	r4, [r7, #352]
	beq	.L7040
	cmp	r4, #3
	bne	.L7084
	ldr	r3, [r7, #164]
	ldr	r4, [r7, #76]
	tst	r3, #1
	beq	.L7085
.L7020:
	ldr	r10, .L7088+8
	mov	r8, #8
	mov	r9, #2048
.LPIC1487:
	add	r10, pc, r10
.L7030:
	ldr	r5, [r7, #80]
	mov	r1, #208
	ldr	r6, .L7088+12
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L7013
.LPIC1492:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	str	r9, [r4, #4]
	mov	r1, #208
	ldr	r3, [r6, #44]
	subs	r0, r3, #0
	beq	.L7026
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L7080
.L7027:
	cmn	r4, #4096
	add	r2, r4, #36
	add	r1, r7, #104
	bhi	.L7013
	str	r9, [r4, #4]
	subs	r8, r8, #1
	str	r7, [r4, #32]
	str	r10, [r4, #28]
	ldr	r3, [r7, #108]
	str	r2, [r7, #108]
	str	r1, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	bne	.L7030
	ldr	r9, .L7088+16
	mov	r8, #8
	mov	r10, #2048
.LPIC1488:
	add	r9, pc, r9
.L7034:
	ldr	r5, [r7, #84]
	mov	r1, #208
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L7013
	str	r10, [r4, #4]
	ldr	r3, [r6, #44]
	mov	r1, #208
	subs	r0, r3, #0
	beq	.L7031
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L7080
.L7032:
	cmn	r4, #4096
	add	r2, r4, #36
	add	r1, r7, #96
	bhi	.L7013
	str	r7, [r4, #32]
	subs	r8, r8, #1
	str	r9, [r4, #28]
	ldr	r3, [r7, #100]
	str	r2, [r7, #100]
	str	r1, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	bne	.L7034
	mov	r0, r7
	bl	rmnet_mux_smd_start_rx(PLT)
	b	.L7013
.L7084:
	ldr	r1, .L7088+20
	ldr	r0, .L7088+24
.LPIC1490:
	add	r1, pc, r1
	add	r1, r1, #2704
.LPIC1489:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
.L7013:
	ldr	r0, [sp, #4]
.L7075:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7040:
	ldr	r6, .L7088+28
	mov	r4, #16
	add	r5, r7, #208
.LPIC1481:
	add	r6, pc, r6
.L7010:
	ldr	r0, [r7, #80]
	mov	r1, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	beq	.L7013
	cmn	r0, #4096
	bhi	.L7013
	str	r6, [r0, #28]
	ldr	r2, [r7, #212]
	subs	r4, r4, #1
	str	r3, [r7, #212]
	str	r5, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	bne	.L7010
	ldr	r8, .L7088+32
	mov	r4, #100
	add	r6, r7, #184
.LPIC1482:
	add	r8, pc, r8
.L7015:
	ldr	r0, [r7, #84]
	mov	r1, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	beq	.L7013
	cmn	r0, #4096
	bhi	.L7013
	str	r8, [r0, #28]
	ldr	r2, [r7, #188]
	subs	r4, r4, #1
	str	r3, [r7, #188]
	str	r6, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	bne	.L7015
	ldr	r3, [r7, #360]
	ldr	r2, [r7, #76]
	cmp	r3, #0
	str	r2, [sp, #8]
	beq	.L7013
	add	r6, r7, #356
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r7, #208]
	mov	fp, r0
	cmp	r5, r4
	beq	.L7016
	mov	r9, #256
	mov	r8, #512
	b	.L7037
.L7018:
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r7, #208]
	mov	fp, r0
	cmp	r4, r5
	beq	.L7016
.L7037:
	ldr	r3, [r4, #4]
	mov	r1, fp
	mov	r0, r6
	ldr	r2, [r4]
	sub	fp, r4, #36
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r1, #208
	mov	r2, #0
	mvn	r3, #0
	movw	r0, #2056
	bl	__alloc_skb(PLT)
	mov	r1, fp
	subs	fp, r0, #0
	mov	r3, #2048
	mov	r2, #208
	beq	.L7041
	ldr	r0, [fp, #172]
	ldr	lr, [fp, #160]
	add	r0, r0, #8
	add	lr, lr, #8
	str	r0, [fp, #172]
	str	lr, [fp, #160]
	str	r0, [r4, #-36]
	str	r3, [r4, #-32]
	str	fp, [r4, #-4]
	ldr	r0, [r7, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r10, r0, #0
	mov	r0, r6
	beq	.L7018
	mov	r0, fp
	bl	dev_kfree_skb_any(PLT)
.L7017:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp, #8]
	mov	fp, r0
	mov	r2, r10
	ldr	r1, .L7088+36
	ldr	r0, [r3]
.LPIC1491:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r3, [r7, #212]
	str	r4, [r7, #212]
	str	r5, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
.L7016:
	mov	r0, r6
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7013
.L6988:
	add	r3, r7, #356
	add	r6, r7, #184
	mov	r0, r3
	mov	r5, #0
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r7, #184]
	str	r0, [sp, #12]
	str	r5, [r7, #300]
	cmp	r6, r3
	movne	fp, #256
	movne	r10, #512
	beq	.L6994
.L6993:
	ldr	r2, [r3, #4]
	mov	r9, r3
	mov	r0, #0
	ldr	lr, [r3]
	str	r2, [lr, #4]
	str	lr, [r2]
	str	fp, [r3]
	str	r10, [r3, #4]
	str	r5, [r9, #-36]!
	ldr	r8, [r7, #80]
	bl	kfree(PLT)
	mov	r1, r9
	ldr	r2, [r8, #8]
	mov	r0, r8
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r3, [r7, #184]
	cmp	r6, r3
	bne	.L6993
.L6994:
	ldr	r3, [r7, #208]
	add	r5, r7, #208
	cmp	r5, r3
	movne	fp, #256
	movne	r10, #512
	movne	r6, #0
	beq	.L6992
.L6997:
	ldr	r2, [r3, #4]
	mov	r8, r3
	mov	r0, #0
	ldr	lr, [r3]
	str	r2, [lr, #4]
	str	lr, [r2]
	str	fp, [r3]
	str	r10, [r3, #4]
	str	r6, [r8, #-36]!
	ldr	r9, [r7, #84]
	bl	kfree(PLT)
	mov	r1, r8
	ldr	r2, [r9, #8]
	mov	r0, r9
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r3, [r7, #208]
	cmp	r5, r3
	bne	.L6997
.L6992:
	ldr	r3, [r7, #192]
	add	r5, r7, #192
	cmp	r5, r3
	cmpne	r3, #0
	movne	r6, #0
	beq	.L6996
.L6998:
	ldr	r2, [r7, #200]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r7, #200]
	ldmia	r3, {r1, r2}
	str	r6, [r3]
	str	r6, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r7, #192]
	cmp	r5, r3
	cmpne	r3, #0
	bne	.L6998
.L6996:
	ldr	r3, [r7, #216]
	add	r5, r7, #216
	cmp	r3, r5
	cmpne	r3, #0
	movne	r6, #0
	beq	.L7036
.L6999:
	ldr	r2, [r7, #224]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r7, #224]
	ldmia	r3, {r1, r2}
	str	r6, [r3]
	str	r6, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r7, #216]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L6999
.L7036:
	ldrd	r0, [sp, #8]
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L6985
.L7026:
	mov	r3, #16
	str	r3, [r4]
	b	.L7027
.L7085:
	ldr	r0, .L7088+40
	add	r1, r7, #120
	mov	r2, r7
	ldr	r3, .L7088+44
.LPIC1483:
	add	r0, pc, r0
.LPIC1484:
	add	r3, pc, r3
	ldr	r0, [r0, #3696]
	bl	smd_open(PLT)
	cmp	r0, #0
	bne	.L7086
	ldr	r3, [r7, #164]
	ands	r3, r3, #1
	bne	.L7020
	ldr	r2, .L7088+48
	mov	r1, sp
	str	r3, [sp, #20]
	bic	r1, r1, #8128
	add	r3, sp, #32
	bic	r1, r1, #63
	add	r5, r7, #172
	ldr	r1, [r1, #12]
	add	r4, sp, #20
	str	r3, [sp, #32]
.LPIC1493:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #36]
	str	r1, [sp, #24]
	str	r2, [sp, #28]
	b	.L7024
.L7087:
	bl	schedule(PLT)
.L7024:
	mov	r0, r5
	mov	r1, r4
	mov	r2, #2
	bl	prepare_to_wait(PLT)
	ldr	r3, [r7, #164]
	tst	r3, #1
	beq	.L7087
	mov	r0, r5
	mov	r1, r4
	bl	finish_wait(PLT)
	b	.L7020
.L7031:
	mov	r3, #16
	str	r3, [r4]
	b	.L7032
.L7080:
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7013
.L7086:
	ldr	r0, [r4]
	ldr	r1, .L7088+52
	add	r0, r0, #32
.LPIC1485:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L7013
.L7083:
	mov	r0, r5
	bl	xport_to_str(PLT)
	ldr	r1, .L7088+56
	mov	r2, r0
	ldr	r0, .L7088+60
	mov	r3, r2
.LPIC1480:
	add	r1, pc, r1
	add	r1, r1, #2704
.LPIC1479:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mov	r0, #0
	b	.L7075
.L7082:
	ldr	r1, .L7088+64
	ldr	r0, .L7088+68
.LPIC1477:
	add	r1, pc, r1
	add	r1, r1, #2704
.LPIC1476:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #21
	b	.L7075
.L7041:
	mvn	r10, #11
	b	.L7017
.L7089:
	.align	2
.L7088:
	.word	.LANCHOR2-(.LPIC1475+8)
	.word	.LC235-(.LPIC1478+8)
	.word	rmnet_mux_smd_complete_epout-(.LPIC1487+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1492+8))
	.word	rmnet_mux_smd_complete_epin-(.LPIC1488+8)
	.word	.LANCHOR3-(.LPIC1490+8)
	.word	.LC369-(.LPIC1489+8)
	.word	rmnet_mux_sdio_complete_epout-(.LPIC1481+8)
	.word	rmnet_mux_sdio_complete_epin-(.LPIC1482+8)
	.word	.LC366-(.LPIC1491+8)
	.word	.LANCHOR4-(.LPIC1483+8)
	.word	rmnet_mux_smd_notify-(.LPIC1484+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1493+8))
	.word	.LC128-(.LPIC1485+8)
	.word	.LANCHOR3-(.LPIC1480+8)
	.word	.LC368-(.LPIC1479+8)
	.word	.LANCHOR3-(.LPIC1477+8)
	.word	.LC367-(.LPIC1476+8)
	.fnend
	.size	transport_store, .-transport_store
	.align	2
	.type	gbam2bam_connect_work, %function
gbam2bam_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #284
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #-152]
	cmp	r3, #6
	beq	.L7121
	cmp	r3, #7
	beq	.L7122
.L7093:
	sub	r6, r4, #280
	sub	r5, r4, #276
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L7123
	ldr	r0, [r3, #80]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #-172]
	beq	.L7124
	ldr	r3, .L7132
	str	r7, [r0, #32]
	mov	r9, #0
	ldr	r2, [r4, #-172]
	mov	r1, #32
.LPIC1502:
	add	r3, pc, r3
	str	r3, [r2, #28]
	ldr	r3, [r4, #-172]
	str	r9, [r3, #4]
	ldr	r2, [r4, #-172]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r3, [r4, #-164]
	ldr	r2, [r4, #-172]
	bic	r3, r3, #65536
	bic	r3, r3, #96
	orr	r3, r3, #65536
	orr	r3, r3, r1
	str	r3, [r2, #52]
	ldr	r3, [r4, #-272]
	ldr	r0, [r3, #76]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	str	r0, [r4, #-168]
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #-168]
	cmp	r3, r9
	beq	.L7125
	str	r7, [r3, #32]
	ldr	r3, .L7132+4
	mov	r0, r6
	ldr	r2, [r4, #-168]
.LPIC1505:
	add	r3, pc, r3
	str	r3, [r2, #28]
	ldr	r3, [r4, #-168]
	str	r9, [r3, #4]
	ldr	r2, [r4, #-168]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r3, [r4, #-160]
	ldr	r2, [r4, #-168]
	bic	r3, r3, #65536
	bic	r3, r3, #96
	orr	r3, r3, #65536
	orr	r3, r3, #32
	str	r3, [r2, #52]
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L7126
	ldr	r0, [r3, #80]
	mov	r2, #32
	ldr	r1, [r4, #-172]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L7127
.L7099:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
.L7098:
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L7128
	ldr	r0, [r3, #76]
	mov	r2, #32
	ldr	r1, [r4, #-168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L7129
.L7102:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
.L7101:
	ldr	r3, [r4, #-152]
	cmp	r3, #6
	beq	.L7130
.L7090:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7130:
	ldr	r3, [r4, #-284]
	cmp	r3, #0
	bne	.L7090
	ldr	r0, .L7132+8
	mov	r1, r7
.LPIC1514:
	add	r0, pc, r0
	bl	usb_bam_register_peer_reset_cb(PLT)
	mov	r0, #1
	bl	usb_bam_client_ready(PLT)
	cmp	r0, #0
	beq	.L7090
	ldr	r1, .L7132+12
	mov	r2, r0
	ldr	r0, .L7132+16
.LPIC1516:
	add	r1, pc, r1
.LPIC1515:
	add	r0, pc, r0
	b	.L7119
.L7123:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldrd	r4, [sp]
	mov	r0, r6
	mov	r1, r8
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L7121:
	bl	usb_bam_reset_complete(PLT)
	ldrb	r0, [r4, #-156]	@ zero_extendqisi2
	sub	r1, r4, #164
	bl	usb_bam_connect(PLT)
	cmp	r0, #0
	bne	.L7131
	ldrb	r0, [r4, #-155]	@ zero_extendqisi2
	sub	r1, r4, #160
	bl	usb_bam_connect(PLT)
	cmp	r0, #0
	beq	.L7093
	ldr	r1, .L7132+20
	mov	r2, r0
	ldr	r0, .L7132+24
.LPIC1497:
	add	r1, pc, r1
.LPIC1496:
	add	r0, pc, r0
.L7119:
	add	r1, r1, #2720
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	r1, r1, #12
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L7124:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, .L7132+28
	ldr	r0, .L7132+32
.LPIC1501:
	add	r1, pc, r1
.LPIC1500:
	add	r0, pc, r0
.L7120:
	add	r1, r1, #2720
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	r1, r1, #12
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L7128:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L7132+36
	ldr	r0, .L7132+40
.LPIC1511:
	add	r1, pc, r1
	add	r1, r1, #1136
.LPIC1510:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L7101
.L7127:
	ldr	r1, .L7132+44
	mov	r2, r0
	ldr	r0, .L7132+48
.LPIC1509:
	add	r1, pc, r1
	add	r1, r1, #1104
.LPIC1508:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L7099
.L7126:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L7132+52
	ldr	r0, .L7132+56
.LPIC1507:
	add	r1, pc, r1
	add	r1, r1, #1104
.LPIC1506:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L7098
.L7122:
	ldr	r1, .L7132+60
	ldr	r0, .L7132+64
.LPIC1499:
	add	r1, pc, r1
.LPIC1498:
	add	r0, pc, r0
	b	.L7120
.L7129:
	ldr	r1, .L7132+68
	mov	r2, r0
	ldr	r0, .L7132+72
.LPIC1513:
	add	r1, pc, r1
	add	r1, r1, #1136
.LPIC1512:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L7102
.L7125:
	ldr	r1, .L7132+76
	ldr	r0, .L7132+80
.LPIC1504:
	add	r1, pc, r1
.LPIC1503:
	add	r0, pc, r0
	b	.L7120
.L7131:
	ldr	r1, .L7132+84
	mov	r2, r0
	ldr	r0, .L7132+88
.LPIC1495:
	add	r1, pc, r1
.LPIC1494:
	add	r0, pc, r0
	b	.L7119
.L7133:
	.align	2
.L7132:
	.word	gbam_endless_rx_complete-(.LPIC1502+8)
	.word	gbam_endless_tx_complete-(.LPIC1505+8)
	.word	gbam_peer_reset_cb-(.LPIC1514+8)
	.word	.LANCHOR3-(.LPIC1516+8)
	.word	.LC374-(.LPIC1515+8)
	.word	.LANCHOR3-(.LPIC1497+8)
	.word	.LC371-(.LPIC1496+8)
	.word	.LANCHOR3-(.LPIC1501+8)
	.word	.LC373-(.LPIC1500+8)
	.word	.LANCHOR3-(.LPIC1511+8)
	.word	.LC29-(.LPIC1510+8)
	.word	.LANCHOR3-(.LPIC1509+8)
	.word	.LC191-(.LPIC1508+8)
	.word	.LANCHOR3-(.LPIC1507+8)
	.word	.LC29-(.LPIC1506+8)
	.word	.LANCHOR3-(.LPIC1499+8)
	.word	.LC372-(.LPIC1498+8)
	.word	.LANCHOR3-(.LPIC1513+8)
	.word	.LC191-(.LPIC1512+8)
	.word	.LANCHOR3-(.LPIC1504+8)
	.word	.LC373-(.LPIC1503+8)
	.word	.LANCHOR3-(.LPIC1495+8)
	.word	.LC370-(.LPIC1494+8)
	.fnend
	.size	gbam2bam_connect_work, .-gbam2bam_connect_work
	.align	2
	.type	ecm_close, %function
ecm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #0
	mov	r3, #1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #160]
	strb	r3, [r0, #164]
	strb	ip, [r0, #165]
	cmp	r5, ip
	beq	.L7134
	ldr	r3, [r5]
	mov	r4, r0
	mov	lr, #2
	mvn	r0, #94
	mov	r6, #8
	mov	r1, r5
	mov	r2, #32
	strb	ip, [r3, #1]
	ldrb	r7, [r4, #165]	@ zero_extendqisi2
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	strh	r7, [r3, #2]	@ unaligned
	str	r6, [r5, #4]
	strb	lr, [r4, #164]
	strb	r0, [r3]
	ldrb	r0, [r4, #140]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #156]
	str	ip, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #160]
.L7134:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_close, .-ecm_close
	.align	2
	.type	ecm_open, %function
ecm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, #1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #160]
	strb	r3, [r0, #165]
	strb	r3, [r0, #164]
	cmp	r5, #0
	beq	.L7139
	ldr	r3, [r5]
	mov	ip, #0
	mov	r4, r0
	mov	lr, #2
	mvn	r0, #94
	mov	r6, #8
	mov	r1, r5
	mov	r2, #32
	strb	ip, [r3, #1]
	ldrb	r7, [r4, #165]	@ zero_extendqisi2
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	strh	r7, [r3, #2]	@ unaligned
	str	r6, [r5, #4]
	strb	lr, [r4, #164]
	strb	r0, [r3]
	ldrb	r0, [r4, #140]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #156]
	str	ip, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #160]
.L7139:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_open, .-ecm_open
	.align	2
	.type	ecm_qc_open, %function
ecm_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, #1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #140]
	strb	r3, [r0, #145]
	strb	r3, [r0, #144]
	cmp	r5, #0
	beq	.L7144
	ldr	r3, [r5]
	mov	ip, #0
	mov	r4, r0
	mov	lr, #2
	mvn	r0, #94
	mov	r6, #8
	mov	r1, r5
	mov	r2, #32
	strb	ip, [r3, #1]
	ldrb	r7, [r4, #145]	@ zero_extendqisi2
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	strh	r7, [r3, #2]	@ unaligned
	str	r6, [r5, #4]
	strb	lr, [r4, #144]
	strb	r0, [r3]
	ldrb	r0, [r4, #112]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #136]
	str	ip, [r4, #140]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #140]
.L7144:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_qc_open, .-ecm_qc_open
	.align	2
	.type	ecm_qc_close, %function
ecm_qc_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #0
	mov	r3, #1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #140]
	strb	r3, [r0, #144]
	strb	ip, [r0, #145]
	cmp	r5, ip
	beq	.L7149
	ldr	r3, [r5]
	mov	r4, r0
	mov	lr, #2
	mvn	r0, #94
	mov	r6, #8
	mov	r1, r5
	mov	r2, #32
	strb	ip, [r3, #1]
	ldrb	r7, [r4, #145]	@ zero_extendqisi2
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	strh	r7, [r3, #2]	@ unaligned
	str	r6, [r5, #4]
	strb	lr, [r4, #144]
	strb	r0, [r3]
	ldrb	r0, [r4, #112]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #136]
	str	ip, [r4, #140]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #140]
.L7149:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_qc_close, .-ecm_qc_close
	.align	2
	.type	ecm_qc_notify_complete, %function
ecm_qc_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, [r1, #32]
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	cmn	r3, #108
	beq	.L7156
	cmn	r3, #104
	beq	.L7156
.L7155:
	ldr	r3, [r5, #20]
	cmp	r1, #0
	str	r1, [r5, #140]
	ldr	r0, [r3, #24]
	beq	.L7154
	ldrb	r2, [r5, #144]	@ zero_extendqisi2
	ldr	r3, [r1]
	cmp	r2, #1
	beq	.L7160
	bcc	.L7154
	cmp	r2, #2
	bne	.L7159
	mov	r2, #0
	mov	ip, #8
	mov	r4, #42
	mov	lr, #16
	strb	r2, [r3, #2]
	strb	r4, [r3, #1]
	strb	r2, [r3, #3]
	strb	r2, [r3, #7]
	strb	ip, [r3, #6]
	ldr	ip, [r1]
	str	lr, [r1, #4]
	ldr	r2, [r0]
	ldr	r0, [r2, #20]
	cmp	r0, #2
	movls	r2, #28672
	movtls	r2, 148
	bhi	.L7173
.L7162:
	mov	r0, #0
	str	r2, [ip, #8]
	str	r2, [ip, #12]
	strb	r0, [r5, #144]
.L7159:
	mvn	r0, #94
	mov	ip, #0
	mov	r2, #32
	mov	r4, r1
	strb	r0, [r3]
	ldrb	r0, [r5, #112]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r5, #136]
	str	ip, [r5, #140]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r4, [r5, #140]
.L7154:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7156:
	mov	r3, #0
	strb	r3, [r5, #144]
	b	.L7155
.L7160:
	mov	r2, #0
	mov	ip, #8
	mov	r0, #2
	strb	r2, [r3, #1]
	ldrb	lr, [r5, #145]	@ zero_extendqisi2
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	strh	lr, [r3, #2]	@ unaligned
	str	ip, [r1, #4]
	strb	r0, [r5, #144]
	b	.L7159
.L7173:
	ldr	lr, [r2, #16]
	mov	r0, #28672
	mov	r2, #0
	movt	r0, 148
	movt	r2, 6500
	cmp	lr, #3
	movne	r2, r0
	b	.L7162
	.fnend
	.size	ecm_qc_notify_complete, .-ecm_qc_notify_complete
	.align	2
	.type	ffs_func_disable, %function
ffs_func_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r7, [r0, #-44]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r7, #136]
	cmp	r9, #0
	beq	.L7175
	ldr	r3, [r9, #8]
	mov	r8, #1
	mov	fp, #0
	ldr	r4, [r9, #12]
	add	r0, r3, #28
	ldr	r5, [r3, #220]
	ldrh	r6, [r3, #184]
	add	r4, r4, #28
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r10, r0
.L7177:
	str	r8, [r5, #36]
	ldr	r3, [r4, #-28]
	subs	r0, r3, #0
	beq	.L7176
	ldr	r3, [r3, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #-28]
	str	fp, [r3]
.L7176:
	subs	r6, r6, #1
	str	fp, [r5, #44]
	add	r4, r4, #28
	add	r5, r5, #60
	bne	.L7177
	ldr	r0, [r9, #8]
	mov	r1, r10
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore(PLT)
	str	r6, [r7, #136]
.L7175:
	ldr	r6, [r7, #96]
	cmp	r6, #2
	bne	.L7174
	mov	r3, #0
	add	r4, r7, #120
	mov	r0, r4
	str	r3, [r7, #136]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r7, #100]
	mov	r5, r0
	add	lr, r7, #104
	ldrh	ip, [r7, #108]
	cmp	r3, #1
	streq	r6, [r7, #100]
	cmp	ip, #0
	beq	.L7184
	add	ip, lr, ip
	mov	r3, lr
	mov	r1, lr
.L7182:
	ldrb	r2, [r3], #1	@ zero_extendqisi2
	sub	r0, r2, #5
	cmp	r0, #1
	bhi	.L7183
	strb	r2, [r1]
	add	r1, r1, #1
.L7183:
	cmp	r3, ip
	bne	.L7182
	rsb	r1, lr, r1
	add	r3, r1, #1
	uxth	ip, r1
	uxth	r3, r3
.L7180:
	add	ip, r7, ip
	strh	r3, [r7, #108]	@ movhi
	mov	r2, #3
	mov	r0, r4
	mov	r1, r2
	strb	r2, [ip, #104]
	mov	r2, #1
	bl	__wake_up_locked(PLT)
	mov	r0, r4
	mov	r1, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L7174:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7184:
	mov	r3, #1
	b	.L7180
	.fnend
	.size	ffs_func_disable, .-ffs_func_disable
	.align	2
	.type	mtp_write, %function
mtp_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #52
	sub	sp, sp, #52
	stmia	sp, {r1, r5}
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L7215
	add	r6, r4, #80
	mov	r0, r6
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #96]
	cmp	r3, #3
	beq	.L7236
	cmp	r3, #0
	beq	.L7237
	mov	r3, #2
	mov	r0, r6
	str	r3, [r4, #96]
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r4, #84]
	ldrh	r3, [r3, #20]
	sub	r3, r3, #1
	tst	r3, r5
	moveq	r8, #1
	movne	r8, #0
	cmp	r5, #0
	moveq	r3, r8
	orrne	r3, r8, #1
	cmp	r3, #0
	beq	.L7198
	mov	r3, sp
	bic	r10, r3, #8128
	bic	r10, r10, #63
.L7211:
	ldr	r3, [r4, #96]
	cmp	r5, #0
	moveq	r8, #0
	cmp	r3, #2
	bne	.L7217
	mov	r0, r6
	add	r9, r4, #108
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #108]
	mov	r1, r0
	cmp	r9, r3
	beq	.L7200
	ldr	r2, [r3, #4]
	mov	lr, #512
	mov	fp, #256
	ldr	ip, [r3]
	sub	r7, r3, #36
	mov	r0, r6
	str	r2, [ip, #4]
	str	ip, [r2]
	stmia	r3, {fp, lr}
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r7, #0
	beq	.L7213
.L7201:
	ldr	r3, .L7242
.LPIC1518:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	fp, [r3]
	cmp	fp, r5
	movcs	fp, r5
	cmp	fp, #0
	beq	.L7208
	ldr	r3, [r10, #8]
	ldr	r1, [sp]
#APP
@ 439 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, fp; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	ldr	r0, [r7]
	beq	.L7238
	mov	r1, fp
	bl	__memzero(PLT)
	mvn	r3, #13
	str	r3, [sp, #4]
.L7210:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #112]
	add	r2, r7, #36
	mov	r1, r0
	mov	r0, r6
	str	r2, [r4, #112]
	str	r9, [r7, #36]
	str	r3, [r7, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7198:
	mov	r0, r6
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #96]
	cmp	r3, #3
	beq	.L7224
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r4, #96]
.L7212:
	mov	r0, r6
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r0, [sp, #4]
.L7233:
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7238:
	mov	r2, fp
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	bne	.L7239
.L7208:
	str	fp, [r7, #4]
	ldr	r0, [r4, #84]
	mov	r1, r7
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L7223
	ldr	r2, [sp]
	subs	r5, r5, fp
	and	r3, r8, #1
	orrne	r3, r3, #1
	cmp	r3, #0
	add	r2, r2, fp
	str	r2, [sp]
	bne	.L7211
	b	.L7198
.L7224:
	mvn	r3, #124
	str	r3, [sp, #4]
	b	.L7212
.L7200:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7213:
	ldr	r3, [r4, #96]
	cmp	r3, #2
	beq	.L7240
	mov	r3, #0
	str	r3, [sp, #4]
	b	.L7198
.L7240:
	ldr	r2, .L7242+4
	mov	r3, #0
	add	r0, sp, #28
	ldr	r1, [r10, #12]
	add	ip, r4, #136
	str	r8, [sp, #16]
	str	r3, [sp, #28]
	add	r3, sp, #40
	mov	r8, r0
	str	r5, [sp, #20]
	mov	r5, ip
.LPIC1519:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r0, [sp, #12]
	str	ip, [sp, #8]
	str	r3, [sp, #40]
	str	r3, [sp, #44]
	str	r1, [sp, #32]
	str	r2, [sp, #36]
	b	.L7205
.L7241:
	bl	schedule(PLT)
.L7205:
	mov	r1, r8
	mov	r2, #1
	mov	r0, r5
	mov	fp, #256
	bl	prepare_to_wait(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #108]
	mov	r2, r0
	mov	lr, #512
	mov	r0, r6
	mov	r1, r2
	cmp	r9, r3
	sub	r7, r3, #36
	beq	.L7202
	ldr	r2, [r3, #4]
	ldr	ip, [r3]
	str	r2, [ip, #4]
	str	ip, [r2]
	stmia	r3, {fp, lr}
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r7, #0
	bne	.L7203
.L7214:
	ldr	r3, [r4, #96]
	cmp	r3, #2
	bne	.L7219
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L7241
	mov	r3, #65024
	movt	r3, 65535
	str	r3, [sp, #4]
.L7204:
	ldrd	r0, [sp, #8]
	bl	finish_wait(PLT)
	b	.L7198
.L7237:
	mov	r0, r6
	bl	_raw_spin_unlock_irq(PLT)
	mvn	r0, #18
	b	.L7233
.L7217:
	mvn	r3, #4
	str	r3, [sp, #4]
	b	.L7198
.L7215:
	mvn	r0, #21
	b	.L7233
.L7223:
	mvn	r3, #4
	str	r3, [sp, #4]
	b	.L7210
.L7203:
	ldrd	r0, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r5, [sp, #20]
	bl	finish_wait(PLT)
	b	.L7201
.L7219:
	mov	r3, #0
	str	r3, [sp, #4]
	b	.L7204
.L7202:
	mov	r1, r2
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7214
.L7236:
	mov	r3, #1
	mov	r0, r6
	str	r3, [r4, #96]
	bl	_raw_spin_unlock_irq(PLT)
	mvn	r0, #124
	b	.L7233
.L7239:
	mvn	r3, #13
	str	r3, [sp, #4]
	b	.L7210
.L7243:
	.align	2
.L7242:
	.word	mtp_tx_req_len(GOT_PREL)+(.-(.LPIC1518+8))
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1519+8))
	.fnend
	.size	mtp_write, .-mtp_write
	.align	2
	.type	send_file_work, %function
send_file_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 72
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #76
	sub	sp, sp, #76
#APP
@ 757 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	ldrd	r8, [r0, #48]
	ldr	r1, [r0, #32]
	ldrd	r2, [r0, #40]
	cmp	r8, #0
	str	r1, [sp, #4]
	sbcs	r1, r9, #0
	strd	r2, [sp, #40]
	mvnlt	r3, #21
	strlt	r3, [r0, #68]
	blt	.L7244
	ldr	r4, [r0, #56]
	cmp	r4, #0
	bne	.L7287
.L7247:
	ldr	r3, [r0, #-92]
	mov	r6, r0
	ldrh	r3, [r3, #20]
	sub	r3, r3, #1
	and	r1, r9, r3, asr #31
	and	r0, r8, r3
	orrs	r3, r0, r1
	moveq	r7, #1
	movne	r7, #0
	cmp	r8, #1
	sbcs	r3, r9, #0
	movlt	r3, r7
	orrge	r3, r7, #1
	cmp	r3, #0
	beq	.L7264
	mov	r3, sp
	sub	r10, r6, #68
	bic	r3, r3, #8128
	bic	r3, r3, #63
	str	r10, [sp]
	str	r3, [sp, #12]
	sub	r3, r6, #96
	mov	r10, r3
	str	r3, [sp, #8]
	b	.L7263
.L7289:
	ldr	r3, [r6, #-80]
	mov	fp, #0
.L7253:
	cmp	r3, #3
	beq	.L7257
.L7291:
	cmp	r5, #0
	beq	.L7249
	ldr	r3, .L7292
	mov	r1, #0
.LPIC1521:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r2, [r3]
	cmp	r2, r8
	sbcs	r3, r1, r9
	movge	r2, r8
	cmp	r4, #0
	beq	.L7260
	ldr	r3, [r5]
	mov	r1, #2
	str	r8, [r3]
	strh	r1, [r3, #4]	@ movhi
	ldrh	r1, [r6, #60]
	strh	r1, [r3, #6]	@ movhi
	ldr	r1, [r6, #64]
	str	r1, [r3, #8]
.L7260:
	ldr	r1, [r5]
	rsb	r2, r4, r2
	add	r3, sp, #40
	ldr	r0, [sp, #4]
	add	r1, r1, r4
	bl	vfs_read(PLT)
	subs	fp, r0, #0
	blt	.L7285
	add	r4, fp, r4
	mov	r1, r5
	mov	r2, #208
	str	r4, [r5, #4]
	ldr	r0, [r6, #-92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L7288
	subs	r8, r8, r4
	and	r3, r7, #1
	sbc	r9, r9, r4, asr #31
	cmp	r8, #1
	mov	r4, #0
	sbcs	r2, r9, #0
	orrge	r3, r3, #1
	cmp	r3, r4
	beq	.L7264
.L7263:
	orrs	r3, r8, r9
	mov	r0, r10
	moveq	r7, #0
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [sp]
	ldr	r3, [r6, #-68]
	cmp	r3, r2
	beq	.L7251
	ldr	r2, [r3, #4]
	mov	lr, #512
	mov	fp, #256
	ldr	ip, [r3]
	mov	r1, r0
	sub	r5, r3, #36
	mov	r0, r10
	str	r2, [ip, #4]
	str	ip, [r2]
	stmia	r3, {fp, lr}
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r5, #0
	bne	.L7289
.L7252:
	ldr	r3, [r6, #-80]
	cmp	r3, #2
	movne	fp, #0
	movne	r5, fp
	bne	.L7253
	ldr	r0, [sp, #12]
	mov	r3, #0
	add	ip, sp, #52
	ldr	r2, .L7292+4
	sub	lr, r6, #40
	strd	r8, [sp, #24]
	str	r7, [sp, #32]
	mov	r8, ip
	mov	r7, lr
	str	r4, [sp, #36]
	ldr	r4, [sp]
	ldr	r1, [r0, #12]
	str	r3, [sp, #52]
	add	r3, sp, #64
.LPIC1522:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	ip, [sp, #20]
	mov	r9, r0
	str	lr, [sp, #16]
	str	r3, [sp, #64]
	str	r3, [sp, #68]
	str	r1, [sp, #56]
	str	r2, [sp, #60]
	b	.L7256
.L7290:
	bl	schedule(PLT)
.L7256:
	mov	r1, r8
	mov	r2, #1
	mov	r0, r7
	mov	fp, #256
	bl	prepare_to_wait(PLT)
	mov	r0, r10
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #-68]
	mov	r2, r0
	mov	lr, #512
	mov	r0, r10
	mov	r1, r2
	cmp	r3, r4
	sub	r5, r3, #36
	beq	.L7254
	ldr	r2, [r3, #4]
	ldr	ip, [r3]
	str	r2, [ip, #4]
	str	ip, [r2]
	stmia	r3, {fp, lr}
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r5, #0
	bne	.L7269
.L7265:
	ldr	r3, [r6, #-80]
	cmp	r3, #2
	bne	.L7270
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L7290
	ldrd	r8, [sp, #24]
	mov	fp, #65024
	mov	r5, #0
	ldr	r7, [sp, #32]
	movt	fp, 65535
	ldr	r4, [sp, #36]
.L7255:
	ldrd	r0, [sp, #16]
	bl	finish_wait(PLT)
	ldr	r3, [r6, #-80]
	cmp	r3, #3
	bne	.L7291
.L7257:
	cmp	r5, #0
	ldr	r10, [sp]
	mvn	fp, #124
	beq	.L7249
.L7261:
	ldr	r4, [sp, #8]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #-64]
	add	r2, r5, #36
	mov	r1, r0
	mov	r0, r4
	str	r2, [r6, #-64]
	str	r10, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7249:
	str	fp, [r6, #68]
#APP
@ 847 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
.L7244:
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7287:
	adds	r8, r8, #12
	mov	r4, #12
	adc	r9, r9, #0
	b	.L7247
.L7264:
	mov	fp, #0
	str	fp, [r6, #68]
#APP
@ 847 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	b	.L7244
.L7285:
	ldr	r10, [sp]
	b	.L7261
.L7251:
	mov	r1, r0
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7252
.L7288:
	ldr	r3, [r6, #-80]
	ldr	r10, [sp]
	cmp	r3, #0
	mvneq	fp, #4
	beq	.L7261
	mov	r3, #4
	mvn	fp, #4
	str	r3, [r6, #-80]
	b	.L7261
.L7269:
	ldrd	r8, [sp, #24]
	mov	fp, #0
	ldr	r7, [sp, #32]
	ldr	r4, [sp, #36]
	b	.L7255
.L7270:
	mov	r5, #0
	ldrd	r8, [sp, #24]
	ldr	r7, [sp, #32]
	mov	fp, r5
	ldr	r4, [sp, #36]
	b	.L7255
.L7254:
	mov	r1, r2
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7265
.L7293:
	.align	2
.L7292:
	.word	mtp_tx_req_len(GOT_PREL)+(.-(.LPIC1521+8))
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1522+8))
	.fnend
	.size	send_file_work, .-send_file_work
	.align	2
	.type	android_suspend, %function
android_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r7, r0, #32
	mov	r0, r7
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata(PLT)
	ldr	r2, .L7314
.LPIC1523:
	add	r2, pc, r2
	ldr	r3, [r2]
	cmp	r2, r3
	sub	r4, r3, #168
	bne	.L7298
	b	.L7295
.L7313:
	ldr	r3, [r4, #168]
	cmp	r2, r3
	sub	r4, r3, #168
	beq	.L7295
.L7298:
	ldr	r3, [r3, #-160]
	cmp	r0, r3
	bne	.L7313
.L7295:
	add	r6, r0, #60
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldrb	r3, [r4, #58]	@ zero_extendqisi2
	mov	r8, r0
	cmp	r3, #0
	bne	.L7299
	mov	r3, #1
	add	r0, r4, #140
	strb	r3, [r4, #58]
	bl	schedule_work(PLT)
.L7299:
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r7
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L7303
	ldr	r4, [r3, #36]!
	cmp	r3, r4
	sub	r4, r4, #64
	beq	.L7303
.L7305:
	ldr	r2, [r4, #48]
	mov	r0, r4
	cmp	r2, #0
	beq	.L7304
	blx	r2
	ldr	r3, [r6, #12]
	add	r3, r3, #36
.L7304:
	ldr	r4, [r4, #64]
	cmp	r3, r4
	sub	r4, r4, #64
	bne	.L7305
.L7303:
	ldr	r3, .L7314+4
.LPIC1526:
	add	r3, pc, r3
	ldr	r3, [r3, #88]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L7302
	mov	r0, r6
	blx	r3
.L7302:
	ldrb	r3, [r6, #16]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #16]
	ldr	r3, [r5]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L7294
	mov	r0, r5
	ldrd	r6, [sp, #8]
	mov	r1, #2
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3
.L7294:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7315:
	.align	2
.L7314:
	.word	.LANCHOR2-(.LPIC1523+8)
	.word	.LANCHOR2-(.LPIC1526+8)
	.fnend
	.size	android_suspend, .-android_suspend
	.align	2
	.type	send_status, %function
send_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #44
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #104]
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L7339
	b	.L7321
.L7348:
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L7321
.L7339:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	bl	sleep_thread(PLT)
	subs	r3, r0, #0
	mov	r0, r4
	beq	.L7348
	mov	r0, r3
.L7345:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7321:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r7, #0
	beq	.L7349
	ldr	r1, [r7, #28]
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
.L7322:
	tst	r3, #4
	movne	r1, #2
	bne	.L7323
	adds	r1, r1, #0
	movne	r1, #1
.L7323:
	ldr	r3, [r6]
	movw	r2, #21333
	ldr	r0, .L7352
	movt	r2, 21314
	str	r2, [r3]
	ldr	ip, [r5, #132]
.LPIC1527:
	add	r0, pc, r0
	ldr	r2, [r0, #3700]
	str	ip, [r3, #4]
	ldr	ip, [r5, #136]
	cmp	r2, #0
	str	ip, [r3, #8]
	beq	.L7324
	ldr	r2, [r5, #136]
	mov	ip, #0
	str	ip, [r0, #3700]
.L7324:
	str	r2, [r3, #8]
	mov	r2, #13
	strb	r1, [r3, #12]
	ldr	r3, [r6, #16]
	str	r2, [r3, #4]
	ldr	r3, [r6, #16]
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #26]
	ldr	r4, [r5, #8]
	cmp	r4, #0
	beq	.L7350
	ldr	r0, [r4, #80]
	ldr	r7, [r4, #92]
	ldr	r8, [r6, #16]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq(PLT)
	mov	r2, #1
	mov	r3, #2
	str	r2, [r6, #20]
	str	r3, [r6, #4]
	ldr	r0, [r4, #80]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r7, #8]
	mov	r0, r7
	mov	r1, r8
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L7328
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r6, #20]
	str	r2, [r6, #4]
	beq	.L7328
	cmn	r3, #95
	beq	.L7351
.L7327:
	ldr	r0, [r4, #76]
	ldr	r1, .L7352+4
	ldr	r2, [r7, #4]
	add	r0, r0, #32
.LPIC1532:
	add	r1, pc, r1
	bl	dev_warn(PLT)
.L7328:
	ldr	r3, [r6, #8]
	mov	r0, #0
	str	r3, [r5, #60]
	b	.L7345
.L7351:
	ldr	r2, [r8, #4]
	cmp	r2, #0
	bne	.L7327
	b	.L7328
.L7349:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	mov	r1, #9472
	movt	r1, 5
	tst	r3, #16
	movne	r1, #0
	b	.L7322
.L7350:
	ldr	r2, .L7352+8
	movw	r3, #707
	ldr	r0, [r5]
	ldr	r1, .L7352+12
.LPIC1530:
	add	r2, pc, r2
	add	r2, r2, #2752
	add	r0, r0, #32
.LPIC1529:
	add	r1, pc, r1
	add	r2, r2, #4
	bl	dev_err(PLT)
	ldr	r0, .L7352+16
	movw	r1, #461
.LPIC1531:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	mvn	r0, #4
	b	.L7345
.L7353:
	.align	2
.L7352:
	.word	.LANCHOR4-(.LPIC1527+8)
	.word	.LC365-(.LPIC1532+8)
	.word	.LANCHOR3-(.LPIC1530+8)
	.word	.LC363-(.LPIC1529+8)
	.word	.LC364-(.LPIC1531+8)
	.fnend
	.size	send_status, .-send_status
	.align	2
	.type	do_write, %function
do_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 72
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #104]
	.pad #92
	sub	sp, sp, #92
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	tst	r3, #2
	movne	r3, #9984
	mvnne	r0, #21
	movtne	r3, 7
	strne	r3, [r6, #28]
	bne	.L7418
	mov	r4, r0
	ldr	r0, [r6]
	add	r0, r0, #24
	bl	_raw_spin_lock(PLT)
	ldr	r2, [r6]
	ldr	r3, [r2, #32]
	bic	r3, r3, #1048576
	bic	r3, r3, #4096
	str	r3, [r2, #32]
	ldr	r0, [r6]
	add	r0, r0, #24
	bl	_raw_spin_unlock(PLT)
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	r3, #10
	ldrb	r3, [r4, #79]	@ zero_extendqisi2
	beq	.L7422
	ldrb	r0, [r4, #78]	@ zero_extendqisi2
	mov	r3, r3, asl #16
	ldrb	r1, [r4, #77]	@ zero_extendqisi2
	ldrb	r2, [r4, #81]	@ zero_extendqisi2
	ldrb	r5, [r4, #80]	@ zero_extendqisi2
	orr	r3, r3, r0, asl #24
	tst	r1, #231
	orr	r3, r3, r2
	mvnne	r0, #21
	orr	r5, r3, r5, asl #8
	movne	r3, #9216
	movtne	r3, 5
	strne	r3, [r6, #28]
	bne	.L7418
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	tst	r3, #128
	beq	.L7423
.L7358:
	ldrd	r2, [r6, #16]
	mov	r1, #0
	mov	r0, r5
	cmp	r5, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r0, #21
	movtge	r3, 5
	strge	r3, [r6, #28]
	bge	.L7418
	ldr	r3, [r6, #40]
	ldr	r0, [r4, #128]
	sub	r1, r3, #32
	rsb	r2, r3, #32
	mov	fp, r5, asl r1
	str	r0, [sp, #40]
	cmp	r0, #0
	mov	r10, r5, asl r3
	orr	fp, fp, r5, lsr r2
	beq	.L7421
	ldr	r3, .L7430
	mov	r9, #1
	strd	r10, [sp, #24]
	ldr	r2, .L7430+4
	mov	r7, r9
	strd	r10, [sp, #16]
	ldr	r1, .L7430+8
.LPIC1539:
	add	r3, pc, r3
.LPIC1538:
	add	r2, pc, r2
	str	r3, [sp, #76]
	movw	r3, #3074
.LPIC1537:
	add	r1, pc, r1
	movt	r3, 3
	str	r2, [sp, #72]
	mov	r2, #8448
	movt	r2, 5
	str	r1, [sp, #60]
	str	r3, [sp, #68]
	ldr	r3, .L7430+12
	str	r2, [sp, #56]
.LPIC1536:
	add	r3, pc, r3
	str	r3, [sp, #64]
	ldr	r3, [sp, #40]
	str	r3, [sp, #44]
.L7362:
	ldr	r5, [r4, #60]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	movne	r3, #0
	andeq	r3, r7, #1
	cmp	r3, #0
	beq	.L7363
	ldrd	r2, [r6, #8]
	ldrd	r0, [sp, #16]
	cmp	r0, r2
	sbcs	r3, r1, r3
	blt	.L7364
	ldr	r3, [r6, #40]
	mov	r9, r1
	ldr	r2, [sp, #56]
	subs	r1, r3, #32
	str	r2, [r6, #28]
	mov	r2, r0, lsr r3
	rsb	r3, r3, #32
	orr	r2, r2, r9, asl r3
	movpl	r3, r9
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	mov	r9, #0
	mov	r7, r9
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L7362
.L7363:
	ldr	r5, [r4, #64]
	ldr	r2, [r5, #4]
	cmp	r2, #0
	bne	.L7372
	cmp	r9, #0
	beq	.L7421
.L7374:
	mov	r0, r4
	bl	sleep_thread(PLT)
	cmp	r0, #0
	beq	.L7362
.L7418:
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7372:
	cmp	r2, #1
	bne	.L7374
	ldr	r2, [r4, #136]
	cmp	r2, #0
	beq	.L7374
#APP
@ 1028 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	ldr	r2, [r5, #8]
	str	r2, [r4, #64]
	ldr	r2, [r5, #24]
	str	r3, [r5, #4]
	ldr	r3, [r2, #44]
	cmp	r3, #0
	bne	.L7424
	ldrd	r0, [r6, #8]
	ldr	r2, [r2, #48]
	mov	r10, r0
	mov	fp, r1
	mov	r0, r2
	mov	r1, #0
	strd	r10, [sp, #48]
	strd	r0, [sp, #32]
	ldrd	r0, [sp, #24]
	subs	r0, r10, r0
	sbc	r1, fp, r1
	ldrd	r10, [sp, #32]
	cmp	r0, r10
	sbcs	r3, r1, fp
	blt	.L7425
.L7377:
	ldr	r8, [r6, #44]
	ldr	r3, [r5, #12]
	rsb	r8, r8, #0
	cmp	r2, r3
	andls	r8, r8, r2
	andhi	r8, r8, r3
	cmp	r8, #0
	bne	.L7426
	ldr	r2, [r5, #24]
	ldr	r2, [r2, #48]
	cmp	r2, r3
	bcs	.L7362
.L7392:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #4
	orr	r3, r3, #8
	strb	r3, [r4, #144]
	b	.L7418
.L7364:
	mov	r9, r1
	ldr	r1, [sp, #40]
	mov	r8, r0
	ldr	r2, [r4, #140]
	cmp	r1, #16384
	movcc	r3, r1
	movcs	r3, #16384
	adds	r8, r8, r3
	rsb	r2, r3, r2
	adc	r9, r9, #0
	subs	r1, r1, r3
	str	r2, [r4, #140]
	str	r1, [sp, #40]
	str	r3, [r5, #12]
	ldr	r1, [r4, #108]
	strd	r8, [sp, #16]
	movne	r9, #1
	moveq	r9, #0
	udiv	r2, r3, r1
	mls	r2, r1, r2, r3
	cmp	r2, #0
	addne	r3, r3, r1
	rsbne	r3, r2, r3
	ldr	r2, [r5, #24]
	str	r3, [r2, #4]
	ldr	r7, [r4, #8]
	cmp	r7, #0
	beq	.L7427
	ldr	r0, [r7, #80]
	ldr	r8, [r7, #96]
	ldr	r10, [r5, #24]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq(PLT)
	mov	r2, #1
	mov	r3, #2
	str	r2, [r5, #28]
	str	r3, [r5, #4]
	ldr	r0, [r7, #80]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r8, #8]
	mov	r0, r8
	mov	r1, r10
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L7371
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r5, #28]
	str	r2, [r5, #4]
	beq	.L7371
	cmn	r3, #95
	beq	.L7428
.L7370:
	ldr	r0, [r7, #76]
	ldr	r1, [sp, #64]
	ldr	r2, [r8, #4]
	add	r0, r0, #32
	bl	dev_warn(PLT)
.L7371:
	ldr	r3, [r5, #8]
	and	r7, r9, #1
	str	r3, [r4, #60]
	b	.L7362
.L7426:
	ldrd	r0, [sp, #24]
	add	r3, sp, #88
	mov	r2, r8
	strd	r0, [r3, #-8]!
	ldr	r0, [r6]
	ldr	r1, [r5]
	bl	vfs_write(PLT)
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r3, r3, #1
	bne	.L7394
	cmp	r0, #0
	blt	.L7395
	cmp	r8, r0
	bls	.L7380
	ldr	r3, [r6, #44]
	ldrd	r10, [sp, #24]
	ldr	r2, [r4, #136]
	rsb	r3, r3, #0
	and	r3, r3, r0
	adds	r10, r10, r3
	mov	r0, r3
	adc	fp, fp, r3, asr #31
	rsb	r2, r3, r2
	cmp	r8, r3
	ldr	r3, [sp, #44]
	str	r2, [r4, #136]
	strd	r10, [sp, #24]
	rsb	r3, r0, r3
	str	r3, [sp, #44]
	bls	.L7381
.L7379:
	ldr	r3, [r6, #40]
	ldr	r2, [sp, #68]
	subs	r1, r3, #32
	str	r2, [r6, #28]
	mov	r2, r10, lsr r3
	rsb	r3, r3, #32
	orr	r2, r2, fp, asl r3
	movpl	r3, fp
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	ldr	r1, [sp, #72]
	str	r2, [r6, #32]
	mov	r2, #1
	orr	r3, r3, #64
	str	r2, [r1, #3700]
	strb	r3, [r6, #24]
.L7381:
	cmp	r8, r0
	beq	.L7429
.L7420:
.L7384:
	ldr	r3, [r5, #24]
	ldr	r2, [r5, #12]
	ldr	r3, [r3, #48]
	cmp	r3, r2
	bcc	.L7392
	ldr	r3, [sp, #44]
	cmp	r3, #0
	bne	.L7362
.L7421:
	mvn	r0, #4
	b	.L7418
.L7425:
	ldrd	r0, [sp, #24]
	ldrd	r10, [sp, #48]
	strd	r0, [sp]
	add	r0, r6, #48
	ldr	r1, [sp, #60]
	strd	r10, [sp, #8]
	bl	dev_err(PLT)
	ldr	r3, [sp, #24]
	ldr	r2, [r6, #8]
	rsb	r2, r3, r2
	b	.L7377
.L7428:
	ldr	r2, [r10, #4]
	cmp	r2, #0
	bne	.L7370
	b	.L7371
.L7423:
	tst	r1, #8
	beq	.L7358
	ldr	r0, [r6]
	add	r0, r0, #24
	bl	_raw_spin_lock(PLT)
	ldr	r2, [r6]
	ldr	r3, [r2, #32]
	orr	r3, r3, #1048576
	orr	r3, r3, #4096
	str	r3, [r2, #32]
	ldr	r0, [r6]
	add	r0, r0, #24
	bl	_raw_spin_unlock(PLT)
	b	.L7358
.L7422:
	ldrb	r2, [r4, #77]	@ zero_extendqisi2
	orr	r3, r3, #167772160
	ldrb	r5, [r4, #78]	@ zero_extendqisi2
	orr	r3, r3, r2, asl #16
	orr	r5, r3, r5, asl #8
	bic	r5, r5, #-16777216
	b	.L7358
.L7380:
	ldrd	r10, [sp, #24]
	ldr	r3, [r4, #136]
	ldr	r2, [sp, #44]
	adds	r10, r10, r0
	adc	fp, fp, r0, asr #31
	rsb	r3, r0, r3
	rsb	r2, r0, r2
	cmp	r8, r0
	str	r3, [r4, #136]
	strd	r10, [sp, #24]
	str	r2, [sp, #44]
	bne	.L7420
.L7429:
	ldr	r3, [sp, #76]
	ldr	r3, [r3, #3704]
	cmp	r3, #0
	bne	.L7420
	ldr	r3, [sp, #76]
	ldr	r3, [r3, #3700]
	cmp	r3, #0
	bne	.L7421
	ldr	r3, [r4, #68]
	ldr	r2, [r3, #4]
	cmp	r2, #2
	beq	.L7420
	ldr	r2, [r3, #36]
	cmp	r2, #2
	beq	.L7420
	ldr	r2, [r3, #68]
	cmp	r2, #2
	beq	.L7420
	ldr	r2, [r3, #100]
	ldr	r3, [sp, #40]
	cmp	r2, #2
	clz	r3, r3
	mov	r3, r3, lsr #5
	moveq	r3, #0
	cmp	r3, #0
	beq	.L7420
	ldr	r2, [sp, #76]
	mov	r3, #1
	mov	r0, r4
	str	r3, [r2, #3704]
	bl	send_status(PLT)
	b	.L7420
.L7395:
	mov	r0, r3
	ldrd	r10, [sp, #24]
	b	.L7379
.L7427:
	ldr	r2, .L7430+16
	mov	r3, #716
	ldr	r0, [r4]
	ldr	r1, .L7430+20
.LPIC1534:
	add	r2, pc, r2
	add	r2, r2, #2768
	add	r0, r0, #32
.LPIC1533:
	add	r1, pc, r1
	add	r2, r2, #8
	bl	dev_err(PLT)
	ldr	r0, .L7430+24
	movw	r1, #461
.LPIC1535:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	mvn	r0, #4
	b	.L7418
.L7394:
	mvn	r0, #3
	b	.L7418
.L7424:
	ldr	r3, [r6, #40]
	mov	r2, #2048
	mvn	r0, #4
	ldrd	r4, [sp, #24]
	movt	r2, 4
	str	r2, [r6, #28]
	subs	r1, r3, #32
	mov	r2, r4, lsr r3
	rsb	r3, r3, #32
	orr	r2, r2, r5, asl r3
	movpl	r3, r5
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L7418
.L7431:
	.align	2
.L7430:
	.word	.LANCHOR4-(.LPIC1539+8)
	.word	.LANCHOR4-(.LPIC1538+8)
	.word	.LC375-(.LPIC1537+8)
	.word	.LC365-(.LPIC1536+8)
	.word	.LANCHOR3-(.LPIC1534+8)
	.word	.LC363-(.LPIC1533+8)
	.word	.LC364-(.LPIC1535+8)
	.fnend
	.size	do_write, .-do_write
	.align	2
	.type	ncm_open, %function
ncm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #176
	mov	r0, r6
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock(PLT)
	ldr	r5, [r4, #160]
	mov	r1, #1
	mov	r2, #2
	ldr	r3, [r4, #20]
	strb	r1, [r4, #165]
	strb	r2, [r4, #164]
	cmp	r5, #0
	ldr	r1, [r3, #24]
	beq	.L7434
	ldr	r3, [r5]
	mov	r2, #0
	mov	r0, #8
	mov	lr, #42
	mov	ip, #16
	strb	lr, [r3, #1]
	strb	r0, [r3, #6]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	r2, [r3, #7]
	ldr	r0, [r5]
	str	ip, [r5, #4]
	ldr	r2, [r1]
	ldr	r1, [r2, #20]
	cmp	r1, #2
	movls	r2, #28672
	movtls	r2, 148
	bhi	.L7440
.L7435:
	mov	ip, #1
	mvn	r1, #94
	str	r2, [r0, #8]
	str	r2, [r0, #12]
	mov	r2, #0
	mov	r0, r6
	strb	ip, [r4, #164]
	strb	r1, [r3]
	ldrb	r1, [r4, #140]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	str	r2, [r4, #160]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4, #156]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	cmp	r7, #0
	strlt	r5, [r4, #160]
.L7434:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L7440:
	ldr	ip, [r2, #16]
	mov	r1, #28672
	mov	r2, #0
	movt	r1, 148
	movt	r2, 6500
	cmp	ip, #3
	movne	r2, r1
	b	.L7435
	.fnend
	.size	ncm_open, .-ncm_open
	.align	2
	.type	ncm_close, %function
ncm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #176
	mov	r0, r6
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock(PLT)
	ldr	r5, [r4, #160]
	mov	r2, #0
	mov	r1, #2
	ldr	r3, [r4, #20]
	strb	r1, [r4, #164]
	strb	r2, [r4, #165]
	cmp	r5, r2
	ldr	r1, [r3, #24]
	beq	.L7443
	ldr	r3, [r5]
	mov	r0, #8
	mov	lr, #42
	mov	ip, #16
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	r2, [r3, #7]
	strb	lr, [r3, #1]
	strb	r0, [r3, #6]
	ldr	r0, [r5]
	str	ip, [r5, #4]
	ldr	r2, [r1]
	ldr	r1, [r2, #20]
	cmp	r1, #2
	movls	r2, #28672
	movtls	r2, 148
	bhi	.L7449
.L7444:
	mov	ip, #1
	mvn	r1, #94
	str	r2, [r0, #8]
	str	r2, [r0, #12]
	mov	r2, #0
	mov	r0, r6
	strb	ip, [r4, #164]
	strb	r1, [r3]
	ldrb	r1, [r4, #140]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	str	r2, [r4, #160]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4, #156]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	cmp	r7, #0
	strlt	r5, [r4, #160]
.L7443:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L7449:
	ldr	ip, [r2, #16]
	mov	r1, #28672
	mov	r2, #0
	movt	r1, 148
	movt	r2, 6500
	cmp	ip, #3
	movne	r2, r1
	b	.L7444
	.fnend
	.size	ncm_close, .-ncm_close
	.align	2
	.type	rmnet_mux_read_stats, %function
rmnet_mux_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L7471
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	mov	r9, r1
	mov	r8, r2
	strd	r6, [sp, #8]
	mov	r7, r3
	strd	r10, [sp, #24]
.LPIC1555:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #92
	sub	sp, sp, #92
	ldr	r4, [r0, #124]
	ldr	r0, [ip, #40]
	cmp	r0, #0
	beq	.L7465
	mov	r1, #208
	bl	kmem_cache_alloc(PLT)
	subs	r5, r0, #0
	beq	.L7470
.L7451:
	add	r6, r4, #356
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r4, #340]
	mov	r10, r0
	ldr	r2, [r4, #352]
	ldr	r3, [r4, #388]
	ldr	r0, [r4, #392]
	str	ip, [sp, #56]
	ldr	ip, [r4, #200]
	sub	r2, r2, #1
	ldr	r1, [r4, #408]
	ldr	fp, [r4, #396]
	ldr	lr, [r4, #404]
	str	ip, [sp, #60]
	ldr	ip, [r4, #224]
	str	ip, [sp, #64]
	ldr	ip, [r4, #300]
	str	ip, [sp, #68]
	ldr	ip, [r4, #400]
	str	ip, [sp, #72]
	ldr	ip, [r4, #412]
	str	ip, [sp, #76]
	ldr	ip, [r4, #324]
	str	ip, [sp, #80]
	ldr	ip, [r4, #336]
	str	ip, [sp, #84]
	cmp	r2, #9
	addls	pc, pc, r2, asl #2
	b	.L7453
.L7455:
	b	.L7467
	b	.L7456
	b	.L7457
	b	.L7458
	b	.L7459
	b	.L7460
	b	.L7461
	b	.L7462
	b	.L7463
	b	.L7464
	.p2align 1
.L7465:
	mov	r5, #16
	b	.L7451
.L7467:
	ldr	ip, .L7471+4
.LPIC1542:
	add	ip, pc, ip
.L7454:
	str	lr, [sp, #12]
	ldr	lr, [sp, #56]
	str	r0, [sp]
	ldr	r2, .L7471+8
	mov	r0, r5
	str	r1, [sp, #4]
	mov	r1, #1024
	str	fp, [sp, #8]
	str	lr, [sp, #16]
	ldr	lr, [sp, #60]
	str	ip, [sp, #48]
.LPIC1554:
	add	r2, pc, r2
	str	lr, [sp, #20]
	ldr	lr, [sp, #64]
	str	lr, [sp, #24]
	ldr	lr, [sp, #68]
	str	lr, [sp, #28]
	ldr	lr, [sp, #72]
	str	lr, [sp, #32]
	ldr	lr, [sp, #76]
	str	lr, [sp, #36]
	ldr	lr, [sp, #80]
	str	lr, [sp, #40]
	ldr	lr, [sp, #84]
	str	lr, [sp, #44]
	ldr	ip, [r4, #344]
	str	ip, [sp, #52]
	bl	scnprintf(PLT)
	mov	r4, r0
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	str	r4, [sp]
	mov	r1, r8
	mov	r2, r7
	mov	r3, r5
	mov	r0, r9
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r4
.L7452:
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7456:
	ldr	ip, .L7471+12
.LPIC1543:
	add	ip, pc, ip
	b	.L7454
.L7457:
	ldr	ip, .L7471+16
.LPIC1544:
	add	ip, pc, ip
	b	.L7454
.L7458:
	ldr	ip, .L7471+20
.LPIC1545:
	add	ip, pc, ip
	b	.L7454
.L7459:
	ldr	ip, .L7471+24
.LPIC1546:
	add	ip, pc, ip
	b	.L7454
.L7460:
	ldr	ip, .L7471+28
.LPIC1547:
	add	ip, pc, ip
	b	.L7454
.L7461:
	ldr	ip, .L7471+32
.LPIC1548:
	add	ip, pc, ip
	b	.L7454
.L7462:
	ldr	ip, .L7471+36
.LPIC1549:
	add	ip, pc, ip
	b	.L7454
.L7463:
	ldr	ip, .L7471+40
.LPIC1550:
	add	ip, pc, ip
	b	.L7454
.L7464:
	ldr	ip, .L7471+44
.LPIC1551:
	add	ip, pc, ip
	b	.L7454
.L7453:
	ldr	ip, .L7471+48
.LPIC1552:
	add	ip, pc, ip
	b	.L7454
.L7470:
	mvn	r0, #11
	b	.L7452
.L7472:
	.align	2
.L7471:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1555+8))
	.word	.LC0-(.LPIC1542+8)
	.word	.LC376-(.LPIC1554+8)
	.word	.LC1-(.LPIC1543+8)
	.word	.LC2-(.LPIC1544+8)
	.word	.LC3-(.LPIC1545+8)
	.word	.LC4-(.LPIC1546+8)
	.word	.LC5-(.LPIC1547+8)
	.word	.LC6-(.LPIC1548+8)
	.word	.LC7-(.LPIC1549+8)
	.word	.LC8-(.LPIC1550+8)
	.word	.LC9-(.LPIC1551+8)
	.word	.LC10-(.LPIC1552+8)
	.fnend
	.size	rmnet_mux_read_stats, .-rmnet_mux_read_stats
	.align	2
	.type	do_read, %function
do_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r0, #76]	@ zero_extendqisi2
	.pad #36
	sub	sp, sp, #36
	ldr	r7, [r0, #104]
	cmp	r3, #8
	beq	.L7523
	ldrb	r3, [r0, #79]	@ zero_extendqisi2
	ldrb	r1, [r0, #78]	@ zero_extendqisi2
	ldrb	r2, [r0, #77]	@ zero_extendqisi2
	ldrb	r10, [r0, #81]	@ zero_extendqisi2
	mov	r3, r3, asl #16
	ldrb	r4, [r0, #80]	@ zero_extendqisi2
	orr	r3, r3, r1, asl #24
	tst	r2, #231
	mvnne	r0, #21
	orr	r3, r3, r10
	orr	r4, r3, r4, asl #8
	movne	r3, #9216
	movtne	r3, 5
	strne	r3, [r7, #28]
	bne	.L7518
.L7475:
	ldrd	r2, [r7, #16]
	mov	r9, #0
	cmp	r4, r2
	sbcs	r3, r9, r3
	movge	r3, #8448
	mvnge	r0, #21
	movtge	r3, 5
	strge	r3, [r7, #28]
	bge	.L7518
	ldr	r3, [r7, #40]
	ldr	r2, [r0, #128]
	sub	r1, r3, #32
	mov	r10, r4, asl r3
	mov	ip, r2
	str	r2, [sp, #12]
	mov	fp, r4, asl r1
	cmp	ip, #0
	rsb	r2, r3, #32
	orr	fp, fp, r4, lsr r2
	beq	.L7478
	ldr	r3, .L7528
	mov	r5, r0
	add	r4, r0, #44
.LPIC1559:
	add	r3, pc, r3
	str	r3, [sp, #20]
	mov	r3, sp
	bic	r3, r3, #8128
	str	r3, [sp, #16]
.L7493:
	ldrd	r2, [r7, #8]
	mov	r0, r4
	mov	r9, r3
	mov	r8, r2
	bl	_raw_spin_lock_irq(PLT)
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L7510
	b	.L7483
.L7524:
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L7483
.L7510:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	bl	sleep_thread(PLT)
	subs	r3, r0, #0
	mov	r0, r4
	beq	.L7524
	mov	r0, r3
.L7518:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7483:
	ldr	r3, [sp, #12]
	subs	r8, r8, r10
	sbc	r9, r9, fp
	cmp	r3, #16384
	movcs	r3, #16384
	str	r3, [sp]
	mov	r3, #0
	str	r3, [sp, #4]
	ldrd	r2, [sp]
	cmp	r8, r2
	sbcs	r3, r9, r3
	blt	.L7525
.L7480:
	mov	r0, r4
	ldr	r8, [sp]
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [sp]
	cmp	r3, #0
	beq	.L7526
	mov	r2, r3
	add	r3, sp, #32
	strd	r10, [r3, #-8]!
	ldr	r1, [r6]
	ldr	r0, [r7]
	bl	vfs_read(PLT)
	ldr	r3, [sp, #16]
	mov	r9, r0
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r1, r3, #1
	bne	.L7497
	cmp	r0, #0
	blt	.L7485
	cmp	r8, r0
	bls	.L7486
	ldr	r2, [r7, #44]
	mov	r0, r4
	ldr	r3, [r5, #136]
	rsb	r2, r2, #0
	and	r9, r9, r2
	ldr	r2, [sp, #12]
	rsb	r3, r9, r3
	adds	r10, r10, r9
	adc	fp, fp, r9, asr #31
	str	r3, [r5, #136]
	rsb	r2, r9, r2
	str	r2, [sp, #12]
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r0, r4
	str	r9, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r8, r9
	bhi	.L7494
.L7487:
	ldr	r3, [sp, #12]
	cmp	r3, #0
	beq	.L7478
	ldr	r3, [r6, #16]
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #26]
	ldr	r8, [r5, #8]
	cmp	r8, #0
	beq	.L7527
	ldr	r0, [r8, #80]
	ldr	r3, [r6, #16]
	ldr	r9, [r8, #92]
	add	r0, r0, #44
	str	r3, [sp]
	bl	_raw_spin_lock_irq(PLT)
	mov	r2, #1
	mov	r3, #2
	str	r2, [r6, #20]
	str	r3, [r6, #4]
	ldr	r0, [r8, #80]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r9, #8]
	mov	r0, r9
	mov	r2, #208
	ldr	r1, [sp]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L7495
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r6, #20]
	str	r2, [r6, #4]
	beq	.L7495
	cmn	r3, #95
	bne	.L7491
	ldr	r2, [sp]
	ldr	r2, [r2, #4]
	cmp	r2, #0
	beq	.L7495
.L7491:
	ldr	r0, [r8, #76]
	ldr	r1, [sp, #20]
	ldr	r2, [r9, #4]
	add	r0, r0, #32
	bl	dev_warn(PLT)
.L7495:
	ldr	r3, [r6, #8]
	str	r3, [r5, #60]
	b	.L7493
.L7525:
	strd	r8, [sp]
	b	.L7480
.L7523:
	ldrb	r10, [r0, #79]	@ zero_extendqisi2
	ldrb	r3, [r0, #77]	@ zero_extendqisi2
	ldrb	r4, [r0, #78]	@ zero_extendqisi2
	orr	r10, r10, #134217728
	orr	r3, r10, r3, asl #16
	orr	r4, r3, r4, asl #8
	bic	r4, r4, #-16777216
	b	.L7475
.L7486:
	ldr	r3, [r5, #136]
	mov	r0, r4
	adds	r10, r10, r9
	ldr	r2, [sp, #12]
	adc	fp, fp, r9, asr #31
	rsb	r3, r9, r3
	rsb	r2, r9, r2
	str	r3, [r5, #136]
	str	r2, [sp, #12]
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r0, r4
	str	r9, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq(PLT)
	b	.L7487
.L7485:
	mov	r0, r4
	str	r1, [sp]
	bl	_raw_spin_lock_irq(PLT)
	ldr	r1, [sp]
	mov	r3, #1
	mov	r0, r4
	ldr	r2, [r6, #16]
	str	r1, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq(PLT)
.L7494:
	ldr	r3, [r7, #40]
	mov	r2, #4352
	mvn	r0, #4
	movt	r2, 3
	str	r2, [r7, #28]
	mov	r2, r10, lsr r3
	subs	r1, r3, #32
	rsb	r3, r3, #32
	orr	r2, r2, fp, asl r3
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	orrpl	r2, r2, fp, asr r1
	orr	r3, r3, #64
	str	r2, [r7, #32]
	strb	r3, [r7, #24]
	b	.L7518
.L7478:
	mvn	r0, #4
	b	.L7518
.L7497:
	mvn	r0, #3
	b	.L7518
.L7527:
	ldr	r2, .L7528+4
	movw	r3, #707
	ldr	r0, [r5]
	ldr	r1, .L7528+8
.LPIC1557:
	add	r2, pc, r2
	add	r2, r2, #2752
	add	r0, r0, #32
.LPIC1556:
	add	r1, pc, r1
	add	r2, r2, #4
	bl	dev_err(PLT)
	ldr	r0, .L7528+12
	movw	r1, #461
.LPIC1558:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	mvn	r0, #4
	b	.L7518
.L7526:
	ldr	r3, [r7, #40]
	mov	r2, #8448
	mov	r0, r4
	movt	r2, 5
	str	r2, [r7, #28]
	mov	r2, r10, lsr r3
	subs	r1, r3, #32
	rsb	r3, r3, #32
	orr	r2, r2, fp, asl r3
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	orrpl	r2, r2, fp, asr r1
	orr	r3, r3, #64
	str	r2, [r7, #32]
	strb	r3, [r7, #24]
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [r6, #16]
	mov	r1, #0
	mov	r3, #1
	mov	r0, r4
	str	r1, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq(PLT)
	mvn	r0, #4
	b	.L7518
.L7529:
	.align	2
.L7528:
	.word	.LC365-(.LPIC1559+8)
	.word	.LANCHOR3-(.LPIC1557+8)
	.word	.LC363-(.LPIC1556+8)
	.word	.LC364-(.LPIC1558+8)
	.fnend
	.size	do_read, .-do_read
	.align	2
	.type	ccid_bulk_write, %function
ccid_bulk_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #124]
	.pad #44
	sub	sp, sp, #44
	ldr	r6, [r5, #88]
	cmp	r6, #0
	beq	.L7567
	cmp	r2, #0
	mov	r4, r2
	mov	r7, r1
	beq	.L7569
	cmp	r2, #524
	bcs	.L7570
	add	r8, r5, #84
	add	r9, r5, #184
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #184]
	cmp	r9, r3
	beq	.L7535
	ldr	r2, [r3, #4]
	mov	lr, #512
	mov	r10, #256
	ldr	ip, [r3]
	mov	r1, r0
	sub	r6, r3, #36
	mov	r0, r8
	str	r2, [ip, #4]
	str	ip, [r2]
	stmia	r3, {r10, lr}
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	beq	.L7552
.L7536:
	ldr	r3, [r5, #140]
	cmp	r3, #0
	bne	.L7571
	mov	r3, sp
	ldr	r0, [r6]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 439 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L7572
	mov	r1, r4
	bl	__memzero(PLT)
.L7543:
	ldr	r3, [r5, #88]
	cmp	r3, #0
	bne	.L7545
	cmp	r6, #0
	ldr	r4, [r5, #96]
	beq	.L7567
	ldr	r0, [r6]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	mvn	r0, #18
	b	.L7561
.L7545:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #188]
	add	r2, r6, #36
	mov	r1, r0
	mov	r0, r8
	str	r2, [r5, #188]
	str	r9, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #13
.L7561:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7572:
	mov	r1, r7
	mov	r2, r4
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	bne	.L7543
	str	r4, [r6, #4]
	ldr	r0, [r5, #96]
	mov	r1, r6
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L7573
.L7566:
	mov	r0, r4
	b	.L7561
.L7535:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7552:
	ldr	r3, [r5, #140]
	cmp	r3, #0
	bne	.L7555
	ldr	r2, .L7576
	mov	r1, sp
	str	r3, [sp, #20]
	bic	r10, r1, #8128
	add	r1, r5, #164
	str	r7, [sp, #8]
	bic	r10, r10, #63
	add	r3, sp, #20
	str	r4, [sp, #12]
	mov	r0, r1
	str	r1, [sp]
	ldr	r1, [r10, #12]
.LPIC1567:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	mov	ip, r3
	str	r3, [sp, #4]
	add	r3, sp, #32
	mov	r7, ip
	mov	r4, r0
	str	r3, [sp, #32]
	str	r3, [sp, #36]
	str	r1, [sp, #24]
	str	r2, [sp, #28]
	b	.L7540
.L7574:
	bl	schedule(PLT)
.L7540:
	mov	r1, r7
	mov	r2, #1
	mov	r0, r4
	mov	fp, #256
	bl	prepare_to_wait(PLT)
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #184]
	mov	r2, r0
	mov	lr, #512
	mov	r0, r8
	mov	r1, r2
	cmp	r9, r3
	sub	r6, r3, #36
	beq	.L7537
	ldr	r2, [r3, #4]
	ldr	ip, [r3]
	str	r2, [ip, #4]
	str	ip, [r2]
	stmia	r3, {fp, lr}
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	bne	.L7563
.L7553:
	ldr	r3, [r5, #140]
	cmp	r3, #0
	bne	.L7556
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L7574
	ldrd	r0, [sp]
	bl	finish_wait(PLT)
	mov	r0, #65024
	movt	r0, 65535
	b	.L7561
.L7569:
	ldr	r1, .L7576+4
	ldr	r0, .L7576+8
.LPIC1561:
	add	r1, pc, r1
	add	r1, r1, #2784
.LPIC1560:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
.L7567:
	mvn	r0, #18
	b	.L7561
.L7555:
	mov	r6, #0
	b	.L7536
.L7563:
	ldr	r7, [sp, #8]
	ldr	r4, [sp, #12]
.L7538:
	ldrd	r0, [sp]
	bl	finish_wait(PLT)
	b	.L7536
.L7556:
	ldr	r7, [sp, #8]
	mov	r6, #0
	ldr	r4, [sp, #12]
	b	.L7538
.L7537:
	mov	r1, r2
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7553
.L7570:
	ldr	r1, .L7576+12
	mov	r3, r2
	movw	r2, #523
	ldr	r0, .L7576+16
.LPIC1563:
	add	r1, pc, r1
	add	r1, r1, #2784
.LPIC1562:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #11
	b	.L7561
.L7571:
	ldr	r1, .L7576+20
	ldr	r0, .L7576+24
.LPIC1566:
	add	r1, pc, r1
	add	r1, r1, #2784
.LPIC1565:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #4
	b	.L7561
.L7573:
	mov	r3, #1
	mov	r0, r8
	str	r3, [r5, #140]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #188]
	add	r2, r6, #36
	mov	r1, r0
	mov	r0, r8
	str	r2, [r5, #188]
	str	r9, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #88]
	mov	r6, r0
	cmp	r3, #0
	mvnne	r4, #4
	beq	.L7575
.L7548:
	mov	r0, r8
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7566
.L7575:
	mov	r0, r8
	mov	r1, r6
	mov	fp, #256
	mov	r10, #512
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7549:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #184]
	mov	r3, r0
	mov	r0, r8
	mov	r1, r3
	cmp	r9, r4
	sub	r7, r4, #36
	beq	.L7550
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	fp, [r4]
	str	r10, [r4, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r7, #0
	beq	.L7565
	ldr	r3, [r5, #96]
	ldr	r0, [r4, #-36]
	str	r3, [sp]
	bl	kfree(PLT)
	ldr	r3, [sp]
	mov	r1, r7
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L7549
.L7550:
	mov	r1, r3
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7565:
	mvn	r4, #18
	b	.L7548
.L7577:
	.align	2
.L7576:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1567+8))
	.word	.LANCHOR3-(.LPIC1561+8)
	.word	.LC167-(.LPIC1560+8)
	.word	.LANCHOR3-(.LPIC1563+8)
	.word	.LC377-(.LPIC1562+8)
	.word	.LANCHOR3-(.LPIC1566+8)
	.word	.LC378-(.LPIC1565+8)
	.fnend
	.size	ccid_bulk_write, .-ccid_bulk_write
	.align	2
	.type	rmnet_mux_sdio_complete_epin, %function
rmnet_mux_sdio_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0]
	.pad #20
	sub	sp, sp, #20
	ldr	r9, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #352]
	ldr	r3, [r4, #76]
	cmp	r7, #0
	beq	.L7603
	cmn	r2, #104
	beq	.L7581
	cmp	r2, #0
	beq	.L7581
	cmn	r2, #108
	beq	.L7581
	ldr	r0, [r3]
	ldr	r1, .L7606
	add	r0, r0, #32
.LPIC1568:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L7581:
	add	r7, r4, #356
	add	r8, r4, #184
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #188]
	add	r2, r5, #36
	mov	r0, r7
	str	r2, [r4, #188]
	str	r8, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock(PLT)
	mov	r0, r9
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #360]
	ldr	r2, [r4, #76]
	cmp	r3, #0
	str	r2, [sp, #8]
	bne	.L7604
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7604:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #184]
	str	r0, [sp, #12]
	cmp	r8, r3
	beq	.L7586
	ldr	r5, [r4, #192]
	add	r3, r4, #192
	str	r3, [sp, #4]
	cmp	r3, r5
	cmpne	r5, #0
	movne	r10, #0
	beq	.L7586
.L7587:
	ldr	r3, [r4, #200]
	mov	r0, r7
	sub	r3, r3, #1
	str	r3, [r4, #200]
	ldrd	r2, [r5]
	str	r10, [r5]
	str	r10, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #184]
	str	r5, [r6, #-4]
	ldr	r1, [r5, #172]
	sub	fp, r6, #36
	ldrd	r2, [r6]
	str	r1, [r6, #-36]
	ldr	r1, [r5, #80]
	str	r1, [r6, #-32]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r2, #256
	mov	r3, #512
	stmia	r6, {r2, r3}
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4, #84]
	mov	r1, fp
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	cmp	r9, #0
	bne	.L7605
	ldr	r3, [r4, #396]
	ldr	r2, [r4, #184]
	add	r3, r3, #1
	cmp	r8, r2
	str	r3, [r4, #396]
	beq	.L7586
	ldr	r5, [r4, #192]
	ldr	r3, [sp, #4]
	cmp	r3, r5
	cmpne	r5, #0
	bne	.L7587
.L7586:
	ldr	r1, [sp, #12]
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L7603:
	mov	r0, r9
	bl	dev_kfree_skb_any(PLT)
	mov	r0, r7
	str	r7, [r5]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3	@ indirect register sibling call
.L7605:
	ldr	r0, [r4, #360]
	mov	r3, fp
	mov	fp, r9
	mov	r9, r3
	cmp	r0, #0
	beq	.L7589
	ldr	r3, [sp, #8]
	mov	r2, fp
	ldr	r1, .L7606+4
	ldr	r0, [r3]
.LPIC1569:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r3, [r4, #188]
	str	r6, [r4, #188]
	ldr	r2, [sp, #4]
	str	r8, [r6]
	str	r3, [r6, #4]
	str	r6, [r3]
	ldr	r3, [r4, #192]
	str	r2, [r5, #4]
	str	r3, [r5]
	str	r5, [r4, #192]
	str	r5, [r3, #4]
	ldr	r3, [r4, #200]
	add	r3, r3, #1
	str	r3, [r4, #200]
	b	.L7586
.L7589:
	str	r0, [r6, #-36]
	ldr	r4, [r4, #84]
	bl	kfree(PLT)
	mov	r1, r9
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	dev_kfree_skb_any(PLT)
	b	.L7586
.L7607:
	.align	2
.L7606:
	.word	.LC348-(.LPIC1568+8)
	.word	.LC124-(.LPIC1569+8)
	.fnend
	.size	rmnet_mux_sdio_complete_epin, .-rmnet_mux_sdio_complete_epin
	.align	2
	.type	diag_function_unbind, %function
diag_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L7624
	cmp	r3, #2
	bhi	.L7625
.L7610:
	ldr	r0, [r5, #8]
	bl	kfree(PLT)
	ldr	r3, [r5, #116]
	cmp	r3, #0
	beq	.L7611
	ldr	r2, [r3, #20]
	cmp	r5, r2
	moveq	r2, #0
	streq	r2, [r3, #20]
.L7611:
	ldr	r3, [r5, #136]
	mov	r10, #256
	mov	r9, #512
	ldr	r2, [r5, #132]
	add	r7, r5, #100
	mov	r6, r5
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r5, #132]
	str	r9, [r5, #136]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #92]!
	mov	r8, r0
	cmp	r3, r6
	ldr	r4, [r3]
	bne	.L7615
	b	.L7616
.L7618:
	mov	r4, r2
.L7615:
	ldr	r2, [r3, #4]
	sub	r1, r3, #36
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [r5, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r6, r4
	ldr	r2, [r4]
	mov	r3, r4
	bne	.L7618
.L7616:
	mov	r6, r5
	ldr	r3, [r6, #84]!
	cmp	r3, r6
	ldr	r4, [r3]
	movne	r10, #256
	movne	r9, #512
	bne	.L7617
	b	.L7614
.L7619:
	mov	r4, r2
.L7617:
	ldr	r2, [r3, #4]
	sub	r1, r3, #36
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [r5, #76]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r6, r4
	ldr	r2, [r4]
	mov	r3, r4
	bne	.L7619
.L7614:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree(PLT)
.L7624:
	ldr	r0, [r1, #16]
	bl	kfree(PLT)
	ldr	r3, [r4, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L7610
.L7625:
	ldr	r0, [r5, #12]
	bl	kfree(PLT)
	b	.L7610
	.fnend
	.size	diag_function_unbind, .-diag_function_unbind
	.align	2
	.type	android_usb_unbind, %function
android_usb_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L7651
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC1570:
	add	r2, pc, r2
	ldr	r3, [r2]
	cmp	r2, r3
	sub	r4, r3, #168
	bne	.L7630
	b	.L7627
.L7649:
	ldr	r3, [r4, #168]
	cmp	r2, r3
	sub	r4, r3, #168
	beq	.L7627
.L7630:
	ldr	r3, [r3, #-160]
	cmp	r0, r3
	bne	.L7649
.L7627:
	ldr	r3, .L7651+4
	mov	r2, #0
	mov	r1, #48
	add	r0, r4, #140
	ldr	r7, .L7651+8
.LPIC1573:
	add	r3, pc, r3
.LPIC1576:
	add	r7, pc, r7
	strb	r1, [r3, #2400]
	strb	r2, [r3, #2912]
	strb	r2, [r3, #2656]
	bl	cancel_work_sync(PLT)
	ldr	r6, [r4, #4]
	sub	r6, r6, #4
.L7631:
	ldr	r5, [r6, #4]!
	cmp	r5, #0
	beq	.L7650
.L7636:
	ldr	r3, [r5, #8]
	cmp	r3, #0
	beq	.L7631
	ldr	r1, [r3, #296]
	ldr	r0, [r7, #3708]
	bl	device_destroy(PLT)
	ldr	r0, [r5, #12]
	bl	kfree(PLT)
	ldr	r3, [r5, #28]
	cmp	r3, #0
	beq	.L7633
	mov	r0, r5
	blx	r3
.L7633:
	ldr	r4, [r5, #16]
	cmp	r4, #0
	beq	.L7631
	ldr	r1, [r4]
	add	r4, r4, #4
	cmp	r1, #0
	beq	.L7631
.L7635:
	ldr	r0, [r5, #8]
	bl	device_remove_file(PLT)
	ldr	r1, [r4], #4
	cmp	r1, #0
	bne	.L7635
	ldr	r5, [r6, #4]!
	cmp	r5, #0
	bne	.L7636
.L7650:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7652:
	.align	2
.L7651:
	.word	.LANCHOR2-(.LPIC1570+8)
	.word	.LANCHOR2-(.LPIC1573+8)
	.word	.LANCHOR4-(.LPIC1576+8)
	.fnend
	.size	android_usb_unbind, .-android_usb_unbind
	.align	2
	.type	gsmd_notify, %function
gsmd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r1, r1, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0, #72]
	cmp	r1, #3
	addls	pc, pc, r1, asl #2
	b	.L7653
.L7656:
	b	.L7655
	b	.L7657
	b	.L7658
	b	.L7659
	.p2align 1
.L7659:
	ldr	r0, [r5]
	bl	smd_tiocmget(PLT)
	and	r3, r0, #128
	cmp	r3, #0
	moveq	r1, #0
	movne	r1, #8
	moveq	r3, #1
	movne	r3, #9
	tst	r0, #64
	movne	r1, r3
	tst	r0, #256
	ldr	r0, [r4, #68]
	orrne	r1, r1, #2
	str	r1, [r4, #160]
	cmp	r0, #0
	beq	.L7653
	ldr	r3, [r0, #128]
	cmp	r3, #0
	beq	.L7653
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3
.L7658:
	add	r1, r5, #8
	mov	r0, #0
	add	r7, r4, #4
	bl	_clear_bit(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #68]
	mov	r1, r0
	cmp	r3, #0
	beq	.L7734
	ldr	r6, [r3, #80]
	mov	r0, r7
	ldr	r5, [r3, #84]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L7673
	mov	r0, r6
	blx	r3
.L7673:
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L7674
	mov	r0, r5
	blx	r3
.L7674:
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	ldr	r0, [r4, #68]
	cmp	r0, #0
	beq	.L7675
	ldr	r3, [r4, #12]
	add	r8, r4, #12
	cmp	r3, r8
	movne	r10, #256
	movne	r9, #512
	beq	.L7680
.L7679:
	ldr	r2, [r3, #4]
	mov	fp, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree(PLT)
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #12]
	cmp	r3, r8
	bne	.L7679
.L7680:
	ldr	r3, [r4, #20]
	add	r8, r4, #20
	cmp	r8, r3
	movne	r10, #256
	movne	r9, #512
	beq	.L7678
.L7683:
	ldr	r2, [r3, #4]
	mov	fp, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree(PLT)
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #20]
	cmp	r8, r3
	bne	.L7683
.L7678:
	ldr	r3, [r4, #44]
	add	r8, r4, #44
	cmp	r8, r3
	movne	r10, #256
	movne	r9, #512
	beq	.L7682
.L7684:
	ldr	r2, [r3, #4]
	mov	r5, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [r5, #-36]!
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r0, r6
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #44]
	cmp	r8, r3
	bne	.L7684
.L7682:
	ldr	r0, [r4, #68]
	mov	r3, #0
	str	r3, [r4, #8]
	str	r3, [r4, #160]
.L7675:
	ldr	r3, [r0, #128]
	cmp	r3, #0
	beq	.L7685
	ldr	r1, [r4, #160]
	blx	r3
.L7685:
	mov	r0, r7
.L7732:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock(PLT)
.L7657:
	add	r3, r4, #4
	add	r1, r5, #8
	mov	r0, #0
	mov	r5, r3
	str	r3, [sp, #4]
	bl	_set_bit(PLT)
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L7662
	ldr	r3, [r4, #72]
	add	r7, r4, #12
	mov	r6, #8
	ldr	r1, [r4, #156]
	mov	fp, #2048
	ldr	r9, .L7743
	ldr	r0, [r3]
	mvn	r2, r1
	bl	smd_tiocmset_from_cb(PLT)
	ldr	r3, [r4, #68]
.LPIC1590:
	add	r9, pc, r9
	ldr	r8, [r3, #84]
	b	.L7692
.L7737:
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r5]
	beq	.L7735
.L7666:
	str	r9, [r5, #28]
	ldr	r2, [r4, #12]
	add	r3, r5, #36
	subs	r6, r6, #1
	str	r3, [r2, #4]
	str	r2, [r5, #36]
	str	r7, [r5, #40]
	str	r3, [r4, #12]
	beq	.L7691
.L7692:
	ldr	r3, [r8, #8]
	mov	r1, #32
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	ldr	r3, .L7743+4
	mov	r1, #32
	beq	.L7736
.LPIC1595:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	fp, [r5, #4]
	ldr	r3, [r3, #44]
	subs	r0, r3, #0
	bne	.L7737
	mov	r3, #16
	str	r3, [r5]
	b	.L7666
.L7655:
	ldr	r0, [r5]
	bl	smd_read_avail(PLT)
	cmp	r0, #0
	bne	.L7738
.L7660:
	ldr	r0, [r5]
	bl	smd_write_avail(PLT)
	cmp	r0, #0
	bne	.L7739
.L7653:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7735:
	ldr	r1, .L7743+8
	ldr	r0, .L7743+12
.LPIC1583:
	add	r1, pc, r1
	add	r1, r1, #2800
.LPIC1582:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r3, [r8, #8]
	mov	r1, r5
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L7664:
	ldr	r3, [r4, #12]
	cmp	r7, r3
	bne	.L7691
	ldr	r1, .L7743+16
	ldr	r0, .L7743+20
.LPIC1592:
	add	r1, pc, r1
	add	r1, r1, #2816
.LPIC1591:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
.L7662:
	ldr	r0, [sp, #4]
	b	.L7732
.L7739:
	ldr	r3, .L7743+24
	add	r1, r4, #28
.LPIC1578:
	add	r3, pc, r3
	ldr	r0, [r3, #-512]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work(PLT)
.L7738:
	ldr	r3, .L7743+28
	add	r1, r4, #52
.LPIC1577:
	add	r3, pc, r3
	ldr	r0, [r3, #-512]
	bl	queue_work(PLT)
	b	.L7660
.L7691:
	ldr	r3, [r4, #68]
	add	r8, r4, #44
	mov	r5, #8
	ldr	fp, .L7743+32
	mov	r9, #2048
	ldr	r6, [r3, #80]
.LPIC1593:
	add	fp, pc, fp
	b	.L7693
.L7742:
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r10]
	beq	.L7740
.L7670:
	str	fp, [r10, #28]
	ldr	r1, [r4, #44]
	add	r2, r10, #36
	subs	r5, r5, #1
	str	r2, [r1, #4]
	str	r1, [r10, #36]
	str	r8, [r10, #40]
	str	r2, [r4, #44]
	beq	.L7694
.L7693:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r10, r0, #0
	ldr	r2, .L7743+36
	mov	r1, #32
	beq	.L7741
.LPIC1594:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r9, [r10, #4]
	ldr	r2, [r2, #44]
	subs	r0, r2, #0
	bne	.L7742
	mov	r2, #16
	str	r2, [r10]
	b	.L7670
.L7694:
	ldr	r0, [sp, #4]
	bl	_raw_spin_unlock(PLT)
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsmd_start_rx(PLT)
.L7734:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L7736:
	ldr	r1, .L7743+40
	ldr	r0, .L7743+44
.LPIC1580:
	add	r1, pc, r1
	add	r1, r1, #2800
.LPIC1579:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L7664
.L7740:
	ldr	r1, .L7743+48
	ldr	r0, .L7743+52
.LPIC1587:
	add	r1, pc, r1
	add	r1, r1, #2800
.LPIC1586:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r2, [r6, #8]
	mov	r1, r10
	mov	r0, r6
	ldr	r3, [r2, #12]
	blx	r3
.L7668:
	ldr	r3, [r4, #44]
	cmp	r8, r3
	bne	.L7694
	ldr	r3, [r4, #68]
	mov	r8, #256
	mov	r6, #512
	ldr	r5, [r3, #84]
	b	.L7695
.L7671:
	ldmia	r3, {r0, r2}
	str	r2, [r0, #4]
	str	r0, [r2]
	ldr	r0, [r3, #-36]
	str	r8, [r3]
	str	r6, [r3, #4]
	bl	kfree(PLT)
	ldr	r3, [r5, #8]
	mov	r1, r9
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L7695:
	ldr	r3, [r4, #12]
	cmp	r7, r3
	sub	r9, r3, #36
	bne	.L7671
	ldr	r1, .L7743+56
	ldr	r0, .L7743+60
.LPIC1589:
	add	r1, pc, r1
	add	r1, r1, #2816
.LPIC1588:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L7662
.L7741:
	ldr	r1, .L7743+64
	ldr	r0, .L7743+68
.LPIC1585:
	add	r1, pc, r1
	add	r1, r1, #2800
.LPIC1584:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L7668
.L7744:
	.align	2
.L7743:
	.word	gsmd_read_complete-(.LPIC1590+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1595+8))
	.word	.LANCHOR3-(.LPIC1583+8)
	.word	.LC380-(.LPIC1582+8)
	.word	.LANCHOR3-(.LPIC1592+8)
	.word	.LC382-(.LPIC1591+8)
	.word	.LANCHOR4-(.LPIC1578+8)
	.word	.LANCHOR4-(.LPIC1577+8)
	.word	gsmd_write_complete-(.LPIC1593+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1594+8))
	.word	.LANCHOR3-(.LPIC1580+8)
	.word	.LC379-(.LPIC1579+8)
	.word	.LANCHOR3-(.LPIC1587+8)
	.word	.LC380-(.LPIC1586+8)
	.word	.LANCHOR3-(.LPIC1589+8)
	.word	.LC381-(.LPIC1588+8)
	.word	.LANCHOR3-(.LPIC1585+8)
	.word	.LC379-(.LPIC1584+8)
	.fnend
	.size	gsmd_notify, .-gsmd_notify
	.align	2
	.type	ffs_func_set_alt, %function
ffs_func_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmn	r2, #1
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r9, [r0, #-44]
	str	r2, [sp, #4]
	str	r0, [sp]
	beq	.L7746
	ldrh	r0, [r9, #182]
	ldr	lr, [r3, #-8]
	cmp	r0, #0
	beq	.L7770
	uxtb	r1, r1
	mov	r2, lr
.L7749:
	mov	ip, r2
	ldrh	r3, [r2], #2
	sxth	r3, r3
	cmp	r3, #0
	blt	.L7748
	cmp	r3, r1
	beq	.L7794
.L7748:
	subs	r0, r0, #1
	bne	.L7749
.L7770:
	mvn	r0, #32
.L7779:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7794:
	rsb	r0, lr, ip
	movs	r0, r0, asr #1
	bmi	.L7779
.L7746:
	ldr	r8, [r9, #136]
	cmp	r8, #0
	beq	.L7750
	ldr	r3, [r8, #8]
	mov	r7, #1
	mov	r5, #0
	ldr	r4, [r8, #12]
	add	r0, r3, #28
	ldr	r6, [r3, #220]
	ldrh	r10, [r3, #184]
	add	r4, r4, #28
	bl	_raw_spin_lock_irqsave(PLT)
	mov	fp, r0
.L7752:
	str	r7, [r6, #36]
	ldr	r3, [r4, #-28]
	subs	r0, r3, #0
	beq	.L7751
	ldr	r3, [r3, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #-28]
	str	r5, [r3]
.L7751:
	subs	r10, r10, #1
	str	r5, [r6, #44]
	add	r4, r4, #28
	add	r6, r6, #60
	bne	.L7752
	ldr	r0, [r8, #8]
	mov	r1, fp
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore(PLT)
	str	r10, [r9, #136]
.L7750:
	ldr	r6, [r9, #96]
	cmp	r6, #2
	bne	.L7771
	ldr	r3, [sp, #4]
	cmn	r3, #1
	beq	.L7795
	ldr	r2, [sp]
	sub	r3, r2, #52
	str	r3, [r9, #136]
	ldr	r10, [r2, #-44]
	ldr	r5, [r2, #-40]
	ldr	r6, [r10, #220]
	add	r0, r10, #28
	ldrh	r8, [r10, #184]
	add	r5, r5, #28
	bl	_raw_spin_lock_irqsave(PLT)
	str	r0, [sp, #4]
	add	r6, r6, #24
	b	.L7761
.L7797:
	str	fp, [r6, #20]
	ldrb	ip, [r7, #2]	@ zero_extendqisi2
	add	r6, r6, #60
	mov	ip, ip, lsr #7
	strb	ip, [r6, #-27]
	ldrb	ip, [r7, #3]	@ zero_extendqisi2
	and	ip, ip, r1
	rsb	ip, r2, ip
	clz	ip, ip
	mov	ip, ip, lsr #5
	strb	ip, [r6, #-26]
	bl	__wake_up(PLT)
	subs	r8, r8, #1
	beq	.L7796
.L7761:
	ldr	r3, [r10]
	sub	fp, r5, #28
	ldr	r3, [r3, #16]
	cmp	r3, #5
	subne	r3, r3, #3
	clzne	r3, r3
	moveq	r3, #2
	movne	r3, r3, lsr #5
	add	r3, r3, #2
	ldr	r7, [fp, r3, asl #2]
	cmp	r7, #0
	beq	.L7759
	ldr	r3, [r5, #-28]
	add	r5, r5, #28
	str	fp, [r3]
	ldr	r3, [r5, #-56]
	str	r7, [r3, #28]
	ldr	r0, [r5, #-56]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	mov	r1, #3
	mov	r2, #1
	mov	r0, r6
	mov	r3, r4
	beq	.L7797
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-44]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r4, #0
	movlt	r0, r4
	blt	.L7779
.L7768:
	add	r5, r9, #120
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r9, #100]
	mov	r6, r0
	add	lr, r9, #104
	ldrh	ip, [r9, #108]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r9, #100]
	cmp	ip, #0
	beq	.L7775
	add	ip, lr, ip
	mov	r3, lr
	mov	r1, lr
.L7766:
	ldrb	r2, [r3], #1	@ zero_extendqisi2
	sub	r0, r2, #5
	cmp	r0, #1
	bhi	.L7769
	strb	r2, [r1]
	add	r1, r1, #1
.L7769:
	cmp	r3, ip
	bne	.L7766
	rsb	r1, lr, r1
	add	r2, r1, #1
	uxth	r3, r1
	uxth	r2, r2
.L7764:
	add	r3, r9, r3
	strh	r2, [r9, #108]	@ movhi
	mov	ip, #2
	mov	r0, r5
	mov	r1, #3
	mov	r2, #1
	strb	ip, [r3, #104]
	bl	__wake_up_locked(PLT)
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
	b	.L7779
.L7795:
	mov	r3, #0
	add	r4, r9, #120
	mov	r0, r4
	str	r3, [r9, #136]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r9, #100]
	mov	r5, r0
	add	lr, r9, #104
	ldrh	r1, [r9, #108]
	cmp	r3, #1
	streq	r6, [r9, #100]
	cmp	r1, #0
	beq	.L7772
	add	r1, lr, r1
	mov	r3, lr
	mov	r2, lr
.L7757:
	ldrb	r0, [r3], #1	@ zero_extendqisi2
	sub	ip, r0, #5
	cmp	ip, #1
	bhi	.L7767
	strb	r0, [r2]
	add	r2, r2, #1
.L7767:
	cmp	r3, r1
	bne	.L7757
	rsb	r2, lr, r2
	add	r3, r2, #1
	uxth	r2, r2
	uxth	r3, r3
.L7755:
	mov	ip, #3
	strh	r3, [r9, #108]	@ movhi
	add	r2, r9, r2
	mov	r1, ip
	mov	r0, r4
	strb	ip, [r2, #104]
	mov	r2, #1
	bl	__wake_up_locked(PLT)
	mov	r0, r4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L7779
.L7759:
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-44]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #21
	b	.L7779
.L7796:
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-44]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7768
.L7771:
	mvn	r0, #18
	b	.L7779
.L7775:
	mov	r3, ip
	mov	r2, #1
	b	.L7764
.L7772:
	mov	r2, r1
	mov	r3, #1
	b	.L7755
	.fnend
	.size	ffs_func_set_alt, .-ffs_func_set_alt
	.align	2
	.type	mtp_ioctl, %function
mtp_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #60
	sub	sp, sp, #60
	add	r5, r4, #104
#APP
@ 61 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r0, r3, [r5]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L7799
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #15
.L7856:
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7799:
	movw	r3, #19713
	mov	r7, r2
	movt	r3, 16416
	mov	r6, r1
	cmp	r1, r3
	bhi	.L7834
	mov	r3, #19712
	movt	r3, 16416
	cmp	r1, r3
	bcs	.L7801
	movw	r3, #19715
	movt	r3, 16392
	cmp	r1, r3
	bne	.L7832
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 439 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	bne	.L7814
	mov	r1, r7
	add	r0, sp, #16
	mov	r2, #8
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	bne	.L7866
	ldr	r7, [sp, #16]
	cmp	r7, #28
	bhi	.L7840
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L7841
	mov	r0, #1000
	add	r8, r4, #80
	bl	msecs_to_jiffies(PLT)
	mov	fp, r0
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r10, [r4, #116]
	add	r9, r4, #116
	mov	r1, r0
	cmp	r9, r10
	beq	.L7817
	ldr	r3, [r10, #4]
	mov	lr, #256
	mov	ip, #512
	ldr	r2, [r10]
	sub	r6, r10, #36
	mov	r0, r8
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r10]
	str	ip, [r10, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	beq	.L7835
.L7818:
	mov	r3, sp
	ldr	r1, [sp, #20]
	bic	r3, r3, #8128
	ldr	r0, [r6]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 439 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r7; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L7867
	cmp	r7, #0
	bne	.L7868
.L7831:
	str	r7, [r6, #4]
	ldr	r0, [r4, #92]
	mov	r1, r6
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	beq	.L7812
	mov	r0, r8
.L7862:
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #120]
	add	r2, r6, #36
	mov	r1, r0
	mov	r0, r8
	str	r2, [r4, #120]
	str	r9, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7812
.L7834:
	movw	r3, #19716
	movt	r3, 16416
	cmp	r1, r3
	beq	.L7801
.L7832:
	add	r8, r4, #80
	mvn	r7, #21
.L7811:
	mov	r0, r8
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #96]
	cmp	r3, #3
	mvneq	r7, #124
	beq	.L7833
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r4, #96]
.L7833:
	mov	r0, r8
	bl	_raw_spin_unlock_irq(PLT)
.L7812:
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, r7
	b	.L7856
.L7801:
	add	r8, r4, #80
	mov	r0, r8
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #96]
	cmp	r3, #3
	beq	.L7869
	cmp	r3, #0
	beq	.L7870
	mov	r3, #2
	mov	r0, r8
	str	r3, [r4, #96]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 439 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #32; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	bne	.L7805
	mov	r1, r7
	add	r0, sp, #24
	mov	r2, #32
	bl	__copy_from_user(PLT)
	subs	r9, r0, #0
	bne	.L7871
	ldr	r0, [sp, #24]
	bl	fget(PLT)
	subs	r7, r0, #0
	mvneq	r7, #8
	beq	.L7811
	str	r7, [r4, #208]
	ldrd	r2, [sp, #32]
	strd	r2, [r4, #216]
	ldrd	r2, [sp, #40]
	strd	r2, [r4, #224]
#APP
@ 1034 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	movw	r3, #19716
	movt	r3, 16416
	cmp	r6, r3
	beq	.L7872
	mov	r3, #19712
	movt	r3, 16416
	cmp	r6, r3
	addeq	r1, r4, #176
	addne	r1, r4, #192
	streq	r9, [r4, #232]
.L7809:
	ldr	r0, [r4, #172]
	bl	queue_work(PLT)
	ldr	r0, [r4, #172]
	bl	flush_workqueue(PLT)
	mov	r0, r7
	bl	fput(PLT)
#APP
@ 1058 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	ldr	r7, [r4, #244]
	b	.L7811
.L7814:
	add	r0, sp, #16
	mov	r1, #8
	bl	__memzero(PLT)
	mvn	r7, #13
	b	.L7812
.L7870:
	mov	r0, r8
	mvn	r7, #18
	bl	_raw_spin_unlock_irq(PLT)
	b	.L7812
.L7805:
	add	r0, sp, #24
	mov	r1, #32
	bl	__memzero(PLT)
	mvn	r7, #13
	b	.L7811
.L7866:
	mvn	r7, #13
	b	.L7812
.L7869:
	mov	r3, #1
	mov	r0, r8
	mvn	r7, #124
	str	r3, [r4, #96]
	bl	_raw_spin_unlock_irq(PLT)
	b	.L7812
.L7871:
	mvn	r7, #13
	b	.L7811
.L7867:
	mov	r2, r7
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	beq	.L7831
.L7830:
	mov	r0, r8
	mvn	r7, #13
	b	.L7862
.L7868:
	mov	r1, r7
	bl	__memzero(PLT)
	b	.L7830
.L7817:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7835:
	ldr	r2, .L7874
	mov	r3, sp
	add	r0, r4, #148
	bic	r10, r3, #8128
	mov	r3, #0
	str	r5, [sp, #12]
	bic	r10, r10, #63
	str	r0, [sp, #4]
	add	r0, sp, #24
	ldr	r1, [r10, #12]
	str	r3, [sp, #24]
	add	r3, sp, #36
.LPIC1597:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r0, [sp, #8]
	str	r3, [sp, #36]
	str	r3, [sp, #40]
	str	r1, [sp, #28]
	str	r2, [sp, #32]
.L7823:
	ldrd	r0, [sp, #4]
	mov	r2, #1
	mov	r5, #256
	bl	prepare_to_wait(PLT)
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #116]
	mov	r2, r0
	mov	lr, #512
	mov	r0, r8
	mov	r1, r2
	cmp	r9, r3
	sub	r6, r3, #36
	beq	.L7819
	ldr	r2, [r3, #4]
	ldr	ip, [r3]
	str	r2, [ip, #4]
	str	ip, [r2]
	stmia	r3, {r5, lr}
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	bne	.L7820
.L7836:
	ldr	r3, [r10, #12]
	mov	r0, fp
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L7860
	bl	schedule_timeout(PLT)
	subs	fp, r0, #0
	bne	.L7823
	ldr	r5, [sp, #12]
.L7826:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #116]
	mov	r1, r0
	cmp	r9, r3
	beq	.L7873
	ldr	r2, [r3, #4]
	mov	lr, #512
	mov	r10, #256
	ldr	ip, [r3]
	sub	r6, r3, #36
	mov	r0, r8
	str	r2, [ip, #4]
	str	ip, [r2]
	stmia	r3, {r10, lr}
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	beq	.L7822
.L7827:
	ldrd	r0, [sp, #4]
	bl	finish_wait(PLT)
	b	.L7818
.L7872:
	mov	r3, #1
	add	r1, r4, #176
	str	r3, [r4, #232]
	ldrh	r3, [sp, #48]
	strh	r3, [r4, #236]	@ movhi
	ldr	r3, [sp, #52]
	str	r3, [r4, #240]
	b	.L7809
.L7841:
	mvn	r7, #18
	b	.L7812
.L7840:
	mvn	r7, #21
	b	.L7812
.L7860:
	ldr	r5, [sp, #12]
.L7822:
	ldrd	r0, [sp, #4]
	mvn	r7, #61
	bl	finish_wait(PLT)
	b	.L7812
.L7820:
	cmp	fp, #0
	ldr	r5, [sp, #12]
	bne	.L7827
	b	.L7826
.L7873:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7822
.L7819:
	mov	r1, r2
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7836
.L7875:
	.align	2
.L7874:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1597+8))
	.fnend
	.size	mtp_ioctl, .-mtp_ioctl
	.align	2
	.type	ccid_function_disable, %function
ccid_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	str	lr, [sp, #32]
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	ldr	r0, [r0, #92]
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r4, [r5, #104]
	ldr	r6, [r5, #92]
	cmp	r4, #0
	beq	.L7877
	ldr	r0, [r4]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L7877:
	ldr	r3, [r5, #148]
	cmp	r3, #0
	beq	.L7891
.L7878:
	add	r10, r5, #184
	add	r7, r5, #84
	mov	r9, #256
	mov	r8, #512
.L7879:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #184]
	mov	r3, r0
	mov	r0, r7
	mov	r1, r3
	cmp	r4, r10
	sub	r6, r4, #36
	beq	.L7880
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	beq	.L7882
	ldr	fp, [r5, #96]
	ldr	r0, [r4, #-36]
	bl	kfree(PLT)
	mov	r1, r6
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7879
.L7880:
	mov	r0, r7
	mov	r1, r3
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7882:
	mov	r4, #0
	add	r0, r5, #164
	mov	r3, r4
	mov	r1, #3
	str	r4, [r5, #192]
	mov	r2, #1
	str	r4, [r5, #88]
	bl	__wake_up(PLT)
	mov	r3, r4
	add	r0, r5, #152
	mov	r1, #3
	mov	r2, #1
	bl	__wake_up(PLT)
	mov	r3, r4
	add	r0, r5, #120
	mov	r1, #3
	mov	r2, #1
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__wake_up(PLT)
.L7891:
	ldr	r4, [r5, #176]
	ldr	r6, [r5, #100]
	cmp	r4, #0
	beq	.L7878
	ldr	r0, [r4]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7878
	.fnend
	.size	ccid_function_disable, .-ccid_function_disable
	.align	2
	.type	gbam_connect_work, %function
gbam_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	sub	r7, r0, #280
	strd	r8, [sp, #16]
	sub	r8, r0, #276
	strd	r10, [sp, #24]
	mov	r10, r0
	mov	r0, r7
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r4, r0
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r10, #-272]
	mov	r0, r8
	cmp	r3, #0
	beq	.L7920
	bl	_raw_spin_unlock(PLT)
	mov	r0, r7
	mov	r1, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r10, #-264]
	tst	r3, #4
	bne	.L7921
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7921:
	ldr	r2, .L7927
	sub	r3, r10, #284
	ldr	r0, [r10, #-260]
	mov	r1, r3
	str	r3, [sp, #4]
.LPIC1598:
	add	r2, pc, r2
	bl	msm_bam_dmux_open(PLT)
	subs	r4, r0, #0
	bne	.L7922
	mov	r0, #1
	sub	r1, r10, #264
	bl	_set_bit(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r10, #-272]
	str	r0, [sp]
	cmp	r3, #0
	beq	.L7923
	ldr	r2, .L7927+4
	sub	r5, r10, #232
	ldr	fp, [r3, #80]
.LPIC1601:
	add	r2, pc, r2
	ldr	r6, [r2, #600]
	cmp	r6, #0
	ble	.L7897
	ldr	r9, .L7927+8
.LPIC1602:
	add	r9, pc, r9
	b	.L7900
.L7898:
	str	r9, [r0, #28]
	ldr	r1, [r10, #-232]
	cmp	r6, r4
	str	r2, [r1, #4]
	str	r1, [r0, #36]
	str	r5, [r0, #40]
	str	r2, [r10, #-232]
	beq	.L7897
.L7900:
	ldr	r2, [fp, #8]
	mov	r0, fp
	mov	r1, #32
	add	r4, r4, #1
	ldr	r2, [r2, #8]
	blx	r2
	cmp	r0, #0
	add	r2, r0, #36
	bne	.L7898
	ldr	r2, [r10, #-232]
	cmp	r5, r2
	beq	.L7924
.L7897:
	ldr	r1, [sp]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r1, [r10, #-272]
	str	r0, [sp]
	cmp	r1, #0
	beq	.L7925
	ldr	r2, .L7927+12
	sub	r6, r10, #256
	ldr	r9, [r1, #76]
.LPIC1603:
	add	r2, pc, r2
	ldr	r4, [r2, #604]
	cmp	r4, #0
	ble	.L7902
	ldr	r7, .L7927+16
	mov	fp, #0
.LPIC1604:
	add	r7, pc, r7
	b	.L7905
.L7903:
	str	r7, [r0, #28]
	ldr	r1, [r10, #-256]
	cmp	r4, fp
	str	r2, [r1, #4]
	str	r1, [r0, #36]
	str	r6, [r0, #40]
	str	r2, [r10, #-256]
	beq	.L7902
.L7905:
	ldr	r2, [r9, #8]
	mov	r0, r9
	mov	r1, #32
	add	fp, fp, #1
	ldr	r2, [r2, #8]
	blx	r2
	cmp	r0, #0
	add	r2, r0, #36
	bne	.L7903
	ldr	r2, [r10, #-256]
	cmp	r6, r2
	beq	.L7926
.L7902:
	mov	r0, r8
	ldr	r1, [sp]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [sp, #4]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gbam_start_rx(PLT)
.L7920:
	bl	_raw_spin_unlock(PLT)
	mov	r0, r7
	mov	r1, r4
.L7917:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L7924:
	ldr	r1, .L7927+20
	ldr	r0, .L7927+24
.LPIC1606:
	add	r1, pc, r1
	add	r1, r1, #2864
.LPIC1605:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r1, [sp]
	mov	r0, r7
	b	.L7917
.L7926:
	ldr	r1, .L7927+28
	ldr	r0, .L7927+32
.LPIC1608:
	add	r1, pc, r1
.LPIC1607:
	add	r0, pc, r0
	add	r1, r1, #2864
	bl	printk(PLT)
	ldr	r2, [r10, #-232]
	cmp	r5, r2
	movne	r6, #256
	movne	r4, #512
	beq	.L7911
.L7906:
	ldr	lr, [r2, #4]
	sub	r1, r2, #36
	mov	r0, r9
	ldr	r7, [r2]
	str	lr, [r7, #4]
	str	r7, [lr]
	str	r6, [r2]
	str	r4, [r2, #4]
	ldr	r2, [r9, #8]
	ldr	r2, [r2, #12]
	blx	r2
	ldr	r2, [r10, #-232]
	cmp	r5, r2
	bne	.L7906
.L7911:
	mov	r0, r8
	ldr	r1, [sp]
	b	.L7917
.L7923:
	mov	r1, r0
	mov	r0, r7
	b	.L7917
.L7925:
	ldr	r2, [r10, #-232]
	cmp	r5, r2
	movne	r6, #256
	movne	r4, #512
	beq	.L7911
.L7901:
	ldr	lr, [r2, #4]
	sub	r1, r2, #36
	mov	r0, fp
	ldr	r7, [r2]
	str	lr, [r7, #4]
	str	r7, [lr]
	str	r6, [r2]
	str	r4, [r2, #4]
	ldr	r2, [fp, #8]
	ldr	r2, [r2, #12]
	blx	r2
	ldr	r2, [r10, #-232]
	cmp	r5, r2
	bne	.L7901
	b	.L7911
.L7922:
	ldr	r1, .L7927+36
	mov	r3, r4
	ldr	r0, .L7927+40
	ldr	r2, [r10, #-260]
.LPIC1600:
	add	r1, pc, r1
	add	r1, r1, #2832
.LPIC1599:
	add	r0, pc, r0
	add	r1, r1, #12
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk(PLT)
.L7928:
	.align	2
.L7927:
	.word	gbam_notify-(.LPIC1598+8)
	.word	.LANCHOR1-(.LPIC1601+8)
	.word	gbam_epout_complete-(.LPIC1602+8)
	.word	.LANCHOR1-(.LPIC1603+8)
	.word	gbam_epin_complete-(.LPIC1604+8)
	.word	.LANCHOR3-(.LPIC1606+8)
	.word	.LC384-(.LPIC1605+8)
	.word	.LANCHOR3-(.LPIC1608+8)
	.word	.LC385-(.LPIC1607+8)
	.word	.LANCHOR3-(.LPIC1600+8)
	.word	.LC383-(.LPIC1599+8)
	.fnend
	.size	gbam_connect_work, .-gbam_connect_work
	.align	2
	.type	fsg_common_release, %function
fsg_common_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #-100]
	cmp	r3, #7
	beq	.L7930
	sub	r4, r0, #168
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r7, #-100]
	mov	r5, r0
	cmp	r3, #6
	bgt	.L7932
	ldr	r2, [r7, #-44]
	mov	r1, #6
	ldr	r3, [r7, #-156]
	str	r1, [r7, #-100]
	cmp	r2, #0
	str	r3, [r7, #-96]
	beq	.L7932
	mov	r0, #10
	mov	r1, #2
	bl	send_sig_info(PLT)
.L7932:
	mov	r0, r4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	sub	r0, r7, #60
	bl	wait_for_completion(PLT)
.L7930:
	ldr	r4, [r7, #-112]
	cmp	r4, #0
	beq	.L7934
	ldr	r5, [r7, #-120]
	cmp	r5, #0
	beq	.L7940
	ldr	r6, .L7957
	add	r4, r4, #48
.LPIC1609:
	add	r6, pc, r6
	add	r9, r6, #728
	add	r8, r6, #744
.L7937:
	mov	r0, r4
	mov	r1, r9
	bl	device_remove_file(PLT)
	mov	r0, r4
	mov	r1, r8
	bl	device_remove_file(PLT)
	mov	r0, r4
	add	r1, r6, #760
	bl	device_remove_file(PLT)
	mov	r0, r4
	add	r1, r6, #776
	bl	device_remove_file(PLT)
	ldr	r3, [r4, #-48]
	subs	r0, r3, #0
	beq	.L7936
	bl	fput(PLT)
	mov	r3, #0
	str	r3, [r4, #-48]
.L7936:
	mov	r0, r4
	add	r4, r4, #400
	bl	device_unregister(PLT)
	subs	r5, r5, #1
	bne	.L7937
	ldr	r0, [r7, #-112]
.L7935:
	bl	kfree(PLT)
.L7934:
	ldr	r5, [r7, #-144]
	add	r4, r5, #32
	add	r5, r5, #160
.L7938:
	ldr	r0, [r4, #-32]
	add	r4, r4, #32
	bl	kfree(PLT)
	cmp	r4, r5
	bne	.L7938
	ldr	r0, [r7, #-144]
	bl	kfree(PLT)
	ldrb	r3, [r7, #-68]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L7956
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7956:
	sub	r0, r7, #212
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree(PLT)
.L7940:
	mov	r0, r4
	b	.L7935
.L7958:
	.align	2
.L7957:
	.word	.LANCHOR0-(.LPIC1609+8)
	.fnend
	.size	fsg_common_release, .-fsg_common_release
	.align	2
	.type	mass_storage_function_init, %function
mass_storage_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 112
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L8131
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r10, r0
.LPIC1634:
	add	r2, pc, r2
	str	lr, [sp, #32]
	.pad #124
	sub	sp, sp, #124
	ldr	r3, [r2]
	cmp	r2, r3
	sub	r9, r3, #168
	bne	.L7963
	b	.L7960
.L8109:
	ldr	r3, [r9, #168]
	cmp	r2, r3
	sub	r9, r3, #168
	beq	.L7960
.L7963:
	ldr	r3, [r3, #-160]
	cmp	r7, r3
	bne	.L8109
.L7960:
	ldr	r3, .L8131+4
	ldr	r6, [r9, #52]
.LPIC1690:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	cmp	r6, #0
	ldrneb	r6, [r6, #48]	@ zero_extendqisi2
	ldr	r0, [r3, #28]
	str	r3, [sp, #44]
	cmp	r0, #0
	beq	.L8029
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r5, r0, #0
	beq	.L8110
.L7965:
	mov	r1, #1
	movw	r2, #30060
	movt	r2, 110
	add	r8, sp, #56
	str	r1, [r5]
	strb	r1, [r5, #9]
	ldr	r3, [r9, #52]
	str	r2, [sp, #56]
	cmp	r3, #0
	beq	.L8111
	ldrb	r2, [r3, #9]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L8112
	ldrb	r3, [r3, #10]	@ zero_extendqisi2
	ldr	r4, [r5]
	cmp	r3, #0
	bne	.L8113
.L7968:
	rsb	r3, r4, #8
	cmp	r6, r3
	uxtbhi	r6, r3
	cmp	r6, #0
	beq	.L7971
	ldr	fp, .L8131+8
	mov	r9, #0
.LPIC1640:
	add	fp, pc, fp
.L7972:
	mov	r4, r4, asl #3
	mov	r3, r9
	mov	r1, #8
	add	r0, r8, r4
	mov	r2, fp
	bl	snprintf(PLT)
	add	r4, r5, r4
	mov	r3, #1
	add	r9, r9, #1
	strb	r3, [r4, #9]
	ldr	r4, [r5]
	cmp	r9, r6
	add	r4, r4, r3
	str	r4, [r5]
	bne	.L7972
.L7971:
	ldr	r2, [r7]
	sub	r3, r4, #1
	cmp	r3, #7
	str	r2, [sp, #40]
	bhi	.L8114
	ldr	r3, [sp, #44]
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L8031
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r3, r0, #0
	str	r3, [sp, #36]
	beq	.L7976
.L7975:
	ldr	r6, [sp, #36]
	mov	r0, #128
	movw	r1, #32976
	ldrb	r3, [r6, #144]	@ zero_extendqisi2
	orr	r3, r3, #2
	strb	r3, [r6, #144]
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r6, #68]
	beq	.L8115
	ldr	r3, [r5, #76]
	mov	r0, #400
	movw	r1, #32976
	ldr	r2, [sp, #36]
	ldr	ip, [sp, #40]
	mul	r0, r0, r4
	str	r3, [r2, #172]
	ldr	r3, [r5, #80]
	str	ip, [r2]
	str	r3, [r2, #176]
	ldr	r3, [ip, #4]
	str	r3, [r2, #48]
	ldr	r3, [r7, #4]
	str	r7, [r2, #4]
	str	r3, [r2, #52]
	bl	__kmalloc(PLT)
	subs	fp, r0, #0
	beq	.L7993
	ldr	r1, [sp, #36]
	add	r7, r5, #4
	ldr	r2, .L8131+12
	add	r3, r1, #28
	str	fp, [r1, #100]
	ldr	r1, .L8131+16
.LPIC1643:
	add	r2, pc, r2
	mov	r0, r3
	add	r2, r2, #3712
	str	r3, [sp, #12]
.LPIC1642:
	add	r1, pc, r1
	bl	__init_rwsem(PLT)
	cmp	r4, #0
	ble	.L7992
	ldr	r2, [sp, #40]
	str	r10, [sp, #48]
	mov	r9, #0
	ldr	r3, .L8131+20
	str	r8, [sp, #52]
	mov	r8, fp
	add	r2, r2, #32
.LPIC1646:
	add	r3, pc, r3
	str	r2, [sp, #16]
	ldr	r2, .L8131+24
	add	r1, r3, #760
	add	r0, r3, #776
	str	r3, [sp, #32]
	add	r3, r3, #744
	mov	fp, r1
	str	r0, [sp, #24]
.LPIC1644:
	add	r2, pc, r2
	str	r3, [sp, #28]
	str	r2, [sp, #20]
	ldr	r2, .L8131+28
.LPIC1613:
	add	r2, pc, r2
	mov	r10, r2
	b	.L7991
.L8119:
	bl	fsg_lun_open(PLT)
	cmp	r0, #0
	bne	.L8116
.L7990:
	add	r9, r9, #1
	add	r8, r8, #400
	cmp	r4, r9
	beq	.L8117
.L7991:
	ldrb	r3, [r7, #6]	@ zero_extendqisi2
	mov	r6, r8
	ldrb	r2, [r8, #24]	@ zero_extendqisi2
	ldr	r0, [sp, #20]
	ldr	r1, [sp, #12]
	adds	r3, r3, #0
	movne	r3, #1
	bfi	r2, r3, #3, #1
	strb	r2, [r8, #24]
	ldr	r3, [r7, #4]
	uxtb	r2, r2
	bic	r3, r3, #-16777216
	bic	r3, r3, #65280
	adds	r3, r3, #0
	movne	r3, #1
	bfi	r2, r3, #1, #1
	bfi	r2, r3, #0, #1
	mov	r3, r2
	strb	r2, [r8, #24]
	ldrb	r2, [r7, #5]	@ zero_extendqisi2
	bfi	r3, r2, #2, #1
	mov	r2, r3
	strb	r3, [r8, #24]
	ldrb	r3, [r7, #7]	@ zero_extendqisi2
	str	r0, [r8, #388]
	bfi	r2, r3, #7, #1
	ldr	r3, [sp, #16]
	strb	r2, [r8, #24]
	str	r3, [r6, #48]!
	mov	r0, r6
	bl	dev_set_drvdata(PLT)
	ldr	r1, [r5, #68]
	mov	r2, r9
	mov	r0, r6
	cmp	r1, #0
	moveq	r1, r10
	bl	dev_set_name(PLT)
	mov	r0, r6
	bl	device_register(PLT)
	subs	r3, r0, #0
	mov	r1, fp
	mov	r0, r6
	bne	.L8118
	bl	device_create_file(PLT)
	subs	r3, r0, #0
	ldr	r1, [sp, #24]
	mov	r0, r6
	bne	.L7984
	bl	device_create_file(PLT)
	subs	r3, r0, #0
	ldr	r1, [sp, #28]
	mov	r0, r6
	bne	.L7984
	bl	device_create_file(PLT)
	ldr	r3, [sp, #32]
	add	r1, r3, #728
	subs	r3, r0, #0
	mov	r0, r6
	bne	.L7984
	bl	device_create_file(PLT)
	subs	r3, r0, #0
	mov	r0, r8
	bne	.L7984
	ldr	r3, [r7]
	add	r7, r7, #8
	subs	r1, r3, #0
	bne	.L8119
	ldrb	r3, [r8, #24]	@ zero_extendqisi2
	tst	r3, #12
	bne	.L7990
	ldr	r3, [sp, #36]
	mvn	r4, #21
	mov	r2, r9
	ldr	r1, .L8131+32
	mov	fp, r4
	ldr	r10, [sp, #48]
	ldr	r8, [sp, #52]
	ldr	r0, [r3]
.LPIC1650:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L7986
.L7984:
	ldr	r10, [sp, #48]
	mov	fp, r3
	mov	r4, r3
	ldr	r8, [sp, #52]
.L7986:
	ldr	r3, [sp, #36]
	add	r7, r9, #1
	mov	r2, r3
	str	r7, [r3, #92]
.L7979:
	mov	r3, #7
	add	r0, r2, #212
	mov	r6, fp
	str	r3, [r2, #112]
	bl	fsg_common_release(PLT)
.L8006:
	cmn	r4, #4096
	bhi	.L8019
	ldr	r3, [r5]
	cmp	r3, #0
	movne	r4, #0
	movne	r7, #400
	bne	.L8020
	b	.L8023
.L8021:
	ldr	r3, [r5]
	add	r4, r4, #1
	cmp	r4, r3
	bcs	.L8023
.L8020:
	ldr	r1, [r6, #100]
	add	r2, r8, r4, asl #3
	ldr	r0, [r10, #8]
	mla	r1, r7, r4, r1
	add	r0, r0, #8
	add	r1, r1, #56
	bl	sysfs_create_link(PLT)
	cmp	r0, #0
	beq	.L8021
	subs	r7, r4, #0
	mov	r9, r0
	subne	r4, r7, #1
	addne	r8, r8, r4, asl #3
	beq	.L8025
.L8024:
	ldr	r0, [r10, #8]
	mov	r1, r8
	sub	r7, r7, #1
	sub	r8, r8, #8
	add	r0, r0, #8
	bl	sysfs_remove_link(PLT)
	cmp	r7, #0
	bne	.L8024
.L8025:
	add	r0, r6, #212
	bl	fsg_common_release(PLT)
.L8106:
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r9
.L8103:
	add	sp, sp, #124
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8023:
	str	r6, [r5, #96]
	mov	r0, #0
	str	r5, [r10, #4]
	b	.L8103
.L8029:
	mov	r5, #16
	b	.L7965
.L8112:
	ldr	r2, .L8131+36
	mov	r4, #0
	ldr	r0, [r5]
.LPIC1638:
	add	r2, pc, r2
	mov	r3, r0, asl #3
	ldr	lr, [r2]
	ldrb	ip, [r2, #4]	@ zero_extendqisi2
	add	r2, r5, r3
	add	r3, r8, r3
	strb	r1, [r2, #10]
	strb	r1, [r2, #8]
	strb	r4, [r2, #9]
	str	lr, [r8, r0, asl #3]
	strb	ip, [r3, #4]
	ldr	r4, [r5]
	add	r4, r4, #1
	str	r4, [r5]
	ldr	r3, [r9, #52]
	cmp	r3, #0
	beq	.L7968
	ldrb	r3, [r3, #10]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L7968
.L8113:
	ldr	r3, .L8131+40
	mov	r2, r4, asl #3
	mov	ip, #1
	mov	r0, #0
	add	r1, r5, r2
	add	r2, r8, r2
.LPIC1639:
	add	r3, pc, r3
	strb	ip, [r1, #9]
	ldr	lr, [r3]
	strb	r0, [r1, #10]
	ldrb	r3, [r3, #4]	@ zero_extendqisi2
	strb	r0, [r1, #8]
	str	lr, [r8, r4, asl #3]
	strb	r3, [r2, #4]
	ldr	r4, [r5]
	add	r4, r4, ip
	str	r4, [r5]
	b	.L7968
.L8031:
	mov	r3, #16
	str	r3, [sp, #36]
	b	.L7975
.L8114:
	ldr	r1, .L8131+44
	add	r0, r2, #32
	mov	r2, r4
	mvn	r9, #21
.LPIC1641:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L8106
.L8115:
	ldr	r3, [sp, #36]
	ldrb	r3, [r3, #144]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L8120
.L7976:
	mvn	r9, #11
	b	.L8106
.L8111:
	ldr	r4, [r5]
	b	.L7968
.L8117:
	ldr	r10, [sp, #48]
	ldr	r8, [sp, #52]
.L7992:
	ldr	r3, [sp, #36]
	ldr	r6, [r3, #68]
	str	r4, [r3, #92]
	mov	r7, r6
	add	r4, r6, #96
.L7981:
	movw	r0, #16592
	mov	r1, #2
	bl	__get_free_pages(PLT)
	cmp	r0, #0
	str	r0, [r7]
	beq	.L7993
	cmp	r7, r4
	add	r7, r7, #32
	beq	.L8121
	str	r7, [r7, #-24]
	b	.L7981
.L8118:
	ldr	r7, [sp, #36]
	mov	r2, r9
	mov	fp, r3
	ldr	r1, .L8131+48
	mov	r4, r3
	ldr	r10, [sp, #48]
	ldr	r8, [sp, #52]
	ldr	r0, [r7]
.LPIC1645:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	_dev_info(PLT)
	str	r9, [r7, #92]
	mov	r0, r6
	bl	put_device(PLT)
	ldr	r2, [sp, #36]
	b	.L7979
.L8121:
	ldr	r3, [sp, #36]
	ldr	r2, [r3, #68]
	movw	r3, #65535
	str	r2, [r6, #104]
	ldrh	r2, [r5, #92]
	cmp	r2, r3
	beq	.L8122
.L7996:
	ldr	r3, [r5, #84]
	ldr	r1, [sp, #36]
	cmp	r3, #0
	add	r0, r1, #180
	beq	.L8123
.L7999:
	ldr	r1, [r5, #88]
	cmp	r1, #0
	beq	.L8124
.L8000:
	stmia	sp, {r1, r2}
	ldr	r2, .L8131+52
	mov	r1, #29
.LPIC1678:
	add	r2, pc, r2
	bl	snprintf(PLT)
	ldrb	r0, [r5, #94]	@ zero_extendqisi2
	cmp	r0, #0
	bne	.L8125
.L8001:
	ldr	ip, [sp, #36]
	mov	r1, #0
	mov	r2, #1
	ldrb	r3, [ip, #144]	@ zero_extendqisi2
	str	r1, [ip, #44]
	str	r2, [ip, #212]
	bfi	r3, r0, #0, #1
	strb	r3, [ip, #144]
	ldr	r3, [r5, #72]
	cmp	r3, r1
	beq	.L8126
.L8002:
	ldr	r4, [sp, #36]
	mvn	r2, #0
	ldr	r0, .L8131+56
	mov	r1, r4
.LPIC1680:
	add	r0, pc, r0
	bl	kthread_create_on_node(PLT)
	cmn	r0, #4096
	str	r0, [r4, #168]
	bhi	.L8127
	ldr	r4, .L8131+60
	mov	r3, #0
	ldr	r6, [sp, #36]
	ldr	r1, .L8131+64
.LPIC1682:
	add	r4, pc, r4
	add	r2, r4, #3680
	str	r3, [r6, #152]
	add	r0, r6, #156
.LPIC1681:
	add	r1, pc, r1
	add	r2, r2, #12
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L8131+68
	add	r2, r4, #3712
	add	r0, r6, #16
	mov	r4, r6
.LPIC1683:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r0, [r6]
	ldr	r1, .L8131+72
	add	r0, r0, #32
.LPIC1685:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	ldr	r0, [r6]
	ldr	r1, .L8131+76
	ldr	r2, [r6, #92]
	add	r0, r0, #32
.LPIC1686:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	ldr	r3, [sp, #44]
	ldr	r0, [r3, #48]
	cmp	r0, #0
	beq	.L8004
	mov	r1, #208
	bl	kmem_cache_alloc(PLT)
	ldr	r6, [r6, #92]
	mov	r7, r0
	ldr	r3, [r4, #100]
	cmp	r6, #0
	ble	.L8013
	cmp	r0, #0
	beq	.L8128
.L8007:
	ldr	r2, .L8131+80
	add	r9, r3, #48
	str	r5, [sp, #24]
	ldr	r1, .L8131+84
	mov	r5, r9
	str	r10, [sp, #28]
	ldr	r3, .L8131+88
	mov	r4, #0
	str	r8, [sp, #32]
.LPIC1626:
	add	r2, pc, r2
.LPIC1630:
	add	r1, pc, r1
	str	r2, [sp, #20]
	ldr	r2, .L8131+92
.LPIC1627:
	add	r3, pc, r3
	str	r1, [sp, #16]
	ldr	r1, .L8131+96
	mov	fp, r3
.LPIC1628:
	add	r2, pc, r2
.LPIC1631:
	add	r1, pc, r1
	str	r2, [sp, #12]
	ldr	r2, .L8131+100
	mov	r9, r1
.LPIC1629:
	add	r2, pc, r2
	mov	r10, r2
	b	.L8018
.L8130:
	ldr	r1, .L8131+104
.LPIC1633:
	add	r1, pc, r1
.L8017:
	str	r1, [sp]
	ldr	r1, .L8131+108
	add	r4, r4, #1
	str	r0, [sp, #4]
	mov	r0, r5
	add	r5, r5, #400
.LPIC1688:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	cmp	r6, r4
	beq	.L8129
.L8018:
	ldr	r0, [r5, #-48]
	sub	r8, r5, #48
	cmp	r0, #0
	beq	.L8068
	mov	r2, #4096
	add	r0, r0, #8
	mov	r1, r7
	bl	d_path(PLT)
	mov	r2, #61440
	movt	r2, 65535
	cmp	r0, r2
	movhi	r0, fp
.L8014:
	ldrb	r1, [r8, #24]	@ zero_extendqisi2
	tst	r1, #4
	movne	r2, r10
	ldreq	r2, [sp, #12]
	tst	r1, #2
	movne	r3, r9
	ldreq	r3, [sp, #16]
	tst	r1, #8
	beq	.L8130
	ldr	r1, .L8131+112
.LPIC1632:
	add	r1, pc, r1
	b	.L8017
.L8116:
	ldr	r10, [sp, #48]
	mov	fp, r0
	mov	r4, r0
	ldr	r8, [sp, #52]
	b	.L7986
.L8128:
	add	r4, r3, #48
	mov	r9, r0
	ldr	r3, .L8131+116
	ldr	r2, .L8131+120
	str	r5, [sp, #16]
	ldr	r1, .L8131+124
	str	r7, [sp, #20]
	ldr	r0, .L8131+128
	str	r10, [sp, #24]
	ldr	fp, .L8131+132
.LPIC1618:
	add	r3, pc, r3
	str	r8, [sp, #28]
	ldr	ip, .L8131+136
.LPIC1620:
	add	r2, pc, r2
	mov	r5, r3
.LPIC1621:
	add	r1, pc, r1
	mov	r7, r2
.LPIC1622:
	add	r0, pc, r0
	mov	r10, r1
.LPIC1619:
	add	fp, pc, fp
	mov	r8, r0
.LPIC1623:
	add	ip, pc, ip
	str	ip, [sp, #12]
.L8012:
	ldr	r0, [r4, #-48]
	mov	r2, r7
	mov	r3, r8
	ldrb	r1, [r4, #-24]	@ zero_extendqisi2
	cmp	r0, #0
	ldr	r0, .L8131+140
	movne	lr, fp
	moveq	lr, r5
	tst	r1, #4
	movne	r2, r10
	tst	r1, #2
	ldrne	r3, [sp, #12]
	tst	r1, #8
.LPIC1625:
	add	r0, pc, r0
	bne	.L8011
	ldr	r0, .L8131+144
.LPIC1624:
	add	r0, pc, r0
.L8011:
	ldr	r1, .L8131+148
	stmia	sp, {r0, lr}
	add	r9, r9, #1
	mov	r0, r4
	add	r4, r4, #400
.LPIC1687:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	cmp	r9, r6
	bne	.L8012
	add	r5, sp, #16
	ldr	r8, [sp, #28]
	ldmia	r5, {r5, r7, r10}
.L8013:
	mov	r0, r7
	ldr	r6, [sp, #36]
	bl	kfree(PLT)
	ldr	r0, [r6, #168]
	mov	r4, r6
	bl	wake_up_process(PLT)
	b	.L8006
.L8125:
	ldr	r3, [sp, #36]
	ldr	r0, .L8131+152
	ldr	r3, [r3]
.LPIC1679:
	add	r0, pc, r0
	ldr	r1, [r3, #28]
	bl	strcmp(PLT)
	adds	r0, r0, #0
	movne	r0, #1
	b	.L8001
.L8120:
	ldr	r0, [sp, #36]
	mvn	r9, #11
	bl	kfree(PLT)
	b	.L8106
.L8004:
	ldr	r3, [sp, #36]
	mov	r7, #16
	ldr	r6, [r3, #92]
	ldr	r3, [r3, #100]
	cmp	r6, #0
	bgt	.L8007
	b	.L8013
.L8122:
	ldr	r3, [sp, #40]
	ldr	r0, .L8131+156
	ldr	r4, [r3, #28]
.LPIC1651:
	add	r0, pc, r0
	mov	r1, r4
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #769
	beq	.L7996
	ldr	r0, .L8131+160
	mov	r1, r4
.LPIC1652:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #770
	beq	.L7996
	ldr	r0, .L8131+164
	mov	r1, r4
.LPIC1653:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #771
	beq	.L7996
	ldr	r0, .L8131+168
	mov	r1, r4
.LPIC1654:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #774
	beq	.L7996
	ldr	r0, .L8131+172
	mov	r1, r4
.LPIC1655:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #776
	beq	.L7996
	ldr	r0, .L8131+176
	mov	r1, r4
.LPIC1656:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #785
	beq	.L7996
	ldr	r0, .L8131+180
	mov	r1, r4
.LPIC1657:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #786
	beq	.L7996
	ldr	r0, .L8131+184
	mov	r1, r4
.LPIC1658:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #787
	beq	.L7996
	ldr	r0, .L8131+188
	mov	r1, r4
.LPIC1659:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #788
	beq	.L7996
	ldr	r0, .L8131+192
	mov	r1, r4
.LPIC1660:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #790
	beq	.L7996
	ldr	r0, .L8131+196
	mov	r1, r4
.LPIC1661:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #792
	beq	.L7996
	ldr	r0, .L8131+200
	mov	r1, r4
.LPIC1662:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #793
	beq	.L7996
	ldr	r0, .L8131+204
	mov	r1, r4
.LPIC1663:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #800
	beq	.L7996
	ldr	r0, .L8131+208
	mov	r1, r4
.LPIC1664:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #801
	beq	.L7996
	ldr	r0, .L8131+212
	mov	r1, r4
.LPIC1665:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #802
	beq	.L7996
	ldr	r0, .L8131+216
	mov	r1, r4
.LPIC1666:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #803
	beq	.L7996
	ldr	r0, .L8131+220
	mov	r1, r4
.LPIC1667:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #804
	beq	.L7996
	ldr	r0, .L8131+224
	mov	r1, r4
.LPIC1668:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #805
	beq	.L7996
	ldr	r0, .L8131+228
	mov	r1, r4
.LPIC1669:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #806
	beq	.L7996
	ldr	r0, .L8131+232
	mov	r1, r4
.LPIC1670:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #807
	beq	.L7996
	ldr	r0, .L8131+236
	mov	r1, r4
.LPIC1671:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #808
	beq	.L7996
	ldr	r0, .L8131+240
	mov	r1, r4
.LPIC1672:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #809
	beq	.L7996
	ldr	r0, .L8131+244
	mov	r1, r4
.LPIC1673:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #816
	beq	.L7996
	ldr	r0, .L8131+248
	mov	r1, r4
.LPIC1674:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #817
	beq	.L7996
	ldr	r0, .L8131+252
	mov	r1, r4
.LPIC1675:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #818
	beq	.L7996
	ldr	r0, .L8131+256
	mov	r1, r4
.LPIC1676:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #819
	beq	.L7996
	ldr	r0, .L8131+260
	mov	r1, r4
.LPIC1677:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #820
	beq	.L7996
	ldr	r3, [sp, #36]
	mov	r2, r4
	ldr	r1, .L8131+264
	ldr	r0, [r3]
.LPIC1689:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_warn(PLT)
	movw	r2, #921
	b	.L7996
.L8068:
	ldr	r0, [sp, #20]
	b	.L8014
.L8129:
	ldr	r5, [sp, #24]
	ldr	r10, [sp, #28]
	ldr	r8, [sp, #32]
	b	.L8013
.L7993:
	mvn	r4, #11
	ldr	r2, [sp, #36]
	mov	fp, r4
	b	.L7979
.L8110:
	mvn	r0, #11
	b	.L8103
.L8126:
	ldr	r3, .L8131+268
.LPIC1617:
	add	r3, pc, r3
	b	.L8002
.L8124:
	ldr	r1, [sp, #36]
	ldr	r1, [r1, #100]
	ldrb	r1, [r1, #24]	@ zero_extendqisi2
	tst	r1, #8
	bne	.L8061
	ldr	r1, .L8131+272
.LPIC1615:
	add	r1, pc, r1
	b	.L8000
.L8123:
	ldr	r3, .L8131+276
.LPIC1614:
	add	r3, pc, r3
	b	.L7999
.L8127:
	mov	fp, r0
	mov	r4, r0
	ldr	r2, [sp, #36]
	b	.L7979
.L8061:
	ldr	r1, .L8131+280
.LPIC1616:
	add	r1, pc, r1
	b	.L8000
.L8019:
	mov	r9, r6
	b	.L8106
.L8132:
	.align	2
.L8131:
	.word	.LANCHOR2-(.LPIC1634+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1690+8))
	.word	.LC398-(.LPIC1640+8)
	.word	.LANCHOR4-(.LPIC1643+8)
	.word	.LC400-(.LPIC1642+8)
	.word	.LANCHOR0-(.LPIC1646+8)
	.word	fsg_lun_release-(.LPIC1644+8)
	.word	.LC386-(.LPIC1613+8)
	.word	.LC402-(.LPIC1650+8)
	.word	.LC396-(.LPIC1638+8)
	.word	.LC397-(.LPIC1639+8)
	.word	.LC399-(.LPIC1641+8)
	.word	.LC401-(.LPIC1645+8)
	.word	.LC428-(.LPIC1678+8)
	.word	fsg_main_thread-(.LPIC1680+8)
	.word	.LANCHOR4-(.LPIC1682+8)
	.word	.LC337-(.LPIC1681+8)
	.word	.LC429-(.LPIC1683+8)
	.word	.LC430-(.LPIC1685+8)
	.word	.LC431-(.LPIC1686+8)
	.word	.LC391-(.LPIC1626+8)
	.word	.LC294-(.LPIC1630+8)
	.word	.LC392-(.LPIC1627+8)
	.word	.LC294-(.LPIC1628+8)
	.word	.LC394-(.LPIC1631+8)
	.word	.LC393-(.LPIC1629+8)
	.word	.LC294-(.LPIC1633+8)
	.word	.LC432-(.LPIC1688+8)
	.word	.LC395-(.LPIC1632+8)
	.word	.LC391-(.LPIC1618+8)
	.word	.LC294-(.LPIC1620+8)
	.word	.LC393-(.LPIC1621+8)
	.word	.LC294-(.LPIC1622+8)
	.word	.LC392-(.LPIC1619+8)
	.word	.LC394-(.LPIC1623+8)
	.word	.LC395-(.LPIC1625+8)
	.word	.LC294-(.LPIC1624+8)
	.word	.LC432-(.LPIC1687+8)
	.word	.LC409-(.LPIC1679+8)
	.word	.LC403-(.LPIC1651+8)
	.word	.LC404-(.LPIC1652+8)
	.word	.LC261-(.LPIC1653+8)
	.word	.LC405-(.LPIC1654+8)
	.word	.LC406-(.LPIC1655+8)
	.word	.LC407-(.LPIC1656+8)
	.word	.LC408-(.LPIC1657+8)
	.word	.LC409-(.LPIC1658+8)
	.word	.LC410-(.LPIC1659+8)
	.word	.LC411-(.LPIC1660+8)
	.word	.LC412-(.LPIC1661+8)
	.word	.LC413-(.LPIC1662+8)
	.word	.LC414-(.LPIC1663+8)
	.word	.LC415-(.LPIC1664+8)
	.word	.LC416-(.LPIC1665+8)
	.word	.LC417-(.LPIC1666+8)
	.word	.LC418-(.LPIC1667+8)
	.word	.LC419-(.LPIC1668+8)
	.word	.LC420-(.LPIC1669+8)
	.word	.LC421-(.LPIC1670+8)
	.word	.LC422-(.LPIC1671+8)
	.word	.LC423-(.LPIC1672+8)
	.word	.LC424-(.LPIC1673+8)
	.word	.LC425-(.LPIC1674+8)
	.word	.LC328-(.LPIC1675+8)
	.word	.LC426-(.LPIC1676+8)
	.word	.LC427-(.LPIC1677+8)
	.word	.LC433-(.LPIC1689+8)
	.word	.LC390-(.LPIC1617+8)
	.word	.LC388-(.LPIC1615+8)
	.word	.LC387-(.LPIC1614+8)
	.word	.LC389-(.LPIC1616+8)
	.fnend
	.size	mass_storage_function_init, .-mass_storage_function_init
	.align	2
	.type	fmbim_cmd_complete, %function
fmbim_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	ldr	r7, [r1, #48]
	cmp	r5, #0
	beq	.L8141
	ldr	r2, [r1, #44]
	cmp	r2, #0
	blt	.L8142
	ldr	r3, .L8145
	mov	r4, r1
.LPIC1696:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L8139
	movw	r1, #32800
	bl	kmem_cache_alloc(PLT)
	subs	r8, r0, #0
	beq	.L8143
.L8136:
	mov	r0, r7
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r8]
	movne	r6, r8
	strne	r7, [r8, #4]
	beq	.L8144
.L8137:
	ldr	r1, [r4]
	mov	r2, r7
	add	r4, r5, #196
	bl	memcpy(PLT)
	mov	r0, r4
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r5, #204]
	add	r2, r6, #8
	add	r1, r5, #200
	mov	r0, r4
	str	r2, [r5, #204]
	str	r1, [r6, #8]
	str	r3, [r6, #12]
	str	r2, [r3]
	bl	_raw_spin_unlock(PLT)
	ldrd	r6, [sp, #8]
	add	r0, r5, #100
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up(PLT)
.L8139:
	mov	r8, #16
	b	.L8136
.L8143:
	mvn	r3, #0
	mvn	r6, #11
	ldr	r0, [r3, #-11]
	b	.L8137
.L8144:
	mov	r0, r8
	mvn	r6, #11
	bl	kfree(PLT)
	mvn	r3, #0
	ldr	r0, [r3, #-11]
	b	.L8137
.L8142:
	ldr	r1, .L8145+4
	ldr	r0, .L8145+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC1694:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC1693:
	add	r0, pc, r0
	add	r1, r1, #2880
	add	sp, sp, #24
	b	printk(PLT)
.L8141:
	ldr	r1, .L8145+12
	ldr	r0, .L8145+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC1692:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC1691:
	add	r0, pc, r0
	add	r1, r1, #2880
	add	sp, sp, #24
	b	printk(PLT)
.L8146:
	.align	2
.L8145:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1696+8))
	.word	.LANCHOR3-(.LPIC1694+8)
	.word	.LC435-(.LPIC1693+8)
	.word	.LANCHOR3-(.LPIC1692+8)
	.word	.LC434-(.LPIC1691+8)
	.fnend
	.size	fmbim_cmd_complete, .-fmbim_cmd_complete
	.align	2
	.type	grmnet_ctrl_qti_send_cpkt_tomodem, %function
grmnet_ctrl_qti_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8168
	cmp	r2, #2048
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC1697:
	add	r3, pc, r3
	ldr	r5, [r3, #-508]
	bhi	.L8166
	ldr	r3, .L8168+4
	mov	r7, r1
.LPIC1703:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r4, [r3, #24]
	cmp	r4, #0
	beq	.L8150
	mov	r0, r4
	movw	r1, #32800
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L8155
	mov	r0, r6
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L8156
	cmn	r4, #4096
	str	r6, [r4, #4]
	bhi	.L8155
.L8153:
	mov	r1, r7
	mov	r2, r6
	add	r7, r5, #52
	bl	memcpy(PLT)
	str	r6, [r4, #4]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldrb	r6, [r5, #4]	@ zero_extendqisi2
	mov	r8, r0
	cmp	r6, #0
	beq	.L8167
	ldr	r3, [r5, #48]
	add	r2, r4, #8
	add	ip, r5, #44
	mov	r0, r7
	mov	r1, r8
	str	r2, [r5, #48]
	str	ip, [r4, #8]
	str	r3, [r4, #12]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r0, r5, #32
	mov	r1, #3
	mov	r2, #1
	mov	r3, #0
	bl	__wake_up(PLT)
	mov	r0, #0
.L8162:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8150:
	mov	r0, r2
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r4, #16]
	strne	r6, [r4, #20]
	movne	r4, #16
	bne	.L8153
	mov	r4, #16
.L8156:
	mov	r0, r4
	bl	kfree(PLT)
.L8155:
	ldr	r1, .L8168+8
	ldr	r0, .L8168+12
.LPIC1701:
	add	r1, pc, r1
	add	r1, r1, #2896
.LPIC1700:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #11
	b	.L8162
.L8166:
	ldr	r0, .L8168+16
	mov	r1, r2
	mov	r2, #2048
.LPIC1698:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #21
	b	.L8162
.L8167:
	ldr	r0, .L8168+20
	mov	r1, r5
.LPIC1702:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4]
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r6
	b	.L8162
.L8169:
	.align	2
.L8168:
	.word	.LANCHOR4-(.LPIC1697+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1703+8))
	.word	.LANCHOR3-(.LPIC1701+8)
	.word	.LC317-(.LPIC1700+8)
	.word	.LC436-(.LPIC1698+8)
	.word	.LC437-(.LPIC1702+8)
	.fnend
	.size	grmnet_ctrl_qti_send_cpkt_tomodem, .-grmnet_ctrl_qti_send_cpkt_tomodem
	.align	2
	.type	rmnet_mux_command_complete, %function
rmnet_mux_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r2, [r1, #44]
	ldr	r4, [r1, #32]
	ldr	r7, [r1, #48]
	cmp	r2, #0
	ldr	r8, [r4, #76]
	blt	.L8182
	ldr	r3, .L8185
	mov	r5, r1
.LPIC1711:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L8177
	movw	r1, #32800
	bl	kmem_cache_alloc(PLT)
	subs	r6, r0, #0
	beq	.L8173
.L8172:
	mov	r0, r7
	movw	r1, #32800
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L8183
	add	r8, r4, #356
	str	r7, [r6, #4]
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #344]
	cmp	r3, #0
	bne	.L8175
	mov	r0, r8
	ldr	r5, .L8185+4
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r6]
	bl	kfree(PLT)
	mov	r0, r6
.LPIC1707:
	add	r5, pc, r5
	bl	kfree(PLT)
	ldr	r3, [r4, #412]
	add	r5, r5, #2928
	ldr	r0, .L8185+8
	add	r5, r5, #8
	mov	r1, r5
	add	r3, r3, #1
.LPIC1706:
	add	r0, pc, r0
	add	r0, r0, #608
	str	r3, [r4, #412]
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L8184
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8175:
	mov	r9, r6
	ldr	r1, [r5]
	mov	r2, r7
	ldr	r0, [r9], #8
	bl	memcpy(PLT)
	ldr	r3, [r4, #308]
	add	r2, r4, #304
	mov	r0, r8
	str	r9, [r4, #308]
	strd	r2, [r6, #8]
	str	r9, [r3]
	ldr	r3, [r4, #324]
	add	r3, r3, #1
	str	r3, [r4, #324]
	bl	_raw_spin_unlock(PLT)
	ldrd	r6, [sp, #8]
	add	r0, r4, #312
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up(PLT)
.L8177:
	mov	r6, #16
	b	.L8172
.L8182:
	ldr	r0, [r8]
	ldr	r1, .L8185+12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	r0, r0, #32
	ldr	r10, [sp, #24]
.LPIC1704:
	add	r1, pc, r1
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	dev_err(PLT)
.L8183:
	mov	r0, r6
	bl	kfree(PLT)
.L8173:
	ldr	r0, [r8]
	ldr	r1, .L8185+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	r0, r0, #32
	ldr	r10, [sp, #24]
.LPIC1710:
	add	r1, pc, r1
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	dev_err(PLT)
.L8184:
	ldr	r0, .L8185+20
	mov	r1, r5
	ldr	r2, [r4, #412]
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
.LPIC1708:
	add	r0, pc, r0
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L8186:
	.align	2
.L8185:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1711+8))
	.word	.LANCHOR3-(.LPIC1707+8)
	.word	.LANCHOR1-(.LPIC1706+8)
	.word	.LC438-(.LPIC1704+8)
	.word	.LC440-(.LPIC1710+8)
	.word	.LC439-(.LPIC1708+8)
	.fnend
	.size	rmnet_mux_command_complete, .-rmnet_mux_command_complete
	.align	2
	.type	ccid_bulk_read, %function
ccid_bulk_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r2
	movw	r2, #522
	cmp	r7, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r0, #124]
	bhi	.L8217
	ldr	r3, [r4, #140]
	cmp	r3, #0
	bne	.L8218
	mov	r3, sp
	mov	r9, r1
	bic	r8, r3, #8128
	add	r5, r4, #84
	bic	r8, r8, #63
.L8198:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L8203
	ldr	r6, [r4, #176]
	mov	r3, #0
	mov	r1, r0
	mov	r0, r5
	str	r7, [r6, #4]
	str	r3, [r4, #180]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #100]
	mov	r1, r6
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L8219
	ldr	r3, [r4, #180]
	cmp	r3, #0
	bne	.L8192
	ldr	r3, [r4, #140]
	cmp	r3, #0
	bne	.L8192
	ldr	r2, [r4, #88]
	cmp	r2, #0
	beq	.L8192
	ldr	r2, .L8223
	add	r10, sp, #4
	add	fp, r4, #152
	ldr	r1, [r8, #12]
	str	r3, [sp, #4]
	add	r3, sp, #16
	str	r3, [sp, #16]
.LPIC1719:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L8195
.L8220:
	bl	schedule(PLT)
.L8195:
	mov	r0, fp
	mov	r1, r10
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #180]
	cmp	r3, #0
	bne	.L8193
	ldr	r3, [r4, #140]
	cmp	r3, #0
	bne	.L8193
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L8193
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L8220
	mov	r0, fp
	mov	r1, r10
	bl	finish_wait(PLT)
	ldr	r0, [r4, #100]
	mov	r3, #1
	mov	r1, r6
	str	r3, [r4, #140]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	mov	r0, #65024
	movt	r0, 65535
.L8215:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8193:
	mov	r0, fp
	mov	r1, r10
	bl	finish_wait(PLT)
.L8192:
	ldr	r3, [r4, #140]
	cmp	r3, #0
	bne	.L8204
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #88]
	mov	r1, r0
	cmp	r3, #0
	beq	.L8221
	ldr	r2, [r6, #48]
	cmp	r2, #0
	bne	.L8197
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L8198
.L8203:
	mvn	r0, #18
	b	.L8215
.L8204:
	mvn	r0, #4
	b	.L8215
.L8221:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #18
	b	.L8215
.L8197:
	mov	r3, #1
	cmp	r2, r7
	mov	r0, r5
	movcc	r10, r2
	str	r3, [r4, #148]
	movcs	r10, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r3, sp
	ldr	r1, [r6]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r10; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L8222
.L8199:
	cmp	r10, #0
	mov	r0, r5
	mvnne	r7, #13
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #88]
	mov	r2, #0
	mov	r6, r0
	str	r2, [r4, #148]
	cmp	r3, r2
	bne	.L8201
	ldr	r7, [r4, #176]
	ldr	r4, [r4, #100]
	cmp	r7, r2
	beq	.L8202
	ldr	r0, [r7]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r7
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
.L8202:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #18
	b	.L8215
.L8201:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r7
	b	.L8215
.L8222:
	mov	r2, r10
	mov	r0, r9
	bl	__copy_to_user(PLT)
	mov	r10, r0
	b	.L8199
.L8219:
	ldr	r1, .L8223+4
	ldr	r0, .L8223+8
.LPIC1717:
	add	r1, pc, r1
	add	r1, r1, #2960
.LPIC1716:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mov	r3, #1
	mvn	r0, #4
	str	r3, [r4, #140]
	b	.L8215
.L8218:
	ldr	r1, .L8223+12
	ldr	r0, .L8223+16
.LPIC1715:
	add	r1, pc, r1
	add	r1, r1, #2960
.LPIC1714:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #4
	b	.L8215
.L8217:
	ldr	r1, .L8223+20
	mov	r3, r7
	ldr	r0, .L8223+24
.LPIC1713:
	add	r1, pc, r1
	add	r1, r1, #2960
.LPIC1712:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #11
	b	.L8215
.L8224:
	.align	2
.L8223:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1719+8))
	.word	.LANCHOR3-(.LPIC1717+8)
	.word	.LC442-(.LPIC1716+8)
	.word	.LANCHOR3-(.LPIC1715+8)
	.word	.LC441-(.LPIC1714+8)
	.word	.LANCHOR3-(.LPIC1713+8)
	.word	.LC377-(.LPIC1712+8)
	.fnend
	.size	ccid_bulk_read, .-ccid_bulk_read
	.align	2
	.type	ffs_epfile_write, %function
ffs_epfile_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	fp, [r0, #124]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [fp, #36]
	ldr	r6, [fp, #40]
	cmp	r4, #0
	bne	.L8249
.L8227:
	mov	r8, r2
	ldr	r2, [r6, #96]
	str	r1, [sp, #4]
	mov	r7, r0
	cmp	r2, #2
	bne	.L8228
	ldr	r10, [fp, #44]
	cmp	r10, #0
	beq	.L8270
.L8245:
	ldrb	r5, [fp, #57]	@ zero_extendqisi2
	clz	r5, r5
	mov	r5, r5, lsr #5
	cmp	r5, #0
	bne	.L8271
	cmp	r4, #0
	bne	.L8234
	mov	r0, r8
	movw	r1, #32976
	bl	__kmalloc(PLT)
	subs	r4, r0, #0
	beq	.L8272
	ldr	r1, [sp, #4]
	mov	r2, r8
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	bne	.L8254
.L8234:
	ldr	r2, [r7, #32]
	mov	r0, fp
	tst	r2, #2048
	beq	.L8235
	bl	mutex_trylock(PLT)
	cmp	r0, #0
	beq	.L8255
.L8238:
	ldr	r0, [fp, #40]
	add	r0, r0, #28
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [fp, #44]
	cmp	r2, r10
	bne	.L8236
	cmp	r5, #0
	bne	.L8273
	ldr	r0, .L8278
	mov	r2, #32
	ldr	r7, [r10, #4]
.LPIC1722:
	add	r0, pc, r0
	str	r4, [r7]
	mov	r1, r7
	str	r8, [r7, #4]
	str	r0, [r7, #28]
	str	r5, [r6, #56]!
	str	r6, [r7, #32]
	ldr	r0, [r10]
	ldr	ip, [r0, #8]
	ldr	ip, [ip, #16]
	blx	ip
	mov	r5, r0
	ldr	r0, [fp, #40]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r5, #0
	blt	.L8256
	mov	r0, r6
	bl	wait_for_completion_interruptible(PLT)
	cmp	r0, #0
	ldr	r0, [fp, #40]
	add	r0, r0, #28
	bne	.L8274
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [fp, #44]
	ldr	r0, [fp, #40]
	cmp	r2, r10
	beq	.L8275
	add	r0, r0, #28
	mvn	r9, #18
	bl	_raw_spin_unlock_irq(PLT)
.L8241:
	mov	r0, fp
	bl	mutex_unlock(PLT)
.L8232:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r9
.L8263:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8271:
	ldrb	r2, [fp, #58]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L8234
	mvn	r9, #21
	b	.L8232
.L8235:
	bl	mutex_lock_interruptible(PLT)
	subs	r9, r0, #0
	beq	.L8238
	b	.L8232
.L8270:
	mov	r4, r10
.L8229:
	ldr	r3, [r7, #32]
	tst	r3, #2048
	mvnne	r9, #10
	mvneq	r9, #18
	b	.L8232
.L8228:
	ldr	r0, .L8278+4
	movw	r1, #787
	mvn	r9, #18
.LPIC1720:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L8232
.L8236:
	ldr	r0, [fp, #40]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, fp
	bl	mutex_unlock(PLT)
	ldr	r2, [fp, #40]
	ldr	r2, [r2, #96]
	cmp	r2, #2
	bne	.L8228
	ldr	r10, [fp, #44]
	cmp	r10, #0
	bne	.L8245
	b	.L8229
.L8275:
	add	r0, r0, #28
	ldr	r9, [r10, #24]
	bl	_raw_spin_unlock_irq(PLT)
	b	.L8241
.L8272:
	mvn	r0, #11
	b	.L8263
.L8254:
	mvn	r9, #13
	b	.L8232
.L8273:
	ldr	r0, [r10]
	cmp	r0, #0
	beq	.L8276
	ldr	r2, [r0, #8]
	mov	r1, #1
	ldr	r2, [r2, #24]
	blx	r2
.L8246:
	ldr	r0, [fp, #40]
	mvn	r9, #73
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq(PLT)
	b	.L8241
.L8256:
	mvn	r9, #4
	b	.L8241
.L8274:
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [fp, #44]
	cmp	r2, r10
	beq	.L8277
.L8243:
	ldr	r0, [fp, #40]
	mvn	r9, #3
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq(PLT)
	b	.L8241
.L8249:
	mvn	r0, #18
	b	.L8263
.L8255:
	mvn	r9, #10
	b	.L8232
.L8276:
	ldr	r0, .L8278+8
	movw	r1, #862
.LPIC1721:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L8246
.L8277:
	ldr	r0, [r10]
	mov	r1, r7
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
	b	.L8243
.L8279:
	.align	2
.L8278:
	.word	ffs_epfile_io_complete-(.LPIC1722+8)
	.word	.LC182-(.LPIC1720+8)
	.word	.LC182-(.LPIC1721+8)
	.fnend
	.size	ffs_epfile_write, .-ffs_epfile_write
	.align	2
	.type	do_set_interface, %function
do_set_interface:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	clz	r3, r1
	mov	r3, r3, lsr #5
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	ldr	r9, .L8312
	mov	r4, r0
	strd	r6, [sp, #8]
	ldr	r8, .L8312+4
	mov	r6, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
.LPIC1725:
	add	r9, pc, r9
	str	r3, [sp, #8]
	ldr	r3, .L8312+8
.LPIC1726:
	add	r8, pc, r8
.LPIC1723:
	add	r3, pc, r3
	str	r3, [sp, #16]
	mov	r3, #0
	str	r3, [sp, #4]
	ldr	r3, .L8312+12
.LPIC1724:
	add	r3, pc, r3
	str	r3, [sp, #20]
.L8281:
	add	r3, r4, #16
	mov	r7, #0
	str	r3, [sp, #12]
.L8288:
	ldr	r10, [r4, #8]
	cmp	r10, #0
	beq	.L8282
	mov	fp, #0
.L8285:
	ldr	r5, [r4, #68]
	add	r5, r5, fp
	add	fp, fp, #32
	ldr	r1, [r5, #16]
	cmp	r1, #0
	beq	.L8283
	ldr	r0, [r10, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	str	r7, [r5, #16]
.L8283:
	ldr	r1, [r5, #24]
	cmp	r1, #0
	beq	.L8284
	ldr	r0, [r10, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	str	r7, [r5, #24]
.L8284:
	cmp	fp, #128
	bne	.L8285
	str	r7, [r4, #8]
	ldr	r0, [sp, #12]
	mov	r1, #3
	mov	r2, #1
	mov	r3, #0
	bl	__wake_up(PLT)
.L8282:
	ldmib	sp, {r3, fp}
	ldrb	r5, [r4, #144]	@ zero_extendqisi2
	cmp	r3, #0
	orrne	fp, fp, #1
	bfc	r5, #5, #1
	cmp	fp, #0
	strb	r5, [r4, #144]
	bne	.L8298
	str	r6, [r4, #8]
.L8292:
	ldr	r10, [r6, #92]
	mov	r1, #32
	ldr	r5, [r4, #68]
	ldr	r3, [r10, #8]
	mov	r0, r10
	add	r5, r5, fp
	add	fp, fp, r1
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	mov	r1, #32
	str	r0, [r5, #16]
	beq	.L8311
	ldr	r10, [r6, #96]
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r5, #24]
	beq	.L8291
	ldr	r2, [r5, #16]
	cmp	fp, #128
	ldr	r3, [r5]
	str	r3, [r0]
	str	r3, [r2]
	ldr	r3, [r5, #16]
	ldr	r2, [r5, #24]
	str	r5, [r2, #32]
	str	r5, [r3, #32]
	ldr	r3, [r5, #16]
	str	r9, [r3, #28]
	ldr	r3, [r5, #24]
	str	r8, [r3, #28]
	bne	.L8292
	ldr	r2, [r4, #92]
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	cmp	r2, #0
	orr	r3, r3, #32
	movne	r2, #0
	movne	r0, #10496
	movne	r1, r2
	strb	r3, [r4, #144]
	movtne	r0, 6
	beq	.L8290
.L8289:
	ldr	r3, [r4, #100]
	add	r1, r1, #1
	add	r3, r3, r2
	add	r2, r2, #400
	str	r0, [r3, #36]
	ldr	r3, [r4, #92]
	cmp	r1, r3
	bcc	.L8289
.L8290:
	mov	r3, #0
	str	r3, [sp, #4]
.L8298:
	ldr	r0, [sp, #4]
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8311:
	ldr	r0, [r4]
	mvn	r3, #11
	ldr	r1, [sp, #16]
	ldr	r2, [r10, #4]
	str	r3, [sp, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L8288
.L8291:
	ldr	r0, [r4]
	mvn	r3, #11
	ldr	r1, [sp, #20]
	ldr	r2, [r10, #4]
	str	r3, [sp, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L8281
.L8313:
	.align	2
.L8312:
	.word	bulk_in_complete-(.LPIC1725+8)
	.word	bulk_out_complete-(.LPIC1726+8)
	.word	.LC443-(.LPIC1723+8)
	.word	.LC443-(.LPIC1724+8)
	.fnend
	.size	do_set_interface, .-do_set_interface
	.align	2
	.type	rx_complete, %function
rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #44]
	ldr	r4, [r0]
	ldr	r6, [r1, #32]
	cmn	r3, #103
	beq	.L8316
	ble	.L8342
	cmn	r3, #75
	beq	.L8319
	cmp	r3, #0
	bne	.L8315
	mov	r0, r6
	ldr	r1, [r1, #48]
	bl	skb_put(PLT)
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L8321
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L8322
	mov	r1, r6
	ldr	r3, [r4, #84]
	add	r2, r4, #52
	blx	r3
	cmn	r0, #22
	mov	r6, r0
	beq	.L8343
	cmn	r0, #75
	beq	.L8344
	mov	r1, r7
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	beq	.L8326
	b	.L8327
.L8319:
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #228]
	add	r3, r3, #1
	str	r3, [r2, #228]
.L8315:
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #200]
	add	r3, r3, #1
	str	r3, [r2, #200]
.L8326:
	add	r6, r4, #16
.L8341:
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	mov	r3, r4
	add	r2, r5, #36
	ldr	r1, [r3, #28]!
	mov	r0, r6
	str	r2, [r1, #4]
	str	r3, [r5, #40]
	str	r1, [r5, #36]
	str	r2, [r4, #28]
	bl	_raw_spin_unlock(PLT)
	ldr	r3, .L8345
	add	r1, r4, #104
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
.LPIC1728:
	add	r3, pc, r3
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r0, [r3, #-668]
	b	queue_work(PLT)
.L8342:
	cmn	r3, #108
	beq	.L8318
	cmn	r3, #104
	bne	.L8315
.L8318:
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
.L8327:
	add	r6, r4, #16
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	mov	r3, r4
	add	r2, r5, #36
	ldr	r1, [r3, #28]!
	mov	r0, r6
	str	r2, [r1, #4]
	str	r3, [r5, #40]
	str	r1, [r5, #36]
	str	r2, [r4, #28]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L8316:
	mov	r0, #0
	add	r1, r4, #120
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	bne	.L8318
	add	r0, r4, #88
	bl	schedule_work(PLT)
	cmp	r0, #0
	bne	.L8318
	mov	r2, r0
	ldr	r0, .L8345+4
	ldr	r1, [r4, #8]
.LPIC1727:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L8318
.L8321:
	mov	r1, r6
	add	r0, r4, #52
	add	r6, r4, #16
	bl	skb_queue_tail(PLT)
	b	.L8341
.L8343:
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #200]
	add	r3, r3, #1
	str	r3, [r2, #200]
.L8324:
	mov	r1, r7
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L8327
.L8344:
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #228]
	add	r3, r3, #1
	str	r3, [r2, #228]
	b	.L8324
.L8322:
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
	b	.L8324
.L8346:
	.align	2
.L8345:
	.word	.LANCHOR4-(.LPIC1728+8)
	.word	.LC444-(.LPIC1727+8)
	.fnend
	.size	rx_complete, .-rx_complete
	.align	2
	.type	rx_fill, %function
rx_fill:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r3, r0, #28
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r4, r3
	strd	r8, [sp, #16]
	add	r9, r0, #16
	strd	r10, [sp, #24]
	mov	r0, r9
	mov	r10, r1
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r6, #28]
	mov	r1, r0
	cmp	r4, r5
	beq	.L8348
	ldr	r3, .L8400
	mov	r8, #0
.LPIC1729:
	add	r3, pc, r3
	str	r3, [sp, #4]
	b	.L8364
.L8396:
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L8371
	ldr	r3, [sp, #4]
	ldr	r3, [r3, #348]
	mov	r3, r3, asl #1
	cmp	r8, r3
	bgt	.L8348
.L8397:
	ldr	r3, [r5, #4]
	mov	r0, r9
	ldr	r2, [r5]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r5, [r5]
	str	r5, [r5, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L8350
	ldr	fp, [r3, #84]
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	fp, #0
	beq	.L8360
	ldrd	r2, [r6, #4]
	ldrh	r0, [fp, #20]
	ldr	r1, [r6, #72]
	ldr	lr, [r2, #92]
	ldr	r3, [r3, #316]
	cmp	r1, #0
	add	r3, r3, lr
	add	r3, r3, #33
	add	r3, r3, r0
	udiv	lr, r3, r0
	mls	r0, r0, lr, r3
	rsb	r4, r0, r3
	ldrb	r3, [r2, #96]	@ zero_extendqisi2
	mulne	r4, r1, r4
	cmp	r3, #0
	beq	.L8353
	ldr	r3, [r2, #100]
	cmp	r4, r3
	movcc	r4, r3
.L8353:
	add	r0, r4, #2
	mov	r1, r10
	mov	r2, #0
	mvn	r3, #0
	bl	__alloc_skb(PLT)
	subs	r7, r0, #0
	beq	.L8354
	ldr	r3, [r7, #172]
	mov	r0, fp
	sub	r1, r5, #36
	ldr	lr, [r7, #160]
	mov	r2, r10
	add	r3, r3, #2
	add	lr, lr, #2
	str	r3, [r7, #172]
	str	lr, [r7, #160]
	str	r4, [r5, #-32]
	str	r3, [r5, #-36]
	str	r7, [r5, #-4]
	ldr	r3, [fp, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmn	r0, #12
	mov	r4, r0
	beq	.L8394
	cmp	r0, #0
	bne	.L8395
.L8359:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp]
	mov	r1, r0
	ldr	r5, [r6, #28]
	cmp	r5, r3
	beq	.L8348
.L8364:
	ldr	r3, [r6, #12]
	add	r8, r8, #1
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bhi	.L8396
.L8371:
	mov	r3, #2
	cmp	r8, r3
	ble	.L8397
.L8348:
	mov	r0, r9
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L8394:
.L8356:
	add	r4, r6, #120
	mov	r0, #0
	mov	r1, r4
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	beq	.L8398
.L8367:
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
.L8365:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #28]
	mov	r1, r0
	mov	r0, r9
	str	r5, [r3, #4]
	str	r3, [r5]
	ldr	r3, [sp]
	str	r3, [r5, #4]
	str	r5, [r6, #28]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r1, r4
	mov	r0, #0
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	beq	.L8399
.L8347:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8395:
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	cmp	r4, #0
	bge	.L8359
.L8360:
	add	r4, r6, #120
	b	.L8365
.L8350:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r4, r6, #120
	b	.L8365
.L8398:
	add	r0, r6, #88
	bl	schedule_work(PLT)
	cmp	r0, #0
	bne	.L8367
	mov	r2, r0
	ldr	r0, .L8400+4
	ldr	r1, [r6, #8]
.LPIC1732:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L8367
.L8354:
	add	r4, r6, #120
	mov	r1, r4
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	bne	.L8365
	add	r0, r6, #88
	bl	schedule_work(PLT)
	cmp	r0, #0
	bne	.L8365
	mov	r2, r0
	ldr	r0, .L8400+8
	ldr	r1, [r6, #8]
.LPIC1731:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L8365
.L8399:
	add	r0, r6, #88
	bl	schedule_work(PLT)
	subs	r2, r0, #0
	bne	.L8347
	ldr	r0, .L8400+12
	ldr	r1, [r6, #8]
.LPIC1730:
	add	r0, pc, r0
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk(PLT)
.L8401:
	.align	2
.L8400:
	.word	.LANCHOR1-(.LPIC1729+8)
	.word	.LC444-(.LPIC1732+8)
	.word	.LC444-(.LPIC1731+8)
	.word	.LC444-(.LPIC1730+8)
	.fnend
	.size	rx_fill, .-rx_fill
	.align	2
	.type	eth_work, %function
eth_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r0, #0
	add	r1, r4, #32
	str	r6, [sp, #8]
	sub	r5, r4, #88
	str	lr, [sp, #12]
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	beq	.L8402
	ldr	r3, [r4, #-80]
	ldr	r3, [r3, #116]
	tst	r3, #1
	bne	.L8411
.L8402:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8411:
	mov	r0, r5
	ldr	r6, [sp, #8]
	mov	r1, #208
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rx_fill(PLT)
	.fnend
	.size	eth_work, .-eth_work
	.align	2
	.type	process_rx_w, %function
process_rx_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-100]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	sub	r5, r0, #52
	mov	r4, #0
	strd	r6, [sp, #8]
	movw	r6, #1500
	str	r8, [sp, #16]
	mov	r8, r0
	str	lr, [sp, #20]
.L8414:
	mov	r0, r5
	bl	skb_dequeue(PLT)
	subs	r7, r0, #0
	beq	.L8428
.L8419:
	cmp	r4, #0
	blt	.L8416
	ldr	r3, [r7, #80]
	sub	r3, r3, #14
	cmp	r3, r6
	bls	.L8417
.L8416:
	ldr	r2, [r8, #-96]
	mov	r0, r7
	ldr	r3, [r2, #200]
	add	r3, r3, #1
	str	r3, [r2, #200]
	ldr	r2, [r8, #-96]
	ldr	r3, [r2, #224]
	add	r3, r3, #1
	str	r3, [r2, #224]
	bl	dev_kfree_skb_any(PLT)
	mov	r0, r5
	bl	skb_dequeue(PLT)
	subs	r7, r0, #0
	bne	.L8419
.L8428:
	ldr	r3, [r8, #-96]
	ldr	r3, [r3, #116]
	tst	r3, #1
	bne	.L8429
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8417:
	ldr	r1, [r8, #-96]
	bl	eth_type_trans(PLT)
	strh	r0, [r7, #102]	@ movhi
	ldr	r2, [r8, #-96]
	mov	r0, r7
	ldr	r3, [r2, #184]
	add	r3, r3, #1
	str	r3, [r2, #184]
	ldr	r2, [r8, #-96]
	ldr	r1, [r7, #80]
	ldr	r3, [r2, #192]
	add	r3, r3, r1
	str	r3, [r2, #192]
	bl	netif_rx_ni(PLT)
	mov	r4, r0
	b	.L8414
.L8429:
	sub	r0, r8, #104
	ldrd	r4, [sp]
	mov	r1, #208
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	rx_fill(PLT)
	.fnend
	.size	process_rx_w, .-process_rx_w
	.align	2
	.type	eth_open, %function
eth_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	add	r5, r0, #1216
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #1224]
	ldr	r3, [r3, #116]
	tst	r3, #4
	beq	.L8445
.L8432:
	mov	r0, r5
	bl	_raw_spin_lock_irq(PLT)
	ldr	r0, [r4, #1220]
	cmp	r0, #0
	beq	.L8434
	ldr	r3, [r0, #128]
	cmp	r3, #0
	beq	.L8434
	blx	r3
.L8434:
	mov	r0, r5
	bl	_raw_spin_unlock_irq(PLT)
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8445:
	mov	r1, #208
	mov	r0, r5
	bl	rx_fill(PLT)
	ldr	r2, [r4, #1224]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r4, #1252]
	ldr	r6, [r2, #576]
	add	r1, r6, #80
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	beq	.L8432
	ldr	r0, [r6, #4]
	bl	__netif_schedule(PLT)
	b	.L8432
	.fnend
	.size	eth_open, .-eth_open
	.align	2
	.type	ffs_ep0_read, %function
ffs_ep0_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 1, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r10, [sp, #24]
	.setfp fp, sp, #32
	add	fp, sp, #32
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r9, [r0, #124]
	add	r4, r9, #100
#APP
@ 193 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	mov	r6, #0
.L8447:
#APP
@ 170 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r8, [r4]
	mov	r7, #0
	teq	r8, #2
	strexeq r7, r6, [r4]

@ 0 "" 2
	cmp	r7, #0
	bne	.L8447
#APP
@ 195 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r8, #2
	beq	.L8479
	str	r2, [fp, #-64]
	ldr	r2, [r0, #32]
	add	r6, r9, #4
	mov	r10, r0
	mov	r5, r1
	mov	r0, r6
	tst	r2, #2048
	bne	.L8509
	bl	mutex_lock_interruptible(PLT)
	cmp	r0, #0
	blt	.L8494
.L8452:
	ldr	r2, [r9, #96]
	cmp	r2, #2
	mvnne	r10, #76
	movne	r8, #0
	beq	.L8510
.L8450:
	mov	r0, r6
	bl	mutex_unlock(PLT)
	mov	r0, r8
	bl	kfree(PLT)
	mov	r0, r10
.L8494:
	sub	sp, fp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8509:
	bl	mutex_trylock(PLT)
	cmp	r0, #0
	bne	.L8452
	mvn	r0, #10
	b	.L8494
.L8510:
	add	r7, r9, #120
	mov	r0, r7
	bl	_raw_spin_lock_irq(PLT)
#APP
@ 193 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	mov	r8, #0
.L8453:
#APP
@ 170 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r1, [r4]
	mov	r2, #0
	teq	r1, #2
	strexeq r2, r8, [r4]

@ 0 "" 2
	cmp	r2, #0
	bne	.L8453
#APP
@ 195 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r1, #1
	beq	.L8455
	bcc	.L8456
	cmp	r1, #2
	mov	r8, r2
	mvneq	r10, #42
	mvnne	r10, #76
.L8457:
	mov	r0, r7
	bl	_raw_spin_unlock_irq(PLT)
	b	.L8450
.L8455:
	ldrsb	r0, [r9, #112]
	cmp	r0, #0
	blt	.L8511
	ldr	r3, [fp, #-64]
	mov	r0, r7
	ldrh	r2, [r9, #118]
	cmp	r3, r2
	movcs	r3, r2
	mov	r8, r3
	str	r3, [fp, #-64]
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r8, #0
	beq	.L8487
	mov	r0, r8
	mov	r1, #208
	bl	__kmalloc(PLT)
	subs	r8, r0, #0
	beq	.L8512
.L8474:
	mov	r0, r7
	bl	_raw_spin_lock_irq(PLT)
#APP
@ 193 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	mov	r2, #0
.L8475:
#APP
@ 170 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r0, [r4]
	mov	r1, #0
	teq	r0, #2
	strexeq r1, r2, [r4]

@ 0 "" 2
	cmp	r1, #0
	bne	.L8475
#APP
@ 195 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r0, #2
	beq	.L8489
	ldr	r4, [r9, #32]
	mov	r0, r7
	ldrh	r2, [r9, #118]
	ldr	r7, [fp, #-64]
	ldrb	r1, [r4, #26]	@ zero_extendqisi2
	cmp	r7, r2
	movcs	r2, #0
	movcc	r2, #1
	bfi	r1, r2, #1, #1
	strb	r1, [r4, #26]
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r8, #0
	str	r8, [r4]
	str	r7, [r4, #4]
	beq	.L8513
.L8476:
	ldr	r0, [r9]
	mov	ip, #0
	mov	r1, r4
	mov	r2, #32
	str	ip, [r9, #36]
	ldr	r0, [r0, #4]
	ldr	ip, [r0, #8]
	ldr	ip, [ip, #16]
	blx	ip
	subs	r10, r0, #0
	blt	.L8450
	add	r0, r9, #36
	bl	wait_for_completion_interruptible(PLT)
	cmp	r0, #0
	bne	.L8514
	ldr	r10, [r9, #52]
	str	r0, [r9, #100]
	cmp	r10, #0
	ble	.L8450
	mov	r0, r5
	ldr	r2, [fp, #-64]
	mov	r1, r8
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	mvnne	r10, #13
	b	.L8450
.L8456:
	ldr	r3, [fp, #-64]
	movw	r8, #43691
	movt	r8, 43690
	umull	r3, r8, r8, r3
	movs	r3, r8, lsr #3
	str	r3, [fp, #-68]
	beq	.L8483
	ldr	r2, [r10, #32]
	ldrh	r10, [r9, #108]
	tst	r2, #2048
	bne	.L8515
	cmp	r10, #0
	bne	.L8459
	ldr	ip, .L8523
	mov	r3, sp
	str	r10, [fp, #-56]
	bic	r0, r3, #8128
	str	r10, [fp, #-52]
	sub	r8, fp, #44
	bic	r0, r0, #63
	str	r10, [fp, #-48]
	mov	lr, #1
	str	r10, [fp, #-44]
	mov	r1, r0
	mov	r4, r8
	str	r10, [fp, #-40]
.LPIC1734:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	add	r10, r9, #124
	ldr	r0, [r0, #12]
	str	lr, [fp, #-56]
	str	r8, [fp, #-44]
	str	r8, [fp, #-40]
	str	ip, [fp, #-48]
	str	r0, [fp, #-52]
	b	.L8463
.L8516:
	bl	_raw_spin_unlock_irq(PLT)
	bl	schedule(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irq(PLT)
	ldrh	r0, [r9, #108]
	cmp	r0, #0
	bne	.L8462
	ldr	r4, [fp, #-44]
	ldr	r1, [fp, #-64]
.L8463:
	cmp	r4, r8
	bne	.L8460
	ldr	r0, [r9, #128]
	str	r10, [fp, #-44]
	str	r8, [r9, #128]
	str	r0, [fp, #-40]
	str	r8, [r0]
.L8460:
	ldr	r0, [r1, #12]
	mov	r3, #1
	str	r3, [r0]
#APP
@ 637 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_fs.c" 1
	dmb
@ 0 "" 2
	ldr	ip, [r1, #12]
	str	r1, [fp, #-64]
	mov	r0, r7
	ldr	ip, [ip, #4]
	ldr	r4, [ip]
	ands	r4, r4, r3
	beq	.L8516
	ldr	r1, [fp, #-40]
	mov	r3, sp
	mov	lr, #256
	ldr	r0, [fp, #-44]
	mov	ip, #512
	bic	r3, r3, #8128
	bic	r3, r3, #63
	mov	r2, #0
	mov	r8, r2
	mvn	r10, #3
	str	r1, [r0, #4]
	str	r0, [r1]
	str	lr, [fp, #-44]
	str	ip, [fp, #-40]
	ldr	r3, [r3, #12]
	str	r2, [r3]
	b	.L8457
.L8515:
	cmp	r10, #0
	bne	.L8459
	mov	r8, r10
	mvn	r10, #10
	b	.L8457
.L8511:
	mov	r0, r7
	str	r1, [fp, #-68]
	str	r2, [fp, #-64]
	bl	_raw_spin_unlock_irq(PLT)
	ldrh	r8, [r9, #110]
	ldr	r2, [fp, #-64]
	ldr	r1, [fp, #-68]
	cmp	r8, #0
	mvneq	r10, #2
	beq	.L8450
	ldr	r0, [r9]
	mov	r8, r2
	mvn	r10, #50
	ldr	r0, [r0, #4]
	ldr	ip, [r0, #8]
	ldr	ip, [ip, #24]
	blx	ip
	ldr	r2, [fp, #-64]
	str	r2, [r9, #100]
	b	.L8450
.L8479:
	mvn	r0, #42
	b	.L8494
.L8489:
	mvn	r10, #42
	b	.L8457
.L8462:
	ldr	r1, [fp, #-40]
	mov	r3, sp
	mov	lr, #256
	ldr	r0, [fp, #-44]
	mov	ip, #512
	bic	r2, r3, #8128
	bic	r2, r2, #63
	str	r1, [r0, #4]
	str	r0, [r1]
	str	lr, [fp, #-44]
	str	ip, [fp, #-40]
	ldr	r2, [r2, #12]
	str	r4, [r2]
	ldrh	r10, [r9, #108]
.L8459:
	ldr	r3, [fp, #-68]
	str	sp, [fp, #-64]
	cmp	r10, r3
	movcs	r10, r3
	mov	r8, r10, asl #4
	sub	r8, r8, r10, asl #2
	add	r2, r8, #7
	cmp	r8, #0
	bic	r2, r2, #7
	sub	sp, sp, r2
	mov	r4, sp
	bne	.L8517
.L8464:
	ldrb	r2, [r9, #104]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r4, #8]
	beq	.L8518
.L8465:
	cmp	r10, #1
	bls	.L8466
	ldrb	r2, [r9, #105]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r4, #20]
	beq	.L8519
.L8467:
	cmp	r10, #2
	beq	.L8466
	ldrb	r2, [r9, #106]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r4, #32]
	beq	.L8520
.L8468:
	cmp	r10, #3
	beq	.L8466
	ldrb	r2, [r9, #107]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r4, #44]
	beq	.L8521
.L8466:
	ldrh	r2, [r9, #108]
	cmp	r10, r2
	movcs	r2, #0
	strcsh	r2, [r9, #108]	@ movhi
	bcc	.L8522
.L8471:
	mov	r0, r7
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r6
	bl	mutex_unlock(PLT)
	mov	r0, r5
	mov	r1, r4
	mov	r2, r8
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	ldr	sp, [fp, #-64]
	moveq	r0, r8
	mvnne	r0, #13
	b	.L8494
.L8483:
	mov	r8, r3
	mvn	r10, #21
	b	.L8457
.L8517:
	mov	r0, sp
	mov	r1, r8
	bl	__memzero(PLT)
	b	.L8464
.L8521:
	ldrd	r0, [r9, #112]
	mov	r2, #1
	str	r0, [r4, #36]	@ unaligned
	str	r1, [r4, #40]	@ unaligned
	str	r2, [r9, #100]
	b	.L8466
.L8518:
	ldrd	r0, [r9, #112]
	mov	r2, #1
	str	r0, [r4]	@ unaligned
	str	r1, [r4, #4]	@ unaligned
	str	r2, [r9, #100]
	b	.L8465
.L8520:
	ldrd	r0, [r9, #112]
	mov	r2, #1
	str	r0, [r4, #24]	@ unaligned
	str	r1, [r4, #28]	@ unaligned
	str	r2, [r9, #100]
	b	.L8468
.L8519:
	ldrd	r0, [r9, #112]
	mov	r2, #1
	str	r0, [r4, #12]	@ unaligned
	str	r1, [r4, #16]	@ unaligned
	str	r2, [r9, #100]
	b	.L8467
.L8512:
	mvn	r10, #11
	b	.L8450
.L8522:
	rsb	r2, r10, r2
	add	r1, r10, #104
	uxth	ip, r2
	add	r1, r9, r1
	add	r0, r9, #104
	mov	r2, ip
	strh	ip, [r9, #108]	@ movhi
	bl	memmove(PLT)
	b	.L8471
.L8487:
	ldr	r8, [fp, #-64]
	b	.L8474
.L8513:
	movw	r2, #47806
	movt	r2, 57005
	str	r2, [r4]
	b	.L8476
.L8514:
	ldr	r3, [r9]
	mov	r1, r4
	mvn	r10, #3
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L8450
.L8524:
	.align	2
.L8523:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1734+8))
	.fnend
	.size	ffs_ep0_read, .-ffs_ep0_read
	.align	2
	.type	accessory_function_ctrlrequest, %function
accessory_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	ldr	r3, .L8613
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r1, [r2]	@ zero_extendqisi2
.LPIC1735:
	add	r3, pc, r3
	ldrb	r0, [r2, #1]	@ zero_extendqisi2
	ldrh	r8, [r2, #4]	@ unaligned
	ldrh	r6, [r2, #2]	@ unaligned
	cmp	r1, #64
	ldrh	r7, [r2, #6]	@ unaligned
	ldr	r4, [r3, #2316]
	beq	.L8604
	cmp	r1, #192
	cmpeq	r0, #51
	beq	.L8605
.L8578:
	mvn	r4, #94
.L8584:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8604:
	cmp	r0, #53
	beq	.L8606
	cmp	r0, #52
	beq	.L8607
	cmp	r8, #0
	cmpeq	r0, #58
	bne	.L8530
	cmp	r7, #0
	streq	r6, [r4, #1640]
	beq	.L8528
.L8531:
	cmp	r0, #57
	bne	.L8578
	add	r9, r4, #80
	add	r4, r4, #1744
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r8, [r4, #12]
	add	r4, r4, #12
	mov	r1, r0
	cmp	r4, r8
	beq	.L8569
	ldr	r3, [r8, #16]
	cmp	r6, r3
	bne	.L8572
	b	.L8570
.L8574:
	ldr	r0, [r8, #16]
	cmp	r6, r0
	beq	.L8570
.L8572:
	ldr	r8, [r8]
	cmp	r4, r8
	bne	.L8574
.L8569:
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
.L8603:
	mvn	r4, #21
	b	.L8584
.L8607:
	str	r8, [r4, #1632]
	ldr	r2, [r5]
	ldr	r3, .L8613+4
	ldr	r2, [r2, #4]
.LPIC1736:
	add	r3, pc, r3
	str	r4, [r2]
	ldr	r2, [r5, #4]
	str	r3, [r2, #28]
.L8528:
	ldr	r3, [r5, #4]
	mov	r2, #32
	ldrb	r6, [r3, #26]	@ zero_extendqisi2
	bfc	r6, #1, #1
	strb	r6, [r3, #26]
	ldr	r3, [r5, #4]
	str	r7, [r3, #4]
	ldr	r3, [r5]
	ldr	r1, [r5, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L8584
	ldr	r2, .L8613+8
	ldr	r0, [r5]
	ldr	r1, .L8613+12
.LPIC1741:
	add	r2, pc, r2
	add	r2, r2, #2976
	add	r0, r0, #32
.LPIC1740:
	add	r1, pc, r1
	add	r2, r2, #4
	bl	dev_err(PLT)
	b	.L8584
.L8530:
	cmp	r0, #54
	beq	.L8608
	cmp	r0, #55
	beq	.L8609
	cmp	r0, #56
	bne	.L8531
	add	r10, r4, #80
	add	r4, r4, #1760
	mov	r0, r10
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r9, [r4, #4]
	add	r4, r4, #4
	mov	r1, r0
	cmp	r4, r9
	beq	.L8561
	ldr	r3, [r9, #16]
	cmp	r6, r3
	bne	.L8564
	b	.L8562
.L8567:
	ldr	r0, [r9, #16]
	cmp	r6, r0
	beq	.L8562
.L8564:
	ldr	r9, [r9]
	cmp	r4, r9
	bne	.L8567
.L8561:
	mov	r0, r10
	mvn	r4, #21
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L8584
.L8605:
	ldr	r3, [r5, #4]
	mov	r7, #2
	add	r0, r4, #93
	mov	r1, #256
	ldr	r3, [r3]
	strh	r7, [r3]	@ movhi
	bl	__memzero(PLT)
	add	r0, r4, #348
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero(PLT)
	add	r0, r4, #604
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero(PLT)
	add	r0, r4, #860
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero(PLT)
	add	r0, r4, #1104
	mov	r1, #256
	add	r0, r0, #13
	bl	__memzero(PLT)
	add	r0, r4, #1360
	mov	r1, #256
	add	r0, r0, #13
	bl	__memzero(PLT)
	mov	r3, #0
	str	r3, [r4, #1636]
	str	r3, [r4, #1640]
	b	.L8528
.L8606:
	mov	r3, #1
	mov	r0, #10
	mov	r7, #0
	str	r3, [r4, #1636]
	bl	msecs_to_jiffies(PLT)
	mov	r1, r0
	add	r0, r4, #1680
	add	r0, r0, #12
	bl	schedule_delayed_work(PLT)
	b	.L8528
.L8608:
	cmp	r8, #0
	beq	.L8603
	add	r7, r4, #80
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #1756]
	add	r1, r4, #1744
	mov	r9, r0
	add	r1, r1, #12
	cmp	r1, r3
	bne	.L8539
	b	.L8534
.L8537:
	ldr	r3, [r3]
	cmp	r1, r3
	beq	.L8534
.L8539:
	ldr	r2, [r3, #16]
	cmp	r6, r2
	bne	.L8537
	cmp	r3, #0
	beq	.L8534
.L8538:
	ldr	r1, [r3, #4]
	mov	r2, r4
	ldr	r0, [r3]
	str	r1, [r0, #4]
	str	r0, [r1]
	ldr	r1, [r2, #1772]!
	str	r3, [r1, #4]
	stmia	r3, {r1, r2}
	str	r3, [r4, #1772]
.L8540:
	ldr	r3, .L8613+16
.LPIC1742:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L8545
	movw	r1, #32800
	bl	kmem_cache_alloc(PLT)
	subs	r10, r0, #0
	beq	.L8546
.L8575:
	mov	r0, r8
	movw	r1, #32800
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r10, #20]
	beq	.L8610
	mov	r3, r4
	str	r4, [r10, #12]
	mov	r0, r7
	str	r6, [r10, #16]
	mov	r1, r9
	str	r8, [r10, #24]
	ldr	r2, [r3, #1764]!
	str	r10, [r2, #4]
	strd	r2, [r10]
	str	r10, [r4, #1764]
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r0, r4, #1728
	add	r0, r0, #12
	bl	schedule_work(PLT)
.L8566:
.L8548:
	mov	r7, #0
	b	.L8528
.L8609:
	add	r7, r4, #80
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #1756]
	mov	r1, r0
	add	r0, r4, #1744
	add	r0, r0, #12
	cmp	r0, r3
	bne	.L8555
	b	.L8550
.L8553:
	ldr	r3, [r3]
	cmp	r0, r3
	beq	.L8550
.L8555:
	ldr	r2, [r3, #16]
	cmp	r6, r2
	bne	.L8553
	cmp	r3, #0
	beq	.L8550
.L8554:
	ldr	ip, [r3, #4]
	mov	r2, r4
	mov	r0, r7
	ldr	lr, [r3]
	str	ip, [lr, #4]
	str	lr, [ip]
	ldr	ip, [r2, #1772]!
	str	r3, [ip, #4]
	str	ip, [r3]
	str	r2, [r3, #4]
	str	r3, [r4, #1772]
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r0, r4, #1728
	add	r0, r0, #12
	bl	schedule_work(PLT)
	b	.L8548
.L8534:
	ldr	r3, [r4, #1764]
	add	r1, r4, #1760
	add	r1, r1, #4
	cmp	r1, r3
	bne	.L8544
	b	.L8540
.L8611:
	ldr	r3, [r3]
	cmp	r1, r3
	beq	.L8540
.L8544:
	ldr	r2, [r3, #16]
	cmp	r6, r2
	bne	.L8611
	cmp	r3, #0
	beq	.L8540
	b	.L8538
.L8550:
	ldr	r3, [r4, #1764]
	add	r0, r4, #1760
	add	r0, r0, #4
	cmp	r0, r3
	bne	.L8560
	b	.L8556
.L8612:
	ldr	r3, [r3]
	cmp	r0, r3
	beq	.L8556
.L8560:
	ldr	r2, [r3, #16]
	cmp	r6, r2
	bne	.L8612
	cmp	r3, #0
	bne	.L8554
.L8556:
	mov	r0, r7
	mvn	r4, #21
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L8584
.L8562:
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r9, #0
	beq	.L8603
	ldr	r3, [r9, #28]
	cmp	r8, r3
	bne	.L8603
	ldr	r3, [r9, #24]
	add	r8, r8, r7
	cmp	r8, r3
	bgt	.L8603
	ldr	r2, [r5, #4]
	ldr	r3, .L8613+20
	str	r9, [r2, #32]
	ldr	r2, [r5, #4]
.LPIC1738:
	add	r3, pc, r3
	str	r3, [r2, #28]
	b	.L8528
.L8570:
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r8, #0
	beq	.L8603
	ldr	r2, [r5, #4]
	ldr	r3, .L8613+24
	str	r8, [r2, #32]
	ldr	r2, [r5, #4]
.LPIC1739:
	add	r3, pc, r3
	str	r3, [r2, #28]
	b	.L8528
.L8545:
	mov	r10, #16
	b	.L8575
.L8610:
	mov	r0, r10
	bl	kfree(PLT)
.L8546:
	mov	r0, r7
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r4, #11
	b	.L8584
.L8614:
	.align	2
.L8613:
	.word	.LANCHOR2-(.LPIC1735+8)
	.word	acc_complete_set_string-(.LPIC1736+8)
	.word	.LANCHOR3-(.LPIC1741+8)
	.word	.LC445-(.LPIC1740+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1742+8))
	.word	acc_complete_set_hid_report_desc-(.LPIC1738+8)
	.word	acc_complete_send_hid_event-(.LPIC1739+8)
	.fnend
	.size	accessory_function_ctrlrequest, .-accessory_function_ctrlrequest
	.align	2
	.type	f_midi_complete, %function
f_midi_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r2, [r0, #20]
	cmn	r3, #103
	ldr	r6, [r2, #24]
	bgt	.L8617
	cmn	r3, #104
	bge	.L8618
	cmn	r3, #108
	bne	.L8616
.L8618:
	ldr	r8, [r0, #84]
	cmp	r8, r4
	beq	.L8656
.L8655:
	ldr	r0, [r5]
.L8626:
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L8617:
	cmp	r3, #0
	bne	.L8616
	ldr	r8, [r0, #84]
	cmp	r8, r4
	beq	.L8657
	ldr	r3, [r0, #80]
	cmp	r3, r4
	beq	.L8658
.L8616:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L8659
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8659:
	ldr	ip, [r6]
	str	r0, [sp]
	ldr	r1, .L8660
	ldr	r3, [r5, #4]
	ldr	r2, [r4, #4]
	add	r0, ip, #32
.LPIC1745:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3
.L8658:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	f_midi_transmit(PLT)
.L8656:
	ldr	r1, [r5, #48]
	ldr	r0, [r5]
	cmp	r1, #3
	bls	.L8626
	ldr	r9, .L8660+4
	add	r6, r0, #1
	rsb	r7, r0, #6
.LPIC1744:
	add	r9, pc, r9
	b	.L8628
.L8627:
	add	r3, r7, r6
	add	r6, r6, #4
	cmp	r3, r1
	bcs	.L8655
.L8628:
	ldrb	r3, [r6, #-1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L8627
	ldr	lr, [r8]
	mov	ip, r3, lsr #4
	and	r3, r3, #15
	add	r3, r9, r3
	add	r0, ip, #40
	ldrb	r2, [r3, #2996]	@ zero_extendqisi2
	ldr	r0, [lr, r0, asl #2]
	cmp	r0, #0
	beq	.L8627
	ldr	r3, [lr, #288]
	mov	r3, r3, lsr ip
	tst	r3, #1
	beq	.L8627
	mov	r1, r6
	bl	snd_rawmidi_receive(PLT)
	ldr	r1, [r5, #48]
	b	.L8627
.L8657:
	ldr	r1, [r1, #48]
	ldr	r9, [r5]
	cmp	r1, #3
	bls	.L8616
	ldr	r10, .L8660+8
	add	r7, r9, #1
	rsb	r9, r9, #6
.LPIC1743:
	add	r10, pc, r10
	b	.L8623
.L8622:
	add	r3, r9, r7
	add	r7, r7, #4
	cmp	r3, r1
	bcs	.L8616
.L8623:
	ldrb	r3, [r7, #-1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L8622
	ldr	lr, [r8]
	mov	ip, r3, lsr #4
	and	r3, r3, #15
	add	r3, r10, r3
	add	r0, ip, #40
	ldrb	r2, [r3, #2996]	@ zero_extendqisi2
	ldr	r0, [lr, r0, asl #2]
	cmp	r0, #0
	beq	.L8622
	ldr	r3, [lr, #288]
	mov	r3, r3, lsr ip
	tst	r3, #1
	beq	.L8622
	mov	r1, r7
	bl	snd_rawmidi_receive(PLT)
	ldr	r1, [r5, #48]
	b	.L8622
.L8661:
	.align	2
.L8660:
	.word	.LC446-(.LPIC1745+8)
	.word	.LANCHOR3-(.LPIC1744+8)
	.word	.LANCHOR3-(.LPIC1743+8)
	.fnend
	.size	f_midi_complete, .-f_midi_complete
	.align	2
	.type	rmnet_sdio_complete_epin, %function
rmnet_sdio_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r1, #44]
	.pad #20
	sub	sp, sp, #20
	ldr	r4, [r0]
	ldr	r6, [r1, #32]
	cmn	r2, #104
	ldr	r3, [r4, #76]
	beq	.L8664
	cmp	r2, #0
	beq	.L8664
	cmn	r2, #108
	beq	.L8664
	ldr	r0, [r3]
	ldr	r1, .L8694
	add	r0, r0, #32
.LPIC1746:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L8664:
	add	r7, r4, #180
	add	r8, r4, #124
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #128]
	add	r2, r5, #36
	mov	r0, r7
	str	r2, [r4, #128]
	str	r8, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	ldr	r3, [r4, #132]
	add	r3, r3, #1
	str	r3, [r4, #132]
	bl	_raw_spin_unlock(PLT)
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #184]
	ldr	r2, [r4, #76]
	cmp	r3, #0
	str	r2, [sp, #4]
	beq	.L8662
	ldr	r3, [r4, #308]
	tst	r3, #2
	bne	.L8692
.L8662:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8692:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #124]
	str	r0, [sp, #12]
	cmp	r8, r3
	beq	.L8669
	ldr	r5, [r4, #136]
	add	r3, r4, #136
	str	r3, [sp, #8]
	cmp	r3, r5
	cmpne	r5, #0
	movne	r10, #0
	beq	.L8669
.L8670:
	ldr	r3, [r4, #144]
	mov	r0, r7
	sub	r3, r3, #1
	str	r3, [r4, #144]
	ldrd	r2, [r5]
	str	r10, [r5]
	str	r10, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #124]
	str	r5, [r6, #-4]
	ldr	r1, [r5, #172]
	sub	r9, r6, #36
	ldrd	r2, [r6]
	str	r1, [r6, #-36]
	ldr	r1, [r5, #80]
	str	r1, [r6, #-32]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r2, #256
	mov	r3, #512
	stmia	r6, {r2, r3}
	ldr	r3, [r4, #132]
	sub	r3, r3, #1
	str	r3, [r4, #132]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4, #84]
	mov	r1, r9
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	cmp	fp, #0
	bne	.L8693
	ldr	r3, [r4, #344]
	ldr	r2, [r4, #124]
	add	r3, r3, #1
	cmp	r8, r2
	str	r3, [r4, #344]
	beq	.L8669
	ldr	r5, [r4, #136]
	ldr	r3, [sp, #8]
	cmp	r3, r5
	cmpne	r5, #0
	bne	.L8670
.L8669:
	ldr	r1, [sp, #12]
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L8693:
	ldr	r0, [r4, #184]
	cmp	r0, #0
	beq	.L8672
	ldr	r3, [sp, #4]
	mov	r2, fp
	ldr	r1, .L8694+4
	ldr	r0, [r3]
.LPIC1747:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r3, [r4, #128]
	str	r6, [r4, #128]
	str	r8, [r6]
	str	r3, [r6, #4]
	str	r6, [r3]
	ldr	r3, [r4, #132]
	ldr	r2, [r4, #136]
	add	r3, r3, #1
	str	r3, [r4, #132]
	ldr	r3, [sp, #8]
	str	r2, [r5]
	str	r3, [r5, #4]
	str	r5, [r4, #136]
	str	r5, [r2, #4]
	ldr	r3, [r4, #144]
	add	r3, r3, #1
	str	r3, [r4, #144]
	b	.L8669
.L8672:
	str	r0, [r6, #-36]
	ldr	r4, [r4, #84]
	bl	kfree(PLT)
	mov	r1, r9
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	dev_kfree_skb_any(PLT)
	b	.L8669
.L8695:
	.align	2
.L8694:
	.word	.LC123-(.LPIC1746+8)
	.word	.LC124-(.LPIC1747+8)
	.fnend
	.size	rmnet_sdio_complete_epin, .-rmnet_sdio_complete_epin
	.align	2
	.type	mbim_write, %function
mbim_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #4
	sub	sp, sp, #4
	cmp	r4, #0
	beq	.L8729
	cmp	r2, #0
	mov	r6, r2
	beq	.L8730
	cmp	r2, #4096
	bhi	.L8731
	add	r5, r4, #96
#APP
@ 61 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L8701
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L8742
	ldr	r0, .L8742+4
.LPIC1755:
	add	r1, pc, r1
	add	r1, r1, #3008
.LPIC1754:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #15
.L8722:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8701:
	ldr	r3, [r4, #80]
	cmp	r3, #0
	beq	.L8732
	ldr	r3, .L8742+8
	mov	r7, r1
.LPIC1773:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L8718
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r9, r0, #0
	beq	.L8733
.L8702:
	mov	r0, r6
	mov	r1, #208
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r9]
	movne	r8, r9
	strne	r6, [r9, #4]
	beq	.L8734
.L8703:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 439 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r6; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L8735
	mov	r1, r6
	mov	r10, r6
	bl	__memzero(PLT)
.L8706:
	cmp	r10, #0
	bne	.L8736
	ldr	r3, [r4, #80]
	cmp	r3, #0
	beq	.L8737
	ldrb	r3, [r4, #156]	@ zero_extendqisi2
	cmp	r3, #3
	bne	.L8738
	add	r7, r4, #196
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #212]
	add	ip, r8, #8
	add	r3, r4, #208
	mov	r1, r0
	mov	r0, r7
	str	ip, [r4, #212]
	str	r3, [r8, #8]
	str	r2, [r8, #12]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r7
	ldr	r8, [r4, #152]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #80]
	mov	fp, r0
	cmp	r3, #0
	beq	.L8739
	cmp	r8, #0
	beq	.L8740
	ldr	r3, [r8]
	cmp	r3, #0
	beq	.L8741
	add	r9, r4, #160
#APP
@ 61 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r9]
	add	r2, r2, #1
	strex	r3, r2, [r9]
	teq	r3, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #1
	beq	.L8713
	mov	r0, r7
	mov	r1, fp
	ldr	r3, [r4, #160]
	bl	_raw_spin_unlock_irqrestore(PLT)
.L8708:
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, r6
	b	.L8722
.L8718:
	mov	r9, #16
	b	.L8702
.L8713:
	ldr	r3, [r8]
	mov	lr, #8
	mvn	ip, #94
	mov	r0, r7
	mov	r1, fp
	str	lr, [r8, #4]
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r10, [r3, #2]
	strb	r10, [r3, #3]
	ldrb	r2, [r4, #188]	@ zero_extendqisi2
	strb	r10, [r3, #6]
	strb	r10, [r3, #7]
	strh	r2, [r3, #4]	@ unaligned
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #148]
	mov	r1, r8
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L8708
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L8742+12
	mov	r2, r0
	ldr	r0, .L8742+16
.LPIC1770:
	add	r1, pc, r1
	add	r1, r1, #3040
.LPIC1769:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L8708
.L8735:
	mov	r1, r7
	mov	r2, r6
	bl	__copy_from_user(PLT)
	mov	r10, r0
	b	.L8706
.L8733:
	mvn	r3, #0
	mvn	r8, #11
	ldr	r0, [r3, #-11]
	b	.L8703
.L8734:
	mov	r0, r9
	mvn	r8, #11
	bl	kfree(PLT)
	mvn	r3, #0
	ldr	r0, [r3, #-11]
	b	.L8703
.L8731:
	ldr	r1, .L8742+20
	mov	r3, #4096
	ldr	r0, .L8742+24
.LPIC1753:
	add	r1, pc, r1
	add	r1, r1, #3008
.LPIC1752:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #11
	b	.L8722
.L8730:
	ldr	r1, .L8742+28
	ldr	r0, .L8742+32
.LPIC1751:
	add	r1, pc, r1
	add	r1, r1, #3008
.LPIC1750:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L8722
.L8729:
	ldr	r1, .L8742+36
	ldr	r0, .L8742+40
.LPIC1749:
	add	r1, pc, r1
	add	r1, r1, #3008
.LPIC1748:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L8722
.L8736:
	ldr	r1, .L8742+44
	mov	r2, r10
	ldr	r0, .L8742+48
.LPIC1772:
	add	r1, pc, r1
	add	r1, r1, #3008
.LPIC1771:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, [r8]
	bl	kfree(PLT)
	mov	r0, r8
	bl	kfree(PLT)
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, #0
	b	.L8722
.L8732:
	ldr	r1, .L8742+52
	ldr	r0, .L8742+56
.LPIC1757:
	add	r1, pc, r1
	add	r1, r1, #3008
.LPIC1756:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #31
	b	.L8722
.L8738:
	ldr	r1, .L8742+60
	mov	r2, r4
	ldr	r0, .L8742+64
.LPIC1762:
	add	r1, pc, r1
	add	r1, r1, #3024
.LPIC1761:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [r8]
	bl	kfree(PLT)
	mov	r0, r8
	bl	kfree(PLT)
	b	.L8708
.L8737:
	ldr	r1, .L8742+68
	mov	r2, r4
	ldr	r0, .L8742+72
.LPIC1760:
	add	r1, pc, r1
	add	r1, r1, #3024
.LPIC1759:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [r8]
	bl	kfree(PLT)
	mov	r0, r8
	bl	kfree(PLT)
	b	.L8708
.L8741:
	ldr	r1, .L8742+76
	mov	r2, r4
	ldr	r0, .L8742+80
.LPIC1768:
	add	r1, pc, r1
.LPIC1767:
	add	r0, pc, r0
.L8726:
	add	r1, r1, #3040
	add	r1, r1, #12
	bl	printk(PLT)
	mov	r0, r7
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L8708
.L8740:
	ldr	r1, .L8742+84
	mov	r2, r4
	ldr	r0, .L8742+88
.LPIC1766:
	add	r1, pc, r1
.LPIC1765:
	add	r0, pc, r0
	b	.L8726
.L8739:
	ldr	r1, .L8742+92
	mov	r2, r4
	ldr	r0, .L8742+96
.LPIC1764:
	add	r1, pc, r1
.LPIC1763:
	add	r0, pc, r0
	b	.L8726
.L8743:
	.align	2
.L8742:
	.word	.LANCHOR3-(.LPIC1755+8)
	.word	.LC448-(.LPIC1754+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1773+8))
	.word	.LANCHOR3-(.LPIC1770+8)
	.word	.LC454-(.LPIC1769+8)
	.word	.LANCHOR3-(.LPIC1753+8)
	.word	.LC447-(.LPIC1752+8)
	.word	.LANCHOR3-(.LPIC1751+8)
	.word	.LC167-(.LPIC1750+8)
	.word	.LANCHOR3-(.LPIC1749+8)
	.word	.LC356-(.LPIC1748+8)
	.word	.LANCHOR3-(.LPIC1772+8)
	.word	.LC169-(.LPIC1771+8)
	.word	.LANCHOR3-(.LPIC1757+8)
	.word	.LC279-(.LPIC1756+8)
	.word	.LANCHOR3-(.LPIC1762+8)
	.word	.LC450-(.LPIC1761+8)
	.word	.LANCHOR3-(.LPIC1760+8)
	.word	.LC449-(.LPIC1759+8)
	.word	.LANCHOR3-(.LPIC1768+8)
	.word	.LC453-(.LPIC1767+8)
	.word	.LANCHOR3-(.LPIC1766+8)
	.word	.LC452-(.LPIC1765+8)
	.word	.LANCHOR3-(.LPIC1764+8)
	.word	.LC451-(.LPIC1763+8)
	.fnend
	.size	mbim_write, .-mbim_write
	.align	2
	.type	rmnet_close_sdio_work, %function
rmnet_close_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-108]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #-204]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L8747
	blx	r3
.L8747:
	sub	r5, r4, #112
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #-200]
	mov	r2, #0
	mvn	ip, #94
	mov	r1, r0
	mov	r0, r5
	ldr	r3, [r3]
	strb	r2, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	ip, [r3]
	ldrb	ip, [r4, #-196]	@ zero_extendqisi2
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	strh	ip, [r3, #4]	@ unaligned
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #-204]
	mov	r2, #208
	ldr	r1, [r4, #-200]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L8790
.L8748:
	ldr	r0, [r4, #-212]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L8750
	blx	r3
.L8750:
	ldr	r0, [r4, #-208]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L8751
	blx	r3
.L8751:
	sub	r0, r4, #64
	bl	cancel_work_sync(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #-108]
	mov	r6, r0
	cmp	r3, #0
	bne	.L8791
.L8768:
	mov	r0, r5
	mov	r1, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L8790:
	ldr	r3, [r4, #-108]
	cmp	r3, #0
	bne	.L8792
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8791:
	ldr	r3, [r4, #-168]
	sub	r8, r4, #168
	cmp	r3, r8
	movne	fp, #256
	movne	r10, #512
	movne	r9, #0
	beq	.L8757
.L8756:
	ldr	r2, [r3, #4]
	mov	r7, r3
	mov	r0, #0
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	fp, [r3]
	str	r10, [r3, #4]
	ldr	r3, [r4, #-160]
	sub	r3, r3, #1
	str	r3, [r4, #-160]
	str	r9, [r7, #-36]!
	ldr	r3, [r4, #-212]
	str	r3, [sp, #4]
	bl	kfree(PLT)
	ldr	r3, [sp, #4]
	mov	r1, r7
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r3, [r4, #-168]
	cmp	r3, r8
	bne	.L8756
.L8757:
	ldr	r3, [r4, #-140]
	sub	r8, r4, #140
	cmp	r3, r8
	movne	fp, #256
	movne	r10, #512
	movne	r9, #0
	beq	.L8755
.L8760:
	ldr	r2, [r3, #4]
	mov	r7, r3
	mov	r0, #0
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	fp, [r3]
	str	r10, [r3, #4]
	ldr	r3, [r4, #-132]
	sub	r3, r3, #1
	str	r3, [r4, #-132]
	str	r9, [r7, #-36]!
	ldr	r3, [r4, #-208]
	str	r3, [sp, #4]
	bl	kfree(PLT)
	ldr	r3, [sp, #4]
	mov	r1, r7
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r3, [r4, #-140]
	cmp	r3, r8
	bne	.L8760
.L8755:
	ldr	r3, [r4, #-192]
	sub	r8, r4, #192
	cmp	r3, r8
	movne	r10, #256
	movne	r9, #512
	beq	.L8759
.L8763:
	ldr	r2, [r3, #4]
	mov	r7, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [r4, #-184]
	sub	r3, r3, #1
	str	r3, [r4, #-184]
	ldr	r0, [r7, #-8]!
	bl	kfree(PLT)
	mov	r0, r7
	bl	kfree(PLT)
	ldr	r3, [r4, #-192]
	cmp	r8, r3
	bne	.L8763
.L8759:
	ldr	r3, [r4, #-180]
	sub	r8, r4, #180
	cmp	r3, r8
	movne	r10, #256
	movne	r9, #512
	beq	.L8762
.L8765:
	ldr	r2, [r3, #4]
	mov	r7, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [r4, #-172]
	sub	r3, r3, #1
	str	r3, [r4, #-172]
	ldr	r0, [r7, #-8]!
	bl	kfree(PLT)
	mov	r0, r7
	bl	kfree(PLT)
	ldr	r3, [r4, #-180]
	cmp	r3, r8
	bne	.L8765
.L8762:
	ldr	r1, .L8794
	mov	r3, #0
	sub	r9, r4, #156
	ldr	r0, .L8794+4
	mov	r8, r3
	str	r3, [r4, #-104]
.LPIC1777:
	add	r1, pc, r1
	add	r1, r1, #3072
.LPIC1776:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
.L8764:
	ldr	r3, [r4, #-156]
	cmp	r3, r9
	cmpne	r3, #0
	mov	r0, r3
	movne	r7, #1
	moveq	r7, #0
	beq	.L8793
	ldr	r2, [r4, #-148]
	sub	r2, r2, #1
	str	r2, [r4, #-148]
	ldmia	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	b	.L8764
.L8792:
	ldr	r1, .L8794+8
	mov	r2, r0
	ldr	r0, .L8794+12
.LPIC1775:
	add	r1, pc, r1
	add	r1, r1, #3072
.LPIC1774:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L8748
.L8793:
	sub	r8, r4, #128
.L8766:
	ldr	r3, [r4, #-128]
	cmp	r3, r8
	cmpne	r3, #0
	mov	r0, r3
	beq	.L8768
	ldr	r2, [r4, #-120]
	sub	r2, r2, #1
	str	r2, [r4, #-120]
	ldmia	r3, {r1, r2}
	str	r7, [r3]
	str	r7, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	b	.L8766
.L8795:
	.align	2
.L8794:
	.word	.LANCHOR3-(.LPIC1777+8)
	.word	.LC455-(.LPIC1776+8)
	.word	.LANCHOR3-(.LPIC1775+8)
	.word	.LC275-(.LPIC1774+8)
	.fnend
	.size	rmnet_close_sdio_work, .-rmnet_close_sdio_work
	.align	2
	.global	usb_gadget_get_string
	.type	usb_gadget_get_string, %function
usb_gadget_get_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	mov	r3, r0
	bne	.L8797
	mov	r1, #4
	mov	ip, #3
	mov	r0, r1
	strb	r1, [r2]
	strb	ip, [r2, #1]
	ldrh	r1, [r3]
	strb	r1, [r2, #2]
	ldrh	r3, [r3]
	mov	r3, r3, lsr #8
	strb	r3, [r2, #3]
	bx	lr
.L8797:
	ldr	r3, [r0, #4]
	cmp	r3, #0
	beq	.L8819
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	b	.L8817
.L8820:
	ldrb	r0, [r3]	@ zero_extendqisi2
	cmp	r1, r0
	beq	.L8801
	adds	r3, r3, #8
	beq	.L8800
.L8817:
	ldr	r4, [r3, #4]
	cmp	r4, #0
	bne	.L8820
.L8800:
	mvn	r0, #21
.L8812:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L8801:
	mov	r0, r4
	mov	r5, r2
	bl	strlen(PLT)
	mov	r3, #126
	cmp	r0, #126
	movcc	r1, r0
	movcs	r1, r3
	str	r3, [sp]
	mov	r2, #1
	mov	r0, r4
	add	r3, r5, #2
	bl	utf8s_to_utf16s(PLT)
	cmp	r0, #0
	blt	.L8800
	add	r3, r0, #1
	mov	r2, #3
	mov	r3, r3, asl #1
	strb	r2, [r5, #1]
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r5]
	b	.L8812
.L8819:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_gadget_get_string, .-usb_gadget_get_string
	.align	2
	.global	usb_find_descriptor_fillbuf
	.type	usb_find_descriptor_fillbuf, %function
usb_find_descriptor_fillbuf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	beq	.L8828
	ldr	ip, [r2]
	cmp	ip, #0
	beq	.L8833
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	cmp	lr, r3
	beq	.L8825
.L8824:
	ldr	ip, [r2, #4]!
	cmp	ip, #0
	beq	.L8834
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	cmp	lr, r3
	bne	.L8824
.L8825:
	ldrb	r4, [ip]	@ zero_extendqisi2
	cmp	r4, r1
	bhi	.L8829
	mov	r1, ip
	mov	r2, r4
	bl	memcpy(PLT)
	mov	r0, r4
.L8822:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L8834:
	mvn	r0, #1
	b	.L8822
.L8829:
	mvn	r0, #21
	b	.L8822
.L8833:
	mvn	r0, #1
	bx	lr
.L8828:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_find_descriptor_fillbuf, .-usb_find_descriptor_fillbuf
	.align	2
	.global	usb_descriptor_fillbuf
	.type	usb_descriptor_fillbuf, %function
usb_descriptor_fillbuf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	subs	r6, r2, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L8839
	mov	r5, r1
	ldr	r1, [r6]
	cmp	r1, #0
	beq	.L8843
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r5, r4
	bcc	.L8839
	mov	r7, r0
	mov	r3, r0
	b	.L8841
.L8842:
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r4, r5
	bhi	.L8839
.L8841:
	mov	r0, r3
	mov	r2, r4
	bl	memcpy(PLT)
	ldr	r1, [r6, #4]!
	rsb	r5, r4, r5
	add	r3, r0, r4
	cmp	r1, #0
	bne	.L8842
	rsb	r0, r7, r3
.L8837:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8839:
	mvn	r0, #21
	b	.L8837
.L8843:
	mov	r0, r1
	b	.L8837
	.fnend
	.size	usb_descriptor_fillbuf, .-usb_descriptor_fillbuf
	.align	2
	.type	composite_setup, %function
composite_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	add	r0, r0, #32
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r1
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	bl	dev_get_drvdata(PLT)
	mov	r4, r0
	ldrh	r8, [fp, #6]	@ unaligned
	ldrh	r0, [fp, #4]	@ unaligned
	ldr	r5, [r4, #4]
	ldrh	r3, [fp, #2]	@ unaligned
	cmp	r8, #4096
	uxth	r6, r0
	uxtb	r1, r6
	bhi	.L9099
	ldrb	ip, [r5, #26]	@ zero_extendqisi2
	mov	lr, #0
	ldr	r2, .L9294
	str	lr, [r5, #4]
	bfc	ip, #1, #1
.LPIC1779:
	add	r2, pc, r2
	strb	ip, [r5, #26]
	str	r2, [r5, #28]
	ldr	r2, [r7, #4]
	str	r4, [r2]
	ldrb	r9, [fp, #1]	@ zero_extendqisi2
	cmp	r9, #11
	addls	pc, pc, r9, asl #2
	b	.L8848
.L8850:
	b	.L8849
	b	.L8851
	b	.L8848
	b	.L8851
	b	.L8848
	b	.L8848
	b	.L8852
	b	.L8848
	b	.L8853
	b	.L8854
	b	.L8855
	b	.L8856
	.p2align 1
.L8848:
	ldrb	r2, [fp]	@ zero_extendqisi2
.L8857:
	and	r2, r2, #31
	cmp	r2, #1
	beq	.L9035
	cmp	r2, #2
	bne	.L9278
	ldr	r0, [r4, #12]
	and	r3, r6, #128
	and	r6, r6, #15
	orr	r6, r6, r3, lsr #3
	mov	r1, r0
	ldr	r3, [r1, #36]!
	cmp	r1, r3
	sub	r2, r3, #64
	beq	.L9037
	ldr	ip, [r3, #8]
	sxtb	r3, r6
	mov	ip, ip, lsr r3
	tst	ip, #1
	bne	.L9040
	mov	ip, #1
	mov	ip, ip, asl r3
	b	.L9041
.L9042:
	ldr	r3, [r3, #8]
	tst	ip, r3
	bne	.L9040
.L9041:
	ldr	r3, [r2, #64]
	cmp	r1, r3
	sub	r2, r3, #64
	bne	.L9042
.L9037:
	cmp	r0, #0
	beq	.L9099
.L9055:
	ldr	r3, [r0, #16]
	cmp	r3, #0
	beq	.L9099
	mov	r1, fp
	blx	r3
	mov	r10, r0
.L9043:
	movw	r3, #32767
	cmp	r10, r3
	bne	.L9127
	ldr	r3, [r4, #56]
	add	r3, r3, #1
	str	r3, [r4, #56]
.L9127:
	mov	r0, r10
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8864:
	ldr	r1, [r7, #20]
	cmp	r1, #2
	bls	.L9099
	ldr	r1, [r7, #16]
	cmp	r1, #4
	bls	.L8861
.L9099:
	mvn	r10, #94
	b	.L9127
.L9278:
	ldr	r0, [r4, #12]
	b	.L9037
.L9035:
	ldr	r0, [r4, #12]
	clz	r3, r0
	mov	r3, r3, lsr #5
	cmp	r1, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L9037
	add	r1, r1, #12
	ldr	r2, [r0, r1, asl #2]
	cmp	r2, #0
	bne	.L9038
	b	.L9055
.L9040:
	cmp	r2, #0
	beq	.L9037
.L9038:
	ldr	r3, [r2, #44]
	cmp	r3, #0
	beq	.L9037
	mov	r0, r2
	mov	r1, fp
	blx	r3
	mov	r10, r0
	b	.L9043
.L8849:
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bls	.L8848
	ldrb	r2, [fp]	@ zero_extendqisi2
	cmp	r2, #129
	bne	.L8857
	ldr	r3, [r5]
	mov	r2, #0
	strb	r2, [r3]
	strb	r2, [r3, #1]
	ldr	r2, [r4, #12]
	clz	r3, r2
	mov	r3, r3, lsr #5
	cmp	r1, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L9269
	add	r1, r1, #12
	ldr	r0, [r2, r1, asl #2]
	cmp	r0, #0
	beq	.L9269
	ldr	r3, [r0, #56]
	cmp	r3, #0
	beq	.L9095
	blx	r3
	cmp	r0, #0
	uxtbge	r9, r0
	ubfxge	r3, r0, #8, #8
	blt	.L9269
.L9028:
	ldr	r2, [r5]
	cmp	r8, #2
	mov	r6, #2
	movle	r8, #0
	movgt	r8, #1
	strb	r9, [r2]
	strb	r3, [r2, #1]
	b	.L8879
.L8851:
	ldr	r2, [r7, #20]
	cmp	r2, #4
	bls	.L8848
	ldrb	r2, [fp]	@ zero_extendqisi2
	cmp	r2, #1
	bne	.L8857
	cmp	r3, #0
	bne	.L9099
	ldr	r10, [r4, #12]
	clz	r2, r10
	mov	r2, r2, lsr #5
	cmp	r1, #15
	orrhi	r2, r2, #1
	cmp	r2, #0
	bne	.L9099
	add	r1, r1, #12
	ldr	r0, [r10, r1, asl #2]
	cmp	r0, #0
	beq	.L9099
	ldr	r2, [r0, #60]
	cmp	r2, #0
	beq	.L9267
	mov	r1, r6, lsr #8
	str	r3, [sp, #12]
	blx	r2
	subs	r10, r0, #0
	ldr	r3, [sp, #12]
	blt	.L9279
	movw	r6, #32767
	subs	r6, r10, r6
	movne	r6, #1
.L9012:
	cmp	r6, #0
	movweq	r3, #32767
	rsbeq	r3, r3, r10
	clzeq	r3, r3
	moveq	r3, r3, lsr #5
	bne	.L9265
.L9023:
	cmp	r8, #0
	moveq	r3, #0
	andne	r3, r3, #1
	cmp	r3, #0
	beq	.L9127
	cmp	r4, #0
	movweq	r10, #32767
	beq	.L9127
	ldr	r3, .L9294+4
	movw	r1, #1402
	movw	r10, #32767
	ldr	r0, .L9294+8
	ldr	r2, .L9294+12
.LPIC1795:
	add	r3, pc, r3
.LPIC1793:
	add	r0, pc, r0
	add	r3, r3, #3120
.LPIC1794:
	add	r2, pc, r2
	bl	warn_slowpath_fmt(PLT)
	b	.L9127
.L8852:
	ldrb	r2, [fp]	@ zero_extendqisi2
	cmp	r2, #128
	bne	.L8857
	mov	r2, r3, lsr #8
	sub	r1, r2, #1
	cmp	r1, #14
	addls	pc, pc, r1, asl #2
	b	.L9099
.L8860:
	b	.L8859
	b	.L8861
	b	.L8862
	b	.L9099
	b	.L9099
	b	.L8863
	b	.L8864
	b	.L9099
	b	.L9099
	b	.L9099
	b	.L9099
	b	.L9099
	b	.L9099
	b	.L9099
	b	.L8865
	.p2align 1
.L8853:
	ldrb	r2, [fp]	@ zero_extendqisi2
	cmp	r2, #128
	bne	.L8857
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L9017
	ldrb	r2, [r3, #20]	@ zero_extendqisi2
	ldr	r3, [r5]
	strb	r2, [r3]
.L9018:
	adds	r6, r8, #0
	movne	r6, #1
	cmp	r6, r8
	movge	r8, #0
	movlt	r8, #1
.L8879:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r6, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r3, r8, #1, #1
	strb	r3, [r5, #26]
	ldr	r0, [r7, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r10, r0, #0
	movlt	r3, #0
	strlt	r3, [r5, #44]
	b	.L9127
.L8854:
	ldrb	r10, [fp]	@ zero_extendqisi2
	cmp	r10, #0
	movne	r2, r10
	bne	.L8857
	str	r3, [sp, #16]
	add	r3, r4, #60
	mov	r0, r3
	str	r3, [sp, #12]
	bl	_raw_spin_lock(PLT)
	ldr	r1, [r4, #12]
	ldr	fp, [r4]
	ldr	r3, [sp, #16]
	cmp	r1, #0
	beq	.L8978
	ldrb	r2, [r1, #20]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L9280
	cmp	r3, #0
	bne	.L9048
	ldr	r6, [r1, #36]!
	cmp	r6, r1
	sub	r6, r6, #64
	beq	.L9081
	mov	r9, r3
	mov	r10, r3
.L8992:
	ldr	r3, [r6, #40]
	mov	r0, r6
	cmp	r3, #0
	beq	.L8991
	blx	r3
.L8991:
	str	r9, [r6, #72]
	ldr	r3, [r4, #12]
	ldr	r6, [r6, #64]
	add	r3, r3, #36
	cmp	r6, r3
	sub	r6, r6, #64
	bne	.L8992
	ldr	r1, [r4]
	mov	r3, r10
.L8990:
	mov	r2, #0
	str	r2, [r4, #12]
	str	r2, [r4, #56]
.L8993:
	add	r1, r1, #32
	ldr	r0, [fp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #16]
	bl	usb_speed_string(PLT)
	ldr	r3, [sp, #20]
	mov	r2, r0
	ldr	r1, [sp, #16]
.L9014:
	ldr	ip, .L9294+16
	mov	r0, r1
	ldr	r1, .L9294+20
.LPIC1791:
	add	ip, pc, ip
.LPIC1790:
	add	r1, pc, r1
	str	ip, [sp]
	bl	_dev_info(PLT)
	ldr	r3, [fp]
	ldr	r10, [r3, #16]
	cmp	r10, #0
	beq	.L9015
	mov	r0, fp
	mov	r1, #100
	blx	r10
	mov	r10, #0
.L9015:
	ldr	r3, [r4, #56]
	cmp	r3, #0
	movne	r6, #0
	movwne	r10, #32767
	bne	.L8979
	movw	r6, #32767
	subs	r6, r10, r6
	movne	r6, #1
	cmp	r10, #0
	movlt	r6, #0
.L8979:
	ldr	r0, [sp, #12]
	bl	_raw_spin_unlock(PLT)
	b	.L9012
.L8855:
	ldrb	r2, [fp]	@ zero_extendqisi2
	cmp	r2, #129
	bne	.L8857
	ldr	r2, [r4, #12]
	clz	r3, r2
	mov	r3, r3, lsr #5
	cmp	r1, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L9099
	add	r1, r1, #12
	ldr	r0, [r2, r1, asl #2]
	cmp	r0, #0
	beq	.L9099
	ldr	r3, [r0, #36]
	cmp	r3, #0
	beq	.L9024
	mov	r1, r6
	blx	r3
	subs	r10, r0, #0
	blt	.L9127
	uxtb	r3, r10
.L9024:
	ldr	r2, [r5]
	adds	r6, r8, #0
	movne	r6, #1
	cmp	r6, r8
	movge	r8, #0
	movlt	r8, #1
	strb	r3, [r2]
	b	.L8879
.L8856:
	ldrb	r2, [fp]	@ zero_extendqisi2
	cmp	r2, #1
	bne	.L8857
	ldr	r10, [r4, #12]
	clz	r2, r10
	mov	r2, r2, lsr #5
	cmp	r1, #15
	orrhi	r2, r2, #1
	cmp	r2, #0
	bne	.L9099
	add	r1, r1, #12
	ldr	r0, [r10, r1, asl #2]
	cmp	r0, #0
	beq	.L9099
	cmp	r3, #0
	beq	.L9019
	ldr	ip, [r0, #32]
	cmp	ip, #0
	beq	.L9099
.L9020:
	mov	r2, r3
	mov	r1, r6
	blx	ip
	movw	r3, #32767
	mov	r10, r0
	cmp	r0, r3
	beq	.L9281
	cmp	r0, #0
	blt	.L9127
.L9265:
	mov	r6, r10
.L9266:
	cmp	r6, r8
	movge	r8, #0
	movlt	r8, #1
	b	.L8879
.L8861:
	ldr	r1, [r4]
	ldr	r9, [r1, #16]
	cmp	r9, #5
	moveq	ip, r9
	beq	.L8889
	ldr	r1, [r1, #20]
	cmp	r1, #2
	bls	.L9065
	sub	r9, r9, #3
	clz	r9, r9
	mov	r9, r9, lsr #5
	cmp	r2, #7
	eoreq	r9, r9, #1
	cmp	r9, #0
	moveq	ip, #0
	movne	ip, #3
.L8889:
	mov	r1, r4
	uxtb	r10, r3
	ldr	r6, [r1, #36]!
	cmp	r1, r6
	sub	r6, r6, #28
	beq	.L8941
	cmp	ip, #3
	beq	.L8908
	cmp	ip, #5
	bne	.L9197
.L9185:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L9177
	cmp	r10, #0
	sub	r10, r10, #1
	beq	.L9242
.L9177:
	ldr	r6, [r6, #28]
	cmp	r1, r6
	sub	r6, r6, #28
	bne	.L9185
.L8941:
	mvn	r10, #21
	b	.L9127
.L9197:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	beq	.L9183
	cmp	r10, #0
	sub	r10, r10, #1
	beq	.L9242
.L9183:
	ldr	r6, [r6, #28]
	cmp	r1, r6
	sub	r6, r6, #28
	bne	.L9197
	b	.L8941
.L8908:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L8895
	cmp	r10, #0
	sub	r10, r10, #1
	beq	.L9242
.L8895:
	ldr	r6, [r6, #28]
	cmp	r1, r6
	sub	r6, r6, #28
	bne	.L8908
	b	.L8941
.L8859:
	ldr	r0, [r4]
	ldr	r3, [r0, #20]
	cmp	r3, #2
	bls	.L8866
	ldr	r2, [r0, #16]
	mov	r1, r4
	ldr	r3, [r1, #36]!
	cmp	r2, #3
	beq	.L8867
	cmp	r1, r3
	sub	r3, r3, #28
	beq	.L9058
	cmp	r2, #5
	beq	.L8869
.L9051:
	mov	r2, #0
.L8870:
	ldrb	lr, [r3, #45]	@ zero_extendqisi2
	add	ip, r2, #1
	ldr	r3, [r3, #28]
	tst	lr, #4
	movne	r2, ip
	cmp	r1, r3
	sub	r3, r3, #28
	bne	.L8870
.L8871:
	uxtb	r2, r2
.L8868:
	strb	r2, [r4, #34]
	ldr	r2, [r0, #4]
	mov	r3, #2
	ldrh	r2, [r2, #20]
	str	r3, [r4, #64]
	strb	r2, [r4, #24]
	ldr	r2, [r7, #20]
	cmp	r2, #4
	bls	.L8874
	ldr	r2, [r7, #16]
	cmp	r2, #4
	bls	.L8875
	mov	r0, #0
	mov	r1, #3
	mov	r2, #9
	mov	r3, #8
	strb	r0, [r4, #19]
	strb	r1, [r4, #20]
	strb	r2, [r4, #24]
	str	r3, [r4, #64]
.L8876:
	cmp	r8, #17
	movls	r6, r8
	movls	r8, #0
	bls	.L8878
	cmp	r8, #18
	mov	r6, #18
	movle	r8, #0
	movgt	r8, #1
.L8878:
	add	r1, r4, #17
	ldr	r0, [r5]
	mov	r2, r6
	bl	memcpy(PLT)
	b	.L8879
.L8863:
	ldr	r3, [r7, #20]
	cmp	r3, #2
	bls	.L9099
	ldr	r3, [r7, #16]
	cmp	r3, #4
	bhi	.L9099
	ldr	r1, [r4, #4]
	mov	r2, #10
	mov	r3, #6
	ldr	r10, [r1]
	strb	r2, [r10]
	strb	r3, [r10, #1]
	ldrh	r3, [r4, #19]	@ unaligned
	strh	r3, [r10, #2]	@ unaligned
	ldrb	r3, [r4, #21]	@ zero_extendqisi2
	strb	r3, [r10, #4]
	ldrb	r3, [r4, #22]	@ zero_extendqisi2
	strb	r3, [r10, #5]
	ldrb	r3, [r4, #23]	@ zero_extendqisi2
	strb	r3, [r10, #6]
	ldr	r3, [r4]
	ldr	r3, [r3, #4]
	ldrh	r3, [r3, #20]
	strb	r3, [r10, #7]
	ldr	r3, [r4]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L8880
	ldr	r3, [r3, #16]
	ldr	r9, [r4, #36]!
	cmp	r3, #3
	beq	.L8881
	cmp	r4, r9
	sub	r9, r9, #28
	beq	.L9061
	cmp	r3, #5
	beq	.L8883
	mov	r6, #0
.L8887:
	ldrb	r2, [r9, #45]	@ zero_extendqisi2
	add	r3, r6, #1
	ldr	r9, [r9, #28]
	tst	r2, #2
	movne	r6, r3
	cmp	r4, r9
	sub	r9, r9, #28
	bne	.L8887
.L8886:
	uxtb	r6, r6
	b	.L8882
.L8865:
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bhi	.L8973
	ldrb	r3, [r7, #385]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9099
.L8973:
	ldr	r6, [r4, #4]
	mov	r3, #0
	mov	r1, #5
	mov	ip, #15
	mov	r0, #2
	mov	r10, #12
	mov	r2, #1
	mov	r9, #7
	mov	lr, #16
	ldr	r6, [r6]
	strb	r1, [r6, #2]
	strb	r3, [r6, #3]
	strb	r3, [r6, #4]
	strb	r1, [r6]
	strb	ip, [r6, #1]
	ldr	r1, [r4, #4]
	ldr	r1, [r1]
	strh	r10, [r6, #2]	@ movhi
	strb	r2, [r6, #4]
	strb	r3, [r1, #9]
	strb	r3, [r1, #10]
	strb	r3, [r1, #11]
	strb	r9, [r1, #5]
	strb	lr, [r1, #6]
	strb	r0, [r1, #7]
	strb	r0, [r1, #8]
	ldr	r1, [r4]
	ldr	r1, [r1, #20]
	cmp	r1, #4
	bls	.L8974
	ldr	r9, [r4, #4]
	mov	fp, #10
	ldrh	r1, [r6, #2]	@ unaligned
	ldrb	r0, [r6, #4]	@ zero_extendqisi2
	ldr	r10, [r9]
	add	r9, r1, fp
	add	r0, r0, r2
	strh	r9, [r6, #2]	@ movhi
	add	r9, r10, r1
	strb	r0, [r6, #4]
	strb	fp, [r10, r1]
	strb	r3, [r9, #3]
	strb	r3, [r9, #5]
	mov	r3, #3
	strb	lr, [r9, #1]
	strb	ip, [r9, #4]
	strb	r2, [r9, #6]
	strb	r3, [r9, #2]
	ldr	r3, [r4]
	ldr	r3, [r3]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L8975
	add	r0, sp, #40
	blx	r3
	ldrb	r2, [sp, #40]	@ zero_extendqisi2
	ldrh	r3, [sp, #42]
.L8976:
	strb	r2, [r9, #7]
	strh	r3, [r9, #8]	@ unaligned
.L8974:
	ldrh	r6, [r6, #2]	@ unaligned
.L9271:
	cmp	r8, r6
	bcs	.L9266
.L9264:
	mov	r6, r8
	mov	r8, #0
	b	.L8879
.L8862:
	ands	r3, r3, #255
	ldr	r9, [r5]
	str	r3, [sp, #12]
	beq	.L9282
	mov	r2, r3
	ldrb	r3, [r4, #49]	@ zero_extendqisi2
	cmp	r2, r3
	beq	.L9283
	ldrb	r3, [r4, #50]	@ zero_extendqisi2
	cmp	r2, r3
	beq	.L9284
	ldrb	r3, [r4, #51]	@ zero_extendqisi2
	cmp	r2, r3
	beq	.L9285
.L8947:
	ldr	r3, .L9294+24
.LPIC1786:
	add	r3, pc, r3
	ldr	r3, [r3, #88]
	ldr	r10, [r3, #16]
	cmp	r10, #0
	subne	r10, r10, #4
	beq	.L8956
.L8951:
	ldr	r0, [r10, #4]!
	cmp	r0, #0
	beq	.L8956
	ldrh	r3, [r0]
	cmp	r3, r6
	bne	.L8951
	ldr	r1, [sp, #12]
	mov	r2, r9
	bl	usb_gadget_get_string(PLT)
	cmp	r0, #0
	ble	.L8951
	uxth	r3, r0
	mov	r2, r0
	str	r3, [sp, #12]
.L9047:
	cmp	r8, r3
	bcc	.L9264
	uxth	r6, r2
	cmp	r6, r8
	movge	r8, #0
	movlt	r8, #1
	b	.L8879
.L8978:
	cmp	r3, #0
	moveq	r1, fp
	beq	.L8993
.L9048:
	mov	r0, r4
	ldr	r2, [r0, #36]!
	cmp	r0, r2
	sub	r9, r2, #28
	bne	.L8989
	b	.L9078
.L8984:
	ldr	r2, [r9, #28]
	cmp	r0, r2
	sub	r9, r2, #28
	beq	.L9078
.L8989:
	ldrb	r2, [r2, #-8]	@ zero_extendqisi2
	cmp	r3, r2
	bne	.L8984
	cmp	r1, #0
	moveq	r1, fp
	beq	.L8985
	ldr	r6, [r1, #36]!
	cmp	r6, r1
	sub	r6, r6, #64
	beq	.L9080
	mov	r10, #0
	str	r3, [sp, #16]
.L8988:
	ldr	r3, [r6, #40]
	mov	r0, r6
	cmp	r3, #0
	beq	.L8987
	blx	r3
.L8987:
	str	r10, [r6, #72]
	ldr	r3, [r4, #12]
	ldr	r6, [r6, #64]
	add	r3, r3, #36
	cmp	r6, r3
	sub	r6, r6, #64
	bne	.L8988
	ldr	r3, [sp, #16]
	ldr	r1, [r4]
.L8986:
	mov	r2, #0
	str	r2, [r4, #12]
	str	r2, [r4, #56]
.L8985:
	add	r1, r1, #32
	ldr	r0, [fp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #16]
	bl	usb_speed_string(PLT)
	cmp	r9, #0
	mov	r2, r0
	ldr	r1, [sp, #16]
	ldr	r3, [sp, #20]
	beq	.L9014
	add	r0, r9, #44
	ldr	ip, [r9]
	mov	r6, #0
	mov	r10, r7
	str	r0, [sp, #24]
	mov	r0, r1
	ldr	r1, .L9294+28
	str	ip, [sp]
.LPIC1787:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	str	r5, [sp, #16]
	mov	r5, r4
	mov	r0, r6
	str	r9, [r4, #12]
	ldr	r4, [sp, #24]
	str	r9, [sp, #28]
	str	r8, [sp, #20]
.L9010:
	ldr	r8, [r4, #4]!
	cmp	r8, #0
	beq	.L8994
	ldr	r3, [fp, #16]
	cmp	r3, #3
	beq	.L8996
	cmp	r3, #5
	bne	.L9234
	ldr	r7, [r8, #16]
	cmp	r7, #0
	beq	.L9286
.L8998:
	ldr	r3, [r7]
	cmp	r3, #0
	addne	r9, r8, #72
	bne	.L9003
	b	.L9004
.L9002:
	ldr	r3, [r7, #4]!
	cmp	r3, #0
	beq	.L9004
.L9003:
	ldrb	r2, [r3, #1]	@ zero_extendqisi2
	cmp	r2, #5
	bne	.L9002
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	mov	r1, r9
	bic	r0, r3, #127
	and	r3, r3, #15
	orr	r0, r3, r0, lsr #3
	bl	_set_bit(PLT)
	b	.L9002
.L9004:
	ldr	r3, [r8, #32]
	mov	r0, r8
	mov	r1, r6
	mov	r2, #0
	blx	r3
	cmp	r0, #0
	blt	.L9287
	movw	r3, #32767
	cmp	r0, r3
	beq	.L9288
.L9009:
	add	r6, r6, #1
	cmp	r6, #16
	bne	.L9010
.L8994:
	ldr	r9, [sp, #28]
	mov	r4, r5
	mov	r7, r10
	ldr	r8, [sp, #20]
	mov	r10, r0
	ldr	r5, [sp, #16]
	ldrb	r1, [r9, #23]	@ zero_extendqisi2
	cmp	r1, #0
	moveq	r1, #500
	beq	.L9011
	ldr	r3, [r4, #64]
	mul	r1, r3, r1
.L9011:
	ldr	r3, [fp]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L9015
	mov	r0, fp
	blx	r3
	b	.L9015
.L9234:
	ldr	r7, [r8, #8]
	b	.L8998
.L8996:
	ldr	r7, [r8, #12]
	b	.L8998
.L9288:
	ldr	r3, [r5, #56]
	add	r3, r3, #1
	str	r3, [r5, #56]
	b	.L9009
.L9269:
	cmp	r8, #2
	mov	r6, #2
	movle	r8, #0
	movgt	r8, #1
	b	.L8879
.L9078:
	mvn	r10, #21
.L8981:
	ldr	r3, [fp]
	ldr	r6, [r3, #16]
	cmp	r6, #0
	beq	.L8979
	mov	r0, fp
	mov	r1, #100
	blx	r6
	mov	r6, #0
	b	.L8979
.L9280:
	mov	r6, #1
	b	.L8979
.L9019:
	ldr	r2, [r0, #36]
	cmp	r2, #0
	beq	.L9267
	ldr	ip, [r0, #32]
	b	.L9020
.L9017:
	ldr	r2, [r5]
	strb	r3, [r2]
	b	.L9018
.L9065:
	mov	ip, #0
	b	.L8889
.L9281:
	ldr	r2, [r4, #56]
	mov	r3, #1
	add	r2, r2, r3
	str	r2, [r4, #56]
	b	.L9023
.L8874:
	ldrb	r2, [r7, #385]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L8876
	mov	r2, #1
	strb	r3, [r4, #20]
	strb	r2, [r4, #19]
	b	.L8876
.L8869:
	mov	r2, #0
.L8873:
	ldrb	lr, [r3, #45]	@ zero_extendqisi2
	add	ip, r2, #1
	ldr	r3, [r3, #28]
	tst	lr, #1
	movne	r2, ip
	cmp	r1, r3
	sub	r3, r3, #28
	bne	.L8873
	b	.L8871
.L8866:
	mov	r1, r4
	ldr	r3, [r1, #36]!
	cmp	r1, r3
	sub	r3, r3, #28
	bne	.L9051
.L9058:
	mov	r2, #0
	b	.L8868
.L9267:
	adds	r8, r8, #0
	mov	r6, r3
	movne	r8, #1
	b	.L8879
.L8956:
	ldr	fp, [r4, #36]!
	cmp	r4, fp
	sub	fp, fp, #28
	beq	.L8941
	mov	r3, r7
	str	r5, [sp, #16]
	mov	r7, fp
	mov	r5, r4
	mov	fp, r3
	str	r8, [sp, #20]
.L8965:
	ldr	r4, [r7, #4]
	cmp	r4, #0
	subne	r4, r4, #4
	beq	.L8964
.L8960:
	ldr	r0, [r4, #4]!
	cmp	r0, #0
	beq	.L8964
	ldrh	r3, [r0]
	cmp	r3, r6
	bne	.L8960
	ldr	r1, [sp, #12]
	mov	r2, r9
	bl	usb_gadget_get_string(PLT)
	cmp	r0, #0
	ble	.L8960
.L9262:
	uxth	r3, r0
	ldr	r5, [sp, #16]
	mov	r7, fp
	ldr	r8, [sp, #20]
	mov	r2, r0
	str	r3, [sp, #12]
	b	.L9047
.L8964:
	mov	r8, r7
	ldr	r4, [r8, #36]!
	cmp	r8, r4
	sub	r4, r4, #64
	beq	.L8959
.L8968:
	ldr	r10, [r4, #4]
	cmp	r10, #0
	subne	r10, r10, #4
	beq	.L8966
.L8967:
	ldr	r0, [r10, #4]!
	cmp	r0, #0
	beq	.L8966
	ldrh	r3, [r0]
	cmp	r3, r6
	bne	.L8967
	ldr	r1, [sp, #12]
	mov	r2, r9
	bl	usb_gadget_get_string(PLT)
	cmp	r0, #0
	ble	.L8967
	b	.L9262
.L8966:
	ldr	r4, [r4, #64]
	cmp	r8, r4
	sub	r4, r4, #64
	bne	.L8968
.L8959:
	ldr	r3, [r7, #28]
	cmp	r5, r3
	sub	r7, r3, #28
	bne	.L8965
	b	.L8941
.L9283:
	ldr	r2, .L9294+32
.LPIC1781:
	add	r2, pc, r2
	ldr	r3, [r2, #3764]
	cmp	r3, #0
	beq	.L9289
.L9046:
	mvn	ip, #0
	str	r3, [sp, #44]
	add	r3, sp, #40
	strh	r0, [sp, #32]	@ movhi
	mov	r2, r9
	add	r0, sp, #32
	mov	r1, #255
	strb	ip, [sp, #40]
	str	r3, [sp, #36]
	bl	usb_gadget_get_string(PLT)
	subs	r10, r0, #0
	blt	.L9127
	uxth	r3, r10
	mov	r2, r10
	str	r3, [sp, #12]
	b	.L9047
.L8867:
	cmp	r1, r3
	sub	r3, r3, #28
	movne	r2, #0
	beq	.L9058
.L8872:
	ldrb	lr, [r3, #45]	@ zero_extendqisi2
	add	ip, r2, #1
	ldr	r3, [r3, #28]
	tst	lr, #2
	movne	r2, ip
	cmp	r1, r3
	sub	r3, r3, #28
	bne	.L8872
	b	.L8871
.L9081:
	mov	r1, fp
	b	.L8990
.L9282:
	mov	r0, r9
	mov	r1, #256
	bl	__memzero(PLT)
	ldr	r3, .L9294+36
	mov	r2, #3
	strb	r2, [r9, #1]
.LPIC1780:
	add	r3, pc, r3
	ldr	r3, [r3, #88]
	ldr	r6, [r3, #16]
	cmp	r6, #0
	beq	.L9290
	ldr	r3, [r6]
	add	lr, r9, #2
	ldrh	ip, [r9, #2]	@ unaligned
	cmp	r3, #0
	addne	r0, r9, #254
	beq	.L8912
.L8919:
	cmp	ip, #0
	ldrh	r1, [r3]
	beq	.L9070
	cmp	lr, r0
	bcs	.L9070
	cmp	r1, ip
	beq	.L8915
	mov	r3, lr
	b	.L8917
.L9295:
	.align	2
.L9294:
	.word	composite_setup_complete-(.LPIC1779+8)
	.word	.LANCHOR3-(.LPIC1795+8)
	.word	.LC81-(.LPIC1793+8)
	.word	.LC460-(.LPIC1794+8)
	.word	.LC458-(.LPIC1791+8)
	.word	.LC456-(.LPIC1790+8)
	.word	.LANCHOR2-(.LPIC1786+8)
	.word	.LC456-(.LPIC1787+8)
	.word	.LANCHOR4-(.LPIC1781+8)
	.word	.LANCHOR2-(.LPIC1780+8)
	.word	.LANCHOR3-(.LPIC1789+8)
	.word	.LC457-(.LPIC1788+8)
	.word	.LANCHOR4-(.LPIC1785+8)
	.word	.LANCHOR4-(.LPIC1783+8)
	.word	.LANCHOR2-(.LPIC1784+8)
	.word	.LC459-(.LPIC1792+8)
	.word	.LANCHOR2-(.LPIC1782+8)
.L9291:
	cmp	r3, r0
	bcs	.L8914
	cmp	r1, r2
	beq	.L8915
.L8917:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L9291
.L8914:
	strh	r1, [r3]	@ movhi
	ldrh	ip, [r9, #2]	@ unaligned
.L8915:
	ldr	r3, [r6, #4]!
	cmp	r3, #0
	bne	.L8919
.L8912:
	mov	fp, r4
	ldr	r3, [fp, #36]!
	cmp	fp, r3
	sub	r3, r3, #28
	str	r3, [sp, #16]
	beq	.L8920
	ldr	r3, [sp, #16]
	add	r4, r9, #2
	add	r0, r9, #254
.L8937:
	ldr	lr, [r3, #4]
	cmp	lr, #0
	beq	.L8921
	ldr	r3, [lr]
	cmp	r3, #0
	beq	.L8921
.L8927:
	cmp	ip, #0
	ldrh	r1, [r3]
	beq	.L9072
	cmp	r4, r0
	bcs	.L9072
	cmp	r1, ip
	beq	.L8923
	mov	r3, r4
	b	.L8925
.L9292:
	cmp	r3, r0
	bcs	.L8922
	cmp	r1, r2
	beq	.L8923
.L8925:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L9292
.L8922:
	strh	r1, [r3]	@ movhi
	ldrh	ip, [r9, #2]	@ unaligned
.L8923:
	ldr	r3, [lr, #4]!
	cmp	r3, #0
	bne	.L8927
.L8921:
	ldr	r10, [sp, #16]
	ldr	r6, [r10, #36]!
	cmp	r10, r6
	sub	r6, r6, #64
	beq	.L8928
.L8936:
	ldr	lr, [r6, #4]
	cmp	lr, #0
	beq	.L8929
	ldr	r3, [lr]
	cmp	r3, #0
	beq	.L8929
.L8935:
	cmp	ip, #0
	ldrh	r1, [r3]
	beq	.L9074
	cmp	r4, r0
	bcs	.L9074
	cmp	r1, ip
	beq	.L8931
	mov	r3, r4
	b	.L8933
.L9293:
	cmp	r3, r0
	bcs	.L8930
	cmp	r1, r2
	beq	.L8931
.L8933:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L9293
.L8930:
	strh	r1, [r3]	@ movhi
	ldrh	ip, [r9, #2]	@ unaligned
.L8931:
	ldr	r3, [lr, #4]!
	cmp	r3, #0
	bne	.L8935
.L8929:
	ldr	r6, [r6, #64]
	cmp	r10, r6
	sub	r6, r6, #64
	bne	.L8936
.L8928:
	ldr	r3, [sp, #16]
	ldr	r3, [r3, #28]
	cmp	fp, r3
	sub	r3, r3, #28
	str	r3, [sp, #16]
	bne	.L8937
.L8920:
	mov	r3, #0
.L8938:
	add	r2, r9, r3, asl #1
	ldrh	r2, [r2, #2]	@ unaligned
	cmp	r2, #0
	bne	.L8940
	cmp	r3, #0
	beq	.L8941
	add	r3, r3, #1
	mov	r3, r3, asl #1
	uxtb	r3, r3
	uxth	r2, r3
	str	r2, [sp, #12]
	mov	r2, r3
.L8939:
	strb	r3, [r9]
	ldr	r3, [sp, #12]
	b	.L9047
.L9074:
	mov	r3, r4
	b	.L8930
.L9072:
	mov	r3, r4
	b	.L8922
.L8940:
	add	r3, r3, #1
	cmp	r3, #127
	bne	.L8938
	mov	r2, #0
	mov	r3, r2
	b	.L8939
.L9287:
	mov	r4, r5
	mov	r7, r10
	ldr	r8, [sp, #20]
	ldr	r3, [r4, #12]
	mov	r10, r0
	ldr	r5, [sp, #16]
	ldr	r6, [r3, #36]!
	cmp	r6, r3
	sub	r6, r6, #64
	movne	r9, #0
	beq	.L9008
.L9007:
	ldr	r3, [r6, #40]
	mov	r0, r6
	cmp	r3, #0
	beq	.L9006
	blx	r3
.L9006:
	str	r9, [r6, #72]
	ldr	r3, [r4, #12]
	ldr	r6, [r6, #64]
	add	r3, r3, #36
	cmp	r6, r3
	sub	r6, r6, #64
	bne	.L9007
.L9008:
	mov	r3, #0
	str	r3, [r4, #12]
	str	r3, [r4, #56]
	b	.L8981
.L9095:
	mov	r3, r9
	b	.L9028
.L8875:
	mov	r2, #16
	strb	r3, [r4, #20]
	strb	r2, [r4, #19]
	b	.L8876
.L9242:
	ldr	r1, [r4, #4]
	mov	r3, #9
	ldr	r9, [r1]
	strb	r2, [r9, #1]
	add	fp, r9, r3
	strb	r3, [r9]
	ldrb	r3, [r6, #44]	@ zero_extendqisi2
	strb	r3, [r9, #4]
	ldrb	r3, [r6, #20]	@ zero_extendqisi2
	strb	r3, [r9, #5]
	ldrb	r3, [r6, #21]	@ zero_extendqisi2
	strb	r3, [r9, #6]
	ldrb	r3, [r6, #22]	@ zero_extendqisi2
	mvn	r3, r3, asl #25
	mvn	r3, r3, lsr #25
	strb	r3, [r9, #7]
	ldrb	r3, [r6, #23]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L8898
	ldr	r2, [r6, #24]
	mov	r3, #500
	ldr	r2, [r2, #64]
	sdiv	r3, r3, r2
	uxtb	r3, r3
.L8898:
	strb	r3, [r9, #8]
	ldr	r2, [r6, #8]
	cmp	r2, #0
	beq	.L9068
	mov	r0, fp
	movw	r1, #4087
	str	ip, [sp, #12]
	bl	usb_descriptor_fillbuf(PLT)
	subs	r10, r0, #0
	blt	.L9127
	ldr	ip, [sp, #12]
	rsb	r3, r10, #4080
	add	fp, fp, r10
	add	r3, r3, #7
.L8899:
	ldr	r4, [r6, #36]!
	cmp	r6, r4
	sub	r4, r4, #64
	beq	.L8900
	cmp	ip, #3
	mov	r10, r7
	mov	r7, r5
	mov	r5, r3
	beq	.L8906
	cmp	ip, #5
	beq	.L9195
	b	.L9198
.L9189:
	ldr	r4, [r4, #64]
	cmp	r6, r4
	sub	r4, r4, #64
	beq	.L9261
.L9195:
	ldr	ip, [r4, #16]
	mov	r0, fp
	mov	r1, r5
	subs	r2, ip, #0
	beq	.L9189
	bl	usb_descriptor_fillbuf(PLT)
	cmp	r0, #0
	rsb	r5, r0, r5
	add	fp, fp, r0
	bge	.L9189
.L9257:
	mov	r10, r0
	b	.L9127
.L9193:
	ldr	r4, [r4, #64]
	cmp	r6, r4
	sub	r4, r4, #64
	beq	.L9261
.L9198:
	ldr	ip, [r4, #8]
	mov	r0, fp
	mov	r1, r5
	subs	r2, ip, #0
	beq	.L9193
	bl	usb_descriptor_fillbuf(PLT)
	cmp	r0, #0
	rsb	r5, r0, r5
	add	fp, fp, r0
	bge	.L9193
	b	.L9257
.L8905:
	ldr	r4, [r4, #64]
	cmp	r6, r4
	sub	r4, r4, #64
	beq	.L9261
.L8906:
	ldr	ip, [r4, #12]
	mov	r0, fp
	mov	r1, r5
	subs	r2, ip, #0
	beq	.L8905
	bl	usb_descriptor_fillbuf(PLT)
	cmp	r0, #0
	rsb	r5, r0, r5
	add	fp, fp, r0
	bge	.L8905
	b	.L9257
.L9261:
	mov	r5, r7
	mov	r7, r10
.L8900:
	rsb	r10, r9, fp
	uxth	r6, r10
	cmp	r10, #0
	strh	r6, [r9, #2]	@ unaligned
	bge	.L9271
	b	.L9127
.L9068:
	movw	r3, #4087
	b	.L8899
.L9286:
	ldr	r1, .L9294+40
	mov	r2, r8
	mov	r3, r10
	ldr	r0, .L9294+44
	mov	r10, r7
	mov	r4, r5
	ldr	r2, [r2]
	mov	r6, r10
	mov	r7, r3
	ldr	r5, [sp, #16]
	mvn	r10, #21
.LPIC1789:
	add	r1, pc, r1
	ldr	r8, [sp, #20]
	add	r1, r1, #3104
.LPIC1788:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L8979
.L9080:
	mov	r1, fp
	b	.L8986
.L9070:
	mov	r3, lr
	b	.L8914
.L9290:
	ldrh	ip, [r9, #2]	@ unaligned
	b	.L8912
.L9285:
	ldr	r3, .L9294+48
.LPIC1785:
	add	r3, pc, r3
	ldr	r3, [r3, #3772]
.L8945:
	cmp	r3, #0
	beq	.L8947
	b	.L9046
.L9284:
	ldr	r3, .L9294+52
.LPIC1783:
	add	r3, pc, r3
	ldr	r3, [r3, #3768]
	cmp	r3, #0
	bne	.L9046
	ldr	r3, .L9294+56
.LPIC1784:
	add	r3, pc, r3
	ldr	r3, [r3, #88]
	ldr	r3, [r3, #4]
	b	.L8945
.L8883:
	mov	r6, #0
.L8888:
	ldrb	r2, [r9, #45]	@ zero_extendqisi2
	add	r3, r6, #1
	ldr	r9, [r9, #28]
	tst	r2, #1
	movne	r6, r3
	cmp	r4, r9
	sub	r9, r9, #28
	bne	.L8888
	b	.L8886
.L8880:
	ldr	r9, [r4, #36]!
	cmp	r4, r9
	sub	r9, r9, #28
	bne	.L9052
.L9061:
	mov	r6, #0
.L8882:
	cmp	r8, #10
	strb	r6, [r10, #8]
	mov	r3, #0
	movlt	r6, r8
	movge	r6, #10
	cmp	r8, r6
	strb	r3, [r10, #9]
	movle	r8, #0
	movgt	r8, #1
	b	.L8879
.L8881:
	cmp	r4, r9
	sub	r9, r9, #28
	beq	.L9061
.L9052:
	mov	r6, #0
.L8885:
	ldrb	r2, [r9, #45]	@ zero_extendqisi2
	add	r3, r6, #1
	ldr	r9, [r9, #28]
	tst	r2, #4
	movne	r6, r3
	cmp	r4, r9
	sub	r9, r9, #28
	bne	.L8885
	b	.L8886
.L8975:
	mov	r1, #500
	mov	r3, r1
	strh	r1, [sp, #42]	@ movhi
	b	.L8976
.L9279:
	ldr	r0, [r4]
	adds	r8, r8, #0
	mov	r2, r10
	ldr	r1, .L9294+60
	movne	r8, #1
	mov	r6, r3
	add	r0, r0, #32
.LPIC1792:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L8879
.L9289:
	ldr	r3, .L9294+64
.LPIC1782:
	add	r3, pc, r3
	ldr	r3, [r3, #88]
	ldr	r3, [r3, #8]
	cmp	r3, #0
	addeq	r3, r2, #3712
	bne	.L9046
	b	.L8945
	.fnend
	.size	composite_setup, .-composite_setup
	.align	2
	.type	android_setup, %function
android_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r0
	add	r0, r0, #32
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	dev_get_drvdata(PLT)
	ldr	r2, .L9414
	mov	r6, r0
.LPIC1796:
	add	r2, pc, r2
	ldr	r3, [r2]
	cmp	r2, r3
	sub	r9, r3, #168
	bne	.L9300
	b	.L9297
.L9404:
	ldr	r3, [r9, #168]
	cmp	r2, r3
	sub	r9, r3, #168
	beq	.L9297
.L9300:
	ldr	r3, [r3, #-160]
	cmp	r6, r3
	bne	.L9404
.L9297:
	ldr	r3, [r6, #4]
	mov	r0, #0
	mov	r10, r9
	ldr	r2, .L9414+4
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	str	r0, [r3, #4]
.LPIC1799:
	add	r2, pc, r2
	str	r2, [r3, #28]
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r2, [r9, #16]
	str	r2, [r3, #28]
	ldr	r3, [fp, #4]
	str	r6, [r3]
	ldr	r8, [r10, #156]!
	cmp	r10, r8
	sub	r8, r8, #120
	beq	.L9301
	mvn	ip, #94
.L9305:
	mov	r5, r8
	ldr	r4, [r5, #112]!
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L9302
.L9304:
	ldr	r0, [r4]
	mov	r1, r6
	mov	r2, r7
	ldr	r3, [r0, #48]
	cmp	r3, #0
	beq	.L9303
	blx	r3
	subs	ip, r0, #0
	bge	.L9302
.L9303:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L9304
.L9302:
	ldr	r8, [r8, #120]
	cmp	r10, r8
	sub	r8, r8, #120
	bne	.L9305
	ldr	r4, [r6, #12]
	adds	r3, r4, #0
	movne	r3, #1
	cmp	ip, #0
	str	r3, [sp, #8]
	blt	.L9360
.L9306:
	add	r5, r6, #60
	str	ip, [sp, #4]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldrb	r3, [r9, #56]	@ zero_extendqisi2
	mov	r1, r0
	ldr	ip, [sp, #4]
	cmp	r3, #0
	moveq	r3, #1
	streqb	r3, [r9, #56]
	beq	.L9357
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	cmp	r3, #9
	beq	.L9405
.L9358:
	mov	r0, r5
	str	ip, [sp, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	ip, [sp, #4]
	b	.L9398
.L9405:
	ldr	r3, [r6, #12]
	ldr	r4, [sp, #8]
	cmp	r3, #0
	orreq	r4, r4, #1
	cmp	r4, #0
	bne	.L9358
.L9357:
	mov	r0, r5
	str	ip, [sp, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r0, r9, #140
	bl	schedule_work(PLT)
	ldr	ip, [sp, #4]
.L9398:
	mov	r0, ip
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9301:
	ldr	r4, [r6, #12]
	adds	r3, r4, #0
	movne	r3, #1
	str	r3, [sp, #8]
.L9360:
	ldr	r3, .L9414+8
	ldrb	r1, [r7]	@ zero_extendqisi2
	ldrh	r5, [r7, #4]	@ unaligned
	ldrh	r8, [r7, #2]	@ unaligned
.LPIC1800:
	add	r3, pc, r3
	ldrb	r2, [r7, #1]	@ zero_extendqisi2
	ldr	r4, [r3, #2316]
	cmp	r1, #64
	ldrh	r3, [r7, #6]	@ unaligned
	str	r3, [sp, #4]
	beq	.L9406
	cmp	r1, #192
	cmpeq	r2, #51
	beq	.L9407
.L9355:
	mov	r0, fp
	mov	r1, r7
	bl	composite_setup(PLT)
	mov	ip, r0
	b	.L9306
.L9406:
	cmp	r2, #53
	beq	.L9408
	cmp	r2, #52
	beq	.L9409
	cmp	r5, #0
	cmpeq	r2, #58
	bne	.L9311
	ldr	r3, [sp, #4]
	cmp	r3, #0
	streq	r8, [r4, #1640]
	moveq	r8, r3
	beq	.L9309
.L9312:
	cmp	r2, #57
	bne	.L9355
	add	r10, r4, #80
	mov	r0, r10
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #1756]
	add	r3, r4, #1744
	mov	r1, r0
	add	r3, r3, #12
	cmp	r3, r5
	bne	.L9354
	b	.L9349
.L9352:
	ldr	r5, [r5]
	cmp	r3, r5
	beq	.L9349
.L9354:
	ldr	r2, [r5, #16]
	cmp	r8, r2
	bne	.L9352
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r5, #0
	beq	.L9355
	ldr	r2, [r6, #4]
	ldr	r3, .L9414+12
	ldr	r8, [sp, #4]
	str	r5, [r2, #32]
	ldr	r2, [r6, #4]
.LPIC1804:
	add	r3, pc, r3
	str	r3, [r2, #28]
	b	.L9309
.L9409:
	str	r5, [r4, #1632]
	ldr	r1, [r6]
	ldr	r2, .L9414+16
	ldr	r8, [sp, #4]
	ldr	r1, [r1, #4]
.LPIC1801:
	add	r2, pc, r2
	str	r4, [r1]
	ldr	r3, [r6, #4]
	str	r2, [r3, #28]
.L9309:
	ldr	r3, [r6, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r6, #4]
	str	r8, [r3, #4]
	ldr	r3, [r6]
	ldr	r1, [r6, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	ip, r0, #0
	bge	.L9306
	ldr	r2, .L9414+20
	ldr	r0, [r6]
	ldr	r1, .L9414+24
.LPIC1806:
	add	r2, pc, r2
	add	r2, r2, #2976
	add	r0, r0, #32
.LPIC1805:
	add	r1, pc, r1
	add	r2, r2, #4
	bl	dev_err(PLT)
	b	.L9355
.L9311:
	cmp	r2, #54
	beq	.L9410
	cmp	r2, #55
	bne	.L9330
	add	r5, r4, #80
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #1756]
	mov	r1, r0
	add	r0, r4, #1744
	add	r0, r0, #12
	cmp	r0, r2
	bne	.L9336
	b	.L9331
.L9334:
	ldr	r2, [r2]
	cmp	r0, r2
	beq	.L9331
.L9336:
	ldr	lr, [r2, #16]
	cmp	r8, lr
	bne	.L9334
	cmp	r2, #0
	beq	.L9331
.L9335:
	ldr	lr, [r2, #4]
	mov	r0, r5
	mov	ip, r4
	ldr	r5, [r2]
	str	lr, [r5, #4]
	str	r5, [lr]
	ldr	lr, [ip, #1772]!
	str	r2, [lr, #4]
	str	lr, [r2]
	str	ip, [r2, #4]
	str	r2, [r4, #1772]
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r0, r4, #1728
	add	r0, r0, #12
	bl	schedule_work(PLT)
.L9329:
	mov	r8, #0
	b	.L9309
.L9349:
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L9355
.L9408:
	mov	r2, #1
	mov	r0, #10
	mov	r8, #0
	str	r2, [r4, #1636]
	bl	msecs_to_jiffies(PLT)
	mov	r1, r0
	add	r0, r4, #1680
	add	r0, r0, #12
	bl	schedule_delayed_work(PLT)
	b	.L9309
.L9407:
	ldr	r2, [r6, #4]
	mov	r8, #2
	add	r0, r4, #93
	mov	r1, #256
	ldr	r2, [r2]
	strh	r8, [r2]	@ movhi
	bl	__memzero(PLT)
	add	r0, r4, #348
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero(PLT)
	add	r0, r4, #604
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero(PLT)
	add	r0, r4, #860
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero(PLT)
	add	r0, r4, #1104
	mov	r1, #256
	add	r0, r0, #13
	bl	__memzero(PLT)
	add	r0, r4, #1360
	mov	r1, #256
	add	r0, r0, #13
	bl	__memzero(PLT)
	mov	r2, #0
	str	r2, [r4, #1636]
	str	r2, [r4, #1640]
	b	.L9309
.L9331:
	ldr	r2, [r4, #1764]
	add	r0, r4, #1760
	add	r0, r0, #4
	cmp	r0, r2
	bne	.L9341
	b	.L9337
.L9411:
	ldr	r2, [r2]
	cmp	r0, r2
	beq	.L9337
.L9341:
	ldr	lr, [r2, #16]
	cmp	r8, lr
	bne	.L9411
	cmp	r2, #0
	bne	.L9335
.L9337:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L9355
.L9330:
	cmp	r2, #56
	bne	.L9312
	add	r2, r4, #80
	mov	r0, r2
	str	r2, [sp, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r10, [r4, #1764]
	add	r3, r4, #1760
	mov	r1, r0
	add	r3, r3, #4
	ldr	r2, [sp, #12]
	cmp	r3, r10
	bne	.L9348
	b	.L9342
.L9345:
	ldr	r10, [r10]
	cmp	r3, r10
	beq	.L9342
.L9348:
	ldr	r0, [r10, #16]
	cmp	r8, r0
	bne	.L9345
	mov	r0, r2
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r10, #0
	beq	.L9355
	ldr	r3, [r10, #28]
	cmp	r5, r3
	bne	.L9355
	ldr	r8, [sp, #4]
	ldr	r3, [r10, #24]
	add	r5, r5, r8
	cmp	r5, r3
	bgt	.L9355
	ldr	r2, [r6, #4]
	ldr	r3, .L9414+28
	str	r10, [r2, #32]
	ldr	r2, [r6, #4]
.LPIC1803:
	add	r3, pc, r3
	str	r3, [r2, #28]
	b	.L9309
.L9410:
	cmp	r5, #0
	beq	.L9355
	add	r3, r4, #80
	mov	r0, r3
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #1756]
	add	r1, r4, #1744
	mov	r10, r0
	add	r1, r1, #12
	cmp	r1, r2
	bne	.L9320
	b	.L9315
.L9318:
	ldr	r2, [r2]
	cmp	r1, r2
	beq	.L9315
.L9320:
	ldr	r0, [r2, #16]
	cmp	r8, r0
	bne	.L9318
	cmp	r2, #0
	beq	.L9315
.L9319:
	ldr	r0, [r2, #4]
	mov	r1, r4
	ldr	lr, [r2]
	str	r0, [lr, #4]
	str	lr, [r0]
	ldr	r0, [r1, #1772]!
	str	r2, [r0, #4]
	strd	r0, [r2]
	str	r2, [r4, #1772]
.L9321:
	ldr	r2, .L9414+32
.LPIC1807:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	ldr	r0, [r2, #24]
	cmp	r0, #0
	beq	.L9326
	movw	r1, #32800
	bl	kmem_cache_alloc(PLT)
	subs	r2, r0, #0
	beq	.L9327
.L9361:
	mov	r0, r5
	movw	r1, #32800
	str	r2, [sp, #12]
	bl	__kmalloc(PLT)
	ldr	r2, [sp, #12]
	cmp	r0, #0
	str	r0, [r2, #20]
	beq	.L9412
	mov	lr, r4
	str	r4, [r2, #12]
	ldr	r0, [sp, #4]
	str	r8, [r2, #16]
	mov	r1, r10
	str	r5, [r2, #24]
	ldr	ip, [lr, #1764]!
	str	r2, [ip, #4]
	stmia	r2, {ip, lr}
	str	r2, [r4, #1764]
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r0, r4, #1728
	add	r0, r0, #12
	bl	schedule_work(PLT)
	b	.L9329
.L9342:
	mov	r0, r2
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L9355
.L9315:
	ldr	r2, [r4, #1764]
	add	r1, r4, #1760
	add	r1, r1, #4
	cmp	r1, r2
	bne	.L9325
	b	.L9321
.L9413:
	ldr	r2, [r2]
	cmp	r1, r2
	beq	.L9321
.L9325:
	ldr	r0, [r2, #16]
	cmp	r8, r0
	bne	.L9413
	cmp	r2, #0
	beq	.L9321
	b	.L9319
.L9412:
	mov	r0, r2
	bl	kfree(PLT)
.L9327:
	ldr	r0, [sp, #4]
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L9355
.L9326:
	mov	r2, #16
	b	.L9361
.L9415:
	.align	2
.L9414:
	.word	.LANCHOR2-(.LPIC1796+8)
	.word	composite_setup_complete-(.LPIC1799+8)
	.word	.LANCHOR2-(.LPIC1800+8)
	.word	acc_complete_send_hid_event-(.LPIC1804+8)
	.word	acc_complete_set_string-(.LPIC1801+8)
	.word	.LANCHOR3-(.LPIC1806+8)
	.word	.LC445-(.LPIC1805+8)
	.word	acc_complete_set_hid_report_desc-(.LPIC1803+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1807+8))
	.fnend
	.size	android_setup, .-android_setup
	.align	2
	.global	usb_gadget_config_buf
	.type	usb_gadget_config_buf, %function
usb_gadget_config_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #0
	cmpne	r2, #8
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	lr, [sp, #12]
	mov	lr, r2
	str	r6, [sp, #8]
	bls	.L9419
	ldr	r5, [r0]	@ unaligned
	mov	r2, r3
	mov	r4, r1
	ldr	r3, [r0, #4]	@ unaligned
	mov	ip, r0
	sub	r1, lr, #9
	add	r0, r4, #9
	str	r5, [r4]	@ unaligned
	str	r3, [r4, #4]	@ unaligned
	ldrb	r3, [ip, #8]	@ zero_extendqisi2
	strb	r3, [r4, #8]
	bl	usb_descriptor_fillbuf(PLT)
	cmp	r0, #0
	blt	.L9418
	add	r0, r0, #9
	cmp	r0, #65536
	bge	.L9419
	ldrb	r3, [r4, #7]	@ zero_extendqisi2
	mov	r1, #9
	mov	r2, #2
	strh	r0, [r4, #2]	@ unaligned
	strb	r1, [r4]
	strb	r2, [r4, #1]
	mvn	r3, r3, asl #25
	mvn	r3, r3, lsr #25
	strb	r3, [r4, #7]
.L9418:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9419:
	mvn	r0, #21
	b	.L9418
	.fnend
	.size	usb_gadget_config_buf, .-usb_gadget_config_buf
	.align	2
	.global	usb_copy_descriptors
	.type	usb_copy_descriptors, %function
usb_copy_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0]
	cmp	r2, #0
	beq	.L9428
	mov	r3, #0
	mov	r1, r0
	mov	r0, r3
.L9424:
	ldrb	ip, [r2]	@ zero_extendqisi2
	add	r3, r3, #1
	ldr	r2, [r1, #4]!
	add	r0, r0, ip
	cmp	r2, #0
	bne	.L9424
	add	r4, r3, #1
	mov	r4, r4, asl #2
	add	r0, r4, r0
.L9423:
	mov	r1, #208
	bl	__kmalloc(PLT)
	subs	r6, r0, #0
	beq	.L9425
	ldr	r1, [r5]
	add	r3, r6, r4
	mov	r4, r6
	cmp	r1, #0
	beq	.L9426
.L9427:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, r3
	bl	memcpy(PLT)
	str	r0, [r4], #4
	ldr	r2, [r5]
	ldr	r1, [r5, #4]!
	ldrb	r2, [r2]	@ zero_extendqisi2
	cmp	r1, #0
	add	r3, r0, r2
	bne	.L9427
.L9426:
	mov	r3, #0
	str	r3, [r4]
.L9425:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9428:
	mov	r0, #4
	mov	r4, r0
	b	.L9423
	.fnend
	.size	usb_copy_descriptors, .-usb_copy_descriptors
	.align	2
	.global	usb_free_all_descriptors
	.type	usb_free_all_descriptors, %function
usb_free_all_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #8]
	bl	kfree(PLT)
	ldr	r0, [r4, #12]
	bl	kfree(PLT)
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #16]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
	.fnend
	.size	usb_free_all_descriptors, .-usb_free_all_descriptors
	.align	2
	.global	usb_assign_descriptors
	.type	usb_assign_descriptors, %function
usb_assign_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	subs	r0, r1, #0
	strd	r6, [sp, #8]
	mov	r6, r3
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r4, #20]
	ldr	r3, [ip, #24]
	ldr	r5, [r3]
	beq	.L9441
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L9445
.L9441:
	cmp	r7, #0
	beq	.L9440
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L9453
.L9440:
	cmp	r6, #0
	beq	.L9444
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bhi	.L9454
.L9444:
	mov	r0, #0
.L9442:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9454:
	mov	r0, r6
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L9444
.L9445:
	mov	r0, r4
	bl	usb_free_all_descriptors(PLT)
	mvn	r0, #11
	b	.L9442
.L9453:
	mov	r0, r7
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L9440
	b	.L9445
	.fnend
	.size	usb_assign_descriptors, .-usb_assign_descriptors
	.align	2
	.type	f_midi_unbind, %function
f_midi_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, [r1, #80]
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	mov	r3, #0
	str	r3, [r4, #88]
	cmp	r0, r3
	beq	.L9456
	bl	snd_card_free(PLT)
.L9456:
	ldr	r0, [r4, #324]
	bl	kfree(PLT)
	mov	r3, #0
	mov	r0, r4
	str	r3, [r4, #324]
	bl	usb_free_all_descriptors(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
	.fnend
	.size	f_midi_unbind, .-f_midi_unbind
	.align	2
	.type	ecm_unbind, %function
ecm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r0, r1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	usb_free_all_descriptors(PLT)
	ldr	r3, [r4, #160]
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, .L9463
	mov	r2, #0
	mov	r0, r4
.LPIC1808:
	add	r3, pc, r3
	str	r2, [r3, #804]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree(PLT)
.L9464:
	.align	2
.L9463:
	.word	.LANCHOR0-(.LPIC1808+8)
	.fnend
	.size	ecm_unbind, .-ecm_unbind
	.align	2
	.type	f_audio_unbind, %function
f_audio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r1
	mov	r4, r1
	str	lr, [sp, #4]
	bl	usb_free_all_descriptors(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
	.fnend
	.size	f_audio_unbind, .-f_audio_unbind
	.align	2
	.type	ncm_unbind, %function
ncm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r0, r1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	usb_free_all_descriptors(PLT)
	ldr	r3, [r4, #160]
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, .L9469
	mov	r2, #0
	mov	r0, r4
.LPIC1809:
	add	r3, pc, r3
	str	r2, [r3, #844]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree(PLT)
.L9470:
	.align	2
.L9469:
	.word	.LANCHOR0-(.LPIC1809+8)
	.fnend
	.size	ncm_unbind, .-ncm_unbind
	.align	2
	.type	fsg_unbind, %function
fsg_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #80]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r4, #8]
	cmp	r1, r3
	beq	.L9486
.L9473:
	add	r0, r4, #212
#APP
@ 99 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r0]
	sub	r3, r3, #1
	strex	r2, r3, [r0]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #0
	bne	.L9481
	bl	fsg_common_release(PLT)
.L9481:
	mov	r0, r5
	bl	usb_free_all_descriptors(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9486:
	mov	r3, #0
	str	r3, [r4, #12]
	ldr	r6, [r1, #80]
	add	r7, r6, #44
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #112]
	mov	r8, r0
	cmp	r3, #4
	bgt	.L9475
	ldr	r2, [r6, #168]
	mov	r1, #4
	ldr	r3, [r6, #56]
	str	r1, [r6, #112]
	cmp	r2, #0
	str	r3, [r6, #116]
	beq	.L9475
	mov	r0, #10
	mov	r1, #2
	bl	send_sig_info(PLT)
.L9475:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #8]
	cmp	r5, r3
	bne	.L9473
	ldr	r2, .L9488
	mov	r3, sp
	mov	r0, #0
	bic	r3, r3, #8128
	add	r7, r4, #16
	bic	r3, r3, #63
	add	r6, sp, #4
	ldr	r1, [r3, #12]
	add	r3, sp, #16
	str	r0, [sp, #4]
.LPIC1812:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L9479
.L9487:
	bl	schedule(PLT)
.L9479:
	mov	r0, r7
	mov	r1, r6
	mov	r2, #2
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #8]
	cmp	r5, r3
	beq	.L9487
	mov	r0, r7
	mov	r1, r6
	bl	finish_wait(PLT)
	b	.L9473
.L9489:
	.align	2
.L9488:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1812+8))
	.fnend
	.size	fsg_unbind, .-fsg_unbind
	.align	2
	.global	usb_ep_autoconfig_ss
	.type	usb_ep_autoconfig_ss, %function
usb_ep_autoconfig_ss:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	ldr	r0, .L9552
	strd	r8, [sp, #16]
	mov	r7, r1
	mov	r8, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r6, #28]
	.pad #4
	sub	sp, sp, #4
	ldrb	r4, [r1, #3]	@ zero_extendqisi2
.LPIC1813:
	add	r0, pc, r0
	mov	r1, r5
	and	r4, r4, #3
	bl	strcmp(PLT)
	cmp	r0, #0
	cmpeq	r4, #3
	sub	r9, r4, #3
	clz	r9, r9
	mov	r9, r9, lsr #5
	beq	.L9545
	ldr	r0, .L9552+4
	mov	r1, r5
.LPIC1816:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L9500
.L9507:
	mov	r5, r6
	ldr	r9, [r5, #8]!
	sub	r4, r9, #12
.L9499:
	cmp	r5, r9
	bne	.L9511
	b	.L9492
.L9512:
	ldr	r4, [r4, #12]
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L9492
.L9511:
	ldr	r3, [r4]
	cmp	r3, #0
	bne	.L9512
	mov	r0, r6
	mov	r1, r4
	mov	r2, r7
	mov	r3, r8
	bl	ep_matches.part.10(PLT)
	cmp	r0, #0
	beq	.L9512
.L9496:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r4, #28]
	str	r3, [r4, #32]
	b	.L9503
.L9549:
	ldr	r4, [r6, #8]
	mov	r9, r4
	sub	r4, r4, #12
	cmp	r5, r9
	bne	.L9495
.L9492:
	mov	r0, #0
.L9503:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9500:
	cmp	r9, #0
	bne	.L9546
	cmp	r4, #2
	bne	.L9507
	ldrsb	r3, [r7, #2]
	cmp	r3, #0
	bge	.L9507
	mov	r5, r6
	ldr	r4, [r5, #8]!
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L9492
	ldr	r10, .L9552+8
	mov	r9, r4
.LPIC1818:
	add	r10, pc, r10
	b	.L9509
.L9547:
	ldr	r9, [r9, #12]
	cmp	r5, r9
	sub	r9, r9, #12
	beq	.L9511
.L9509:
	ldr	r0, [r9, #4]
	mov	r1, r10
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L9547
.L9508:
	cmp	r9, #0
	beq	.L9511
	ldr	r3, [r9]
	cmp	r3, #0
	bne	.L9511
	mov	r0, r6
	mov	r1, r9
	mov	r2, r7
	mov	r3, r8
	bl	ep_matches.part.10(PLT)
	cmp	r0, #0
	movne	r4, r9
	bne	.L9496
.L9539:
	ldr	r9, [r6, #8]
	sub	r4, r9, #12
	b	.L9499
.L9545:
	mov	r5, r6
	ldr	r4, [r5, #8]!
	mov	r9, r4
	sub	r4, r4, #12
	cmp	r9, r5
	beq	.L9492
	ldr	fp, .L9552+12
	mov	r10, r4
.LPIC1814:
	add	fp, pc, fp
	b	.L9494
.L9548:
	ldr	r10, [r10, #12]
	cmp	r5, r10
	sub	r10, r10, #12
	beq	.L9495
.L9494:
	ldr	r0, [r10, #4]
	mov	r1, fp
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L9548
	cmp	r10, #0
	beq	.L9495
	ldr	r3, [r10]
	cmp	r3, #0
	bne	.L9495
	mov	r0, r6
	mov	r1, r10
	mov	r2, r7
	mov	r3, r8
	bl	ep_matches.part.10(PLT)
	cmp	r0, #0
	beq	.L9549
.L9515:
	mov	r4, r10
	b	.L9496
.L9546:
	mov	r5, r6
	ldr	r4, [r5, #8]!
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L9492
	ldr	r10, .L9552+16
	mov	r9, r4
.LPIC1817:
	add	r10, pc, r10
	b	.L9505
.L9550:
	ldr	r9, [r9, #12]
	cmp	r5, r9
	sub	r9, r9, #12
	beq	.L9511
.L9505:
	ldr	r0, [r9, #4]
	mov	r1, r10
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L9550
	b	.L9508
.L9495:
	ldr	fp, .L9552+20
	mov	r10, r4
.LPIC1815:
	add	fp, pc, fp
	b	.L9498
.L9551:
	ldr	r10, [r10, #12]
	cmp	r5, r10
	sub	r10, r10, #12
	beq	.L9499
.L9498:
	ldr	r0, [r10, #4]
	mov	r1, fp
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L9551
	cmp	r10, #0
	beq	.L9499
	ldr	r3, [r10]
	cmp	r3, #0
	bne	.L9499
	mov	r0, r6
	mov	r1, r10
	mov	r2, r7
	mov	r3, r8
	bl	ep_matches.part.10(PLT)
	cmp	r0, #0
	bne	.L9515
	b	.L9539
.L9553:
	.align	2
.L9552:
	.word	.LC403-(.LPIC1813+8)
	.word	.LC405-(.LPIC1816+8)
	.word	.LC465-(.LPIC1818+8)
	.word	.LC462-(.LPIC1814+8)
	.word	.LC464-(.LPIC1817+8)
	.word	.LC463-(.LPIC1815+8)
	.fnend
	.size	usb_ep_autoconfig_ss, .-usb_ep_autoconfig_ss
	.align	2
	.global	usb_ep_autoconfig
	.type	usb_ep_autoconfig, %function
usb_ep_autoconfig:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r2, #0
	b	usb_ep_autoconfig_ss(PLT)
	.fnend
	.size	usb_ep_autoconfig, .-usb_ep_autoconfig
	.align	2
	.type	__ffs_func_bind_do_descs, %function
__ffs_func_bind_do_descs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	ldr	ip, [r3, #68]
	ldr	r0, [r3, #64]
	bne	.L9572
	cmp	ip, #0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	beq	.L9558
	mov	r4, #2
	str	r2, [ip, r1, asl #2]
.L9559:
	cmp	r2, #0
	beq	.L9561
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #5
	beq	.L9573
.L9561:
	mov	r0, #0
.L9557:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9573:
	ldrb	r6, [r2, #2]	@ zero_extendqisi2
	ldr	r8, [r3, #12]
	and	r6, r6, #15
	sub	r1, r6, #1
	mov	r5, r1, asl #5
	sub	r5, r5, r1, asl #2
	add	r7, r8, r5
	add	r4, r7, r4, asl #2
	ldr	r1, [r4, #8]
	cmp	r1, #0
	bne	.L9563
	str	r2, [r4, #8]
	ldr	r4, [r8, r5]
	cmp	r4, #0
	beq	.L9562
	ldr	r3, [r7, #8]
	ldrh	r0, [r2, #4]	@ unaligned
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	cmp	r0, #0
	strb	r3, [r2, #2]
	bne	.L9561
	ldr	r3, [r7, #8]
	ldrh	r3, [r3, #4]	@ unaligned
	strh	r3, [r2, #4]	@ unaligned
	b	.L9557
.L9572:
	mov	r0, #0
	bx	lr
.L9558:
	cmp	r0, #0
	beq	.L9560
	str	r2, [r0, r1, asl #2]
	mov	r4, #1
	b	.L9559
.L9563:
	mvn	r0, #21
	b	.L9557
.L9560:
	ldr	ip, [r3, #60]
	mov	r4, r0
	str	r2, [ip, r1, asl #2]
	b	.L9559
.L9562:
	ldr	r0, [r3, #4]
	mov	r1, r2
	mov	r9, r2
	mov	r10, r3
	bl	usb_ep_autoconfig(PLT)
	subs	fp, r0, #0
	beq	.L9564
	ldr	r3, [r10, #12]
	mov	r1, #208
	ldr	r2, [fp, #8]
	add	r3, r3, r5
	str	r3, [fp]
	ldr	r3, [r2, #8]
	blx	r3
	subs	r3, r0, #0
	beq	.L9565
	str	fp, [r8, r5]
	mov	r0, r4
	str	r3, [r7, #4]
	ldrb	r3, [r9, #2]	@ zero_extendqisi2
	and	r3, r3, #15
	add	r10, r10, r3
	strb	r6, [r10, #16]
	b	.L9557
.L9564:
	movw	r0, #65012
	movt	r0, 65535
	b	.L9557
.L9565:
	mvn	r0, #11
	b	.L9557
	.fnend
	.size	__ffs_func_bind_do_descs, .-__ffs_func_bind_do_descs
	.align	2
	.type	ffs_do_descs.constprop.143, %function
ffs_do_descs.constprop.143:
	.fnstart
	@ args = 4, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	ip, r2
	strd	r8, [sp, #16]
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r8, [sp, #56]
	beq	.L9594
	mov	r6, #0
	mov	r4, r1
	mov	r5, r2
	mov	r9, r6
.L9592:
	ldr	r2, [r8, #68]
	ldr	r1, [r8, #64]
	cmp	r2, #0
	beq	.L9576
	mov	r1, #2
	str	r4, [r2, r6]
.L9577:
	cmp	r4, #0
	beq	.L9579
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	cmp	r2, #5
	beq	.L9615
.L9583:
	cmp	r5, #1
	bls	.L9595
	ldrb	r1, [r4]	@ zero_extendqisi2
	cmp	r5, r1
	bcc	.L9595
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	sub	r2, r2, #4
	cmp	r2, #44
	addls	pc, pc, r2, asl #2
	b	.L9595
.L9586:
	b	.L9585
	b	.L9587
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9588
	b	.L9595
	b	.L9589
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9595
	b	.L9590
	.p2align 1
.L9585:
	cmp	r1, #9
	beq	.L9591
.L9595:
	mvn	r0, #21
.L9611:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9588:
	cmp	r1, #5
	bne	.L9595
.L9591:
	add	r9, r9, #1
	rsb	r5, r1, r5
	cmp	r9, r3
	add	r4, r4, r1
	add	r6, r6, #4
	bne	.L9592
.L9575:
	mov	r0, #0
	mov	r1, r3
	str	ip, [sp]
	mov	r3, r8
	mov	r2, r0
	bl	__ffs_func_bind_do_descs(PLT)
	cmp	r0, #0
	ldr	ip, [sp]
	blt	.L9611
.L9579:
	rsb	r0, r5, ip
	b	.L9611
.L9590:
	cmp	r1, #6
	beq	.L9591
	b	.L9595
.L9587:
	sub	r2, r1, #7
	tst	r2, #253
	bne	.L9595
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
	tst	r2, #15
	bne	.L9591
	b	.L9595
.L9589:
	cmp	r1, #8
	beq	.L9591
	b	.L9595
.L9615:
	ldrb	r10, [r4, #2]	@ zero_extendqisi2
	ldr	r2, [r8, #12]
	and	r10, r10, #15
	sub	r0, r10, #1
	mov	r7, r0, asl #5
	sub	r7, r7, r0, asl #2
	add	fp, r2, r7
	add	r1, fp, r1, asl #2
	ldr	r0, [r1, #8]
	cmp	r0, #0
	bne	.L9595
	str	r4, [r1, #8]
	ldr	r1, [r2, r7]
	cmp	r1, #0
	beq	.L9582
	ldr	r2, [fp, #8]
	ldrh	r1, [r4, #4]	@ unaligned
	ldrb	r2, [r2, #2]	@ zero_extendqisi2
	cmp	r1, #0
	strb	r2, [r4, #2]
	bne	.L9583
	ldr	r2, [fp, #8]
	ldrh	r2, [r2, #4]	@ unaligned
	strh	r2, [r4, #4]	@ unaligned
	b	.L9583
.L9576:
	cmp	r1, #0
	ldreq	r2, [r8, #60]
	strne	r4, [r1, r6]
	movne	r1, #1
	streq	r4, [r2, r6]
	b	.L9577
.L9582:
	ldr	r0, [r8, #4]
	mov	r1, r4
	stmia	sp, {r2, r3, ip}
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L9596
	ldr	lr, [r8, #12]
	mov	r1, #208
	str	r3, [sp, #12]
	ldr	r2, [r3, #8]
	add	lr, lr, r7
	str	lr, [r3]
	ldr	r2, [r2, #8]
	blx	r2
	cmp	r0, #0
	beq	.L9597
	ldr	r3, [sp, #12]
	ldr	r2, [sp]
	str	r3, [r2, r7]
	ldmib	sp, {r3, ip}
	str	r0, [fp, #4]
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
	and	r2, r2, #15
	add	r2, r8, r2
	strb	r10, [r2, #16]
	b	.L9583
.L9596:
	movw	r0, #65012
	movt	r0, 65535
	b	.L9611
.L9597:
	mvn	r0, #11
	b	.L9611
.L9594:
	mov	r5, r2
	b	.L9575
	.fnend
	.size	ffs_do_descs.constprop.143, .-ffs_do_descs.constprop.143
	.align	2
	.global	usb_ep_autoconfig_reset
	.type	usb_ep_autoconfig_reset, %function
usb_ep_autoconfig_reset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #8]!
	cmp	r0, r3
	sub	r3, r3, #12
	movne	r1, #0
	beq	.L9619
.L9618:
	ldr	r2, [r3, #12]
	str	r1, [r3]
	cmp	r0, r2
	sub	r3, r2, #12
	bne	.L9618
.L9619:
	ldr	r3, .L9622
	mov	r2, #0
.LPIC1819:
	add	r3, pc, r3
	str	r2, [r3, #-484]
	bx	lr
.L9623:
	.align	2
.L9622:
	.word	.LANCHOR4-(.LPIC1819+8)
	.fnend
	.size	usb_ep_autoconfig_reset, .-usb_ep_autoconfig_reset
	.align	2
	.global	config_ep_by_speed
	.type	config_ep_by_speed, %function
config_ep_by_speed:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r2
	str	r6, [sp, #8]
	add	r0, r0, #32
	mov	r6, r1
	str	lr, [sp, #12]
	bl	dev_get_drvdata(PLT)
	cmp	r5, #0
	cmpne	r6, #0
	moveq	r3, #1
	movne	r3, #0
	cmp	r4, #0
	orreq	r3, r3, #1
	cmp	r3, #0
	bne	.L9636
	ldr	r3, [r4, #16]
	cmp	r3, #3
	beq	.L9628
	cmp	r3, #5
	beq	.L9674
.L9627:
	ldr	r1, [r6, #8]
	mov	ip, #0
.L9631:
	ldr	r3, [r1]
	cmp	r3, #0
	bne	.L9635
	b	.L9649
.L9675:
	ldr	r3, [r1, #4]!
	cmp	r3, #0
	beq	.L9649
.L9635:
	ldrb	r3, [r3, #1]	@ zero_extendqisi2
	cmp	r3, #5
	bne	.L9675
.L9640:
	cmp	r1, #0
	beq	.L9636
	ldr	r3, [r1]
	ldrb	r2, [r5, #25]	@ zero_extendqisi2
	ldrb	lr, [r3, #2]	@ zero_extendqisi2
	cmp	lr, r2
	beq	.L9676
	ldr	r3, [r1, #4]
	add	r1, r1, #4
	cmp	r3, #0
	beq	.L9636
.L9641:
	ldrb	r3, [r3, #1]	@ zero_extendqisi2
	cmp	r3, #5
	beq	.L9640
	ldr	r3, [r1, #4]!
	cmp	r3, #0
	bne	.L9641
.L9636:
	mvn	r0, #4
.L9626:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9649:
	mov	r1, r3
	b	.L9640
.L9674:
	ldr	r3, [r4, #20]
	cmp	r3, #4
	bhi	.L9677
.L9630:
	cmp	r3, #2
	bls	.L9627
	ldr	r1, [r6, #12]
	mov	ip, #0
	b	.L9631
.L9676:
	ldrb	r2, [r5, #24]	@ zero_extendqisi2
	mov	lr, #0
	cmp	ip, lr
	ldrh	ip, [r3, #4]	@ unaligned
	str	r3, [r5, #28]
	str	lr, [r5, #32]
	and	r2, r2, #131
	bfi	r2, lr, #0, #2
	strh	ip, [r5, #20]	@ movhi
	strb	r2, [r5, #24]
	beq	.L9644
	ldr	r2, [r1, #4]
	cmp	r2, #0
	beq	.L9636
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #48
	bne	.L9636
	str	r2, [r5, #32]
	ldr	r1, [r4, #16]
	cmp	r1, #5
	beq	.L9678
.L9644:
	mov	r0, #0
	b	.L9626
.L9628:
	ldr	r3, [r4, #20]
	b	.L9630
.L9677:
	ldr	r1, [r6, #16]
	mov	ip, #1
	b	.L9631
.L9678:
	ldrb	r3, [r3, #3]	@ zero_extendqisi2
	and	r3, r3, #3
	cmp	r3, #1
	beq	.L9646
	bcc	.L9679
.L9647:
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	mov	r0, #0
	ldrb	r2, [r5, #24]	@ zero_extendqisi2
	add	r3, r3, #1
	bfi	r2, r3, #2, #5
	strb	r2, [r5, #24]
	b	.L9626
.L9646:
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	ldrb	r1, [r2, #3]	@ zero_extendqisi2
	bfi	r3, r1, #0, #2
	strb	r3, [r5, #24]
	b	.L9647
.L9679:
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9648
	ldr	r0, [r0]
	ldr	r1, .L9680
	add	r0, r0, #32
.LPIC1820:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L9648:
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	mov	r2, #1
	mov	r0, #0
	bfi	r3, r2, #2, #5
	strb	r3, [r5, #24]
	b	.L9626
.L9681:
	.align	2
.L9680:
	.word	.LC466-(.LPIC1820+8)
	.fnend
	.size	config_ep_by_speed, .-config_ep_by_speed
	.align	2
	.type	diag_function_set_alt, %function
diag_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #80]
	ldr	r5, [r3, #24]
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L9685
	ldr	r0, [r5]
	mov	r1, r4
	ldr	r2, [r4, #76]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L9685
	ldr	r3, [r4, #116]
	cmp	r3, #0
	beq	.L9688
	str	r4, [r3, #20]
	ldr	r3, [r4, #80]
	str	r4, [r3]
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L9693
	ldr	r3, [r4, #76]
	str	r4, [r3]
	ldr	r0, [r4, #76]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L9694
	add	r6, r4, #100
	str	r5, [r4, #120]
	str	r5, [r4, #124]
	mov	r0, r6
	str	r5, [r4, #128]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, #1
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r2, [r4, #116]
	ldr	r3, [r2, #12]
	cmp	r3, #0
	beq	.L9684
	ldr	r0, [r2, #16]
	mov	r1, r5
	mov	r2, r5
	blx	r3
.L9684:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9694:
	ldr	r0, [r4, #108]
	mov	r3, r5
	ldr	r2, [r4, #76]
	ldr	r1, .L9695
	ldr	r0, [r0]
	ldr	r2, [r2, #4]
.LPIC1822:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9684
.L9693:
	ldr	r0, [r4, #108]
	mov	r3, r5
	ldr	r2, [r4, #80]
	ldr	r1, .L9695+4
	ldr	r0, [r0]
	ldr	r2, [r2, #4]
.LPIC1821:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L9684
.L9685:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #76]
	str	r3, [r2, #28]
	b	.L9684
.L9688:
	mvn	r5, #18
	b	.L9684
.L9696:
	.align	2
.L9695:
	.word	.LC467-(.LPIC1822+8)
	.word	.LC467-(.LPIC1821+8)
	.fnend
	.size	diag_function_set_alt, .-diag_function_set_alt
	.align	2
	.type	rmnet_smd_set_alt, %function
rmnet_smd_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #76]
	ldr	r2, [r0, #84]
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9708
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	ldr	r0, [r5]
	bne	.L9709
	mov	r1, r4
	ldr	r2, [r4, #80]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9710
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	ldr	r0, [r5]
	bne	.L9711
	mov	r1, r4
	ldr	r2, [r4, #88]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9712
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9713
	ldr	r0, [r4, #380]
	add	r1, r4, #384
	bl	queue_work(PLT)
	b	.L9699
.L9709:
	ldr	r2, [r4, #84]
	mov	r3, r6
	add	r0, r0, #32
	ldr	r1, .L9714
	ldr	r2, [r2, #4]
.LPIC1824:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L9699:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9708:
	ldr	r2, [r4, #84]
	mov	r0, #0
	mov	r6, r3
	ldr	r1, .L9714+4
	str	r0, [r2, #28]
	ldr	r0, [r5]
	ldr	r2, [r4, #84]
.LPIC1823:
	add	r1, pc, r1
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err(PLT)
	b	.L9699
.L9711:
	ldr	r1, .L9714+8
	mov	r3, r6
	ldr	r2, [r4, #80]
.LPIC1826:
	add	r1, pc, r1
.L9706:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9699
.L9710:
	ldr	r2, [r4, #80]
	ldr	r1, .L9714+12
	str	r6, [r2, #28]
	mov	r6, r3
	ldr	r0, [r5]
.LPIC1825:
	add	r1, pc, r1
	ldr	r2, [r4, #80]
	b	.L9706
.L9712:
	ldr	r2, [r4, #88]
	ldr	r1, .L9714+16
	str	r6, [r2, #28]
	ldr	r0, [r5]
	mov	r6, r3
	ldr	r2, [r4, #88]
.LPIC1827:
	add	r1, pc, r1
.L9707:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9699
.L9713:
	ldr	r1, .L9714+20
	mov	r3, r6
	ldr	r0, [r5]
	ldr	r2, [r4, #88]
.LPIC1828:
	add	r1, pc, r1
	b	.L9707
.L9715:
	.align	2
.L9714:
	.word	.LC467-(.LPIC1824+8)
	.word	.LC468-(.LPIC1823+8)
	.word	.LC467-(.LPIC1826+8)
	.word	.LC468-(.LPIC1825+8)
	.word	.LC468-(.LPIC1827+8)
	.word	.LC467-(.LPIC1828+8)
	.fnend
	.size	rmnet_smd_set_alt, .-rmnet_smd_set_alt
	.align	2
	.type	rmnet_sdio_set_alt, %function
rmnet_sdio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r1, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #84]
	ldr	r5, [r0, #76]
	str	r0, [r3]
	ldr	r2, [r4, #84]
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9739
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9740
	ldr	r3, [r4, #80]
	mov	r1, r4
	str	r4, [r3]
	ldr	r0, [r5]
	ldr	r2, [r4, #80]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9741
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	ldr	r0, [r5]
	bne	.L9742
	mov	r1, r4
	ldr	r2, [r4, #88]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9743
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9744
	ldr	r6, [r4, #88]
	mov	r1, #32
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L9724
	ldr	r3, .L9747
	mov	r2, #8
	str	r2, [r5, #4]
.LPIC1839:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L9725
	mov	r1, #32
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r5]
	beq	.L9745
.L9726:
	cmn	r5, #4096
	str	r5, [r4, #92]
	bhi	.L9746
	ldr	r3, .L9747+4
	mov	r1, #8
	mov	r2, #1
	mov	r0, r4
.LPIC1838:
	add	r3, pc, r3
	str	r3, [r5, #28]
	ldr	r3, [r4, #92]
	str	r4, [r3, #32]
	ldr	r3, [r4, #92]
	str	r1, [r3, #4]
	str	r2, [r4, #184]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rmnet_sdio_start_io(PLT)
.L9740:
	ldr	r0, [r5]
	mov	r3, r6
	ldr	r2, [r4, #84]
	ldr	r1, .L9747+8
	add	r0, r0, #32
	ldr	r2, [r2, #4]
.LPIC1830:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L9733:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9739:
	ldr	r2, [r4, #84]
	mov	r0, #0
	mov	r6, r3
	ldr	r1, .L9747+12
	str	r0, [r2, #28]
	ldr	r0, [r5]
	ldr	r2, [r4, #84]
.LPIC1829:
	add	r1, pc, r1
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err(PLT)
	b	.L9733
.L9742:
	ldr	r1, .L9747+16
	mov	r3, r6
	ldr	r2, [r4, #80]
.LPIC1832:
	add	r1, pc, r1
.L9737:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9733
.L9741:
	ldr	r2, [r4, #80]
	ldr	r1, .L9747+20
	str	r6, [r2, #28]
	mov	r6, r3
	ldr	r0, [r5]
.LPIC1831:
	add	r1, pc, r1
	ldr	r2, [r4, #80]
	b	.L9737
.L9743:
	ldr	r2, [r4, #88]
	ldr	r1, .L9747+24
	str	r6, [r2, #28]
	ldr	r0, [r5]
	mov	r6, r3
	ldr	r2, [r4, #88]
.LPIC1833:
	add	r1, pc, r1
.L9736:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9733
.L9745:
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9724:
	mvn	r3, #11
	mov	r6, r3
	str	r3, [r4, #92]
.L9729:
	ldr	r1, .L9747+28
	ldr	r0, .L9747+32
.LPIC1837:
	add	r1, pc, r1
	add	r1, r1, #3136
.LPIC1836:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9733
.L9744:
	ldr	r1, .L9747+36
	mov	r3, r6
	ldr	r0, [r5]
	ldr	r2, [r4, #88]
.LPIC1834:
	add	r1, pc, r1
	b	.L9736
.L9725:
	mov	r3, #16
	str	r3, [r5]
	b	.L9726
.L9746:
	mov	r6, r5
	b	.L9729
.L9748:
	.align	2
.L9747:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1839+8))
	.word	rmnet_sdio_notify_complete-(.LPIC1838+8)
	.word	.LC467-(.LPIC1830+8)
	.word	.LC469-(.LPIC1829+8)
	.word	.LC467-(.LPIC1832+8)
	.word	.LC469-(.LPIC1831+8)
	.word	.LC469-(.LPIC1833+8)
	.word	.LANCHOR3-(.LPIC1837+8)
	.word	.LC470-(.LPIC1836+8)
	.word	.LC467-(.LPIC1834+8)
	.fnend
	.size	rmnet_sdio_set_alt, .-rmnet_sdio_set_alt
	.align	2
	.type	audio_set_alt, %function
audio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L9760
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r0, [r0, #20]
	.pad #12
	sub	sp, sp, #12
.LPIC1840:
	add	r3, pc, r3
	ldrb	r3, [r3, #634]	@ zero_extendqisi2
	ldr	r6, [r0, #24]
	cmp	r3, r1
	beq	.L9758
.L9755:
	mov	r5, #0
.L9750:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L9758:
	cmp	r2, #0
	beq	.L9751
	ldrb	r7, [r4, #144]	@ zero_extendqisi2
	cmp	r7, #0
	bne	.L9755
	ldr	r0, [r6]
	mov	r1, r4
	ldr	r2, [r4, #96]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9759
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	moveq	r3, #1
	streqb	r3, [r4, #144]
	beq	.L9750
	ldr	r0, [r6]
	mov	r3, r5
	ldr	r2, [r4, #96]
	ldr	r1, .L9760+4
	add	r0, r0, #32
	ldr	r2, [r2, #4]
.LPIC1842:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9750
.L9751:
	ldrb	r5, [r4, #144]	@ zero_extendqisi2
	cmp	r5, #0
	beq	.L9750
	ldr	r0, [r4, #96]
	mov	r5, r2
	str	r2, [sp, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [sp, #4]
	strb	r2, [r4, #144]
	b	.L9750
.L9759:
	ldr	r2, [r4, #96]
	mov	r5, r3
	ldr	r1, .L9760+8
	str	r7, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r4, #96]
.LPIC1841:
	add	r1, pc, r1
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err(PLT)
	b	.L9750
.L9761:
	.align	2
.L9760:
	.word	.LANCHOR1-(.LPIC1840+8)
	.word	.LC472-(.LPIC1842+8)
	.word	.LC471-(.LPIC1841+8)
	.fnend
	.size	audio_set_alt, .-audio_set_alt
	.align	2
	.type	eth_stop, %function
eth_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r1, [r0, #576]
	cmp	r1, #0
	beq	.L9779
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit(PLT)
.L9764:
	add	r6, r5, #1216
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #1220]
	mov	r7, r0
	cmp	r4, #0
	beq	.L9766
	ldr	r3, [r4, #132]
	cmp	r3, #0
	beq	.L9767
	mov	r0, r4
	blx	r3
.L9767:
	ldr	r3, [r4, #80]
	ldr	r1, [r4, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r9, [r3, #28]
	ldr	r8, [r1, #28]
	ldr	r3, [r2, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #116]
	tst	r3, #4
	beq	.L9780
.L9766:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
.L9770:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9780:
	ldr	r0, [r5, #1228]
	mov	r1, r4
	ldr	r2, [r4, #80]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L9771
	ldr	r0, [r5, #1228]
	mov	r1, r4
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L9771
	ldr	r3, [r4, #80]
	str	r9, [r3, #28]
	ldr	r3, [r4, #84]
	str	r8, [r3, #28]
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	b	.L9766
.L9779:
	ldr	r0, .L9781
	movw	r1, #1847
.LPIC1843:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r0, .L9781+4
.LPIC1844:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9764
.L9771:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L9770
.L9782:
	.align	2
.L9781:
	.word	.LC82-(.LPIC1843+8)
	.word	.LC83-(.LPIC1844+8)
	.fnend
	.size	eth_stop, .-eth_stop
	.align	2
	.type	charger_set_alt, %function
charger_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0, #-4]
	ldr	r3, [r0, #20]
	cmp	r2, #0
	ldr	r6, [r3, #24]
	beq	.L9788
	ldr	r3, [r2]
	mov	r4, r0
	cmp	r3, #0
	moveq	r3, r6
	beq	.L9785
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #20]
	ldr	r2, [r4, #-4]
	ldr	r3, [r3, #24]
.L9785:
	ldr	r0, [r3]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	subs	r5, r0, #0
	bne	.L9791
	ldr	r0, [r4, #-4]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	blt	.L9792
	ldr	r3, [r4, #-4]!
	str	r4, [r3]
.L9784:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9791:
	ldr	r3, [r4, #-4]
	mov	r2, #0
	ldr	r1, .L9793
	str	r2, [r3, #28]
	ldr	r0, [r6]
.LPIC1845:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L9784
.L9788:
	mov	r5, r2
	b	.L9784
.L9792:
	ldr	r0, [r6]
	ldr	r1, .L9793+4
	add	r0, r0, #32
.LPIC1846:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9784
.L9794:
	.align	2
.L9793:
	.word	.LC473-(.LPIC1845+8)
	.word	.LC474-(.LPIC1846+8)
	.fnend
	.size	charger_set_alt, .-charger_set_alt
	.align	2
	.type	acc_function_set_alt, %function
acc_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #84]
	ldr	r5, [r3, #24]
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9803
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	ldr	r0, [r5]
	bne	.L9804
	mov	r1, r4
	ldr	r2, [r4, #88]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9805
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9806
	ldrb	ip, [r4, #92]	@ zero_extendqisi2
	mov	r2, #1
	add	r0, r4, #1648
	mov	r1, #3
	add	r0, r0, #8
	mov	r3, r6
	orr	ip, ip, r2
	strb	ip, [r4, #92]
	bl	__wake_up(PLT)
	b	.L9797
.L9804:
	ldr	r2, [r4, #84]
	mov	r3, r6
	add	r0, r0, #32
	ldr	r1, .L9807
	ldr	r2, [r2, #4]
.LPIC1848:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L9797:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9803:
	ldr	r2, [r4, #84]
	mov	r0, #0
	mov	r6, r3
	ldr	r1, .L9807+4
	str	r0, [r2, #28]
	ldr	r0, [r5]
	ldr	r2, [r4, #84]
.LPIC1847:
	add	r1, pc, r1
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err(PLT)
	b	.L9797
.L9806:
	ldr	r1, .L9807+8
	mov	r3, r6
	ldr	r0, [r5]
	ldr	r2, [r4, #88]
.LPIC1850:
	add	r1, pc, r1
.L9802:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9797
.L9805:
	ldr	r2, [r4, #88]
	ldr	r1, .L9807+12
	str	r6, [r2, #28]
	mov	r6, r3
	ldr	r0, [r5]
.LPIC1849:
	add	r1, pc, r1
	ldr	r2, [r4, #88]
	b	.L9802
.L9808:
	.align	2
.L9807:
	.word	.LC475-(.LPIC1848+8)
	.word	.LC469-(.LPIC1847+8)
	.word	.LC475-(.LPIC1850+8)
	.word	.LC469-(.LPIC1849+8)
	.fnend
	.size	acc_function_set_alt, .-acc_function_set_alt
	.align	2
	.type	fsg_set_alt, %function
fsg_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #80]
	ldr	r2, [r0, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	beq	.L9820
.L9810:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9820:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	cmp	r0, #0
	bne	.L9810
	ldr	r3, [r4, #92]
	mov	r1, r4
	str	r6, [r3]
	ldrb	r3, [r4, #86]	@ zero_extendqisi2
	ldr	r2, [r4, #96]
	orr	r3, r3, #1
	strb	r3, [r4, #86]
	ldr	r0, [r6]
	bl	config_ep_by_speed(PLT)
	subs	r5, r0, #0
	bne	.L9811
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	beq	.L9821
.L9811:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #86]	@ zero_extendqisi2
	mov	r0, r5
	bfc	r3, #0, #1
	strb	r3, [r4, #86]
	b	.L9810
.L9821:
	ldr	r3, [r4, #96]
	add	r1, r4, #88
	str	r6, [r3]
	ldrb	r3, [r4, #86]	@ zero_extendqisi2
	ldr	r2, [r4, #96]
	orr	r3, r3, #2
	strb	r3, [r4, #86]
	ldr	r3, [r2, #28]
	ldrh	r3, [r3, #4]	@ unaligned
	str	r3, [r6, #108]
	bl	_clear_bit(PLT)
	ldr	r2, [r4, #80]
	ldr	r3, .L9822
	str	r4, [r2, #12]
	ldr	r4, [r4, #80]
.LPIC1851:
	add	r3, pc, r3
	str	r5, [r3, #3704]
	str	r5, [r3, #3700]
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #112]
	mov	r6, r0
	cmp	r3, #4
	bgt	.L9813
	ldr	r2, [r4, #168]
	mov	r1, #4
	ldr	r3, [r4, #56]
	str	r1, [r4, #112]
	cmp	r2, #0
	str	r3, [r4, #116]
	beq	.L9813
	mov	r0, #10
	mov	r1, #2
	bl	send_sig_info(PLT)
.L9813:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	movw	r0, #32767
	b	.L9810
.L9823:
	.align	2
.L9822:
	.word	.LANCHOR4-(.LPIC1851+8)
	.fnend
	.size	fsg_set_alt, .-fsg_set_alt
	.align	2
	.type	mtp_function_set_alt, %function
mtp_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #84]
	ldr	r5, [r3, #24]
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9833
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	ldr	r0, [r5]
	bne	.L9834
	mov	r1, r4
	ldr	r2, [r4, #88]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9835
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9836
	ldr	r3, .L9838
	ldr	r2, [r4, #92]
.LPIC1857:
	add	r3, pc, r3
	add	r3, r3, #644
	str	r3, [r2, #28]
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9837
	mov	r3, #1
	add	r0, r4, #124
	mov	r2, r3
	mov	r1, #3
	str	r3, [r4, #96]
	mov	r3, r6
	bl	__wake_up(PLT)
	b	.L9826
.L9834:
	ldr	r2, [r4, #84]
	mov	r3, r6
	add	r0, r0, #32
	ldr	r1, .L9838+4
	ldr	r2, [r2, #4]
.LPIC1854:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L9826:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9833:
	ldr	r2, [r4, #84]
	mov	r0, #0
	mov	r6, r3
	ldr	r1, .L9838+8
	str	r0, [r2, #28]
	ldr	r0, [r5]
	ldr	r2, [r4, #84]
.LPIC1853:
	add	r1, pc, r1
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err(PLT)
	b	.L9826
.L9836:
	ldr	r1, .L9838+12
	mov	r3, r6
	ldr	r0, [r5]
	ldr	r2, [r4, #88]
.LPIC1856:
	add	r1, pc, r1
.L9832:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9826
.L9835:
	ldr	r2, [r4, #88]
	ldr	r1, .L9838+16
	str	r6, [r2, #28]
	mov	r6, r3
	ldr	r0, [r5]
.LPIC1855:
	add	r1, pc, r1
	ldr	r2, [r4, #88]
	b	.L9832
.L9837:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9826
.L9839:
	.align	2
.L9838:
	.word	.LANCHOR1-(.LPIC1857+8)
	.word	.LC475-(.LPIC1854+8)
	.word	.LC469-(.LPIC1853+8)
	.word	.LC475-(.LPIC1856+8)
	.word	.LC469-(.LPIC1855+8)
	.fnend
	.size	mtp_function_set_alt, .-mtp_function_set_alt
	.align	2
	.type	ccid_function_set_alt, %function
ccid_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r7, [r0, #92]
	.pad #12
	sub	sp, sp, #12
	ldr	r8, [r0, #76]
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L9841
	ldr	r5, .L9907
	mov	r3, #4
	str	r3, [r6, #4]
.LPIC1880:
	ldr	r5, [pc, r5]		@ tls_load_dot_plus_eight
	ldr	r0, [r5, #24]
	cmp	r0, #0
	beq	.L9842
	mov	r1, #32
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L9896
.L9843:
	cmn	r6, #4096
	str	r6, [r4, #104]
	bhi	.L9844
	ldr	r3, .L9907+4
	mov	r1, #32
.LPIC1861:
	add	r3, pc, r3
	str	r3, [r6, #28]
	ldr	r3, [r4, #104]
	str	r4, [r3, #32]
	ldr	r6, [r4, #100]
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	beq	.L9847
	movw	r3, #522
	str	r3, [r7, #4]
	ldr	r0, [r5, #40]
	cmp	r0, #0
	beq	.L9848
	mov	r1, #32
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r7]
	beq	.L9897
.L9849:
	cmn	r7, #4096
	bhi	.L9898
	ldr	r3, .L9907+8
	mov	r6, #4
	movw	r9, #523
	ldr	r2, .L9907+12
	str	r4, [r7, #32]
.LPIC1864:
	add	r3, pc, r3
.LPIC1867:
	add	r2, pc, r2
	str	r3, [r7, #28]
	str	r2, [sp, #4]
	str	r7, [r4, #176]
.L9859:
	ldr	r7, [r4, #96]
	mov	r1, #32
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	fp, r0, #0
	mov	r1, #32
	beq	.L9853
	str	r9, [fp, #4]
	ldr	r2, [r5, #40]
	subs	r0, r2, #0
	beq	.L9854
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [fp]
	beq	.L9899
.L9855:
	cmn	fp, #4096
	add	r7, r4, #84
	add	r10, r4, #184
	mov	r0, r7
	bhi	.L9900
	ldr	r3, [sp, #4]
	str	r4, [fp, #32]
	str	r3, [fp, #28]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #188]
	add	ip, fp, #36
	mov	r1, r0
	mov	r0, r7
	str	ip, [r4, #188]
	str	r10, [fp, #36]
	str	r2, [fp, #40]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore(PLT)
	subs	r6, r6, #1
	bne	.L9859
	ldr	r0, [r8]
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed(PLT)
	subs	r9, r0, #0
	bne	.L9901
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r9, r0, #0
	bne	.L9902
	ldr	r3, [r4, #92]
	mov	r1, r4
	str	r4, [r3]
	ldr	r0, [r8]
	ldr	r2, [r4, #96]
	bl	config_ep_by_speed(PLT)
	subs	r9, r0, #0
	bne	.L9903
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r9, r0, #0
	bne	.L9904
	ldr	r0, [r8]
	mov	r1, r4
	ldr	r2, [r4, #100]
	bl	config_ep_by_speed(PLT)
	subs	r9, r0, #0
	bne	.L9905
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r9, r0, #0
	moveq	r3, #1
	moveq	r0, r6
	streq	r3, [r4, #192]
	streq	r3, [r4, #88]
	bne	.L9906
.L9890:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9848:
	mov	r3, #16
	str	r3, [r7]
	b	.L9849
.L9896:
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L9841:
	mvn	r3, #11
	str	r3, [r4, #104]
.L9844:
	ldr	r1, .L9907+16
	ldr	r0, .L9907+20
.LPIC1860:
	add	r1, pc, r1
	add	r1, r1, #3152
.LPIC1859:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, [r4, #104]
	b	.L9890
.L9842:
	mov	r3, #16
	str	r3, [r6]
	b	.L9843
.L9899:
	ldr	r2, [r7, #8]
	mov	r1, fp
	mov	r0, r7
	ldr	r3, [r2, #12]
	blx	r3
.L9853:
	mvn	r9, #11
.L9873:
	ldr	r1, .L9907+24
	ldr	r0, .L9907+28
.LPIC1866:
	add	r1, pc, r1
	add	r1, r1, #3152
.LPIC1865:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
.L9858:
	ldr	r5, [r4, #176]
	ldr	r6, [r4, #100]
	cmp	r5, #0
	beq	.L9852
	ldr	r0, [r5]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9852:
	ldr	r5, [r4, #104]
	ldr	r4, [r4, #92]
	cmp	r5, #0
	moveq	r0, r9
	beq	.L9890
	ldr	r0, [r5]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r9
	b	.L9890
.L9854:
	mov	r2, #16
	str	r2, [fp]
	b	.L9855
.L9897:
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9847:
	mvn	r9, #11
.L9872:
	ldr	r1, .L9907+32
	ldr	r0, .L9907+36
.LPIC1863:
	add	r1, pc, r1
	add	r1, r1, #3152
.LPIC1862:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L9852
.L9906:
	ldr	r1, .L9907+40
	mov	r3, r9
	ldr	r2, [r4, #100]
	ldr	r0, .L9907+44
.LPIC1879:
	add	r1, pc, r1
	add	r1, r1, #3152
	ldr	r2, [r2, #4]
.LPIC1878:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
.L9867:
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L9864:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #92]
	mov	r2, #0
	str	r2, [r3]
.L9861:
	mov	fp, #256
	mov	r8, #512
.L9869:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #184]
	mov	r3, r0
	mov	r0, r7
	mov	r1, r3
	cmp	r10, r5
	sub	r6, r5, #36
	beq	.L9870
	ldrd	r2, [r5]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	fp, [r5]
	str	r8, [r5, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	beq	.L9858
	ldr	r3, [r4, #96]
	ldr	r0, [r5, #-36]
	str	r3, [sp, #4]
	bl	kfree(PLT)
	ldr	r3, [sp, #4]
	mov	r1, r6
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L9869
.L9905:
	ldr	r2, [r4, #100]
	mov	r3, r9
	ldr	r1, .L9907+48
	ldr	r0, .L9907+52
	str	r6, [r2, #28]
	ldr	r2, [r4, #100]
.LPIC1877:
	add	r1, pc, r1
	add	r1, r1, #3152
.LPIC1876:
	add	r0, pc, r0
	add	r1, r1, #4
	ldr	r2, [r2, #4]
	bl	printk(PLT)
	b	.L9867
.L9870:
	mov	r0, r7
	mov	r1, r3
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L9858
.L9904:
	ldr	r1, .L9907+56
	mov	r3, r9
	ldr	r2, [r4, #96]
	ldr	r0, .L9907+60
.LPIC1875:
	add	r1, pc, r1
	add	r1, r1, #3152
	ldr	r2, [r2, #4]
	add	r1, r1, #4
.LPIC1874:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9864
.L9903:
	ldr	r2, [r4, #96]
	mov	r3, r9
	ldr	r1, .L9907+64
	ldr	r0, .L9907+68
	str	r6, [r2, #28]
	ldr	r2, [r4, #96]
.LPIC1873:
	add	r1, pc, r1
	add	r1, r1, #3152
.LPIC1872:
	add	r0, pc, r0
	add	r1, r1, #4
	ldr	r2, [r2, #4]
	bl	printk(PLT)
	b	.L9864
.L9902:
	ldr	r1, .L9907+72
	mov	r3, r9
	ldr	r2, [r4, #92]
	ldr	r0, .L9907+76
.LPIC1871:
	add	r1, pc, r1
	add	r1, r1, #3152
	ldr	r2, [r2, #4]
	add	r1, r1, #4
.LPIC1870:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9861
.L9901:
	ldr	r2, [r4, #92]
	mov	r3, r9
	ldr	r1, .L9907+80
	ldr	r0, .L9907+84
	str	r6, [r2, #28]
	ldr	r2, [r4, #92]
.LPIC1869:
	add	r1, pc, r1
	add	r1, r1, #3152
.LPIC1868:
	add	r0, pc, r0
	add	r1, r1, #4
	ldr	r2, [r2, #4]
	bl	printk(PLT)
	b	.L9861
.L9898:
	mov	r9, r7
	b	.L9872
.L9900:
	mov	r9, fp
	b	.L9873
.L9908:
	.align	2
.L9907:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1880+8))
	.word	ccid_notify_complete-(.LPIC1861+8)
	.word	ccid_bulk_complete_out-(.LPIC1864+8)
	.word	ccid_bulk_complete_in-(.LPIC1867+8)
	.word	.LANCHOR3-(.LPIC1860+8)
	.word	.LC476-(.LPIC1859+8)
	.word	.LANCHOR3-(.LPIC1866+8)
	.word	.LC478-(.LPIC1865+8)
	.word	.LANCHOR3-(.LPIC1863+8)
	.word	.LC477-(.LPIC1862+8)
	.word	.LANCHOR3-(.LPIC1879+8)
	.word	.LC480-(.LPIC1878+8)
	.word	.LANCHOR3-(.LPIC1877+8)
	.word	.LC479-(.LPIC1876+8)
	.word	.LANCHOR3-(.LPIC1875+8)
	.word	.LC480-(.LPIC1874+8)
	.word	.LANCHOR3-(.LPIC1873+8)
	.word	.LC479-(.LPIC1872+8)
	.word	.LANCHOR3-(.LPIC1871+8)
	.word	.LC480-(.LPIC1870+8)
	.word	.LANCHOR3-(.LPIC1869+8)
	.word	.LC479-(.LPIC1868+8)
	.fnend
	.size	ccid_function_set_alt, .-ccid_function_set_alt
	.align	2
	.type	adb_function_set_alt, %function
adb_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #84]
	ldr	r5, [r3, #24]
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9917
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	ldr	r0, [r5]
	bne	.L9918
	mov	r1, r4
	ldr	r2, [r4, #88]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9919
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9920
	mov	r3, #1
	add	r0, r4, #120
	mov	r2, r3
	mov	r1, #3
	str	r3, [r4, #92]
	mov	r3, r6
	bl	__wake_up(PLT)
	b	.L9911
.L9918:
	ldr	r2, [r4, #84]
	mov	r3, r6
	add	r0, r0, #32
	ldr	r1, .L9921
	ldr	r2, [r2, #4]
.LPIC1882:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L9911:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9917:
	ldr	r2, [r4, #84]
	mov	r0, #0
	mov	r6, r3
	ldr	r1, .L9921+4
	str	r0, [r2, #28]
	ldr	r0, [r5]
	ldr	r2, [r4, #84]
.LPIC1881:
	add	r1, pc, r1
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err(PLT)
	b	.L9911
.L9920:
	ldr	r1, .L9921+8
	mov	r3, r6
	ldr	r0, [r5]
	ldr	r2, [r4, #88]
.LPIC1884:
	add	r1, pc, r1
.L9916:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9911
.L9919:
	ldr	r2, [r4, #88]
	ldr	r1, .L9921+12
	str	r6, [r2, #28]
	mov	r6, r3
	ldr	r0, [r5]
.LPIC1883:
	add	r1, pc, r1
	ldr	r2, [r4, #88]
	b	.L9916
.L9922:
	.align	2
.L9921:
	.word	.LC475-(.LPIC1882+8)
	.word	.LC469-(.LPIC1881+8)
	.word	.LC475-(.LPIC1884+8)
	.word	.LC469-(.LPIC1883+8)
	.fnend
	.size	adb_function_set_alt, .-adb_function_set_alt
	.align	2
	.type	qdss_set_alt, %function
qdss_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	cmp	r2, #0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r3, [r3, #24]
	ldr	r5, [r3]
	bne	.L9936
	ldr	r3, [r5, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L9949
	ldrb	r3, [r0, #81]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L9950
	ldrb	r3, [r0, #80]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L9951
.L9929:
	ldrb	r3, [r4, #184]	@ zero_extendqisi2
	and	r3, r3, #7
	cmp	r3, #7
	moveq	r3, #1
	streq	r3, [r4, #84]
	beq	.L9932
	ldr	r3, [r4, #84]
	cmp	r3, #0
	bne	.L9932
.L9948:
	mov	r0, #0
.L9928:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9932:
	ldr	r3, [r4, #128]
	cmp	r3, #0
	beq	.L9948
	ldr	r0, [r4, #188]
	add	r1, r4, #148
	bl	queue_work(PLT)
	b	.L9948
.L9950:
	mov	r0, r5
	mov	r1, r4
	ldr	r2, [r4, #100]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L9930
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9924
	ldr	r3, [r4, #100]
	str	r4, [r3]
	ldrb	r3, [r4, #184]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r4, #184]
	b	.L9929
.L9951:
	mov	r0, r5
	mov	r1, r4
	ldr	r2, [r4, #96]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L9930
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9924
	ldr	r3, [r4, #96]
	mov	r0, r5
	mov	r1, r4
	str	r4, [r3]
	ldrb	r3, [r4, #184]	@ zero_extendqisi2
	ldr	r2, [r4, #92]
	orr	r3, r3, #2
	strb	r3, [r4, #184]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L9930
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9924
	ldr	r3, [r4, #92]
	str	r4, [r3]
	ldrb	r3, [r4, #184]	@ zero_extendqisi2
	orr	r3, r3, #4
	strb	r3, [r4, #184]
	b	.L9929
.L9930:
	mvn	r0, #21
	b	.L9928
.L9936:
	mov	r6, #0
.L9924:
	ldr	r0, .L9952
.LPIC1886:
	add	r0, pc, r0
	bl	printk(PLT)
	ldrb	r3, [r4, #184]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L9934
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #184]	@ zero_extendqisi2
	bfc	r2, #1, #1
	uxtb	r3, r2
	strb	r2, [r4, #184]
.L9934:
	tst	r3, #4
	beq	.L9935
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #184]	@ zero_extendqisi2
	bfc	r2, #2, #1
	uxtb	r3, r2
	strb	r2, [r4, #184]
.L9935:
	tst	r3, #1
	moveq	r0, r6
	beq	.L9928
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #184]	@ zero_extendqisi2
	mov	r0, r6
	bfc	r3, #0, #1
	strb	r3, [r4, #184]
	b	.L9928
.L9949:
	ldr	r0, .L9952+4
	mvn	r6, #21
.LPIC1885:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9924
.L9953:
	.align	2
.L9952:
	.word	.LC482-(.LPIC1886+8)
	.word	.LC481-(.LPIC1885+8)
	.fnend
	.size	qdss_set_alt, .-qdss_set_alt
	.align	2
	.type	rmnet_mux_set_alt, %function
rmnet_mux_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0, #88]
	ldr	r7, [r0, #76]
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	bne	.L9976
.L9955:
	mvn	r3, #11
	mov	r5, r3
	str	r3, [r4, #92]
.L9972:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9976:
	ldr	r3, .L9984
	mov	r2, #8
	str	r2, [r5, #4]
.LPIC1895:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L9956
	mov	r1, #32
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r5]
	beq	.L9977
.L9957:
	cmn	r5, #4096
	str	r5, [r4, #92]
	bhi	.L9972
	ldr	r3, .L9984+4
	mov	r2, #8
	mov	r1, r4
.LPIC1888:
	add	r3, pc, r3
	str	r3, [r5, #28]
	ldr	r3, [r4, #92]
	str	r4, [r3, #32]
	ldr	r3, [r4, #92]
	str	r2, [r3, #4]
	ldr	r3, [r4, #84]
	str	r4, [r3]
	ldr	r0, [r7]
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9978
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L9979
	ldr	r3, [r4, #80]
	mov	r1, r4
	str	r4, [r3]
	ldr	r0, [r7]
	ldr	r2, [r4, #80]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9980
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	ldr	r0, [r7]
	bne	.L9981
	mov	r1, r4
	ldr	r2, [r4, #88]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9982
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L9983
	mov	r3, #1
	str	r5, [r4, #396]
	str	r5, [r4, #404]
	str	r5, [r4, #408]
	str	r5, [r4, #392]
	str	r5, [r4, #388]
	str	r5, [r4, #400]
	str	r5, [r4, #412]
	str	r5, [r4, #300]
	str	r3, [r4, #360]
	b	.L9972
.L9978:
	ldr	r2, [r4, #84]
	mov	r0, #0
	mov	r5, r3
	ldr	r1, .L9984+8
	str	r0, [r2, #28]
	ldr	r0, [r7]
	ldr	r2, [r4, #84]
.LPIC1889:
	add	r1, pc, r1
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err(PLT)
	b	.L9972
.L9956:
	mov	r3, #16
	str	r3, [r5]
	b	.L9957
.L9980:
	ldr	r2, [r4, #80]
	ldr	r1, .L9984+12
	str	r5, [r2, #28]
	ldr	r0, [r7]
	mov	r5, r3
	ldr	r2, [r4, #80]
.LPIC1891:
	add	r1, pc, r1
.L9975:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9972
.L9979:
	ldr	r0, [r7]
	mov	r3, r5
	ldr	r2, [r4, #84]
	ldr	r1, .L9984+16
	add	r0, r0, #32
	ldr	r2, [r2, #4]
.LPIC1890:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9972
.L9981:
	ldr	r1, .L9984+20
	mov	r3, r5
	ldr	r2, [r4, #80]
.LPIC1892:
	add	r1, pc, r1
	b	.L9975
.L9982:
	ldr	r2, [r4, #88]
	ldr	r1, .L9984+24
	str	r5, [r2, #28]
	ldr	r0, [r7]
	mov	r5, r3
	ldr	r2, [r4, #88]
.LPIC1893:
	add	r1, pc, r1
.L9974:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9972
.L9977:
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L9955
.L9983:
	ldr	r1, .L9984+28
	mov	r3, r5
	ldr	r0, [r7]
	ldr	r2, [r4, #88]
.LPIC1894:
	add	r1, pc, r1
	b	.L9974
.L9985:
	.align	2
.L9984:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1895+8))
	.word	rmnet_mux_notify_complete-(.LPIC1888+8)
	.word	.LC469-(.LPIC1889+8)
	.word	.LC469-(.LPIC1891+8)
	.word	.LC467-(.LPIC1890+8)
	.word	.LC467-(.LPIC1892+8)
	.word	.LC469-(.LPIC1893+8)
	.word	.LC467-(.LPIC1894+8)
	.fnend
	.size	rmnet_mux_set_alt, .-rmnet_mux_set_alt
	.align	2
	.type	f_midi_set_alt, %function
f_midi_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #80]
	ldr	r2, [r0, #20]
	ldr	r3, [r5]
	ldr	r7, [r2, #24]
	cmp	r3, #0
	beq	.L9987
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #4]
	blx	r3
.L9987:
	ldr	r0, [r4, #76]
	mov	r1, r4
	mov	r2, r5
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L10015
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L10016
	str	r4, [r5]
	ldr	r5, [r4, #84]
	ldr	r2, [r4, #20]
	ldr	r3, [r5]
	ldr	r8, [r2, #24]
	cmp	r3, #0
	beq	.L9991
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #4]
	blx	r3
.L9991:
	ldr	r0, [r4, #76]
	mov	r1, r4
	mov	r2, r5
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L10017
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L10018
	str	r4, [r5]
	ldr	r2, [r4, #84]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L9995
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #84]
.L9995:
	ldr	r0, [r4, #76]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L10019
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L10020
	ldr	r3, [r4, #84]
	str	r4, [r3]
	ldr	r3, [r4, #332]
	cmp	r3, #0
	beq	.L9997
	ldr	r7, .L10022
	mov	r5, r6
.LPIC1902:
	add	r7, pc, r7
.L9999:
	ldr	r1, [r4, #328]
	add	r5, r5, #1
	ldr	r0, [r4, #84]
	bl	midi_alloc_ep_req(PLT)
	cmp	r0, #0
	mov	r2, #32
	mov	r1, r0
	beq	.L10003
	str	r7, [r0, #28]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	bne	.L10021
	ldr	r3, [r4, #332]
	cmp	r3, r5
	bhi	.L9999
	b	.L9997
.L10015:
	ldr	r0, [r7]
	mov	r6, r3
	ldr	r1, .L10022+4
	ldr	r2, [r5, #4]
	add	r0, r0, #32
.LPIC1896:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L9997:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10016:
	ldr	r0, [r7]
	mov	r3, r6
	ldr	r1, .L10022+8
	ldr	r2, [r5, #4]
	add	r0, r0, #32
.LPIC1897:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9997
.L10019:
	ldr	r0, [r7]
	mov	r6, r3
	ldr	r2, [r4, #84]
	ldr	r1, .L10022+12
	add	r0, r0, #32
	ldr	r2, [r2, #4]
.LPIC1900:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9997
.L10021:
	ldr	r0, [r4, #76]
	ldr	r2, [r4, #84]
	ldr	r1, .L10022+16
	add	r0, r0, #32
	ldr	r2, [r2, #4]
.LPIC1903:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9997
.L10017:
	ldr	r0, [r8]
	mov	r6, r3
	ldr	r1, .L10022+20
	ldr	r2, [r5, #4]
	add	r0, r0, #32
.LPIC1898:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9997
.L10018:
	ldr	r0, [r8]
	mov	r3, r6
	ldr	r1, .L10022+24
	ldr	r2, [r5, #4]
	add	r0, r0, #32
.LPIC1899:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9997
.L10003:
	mvn	r6, #11
	b	.L9997
.L10020:
	ldr	r0, [r7]
	mov	r3, r6
	ldr	r2, [r4, #84]
	ldr	r1, .L10022+28
	add	r0, r0, #32
	ldr	r2, [r2, #4]
.LPIC1901:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9997
.L10023:
	.align	2
.L10022:
	.word	f_midi_complete-(.LPIC1902+8)
	.word	.LC483-(.LPIC1896+8)
	.word	.LC484-(.LPIC1897+8)
	.word	.LC483-(.LPIC1900+8)
	.word	.LC485-(.LPIC1903+8)
	.word	.LC483-(.LPIC1898+8)
	.word	.LC484-(.LPIC1899+8)
	.word	.LC484-(.LPIC1901+8)
	.fnend
	.size	f_midi_set_alt, .-f_midi_set_alt
	.align	2
	.global	usb_add_function
	.type	usb_add_function, %function
usb_add_function:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r1, #32]
	cmp	r3, #0
	beq	.L10030
	ldr	r3, [r1, #40]
	cmp	r3, #0
	beq	.L10030
	str	r0, [r4, #20]
	ldr	r3, [r0, #40]
	add	r2, r1, #64
	add	ip, r0, #36
	mov	r5, r0
	str	r2, [r0, #40]
	str	ip, [r1, #64]
	str	r3, [r1, #68]
	str	r2, [r3]
	ldr	r2, [r1, #24]
	cmp	r2, #0
	moveq	r0, r2
	beq	.L10026
	blx	r2
	cmp	r0, #0
	blt	.L10042
.L10026:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L10027
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L10027
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L10027:
	tst	r3, #2
	beq	.L10043
.L10028:
	tst	r3, #1
	bne	.L10025
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L10025
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L10025:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10043:
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L10028
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
	b	.L10028
.L10042:
	ldr	r3, [r4, #68]
	mov	lr, #256
	mov	ip, #512
	ldr	r2, [r4, #64]
	mov	r1, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4, #64]
	str	ip, [r4, #68]
	str	r1, [r4, #20]
	b	.L10026
.L10030:
	mvn	r0, #21
	b	.L10025
	.fnend
	.size	usb_add_function, .-usb_add_function
	.align	2
	.type	charger_function_bind_config, %function
charger_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L10054
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC1912:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L10047
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L10052
.L10045:
	ldr	r2, .L10054+4
	mov	r0, r5
	add	r1, r4, #4
	ldr	r3, .L10054+8
	ldr	r6, .L10054+12
	ldr	r5, .L10054+16
.LPIC1905:
	add	r2, pc, r2
	ldr	lr, .L10054+20
	ldr	ip, .L10054+24
.LPIC1906:
	add	r3, pc, r3
	str	r2, [r4, #4]
	ldr	r2, .L10054+28
	add	r3, r3, #872
.LPIC1908:
	add	r5, pc, r5
.LPIC1907:
	add	r6, pc, r6
.LPIC1909:
	add	lr, pc, lr
	str	r3, [r4, #8]
.LPIC1910:
	add	ip, pc, ip
	str	r5, [r4, #32]
.LPIC1911:
	add	r2, pc, r2
	str	r6, [r4, #28]
	str	lr, [r4, #36]
	str	ip, [r4, #44]
	str	r2, [r4, #48]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L10053
.L10046:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10047:
	mov	r4, #16
	b	.L10045
.L10053:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
	b	.L10046
.L10052:
	mvn	r0, #11
	b	.L10046
.L10055:
	.align	2
.L10054:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1912+8))
	.word	.LC486-(.LPIC1905+8)
	.word	.LANCHOR0-(.LPIC1906+8)
	.word	charger_bind-(.LPIC1907+8)
	.word	charger_unbind-(.LPIC1908+8)
	.word	charger_set_alt-(.LPIC1909+8)
	.word	charger_disable-(.LPIC1910+8)
	.word	hid_setup-(.LPIC1911+8)
	.fnend
	.size	charger_function_bind_config, .-charger_function_bind_config
	.align	2
	.type	ccid_function_bind_config, %function
ccid_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L10058
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r0, r1
	ldr	r2, .L10058+4
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	ldr	r7, .L10058+8
	ldr	r6, .L10058+12
	str	r8, [sp, #16]
	ldr	r5, .L10058+16
.LPIC1913:
	add	r3, pc, r3
	ldr	r4, .L10058+20
.LPIC1915:
	add	r2, pc, r2
	ldr	lr, .L10058+24
	add	r8, r2, #880
.LPIC1914:
	add	r7, pc, r7
	ldr	ip, .L10058+28
.LPIC1917:
	add	r6, pc, r6
	add	r2, r2, #904
	ldr	r1, [r1, #24]
.LPIC1918:
	add	r5, pc, r5
	ldr	r3, [r3, #2220]
.LPIC1919:
	add	r4, pc, r4
.LPIC1920:
	add	lr, pc, lr
.LPIC1921:
	add	ip, pc, ip
	str	r1, [r3, #76]
	mov	r1, r3
	str	r7, [r3]
	str	r8, [r3, #8]
	str	r2, [r3, #12]
	str	r6, [r3, #24]
	str	r5, [r3, #28]
	str	r4, [r3, #32]
	str	lr, [r3, #44]
	str	ip, [r3, #40]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	usb_add_function(PLT)
.L10059:
	.align	2
.L10058:
	.word	.LANCHOR2-(.LPIC1913+8)
	.word	.LANCHOR0-(.LPIC1915+8)
	.word	.LC487-(.LPIC1914+8)
	.word	ccid_function_bind-(.LPIC1917+8)
	.word	ccid_function_unbind-(.LPIC1918+8)
	.word	ccid_function_set_alt-(.LPIC1919+8)
	.word	ccid_function_setup-(.LPIC1920+8)
	.word	ccid_function_disable-(.LPIC1921+8)
	.fnend
	.size	ccid_function_bind_config, .-ccid_function_bind_config
	.align	2
	.type	adb_function_bind_config, %function
adb_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L10063
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r2, .L10063+4
	str	lr, [sp, #4]
	ldr	r0, .L10063+8
	ldr	r4, [r1, #24]
.LPIC1922:
	add	r3, pc, r3
	ldr	r3, [r3, #-644]
.LPIC1924:
	add	r2, pc, r2
	add	lr, r2, #928
	add	ip, r2, #944
.LPIC1923:
	add	r0, pc, r0
	str	r4, [r3, #76]
	ldr	r4, .L10063+12
	str	lr, [r3, #8]
	ldr	lr, .L10063+16
	str	ip, [r3, #12]
	ldr	ip, .L10063+20
	str	r0, [r3]
	ldr	r0, [r1, #24]
.LPIC1927:
	add	r4, pc, r4
.LPIC1928:
	add	lr, pc, lr
.LPIC1929:
	add	ip, pc, ip
	ldr	r0, [r0]
	ldr	r0, [r0, #20]
	str	r4, [r3, #24]
	str	lr, [r3, #28]
	str	ip, [r3, #32]
	cmp	r0, #4
	mov	r0, r1
	addhi	r2, r2, #960
	mov	r1, r3
	strhi	r2, [r3, #16]
	ldr	r2, .L10063+24
.LPIC1930:
	add	r2, pc, r2
	str	r2, [r3, #40]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	usb_add_function(PLT)
.L10064:
	.align	2
.L10063:
	.word	.LANCHOR4-(.LPIC1922+8)
	.word	.LANCHOR0-(.LPIC1924+8)
	.word	.LC488-(.LPIC1923+8)
	.word	adb_function_bind-(.LPIC1927+8)
	.word	adb_function_unbind-(.LPIC1928+8)
	.word	adb_function_set_alt-(.LPIC1929+8)
	.word	adb_function_disable-(.LPIC1930+8)
	.fnend
	.size	adb_function_bind_config, .-adb_function_bind_config
	.align	2
	.type	rmnet_smd_sdio_bind_config, %function
rmnet_smd_sdio_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L10068
.LPIC1931:
	add	r3, pc, r3
	ldr	r3, [r3, #2312]
	cmp	r3, #0
	beq	.L10066
	ldr	ip, .L10068+4
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r0, r1
	ldr	r2, .L10068+8
	strd	r6, [sp, #8]
	mov	r1, r3
	strd	r8, [sp, #16]
	ldr	r7, .L10068+12
	str	lr, [sp, #24]
	ldr	r6, .L10068+16
.LPIC1932:
	add	ip, pc, ip
	ldr	r5, .L10068+20
	ldr	r4, .L10068+24
.LPIC1933:
	add	r2, pc, r2
	str	ip, [r3]
	ldr	lr, .L10068+28
	add	r9, r2, #984
	ldr	ip, .L10068+32
	add	r8, r2, #992
.LPIC1936:
	add	r7, pc, r7
.LPIC1937:
	add	r6, pc, r6
.LPIC1938:
	add	r5, pc, r5
	str	r9, [r3, #4]
.LPIC1939:
	add	r4, pc, r4
	add	r2, r2, #1012
	str	r8, [r3, #8]
.LPIC1940:
	add	lr, pc, lr
	str	r7, [r3, #24]
.LPIC1941:
	add	ip, pc, ip
	str	r2, [r3, #12]
	str	r6, [r3, #28]
	str	r5, [r3, #44]
	str	r4, [r3, #32]
	str	lr, [r3, #40]
	str	ip, [r3, #48]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	usb_add_function(PLT)
.L10066:
	mvn	r0, #18
	bx	lr
.L10069:
	.align	2
.L10068:
	.word	.LANCHOR2-(.LPIC1931+8)
	.word	.LC489-(.LPIC1932+8)
	.word	.LANCHOR0-(.LPIC1933+8)
	.word	rmnet_mux_bind-(.LPIC1936+8)
	.word	rmnet_mux_unbind-(.LPIC1937+8)
	.word	rmnet_mux_setup-(.LPIC1938+8)
	.word	rmnet_mux_set_alt-(.LPIC1939+8)
	.word	rmnet_mux_disable-(.LPIC1940+8)
	.word	rmnet_mux_suspend-(.LPIC1941+8)
	.fnend
	.size	rmnet_smd_sdio_bind_config, .-rmnet_smd_sdio_bind_config
	.align	2
	.global	usb_function_deactivate
	.type	usb_function_deactivate, %function
usb_function_deactivate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #20]
	ldr	r4, [r3, #24]
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r1, [r4, #52]
	mov	r7, r0
	cmp	r1, #0
	bne	.L10071
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	mvneq	r6, #94
	beq	.L10072
	blx	r3
	subs	r6, r0, #0
	beq	.L10075
.L10072:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10075:
	ldr	r1, [r4, #52]
.L10071:
	add	r1, r1, #1
	mov	r6, #0
	str	r1, [r4, #52]
	b	.L10072
	.fnend
	.size	usb_function_deactivate, .-usb_function_deactivate
	.align	2
	.global	usb_function_activate
	.type	usb_function_activate, %function
usb_function_activate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r4, [r3, #24]
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L10083
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r4, #52]
	bne	.L10084
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	mvneq	r4, #94
	beq	.L10078
	mov	r1, #1
	blx	r3
	mov	r4, r0
.L10078:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10084:
	mov	r4, #0
	b	.L10078
.L10083:
	ldr	r0, .L10085
	movw	r1, #307
	mvn	r4, #21
.LPIC1942:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L10078
.L10086:
	.align	2
.L10085:
	.word	.LC81-(.LPIC1942+8)
	.fnend
	.size	usb_function_activate, .-usb_function_activate
	.align	2
	.global	usb_interface_id
	.type	usb_interface_id, %function
usb_interface_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L10089
	add	ip, r3, #12
	add	r2, r3, #1
	str	r1, [r0, ip, asl #2]
	strb	r2, [r0, #44]
.L10088:
	mov	r0, r3
	bx	lr
.L10089:
	mvn	r3, #18
	b	.L10088
	.fnend
	.size	usb_interface_id, .-usb_interface_id
	.align	2
	.type	diag_function_bind, %function
diag_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L10147
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	lr, [sp, #20]
	str	r8, [sp, #16]
	ldr	r6, [r0, #24]
.LPIC1943:
	add	r4, pc, r4
	bl	usb_interface_id(PLT)
	strb	r0, [r4, #658]
	add	r1, r4, #668
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10091
	str	r0, [r5, #80]
	add	r1, r4, #680
	str	r5, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10091
	ldr	r6, .L10147+4
	str	r0, [r5, #76]
	str	r5, [r0]
.LPIC1946:
	add	r6, pc, r6
	add	r0, r6, #1024
	add	r0, r0, #8
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r5, #8]
	beq	.L10108
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10143
.L10093:
	ldr	ip, [r5, #112]
	ldr	r0, [r5, #108]
	cmp	ip, #0
	beq	.L10144
	ldr	r3, .L10147+8
.LPIC1957:
	add	r3, pc, r3
	ldrb	r3, [r3, #658]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L10140
	ldrb	r4, [r0, #33]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L10145
	ldr	r3, [r0, #44]
	ldr	r3, [r3, #16]
	ldr	r3, [r3]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L10140
	ldr	r1, [r3, #4]
	cmp	r1, #0
	bne	.L10103
	b	.L10140
.L10102:
	adds	r3, r3, #8
	beq	.L10140
	ldr	r1, [r3, #4]
	cmp	r1, #0
	beq	.L10146
.L10103:
	ldrb	r2, [r3]	@ zero_extendqisi2
	cmp	r2, r4
	bne	.L10102
	ldrh	r0, [r0, #27]	@ unaligned
	blx	ip
.L10140:
	mov	r0, #0
	b	.L10137
.L10091:
	mvn	r4, #18
.L10092:
	ldr	r0, [r5, #16]
	cmp	r0, #0
	beq	.L10098
.L10107:
	bl	kfree(PLT)
.L10098:
	ldr	r0, [r5, #12]
	cmp	r0, #0
	beq	.L10104
	bl	kfree(PLT)
.L10104:
	ldr	r0, [r5, #8]
	cmp	r0, #0
	beq	.L10105
	bl	kfree(PLT)
.L10105:
	ldr	r3, [r5, #76]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #80]
	cmp	r3, #0
	moveq	r0, r4
	beq	.L10137
	mov	r2, #0
	mov	r0, r4
	str	r2, [r3]
.L10137:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10143:
	ldrb	r2, [r4, #670]	@ zero_extendqisi2
	add	r0, r6, #1040
	ldrb	r3, [r4, #682]	@ zero_extendqisi2
	add	r0, r0, #8
	strb	r2, [r4, #694]
	strb	r3, [r4, #706]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r5, #12]
	beq	.L10094
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L10093
	ldrb	r2, [r4, #670]	@ zero_extendqisi2
	add	r0, r6, #1056
	ldrb	r3, [r4, #682]	@ zero_extendqisi2
	add	r0, r0, #8
	strb	r2, [r4, #718]
	strb	r3, [r4, #730]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r5, #16]
	bne	.L10093
	mvn	r4, #11
	b	.L10098
.L10108:
	mvn	r4, #11
	b	.L10092
.L10146:
	mov	r0, r1
	b	.L10137
.L10145:
	ldrh	r0, [r0, #27]	@ unaligned
	mov	r1, r4
	blx	ip
	mov	r0, r4
	b	.L10137
.L10144:
	mov	r0, ip
	b	.L10137
.L10094:
	ldr	r0, [r5, #16]
	mvn	r4, #11
	cmp	r0, #0
	bne	.L10107
	b	.L10104
.L10148:
	.align	2
.L10147:
	.word	.LANCHOR1-(.LPIC1943+8)
	.word	.LANCHOR0-(.LPIC1946+8)
	.word	.LANCHOR1-(.LPIC1957+8)
	.fnend
	.size	diag_function_bind, .-diag_function_bind
	.align	2
	.type	rmnet_smd_bind, %function
rmnet_smd_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #24]
	str	r4, [r1, #76]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L10213
	ldr	r6, .L10231
	uxtb	r0, r0
	strb	r0, [r5, #96]
.LPIC1958:
	add	r6, pc, r6
	add	r1, r6, #752
	strb	r0, [r6, #742]
	ldr	r0, [r4]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10152
	str	r4, [r0]
	add	r1, r6, #764
	str	r0, [r5, #84]
	ldr	r0, [r4]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10152
	str	r4, [r0]
	add	r1, r6, #776
	str	r0, [r5, #80]
	ldr	r0, [r4]
	bl	usb_ep_autoconfig(PLT)
	subs	r8, r0, #0
	beq	.L10152
	str	r4, [r8]
	str	r8, [r5, #88]
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10225
.L10153:
	ldr	r3, [r8, #8]
	mov	r0, r8
	mov	r1, #208
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L10154
	ldr	r7, .L10231+4
	mov	r3, #8
	str	r3, [r4, #4]
.LPIC1972:
	ldr	r7, [pc, r7]		@ tls_load_dot_plus_eight
	ldr	r0, [r7, #24]
	cmp	r0, #0
	beq	.L10155
	mov	r1, #208
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L10226
.L10156:
	cmn	r4, #4096
	str	r4, [r5, #92]
	bhi	.L10221
	ldr	r3, .L10231+8
	mov	r2, #8
	mov	r6, #4
	mov	r9, #16
	add	r8, r5, #100
.LPIC1969:
	add	r3, pc, r3
	str	r3, [r4, #28]
	ldr	r3, [r5, #92]
	str	r5, [r3, #32]
	ldr	r3, [r5, #92]
	str	r2, [r3, #4]
.L10164:
	ldr	r3, [r7, #24]
	mov	r1, #208
	subs	r0, r3, #0
	beq	.L10192
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L10176
	ldr	r3, [r7, #44]
	mov	r1, #208
	subs	r0, r3, #0
	beq	.L10227
.L10217:
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L10222
.L10161:
	cmn	r4, #4096
	add	r2, r4, #8
	bhi	.L10173
	ldr	r3, [r5, #104]
	subs	r6, r6, #1
	str	r2, [r5, #104]
	str	r8, [r4, #8]
	str	r3, [r4, #12]
	str	r2, [r3]
	bne	.L10164
	mov	r6, #8
	mov	r9, #16
	add	r8, r5, #108
.L10169:
	ldr	r3, [r7, #24]
	mov	r1, #208
	subs	r0, r3, #0
	beq	.L10193
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L10176
.L10165:
	ldr	r3, [r7, #44]
	mov	r1, #208
	subs	r0, r3, #0
	beq	.L10228
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L10222
.L10167:
	cmn	r4, #4096
	add	r2, r4, #8
	bhi	.L10173
	ldr	r3, [r5, #112]
	subs	r6, r6, #1
	str	r2, [r5, #112]
	str	r8, [r4, #8]
	str	r3, [r4, #12]
	str	r2, [r3]
	bne	.L10169
	ldr	r10, .L10231+12
	mov	r8, #8
	mov	r9, #2048
.LPIC1970:
	add	r10, pc, r10
.L10175:
	ldr	r6, [r5, #80]
	mov	r1, #208
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	mov	r1, #208
	beq	.L10176
	str	r9, [r4, #4]
	ldr	r3, [r7, #44]
	subs	r0, r3, #0
	beq	.L10171
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L10229
.L10172:
	cmn	r4, #4096
	add	r2, r4, #36
	add	r1, r5, #140
	bhi	.L10173
	str	r9, [r4, #4]
	subs	r8, r8, #1
	str	r5, [r4, #32]
	str	r10, [r4, #28]
	ldr	r3, [r5, #144]
	str	r2, [r5, #144]
	str	r1, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	bne	.L10175
	ldr	r10, .L10231+16
	mov	r4, #8
	mov	r9, #2048
.LPIC1971:
	add	r10, pc, r10
.L10181:
	ldr	r8, [r5, #84]
	mov	r1, #208
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	mov	r1, #208
	beq	.L10176
	str	r9, [r6, #4]
	ldr	r3, [r7, #44]
	subs	r0, r3, #0
	beq	.L10177
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L10230
.L10178:
	cmn	r6, #4096
	add	r2, r6, #36
	add	r1, r5, #132
	bhi	.L10163
	str	r5, [r6, #32]
	subs	r4, r4, #1
	str	r10, [r6, #28]
	ldr	r3, [r5, #136]
	str	r2, [r5, #136]
	str	r1, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
	bne	.L10181
.L10221:
	mov	r0, r4
.L10213:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10225:
	ldrb	r1, [r6, #754]	@ zero_extendqisi2
	ldrb	r2, [r6, #766]	@ zero_extendqisi2
	ldrb	r3, [r6, #778]	@ zero_extendqisi2
	strb	r1, [r6, #790]
	strb	r2, [r6, #802]
	strb	r3, [r6, #814]
	b	.L10153
.L10192:
	ldr	r3, [r7, #44]
	mov	r4, #16
	mov	r1, #208
	subs	r0, r3, #0
	bne	.L10217
.L10227:
	str	r9, [r4]
	b	.L10161
.L10229:
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L10176:
	mvn	r6, #11
.L10163:
	mov	r0, r5
	bl	rmnet_smd_free_buf(PLT)
	mov	r3, #0
	mov	r0, r6
	str	r3, [r5, #88]
	str	r3, [r5, #84]
	str	r3, [r5, #80]
	b	.L10213
.L10155:
	mov	r3, #16
	str	r3, [r4]
	b	.L10156
.L10226:
	ldr	r3, [r8, #8]
	mov	r1, r4
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L10154:
	mvn	r3, #11
	mov	r0, r3
	str	r3, [r5, #92]
	b	.L10213
.L10193:
	mov	r4, #16
	b	.L10165
.L10222:
	mov	r0, r4
	bl	kfree(PLT)
	b	.L10176
.L10152:
	mvn	r0, #18
	b	.L10213
.L10171:
	mov	r3, #16
	str	r3, [r4]
	b	.L10172
.L10177:
	mov	r3, #16
	str	r3, [r6]
	b	.L10178
.L10230:
	ldr	r3, [r8, #8]
	mov	r1, r6
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10176
.L10173:
	mov	r6, r4
	b	.L10163
.L10228:
	str	r9, [r4]
	b	.L10167
.L10232:
	.align	2
.L10231:
	.word	.LANCHOR1-(.LPIC1958+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1972+8))
	.word	rmnet_smd_notify_complete-(.LPIC1969+8)
	.word	rmnet_smd_complete_epout-(.LPIC1970+8)
	.word	rmnet_smd_complete_epin-(.LPIC1971+8)
	.fnend
	.size	rmnet_smd_bind, .-rmnet_smd_bind
	.align	2
	.type	rmnet_sdio_bind, %function
rmnet_sdio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #24]
	str	r5, [r1, #76]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L10234
	ldr	r6, .L10257
	uxtb	r0, r0
	strb	r0, [r4, #96]
.LPIC1973:
	add	r6, pc, r6
	add	r1, r6, #836
	strb	r0, [r6, #826]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10235
	str	r5, [r0]
	add	r1, r6, #848
	str	r0, [r4, #84]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10235
	str	r5, [r0]
	add	r1, r6, #860
	str	r0, [r4, #80]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10235
	str	r5, [r0]
	str	r0, [r4, #88]
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L10236
	ldrb	r1, [r6, #838]	@ zero_extendqisi2
	ldrb	r2, [r6, #850]	@ zero_extendqisi2
	ldrb	r3, [r6, #862]	@ zero_extendqisi2
	strb	r1, [r6, #874]
	strb	r2, [r6, #886]
	strb	r3, [r6, #898]
.L10236:
	ldr	r0, [r4, #192]
	add	r1, r4, #244
	mov	r2, #0
	bl	queue_delayed_work(PLT)
	mov	r0, #0
.L10234:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10235:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	cmp	r3, #0
	movne	r2, #0
	mvnne	r0, #18
	mvneq	r0, #18
	strne	r2, [r3]
	b	.L10234
.L10258:
	.align	2
.L10257:
	.word	.LANCHOR1-(.LPIC1973+8)
	.fnend
	.size	rmnet_sdio_bind, .-rmnet_sdio_bind
	.align	2
	.type	audio_bind, %function
audio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr	r4, .L10277
	movw	r2, #44100
	str	lr, [sp, #28]
	mov	lr, #0
	mov	r3, #2
	strd	r6, [sp, #8]
	mov	r5, r1
	mov	r6, r0
	strd	r8, [sp, #16]
.LPIC1983:
	add	r4, pc, r4
	str	r10, [sp, #24]
	.pad #8
	sub	sp, sp, #8
	add	ip, r4, #928
	ldr	r7, [r0, #24]
	strb	lr, [r4, #930]
	strh	r2, [ip]	@ movhi
	str	r2, [sp, #4]
	strb	r3, [r4, #915]
	strb	r3, [r4, #924]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L10268
	uxtb	r3, r0
	mov	r1, r5
	mov	r0, r6
	strb	r3, [r4, #934]
	strb	r3, [r4, #952]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L10268
	uxtb	r0, r0
	add	r1, r4, #968
	strb	r0, [r4, #958]
	strb	r0, [r4, #634]
	strb	r0, [r4, #953]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r8, r0, #0
	beq	.L10266
	str	r8, [r5, #96]
	str	r5, [r8]
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10273
.L10261:
	ldr	r9, .L10277+4
	mov	r6, #4
	mov	r10, #16
.LPIC1995:
	add	r9, pc, r9
	b	.L10265
.L10276:
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L10274
.L10264:
	mov	r3, #256
	add	r7, r5, #100
	str	r5, [r4, #32]
	str	r9, [r4, #28]
	mov	r0, r7
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r5, #92]
	add	ip, r4, #36
	add	r3, r5, #88
	mov	r1, r0
	mov	r0, r7
	str	ip, [r5, #92]
	str	r3, [r4, #36]
	str	r2, [r4, #40]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore(PLT)
	subs	r6, r6, #1
	beq	.L10275
.L10265:
	ldr	r3, [r8, #8]
	mov	r1, #208
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	ldr	r3, .L10277+8
	mov	r1, #208
	beq	.L10262
.LPIC1996:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3, #32]
	subs	r0, r3, #0
	bne	.L10276
	str	r10, [r4]
	b	.L10264
.L10275:
	mov	r0, r6
.L10268:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10273:
	ldrb	r3, [r4, #970]	@ zero_extendqisi2
	strb	r3, [r4, #982]
	b	.L10261
.L10274:
	ldr	r3, [r8, #8]
	mov	r1, r4
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L10262:
.L10260:
	mvn	r0, #11
	b	.L10268
.L10266:
	mvn	r0, #18
	b	.L10268
.L10278:
	.align	2
.L10277:
	.word	.LANCHOR1-(.LPIC1983+8)
	.word	audio_data_complete-(.LPIC1995+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1996+8))
	.fnend
	.size	audio_bind, .-audio_bind
	.align	2
	.type	ecm_qc_bind, %function
ecm_qc_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	mov	r8, r0
	str	lr, [sp, #20]
	ldr	r7, [r0, #24]
	bl	usb_interface_id(PLT)
	subs	r6, r0, #0
	blt	.L10280
	ldr	r5, .L10342
	uxtb	r6, r6
	mov	r0, r8
	mov	r1, r4
	strb	r6, [r4, #112]
.LPIC1997:
	add	r5, pc, r5
	strb	r6, [r5, #994]
	strb	r6, [r5, #1007]
	bl	usb_interface_id(PLT)
	subs	r6, r0, #0
	blt	.L10280
	uxtb	r0, r6
	add	r1, r5, #1024
	add	r1, r1, #12
	strb	r0, [r4, #113]
	strb	r0, [r5, #1014]
	strb	r0, [r5, #1026]
	strb	r0, [r5, #1008]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10282
	add	r1, r5, #1040
	str	r0, [r4, #80]
	add	r1, r1, #8
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10282
	add	r1, r5, #1056
	str	r0, [r4, #84]
	add	r1, r1, #4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L10282
	str	r3, [r4, #136]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4, #140]
	beq	.L10285
	ldr	r3, .L10342+4
.LPIC2026:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L10284
	mov	r1, #208
	bl	kmem_cache_alloc(PLT)
.L10284:
	str	r0, [r5]
	ldr	r3, [r4, #140]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L10285
	str	r4, [r3, #32]
	ldr	r3, .L10342+8
	ldr	r6, .L10342+12
	ldr	r2, [r4, #140]
.LPIC2006:
	add	r3, pc, r3
.LPIC2007:
	add	r6, pc, r6
	str	r3, [r2, #28]
	add	r0, r6, #1088
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L10285
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10341
.L10286:
	ldr	r2, .L10342+16
	mov	r0, #0
	ldr	r3, .L10342+20
.LPIC2015:
	add	r2, pc, r2
.LPIC2016:
	add	r3, pc, r3
	strd	r2, [r4, #104]
.L10339:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10341:
	ldr	r5, .L10342+24
	add	r0, r6, #1120
	add	r0, r0, #8
.LPIC2008:
	add	r5, pc, r5
	ldrb	r1, [r5, #1038]	@ zero_extendqisi2
	ldrb	r2, [r5, #1050]	@ zero_extendqisi2
	ldrb	r3, [r5, #1062]	@ zero_extendqisi2
	strb	r1, [r5, #1074]
	strb	r2, [r5, #1086]
	strb	r3, [r5, #1098]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L10287
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L10286
	ldrb	r3, [r5, #1062]	@ zero_extendqisi2
	add	r0, r6, #1168
	ldrb	r1, [r5, #1038]	@ zero_extendqisi2
	ldrb	r2, [r5, #1050]	@ zero_extendqisi2
	strb	r3, [r5, #1134]
	strb	r1, [r5, #1110]
	strb	r2, [r5, #1122]
	bl	usb_copy_descriptors(PLT)
	ldr	r3, [r4, #12]
	str	r0, [r4, #16]
	cmp	r3, #0
	bne	.L10286
.L10287:
	ldr	r0, [r4, #16]
	mvn	r6, #11
	cmp	r0, #0
	beq	.L10291
.L10297:
	bl	kfree(PLT)
.L10290:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L10291
	bl	kfree(PLT)
.L10291:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L10292
	bl	kfree(PLT)
.L10292:
	ldr	r3, [r4, #140]
	cmp	r3, #0
	beq	.L10293
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L10293:
	ldr	r3, [r4, #136]
	ldr	r1, .L10342+28
	ldr	r0, .L10342+32
	cmp	r3, #0
	movne	r2, #0
.LPIC2025:
	add	r1, pc, r1
	add	r1, r1, #3168
.LPIC2024:
	add	r0, pc, r0
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	add	r1, r1, #12
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	mov	r3, r6
	ldr	r2, [r4]
	bl	printk(PLT)
	mov	r0, r6
	b	.L10339
.L10282:
	mvn	r6, #18
.L10280:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	bne	.L10297
	b	.L10290
.L10285:
	mvn	r6, #11
	b	.L10280
.L10343:
	.align	2
.L10342:
	.word	.LANCHOR1-(.LPIC1997+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2026+8))
	.word	ecm_qc_notify_complete-(.LPIC2006+8)
	.word	.LANCHOR0-(.LPIC2007+8)
	.word	ecm_qc_open-(.LPIC2015+8)
	.word	ecm_qc_close-(.LPIC2016+8)
	.word	.LANCHOR1-(.LPIC2008+8)
	.word	.LANCHOR3-(.LPIC2025+8)
	.word	.LC490-(.LPIC2024+8)
	.fnend
	.size	ecm_qc_bind, .-ecm_qc_bind
	.align	2
	.type	mbim_bind, %function
mbim_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	ldr	r6, .L10405
	strd	r8, [sp, #16]
	mov	r8, r0
	str	lr, [sp, #24]
	ldr	r7, [r0, #24]
	.pad #20
	sub	sp, sp, #20
	ldr	r0, .L10405+4
.LPIC2030:
	add	r6, pc, r6
	add	r6, r6, #3184
	add	r6, r6, #8
	mov	r1, r6
.LPIC2029:
	add	r0, pc, r0
	bl	printk(PLT)
	str	r7, [r4, #76]
	mov	r0, r8
	mov	r1, r4
	bl	usb_interface_id(PLT)
	subs	r9, r0, #0
	blt	.L10345
	ldr	r5, .L10405+8
	uxtb	r3, r9
	mov	r0, r8
	mov	r1, r4
	strb	r3, [r4, #188]
.LPIC2031:
	add	r5, pc, r5
	strb	r3, [r5, #1146]
	strb	r3, [r5, #1154]
	strb	r3, [r5, #1167]
	bl	usb_interface_id(PLT)
	subs	r9, r0, #0
	blt	.L10345
	uxtb	r0, r9
	mov	r3, #0
	str	r7, [r4, #132]
	add	r1, r5, #1184
	str	r4, [r4, #136]
	strb	r3, [r4, #190]
	add	r1, r1, #12
	strb	r0, [r4, #189]
	strb	r0, [r5, #1174]
	strb	r0, [r5, #1186]
	strb	r0, [r5, #1168]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r9, r0, #0
	beq	.L10400
	ldr	r0, .L10405+12
	mov	r1, r6
.LPIC2040:
	add	r0, pc, r0
	bl	printk(PLT)
	add	r1, r5, #1200
	str	r7, [r9]
	add	r1, r1, #8
	str	r9, [r4, #140]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r9, r0, #0
	beq	.L10401
	ldr	r0, .L10405+16
	mov	r1, r6
.LPIC2045:
	add	r0, pc, r0
	bl	printk(PLT)
	add	r1, r5, #1216
	str	r7, [r9]
	add	r1, r1, #4
	str	r9, [r4, #144]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r5, r0, #0
	mov	r1, r6
	beq	.L10402
	ldr	r0, .L10405+20
.LPIC2050:
	add	r0, pc, r0
	bl	printk(PLT)
	str	r5, [r4, #148]
	ldr	r3, [r5, #8]
	mov	r0, r5
	str	r7, [r5]
	mov	r1, #208
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L10349
	ldr	r3, .L10405+24
.LPIC2079:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10350
	mov	r1, #208
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L10403
.L10351:
	ldr	r1, .L10405+28
	mov	r3, #16
	ldr	r0, .L10405+32
	str	r3, [r6, #4]
	ldr	r5, .L10405+36
	str	r6, [r4, #152]
	ldr	r6, .L10405+40
.LPIC2054:
	add	r1, pc, r1
	add	r1, r1, #3184
.LPIC2053:
	add	r0, pc, r0
	add	r1, r1, #8
.LPIC2056:
	add	r5, pc, r5
	bl	printk(PLT)
	ldr	r1, [r4, #152]
.LPIC2057:
	add	r6, pc, r6
	add	r2, r5, #1232
	ldr	r3, .L10405+44
	add	r0, r6, #1216
	add	r0, r0, #4
	str	r4, [r1, #32]
	ldr	r1, [r4, #152]
.LPIC2055:
	add	r3, pc, r3
	str	r3, [r1, #28]
	ldr	r3, [r4, #124]
	cmp	r3, #7
	moveq	r3, #2048
	movne	r3, #4064
	strh	r3, [r2, #9]	@ unaligned
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L10356
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10404
.L10355:
	ldrb	r3, [r8, #20]	@ zero_extendqisi2
	sub	r2, r3, #2
	cmp	r2, #2
	bhi	.L10359
	ldr	r2, .L10405+48
	add	r3, r3, #48
.LPIC2072:
	add	r2, pc, r2
	strb	r3, [r2, #182]
.L10359:
	ldr	r3, [r8, #24]
	ldrb	r2, [r4, #128]	@ zero_extendqisi2
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10369
	ldr	r3, .L10405+52
.LPIC2028:
	add	r3, pc, r3
.L10360:
	ldr	r0, [r4, #140]
	ldr	lr, [r4, #144]
	ldr	ip, [r4, #148]
	ldr	r1, .L10405+56
	ldr	r4, [r0, #4]
	ldr	r0, .L10405+60
.LPIC2074:
	add	r1, pc, r1
	str	r4, [sp]
	ldr	lr, [lr, #4]
	add	r1, r1, #3184
.LPIC2073:
	add	r0, pc, r0
	add	r1, r1, #8
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp, #8]
	bl	printk(PLT)
	mov	r0, #0
.L10398:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L10369:
	ldr	r3, .L10405+64
.LPIC2027:
	add	r3, pc, r3
	b	.L10360
.L10404:
	ldrb	r1, [r5, #1198]	@ zero_extendqisi2
	add	r0, r6, #1264
	ldrb	r2, [r5, #1210]	@ zero_extendqisi2
	add	r0, r0, #4
	ldrb	r3, [r5, #1222]	@ zero_extendqisi2
	strb	r1, [r5, #1246]
	strb	r2, [r5, #1258]
	strb	r3, [r5, #1270]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L10356
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L10355
	ldrb	r1, [r5, #1198]	@ zero_extendqisi2
	add	r0, r6, #1312
	ldrb	r2, [r5, #1210]	@ zero_extendqisi2
	add	r0, r0, #4
	ldrb	r3, [r5, #1222]	@ zero_extendqisi2
	strb	r1, [r5, #1282]
	strb	r2, [r5, #1294]
	strb	r3, [r5, #1306]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L10355
.L10356:
	mvn	r9, #11
.L10345:
	ldr	r1, .L10405+68
	mov	r3, r9
	ldr	r0, .L10405+72
	ldr	r2, [r4]
.LPIC2076:
	add	r1, pc, r1
	add	r1, r1, #3184
.LPIC2075:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L10362
	bl	kfree(PLT)
.L10362:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L10363
	bl	kfree(PLT)
.L10363:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L10364
	bl	kfree(PLT)
.L10364:
	ldr	r3, [r4, #152]
	cmp	r3, #0
	beq	.L10365
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L10365:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #144]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #140]
	cmp	r3, #0
	movne	r2, #0
	movne	r0, r9
	moveq	r0, r9
	strne	r2, [r3]
	b	.L10398
.L10350:
	mov	r3, #16
	str	r3, [r6]
	b	.L10351
.L10403:
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L10349:
	ldr	r1, .L10405+76
	mov	r3, #0
	mvn	r9, #11
	ldr	r0, .L10405+80
	str	r3, [r4, #152]
.LPIC2078:
	add	r1, pc, r1
	add	r1, r1, #3184
.LPIC2077:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L10345
.L10401:
	ldr	r0, .L10405+84
	mov	r1, r6
	mvn	r9, #18
.LPIC2043:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10345
.L10400:
	ldr	r0, .L10405+88
	mov	r1, r6
	mvn	r9, #18
.LPIC2038:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10345
.L10402:
	ldr	r0, .L10405+92
	mvn	r9, #18
.LPIC2048:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10345
.L10406:
	.align	2
.L10405:
	.word	.LANCHOR3-(.LPIC2030+8)
	.word	.LC211-(.LPIC2029+8)
	.word	.LANCHOR1-(.LPIC2031+8)
	.word	.LC494-(.LPIC2040+8)
	.word	.LC496-(.LPIC2045+8)
	.word	.LC498-(.LPIC2050+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2079+8))
	.word	.LANCHOR3-(.LPIC2054+8)
	.word	.LC499-(.LPIC2053+8)
	.word	.LANCHOR1-(.LPIC2056+8)
	.word	.LANCHOR0-(.LPIC2057+8)
	.word	mbim_notify_complete-(.LPIC2055+8)
	.word	.LANCHOR1-(.LPIC2072+8)
	.word	.LC492-(.LPIC2028+8)
	.word	.LANCHOR3-(.LPIC2074+8)
	.word	.LC500-(.LPIC2073+8)
	.word	.LC491-(.LPIC2027+8)
	.word	.LANCHOR3-(.LPIC2076+8)
	.word	.LC501-(.LPIC2075+8)
	.word	.LANCHOR3-(.LPIC2078+8)
	.word	.LC502-(.LPIC2077+8)
	.word	.LC495-(.LPIC2043+8)
	.word	.LC493-(.LPIC2038+8)
	.word	.LC497-(.LPIC2048+8)
	.fnend
	.size	mbim_bind, .-mbim_bind
	.align	2
	.type	ecm_bind, %function
ecm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r7, [r0, #24]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L10408
	ldr	r6, .L10439
	uxtb	r5, r5
	mov	r0, r8
	mov	r1, r4
	strb	r5, [r4, #140]
.LPIC2080:
	add	r6, pc, r6
	strb	r5, [r6, #1318]
	strb	r5, [r6, #1326]
	strb	r5, [r6, #1339]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L10408
	uxtb	r5, r5
	add	r1, r6, #1360
	add	r1, r1, #8
	strb	r5, [r4, #141]
	strb	r5, [r6, #1346]
	strb	r5, [r6, #1358]
	strb	r5, [r6, #1340]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10437
	add	r1, r6, #1376
	str	r0, [r4, #80]
	add	r1, r1, #4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10437
	str	r0, [r4, #84]
	add	r1, r6, #1392
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L10437
	str	r3, [r4, #156]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4, #160]
	beq	.L10421
	ldr	r3, .L10439+4
.LPIC2106:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L10415
	mov	r1, #208
	bl	kmem_cache_alloc(PLT)
.L10415:
	str	r0, [r5]
	ldr	r3, [r4, #160]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L10423
	ldr	ip, .L10439+8
	str	r4, [r3, #32]
	mov	r0, r4
	ldr	r1, .L10439+12
	ldr	lr, .L10439+16
	ldr	r9, [r4, #160]
.LPIC2091:
	add	ip, pc, ip
	ldrb	r5, [ip, #1394]	@ zero_extendqisi2
.LPIC2100:
	add	r1, pc, r1
	ldrb	r8, [ip, #1370]	@ zero_extendqisi2
.LPIC2090:
	add	lr, pc, lr
	add	r2, r1, #1408
	ldrb	r6, [ip, #1382]	@ zero_extendqisi2
	add	r3, r1, #1456
	add	r2, r2, #12
	add	r3, r3, #8
	str	lr, [r9, #28]
	add	r1, r1, #1376
	strb	r5, [ip, #1430]
	strb	r5, [ip, #1466]
	strb	r8, [ip, #1406]
	strb	r8, [ip, #1442]
	strb	r6, [ip, #1418]
	strb	r6, [ip, #1454]
	bl	usb_assign_descriptors(PLT)
	subs	r5, r0, #0
	beq	.L10438
.L10408:
	ldr	r3, [r4, #160]
.L10410:
	cmp	r3, #0
	beq	.L10414
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L10414:
	ldr	r3, [r4, #156]
	ldr	r1, .L10439+20
	cmp	r3, #0
	movne	r2, #0
.LPIC2105:
	add	r1, pc, r1
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err(PLT)
.L10417:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10437:
	ldr	r3, [r4, #160]
	mvn	r5, #18
	b	.L10410
.L10438:
	ldr	r2, .L10439+24
	ldr	r3, .L10439+28
.LPIC2103:
	add	r2, pc, r2
.LPIC2104:
	add	r3, pc, r3
	strd	r2, [r4, #128]
	b	.L10417
.L10423:
	mvn	r5, #11
	b	.L10410
.L10421:
	mvn	r5, #11
	b	.L10414
.L10440:
	.align	2
.L10439:
	.word	.LANCHOR1-(.LPIC2080+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2106+8))
	.word	.LANCHOR1-(.LPIC2091+8)
	.word	.LANCHOR0-(.LPIC2100+8)
	.word	ecm_notify_complete-(.LPIC2090+8)
	.word	.LC503-(.LPIC2105+8)
	.word	ecm_open-(.LPIC2103+8)
	.word	ecm_close-(.LPIC2104+8)
	.fnend
	.size	ecm_bind, .-ecm_bind
	.align	2
	.type	f_audio_bind, %function
f_audio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L10457
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L10457+4
	strd	r6, [sp, #8]
	movw	r6, #1484
	strd	r8, [sp, #16]
	mov	r7, r1
	mov	r9, r0
	strd	r10, [sp, #24]
	movw	r10, #1508
	str	lr, [sp, #32]
	ldr	r4, [r1, #132]
	.pad #12
	sub	sp, sp, #12
	ldr	r2, [r1, #160]
.LPIC2108:
	add	r5, pc, r5
	ldrb	lr, [r1, #128]	@ zero_extendqisi2
	ldrb	ip, [r1, #156]	@ zero_extendqisi2
.LPIC2144:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ubfx	fp, r4, #16, #8
	strh	r4, [r5, r6]	@ movhi
	ubfx	r8, r2, #16, #8
	strh	r2, [r5, r10]	@ movhi
	ldr	r6, [r0, #24]
	strb	fp, [r5, #1486]
	strb	r8, [r5, #1510]
	str	r2, [sp, #4]
	strb	lr, [r5, #1480]
	strb	lr, [r3, #7]
	strb	ip, [r5, #1495]
	strb	ip, [r5, #1504]
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L10452
	ldr	r3, .L10457+8
	mov	r0, r9
	mov	r1, r7
.LPIC2143:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	strb	r4, [r3, #2]
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L10453
	ldr	r8, .L10457+12
	uxtb	r3, r4
	mov	r4, #0
	mov	r0, r9
	strb	r4, [r7, #240]
	mov	r1, r7
	strb	r3, [r5, #1514]
.LPIC2142:
	ldr	r8, [pc, r8]		@ tls_load_dot_plus_eight
	strb	r3, [r5, #1526]
	strb	r3, [r8, #8]
	bl	usb_interface_id(PLT)
	subs	r9, r0, #0
	blt	.L10454
	uxtb	r3, r9
	add	r10, r5, #1552
	strb	r4, [r7, #241]
	add	r10, r10, #8
	mov	r1, r10
	strb	r3, [r5, #1538]
	strb	r3, [r5, #1550]
	strb	r3, [r8, #9]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10455
	add	r9, r5, #1568
	str	r0, [r7, #168]
	add	r9, r9, #4
	str	r10, [r0, #28]
	str	r6, [r0]
	mov	r1, r9
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	subs	r8, r0, #0
	beq	.L10456
	str	r8, [r7, #164]
	mov	r0, r7
	ldr	r1, .L10457+16
	str	r6, [r8]
	ldrb	r7, [r5, #1562]	@ zero_extendqisi2
	mov	r3, r4
	ldrb	r6, [r5, #1574]	@ zero_extendqisi2
	str	r9, [r8, #28]
	ldr	r5, .L10457+20
.LPIC2140:
	add	r1, pc, r1
	and	lr, r7, #127
	mov	r2, r1
	and	ip, r6, #127
.LPIC2136:
	add	r5, pc, r5
	strb	lr, [r5, #1532]
	strb	ip, [r5, #1564]
	bl	usb_assign_descriptors(PLT)
	cmp	r0, #0
	strne	r4, [r8]
.L10449:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10452:
	ldr	r1, .L10457+24
	ldr	r0, .L10457+28
.LPIC2114:
	add	r1, pc, r1
.LPIC2113:
	add	r0, pc, r0
.L10451:
	add	r1, r1, #3200
	add	r1, r1, #4
	mov	r2, r1
	bl	printk(PLT)
	mov	r0, r4
	b	.L10449
.L10456:
	ldr	r1, .L10457+32
	ldr	r0, .L10457+36
.LPIC2133:
	add	r1, pc, r1
	add	r1, r1, #3200
.LPIC2132:
	add	r0, pc, r0
	add	r1, r1, #4
	mov	r2, r1
	bl	printk(PLT)
	mvn	r0, #11
	b	.L10449
.L10455:
	ldr	r1, .L10457+40
	ldr	r0, .L10457+44
.LPIC2128:
	add	r1, pc, r1
	add	r1, r1, #3200
.LPIC2127:
	add	r0, pc, r0
	add	r1, r1, #4
	mov	r2, r1
	bl	printk(PLT)
	mvn	r0, #18
	b	.L10449
.L10454:
	ldr	r1, .L10457+48
	ldr	r0, .L10457+52
.LPIC2122:
	add	r1, pc, r1
	add	r1, r1, #3200
.LPIC2121:
	add	r0, pc, r0
	add	r1, r1, #4
	mov	r2, r1
	bl	printk(PLT)
	mov	r0, r9
	b	.L10449
.L10453:
	ldr	r1, .L10457+56
	ldr	r0, .L10457+60
.LPIC2117:
	add	r1, pc, r1
.LPIC2116:
	add	r0, pc, r0
	b	.L10451
.L10458:
	.align	2
.L10457:
	.word	speaker_input_terminal_desc(GOT_PREL)+(.-(.LPIC2144+8))
	.word	.LANCHOR1-(.LPIC2108+8)
	.word	uac1_ac_interface_desc(GOT_PREL)+(.-(.LPIC2143+8))
	.word	uac1_ac_header_desc(GOT_PREL)+(.-(.LPIC2142+8))
	.word	.LANCHOR7-(.LPIC2140+8)
	.word	.LANCHOR0-(.LPIC2136+8)
	.word	.LANCHOR3-(.LPIC2114+8)
	.word	.LC504-(.LPIC2113+8)
	.word	.LANCHOR3-(.LPIC2133+8)
	.word	.LC507-(.LPIC2132+8)
	.word	.LANCHOR3-(.LPIC2128+8)
	.word	.LC506-(.LPIC2127+8)
	.word	.LANCHOR3-(.LPIC2122+8)
	.word	.LC505-(.LPIC2121+8)
	.word	.LANCHOR3-(.LPIC2117+8)
	.word	.LC505-(.LPIC2116+8)
	.fnend
	.size	f_audio_bind, .-f_audio_bind
	.align	2
	.type	ncm_bind, %function
ncm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	mov	r8, r0
	str	lr, [sp, #20]
	ldr	r7, [r0, #24]
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L10460
	ldr	r5, .L10494
	uxtb	r4, r4
	mov	r0, r8
	mov	r1, r6
	strb	r4, [r6, #140]
.LPIC2145:
	add	r5, pc, r5
	strb	r4, [r5, #1586]
	strb	r4, [r5, #1594]
	strb	r4, [r5, #1607]
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L10460
	uxtb	r4, r4
	add	r1, r5, #1632
	add	r1, r1, #4
	strb	r4, [r6, #141]
	strb	r4, [r5, #1614]
	strb	r4, [r5, #1626]
	strb	r4, [r5, #1608]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10462
	str	r0, [r6, #80]
	add	r1, r5, #1648
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10462
	add	r1, r5, #1648
	str	r0, [r6, #84]
	add	r1, r1, #12
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L10462
	str	r3, [r6, #156]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r4, r0
	str	r0, [r6, #160]
	beq	.L10465
	ldr	r3, .L10494+4
.LPIC2167:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L10464
	mov	r1, #208
	bl	kmem_cache_alloc(PLT)
.L10464:
	str	r0, [r4]
	ldr	r3, [r6, #160]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L10465
	ldr	ip, .L10494+8
	str	r6, [r3, #32]
	mov	r0, r6
	ldr	r2, .L10494+12
	mov	r3, #0
	ldr	lr, .L10494+16
	ldr	r7, [r6, #160]
.LPIC2156:
	add	ip, pc, ip
	ldrb	r8, [ip, #1638]	@ zero_extendqisi2
.LPIC2162:
	add	r2, pc, r2
	ldrb	r5, [ip, #1650]	@ zero_extendqisi2
.LPIC2155:
	add	lr, pc, lr
	add	r1, r2, #1568
	ldrb	r4, [ip, #1662]	@ zero_extendqisi2
	add	r2, r2, #1616
	add	r1, r1, #12
	add	r2, r2, #12
	str	lr, [r7, #28]
	strb	r8, [ip, #1674]
	strb	r5, [ip, #1686]
	strb	r4, [ip, #1698]
	bl	usb_assign_descriptors(PLT)
	ldr	r2, .L10494+20
	mov	r0, #0
	ldr	r3, .L10494+24
.LPIC2164:
	add	r2, pc, r2
.LPIC2165:
	add	r3, pc, r3
	strd	r2, [r6, #128]
	b	.L10466
.L10462:
	mvn	r4, #18
.L10460:
	mov	r0, r6
	bl	usb_free_all_descriptors(PLT)
	ldr	r3, [r6, #160]
	cmp	r3, #0
	beq	.L10467
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r6, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L10467:
	ldr	r3, [r6, #156]
	ldr	r1, .L10494+28
	cmp	r3, #0
	movne	r2, #0
.LPIC2166:
	add	r1, pc, r1
	strne	r2, [r3]
	ldr	r3, [r6, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r6, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r4
	ldr	r2, [r6]
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r0, r4
.L10466:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10465:
	mvn	r4, #11
	b	.L10460
.L10495:
	.align	2
.L10494:
	.word	.LANCHOR1-(.LPIC2145+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2167+8))
	.word	.LANCHOR1-(.LPIC2156+8)
	.word	.LANCHOR0-(.LPIC2162+8)
	.word	ncm_notify_complete-(.LPIC2155+8)
	.word	ncm_open-(.LPIC2164+8)
	.word	ncm_close-(.LPIC2165+8)
	.word	.LC503-(.LPIC2166+8)
	.fnend
	.size	ncm_bind, .-ncm_bind
	.align	2
	.type	charger_bind, %function
charger_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L10497
	ldr	r7, .L10523
	ldr	r3, [r6, #24]
.LPIC2168:
	add	r7, pc, r7
	add	r1, r7, #1712
	strb	r5, [r7, #1710]
	add	r1, r1, #8
	ldr	r0, [r3]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L10499
	ldr	r5, .L10523+4
	ldr	r2, [r6, #24]
.LPIC2170:
	add	r5, pc, r5
	add	r0, r5, #1664
	str	r2, [r3]
	add	r0, r0, #12
	str	r3, [r4, #-4]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L10499
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10522
.L10500:
	mov	r0, #0
.L10502:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10522:
	ldrb	r3, [r7, #1722]	@ zero_extendqisi2
	add	r0, r5, #1680
	add	r0, r0, #12
	strb	r3, [r7, #1734]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L10499
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L10500
	ldrb	r3, [r7, #1722]	@ zero_extendqisi2
	add	r0, r5, #1696
	add	r0, r0, #12
	strb	r3, [r7, #1746]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L10500
.L10499:
	mvn	r5, #18
.L10497:
	ldr	r3, [r4, #20]
	ldr	r1, .L10523+8
	ldr	r3, [r3, #24]
.LPIC2177:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L10503
	bl	kfree(PLT)
.L10503:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L10504
	bl	kfree(PLT)
.L10504:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	moveq	r0, r5
	beq	.L10502
	bl	kfree(PLT)
	mov	r0, r5
	b	.L10502
.L10524:
	.align	2
.L10523:
	.word	.LANCHOR1-(.LPIC2168+8)
	.word	.LANCHOR0-(.LPIC2170+8)
	.word	.LC508-(.LPIC2177+8)
	.fnend
	.size	charger_bind, .-charger_bind
	.align	2
	.type	acc_function_bind, %function
acc_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L10575
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	ldr	r2, .L10575+4
	strd	r6, [sp, #8]
	mov	r1, #0
	strd	r8, [sp, #16]
	mov	r7, r0
	strd	r10, [sp, #24]
.LPIC2178:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.LPIC2179:
	add	r2, pc, r2
	add	r0, r3, #596
	bl	__hid_register_driver(PLT)
	cmp	r0, #0
	beq	.L10574
.L10568:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10574:
	str	r0, [r4, #1636]
	mov	r1, r4
	mov	r0, r7
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L10568
	ldr	r5, .L10575+8
	ldr	r6, [r4, #76]
.LPIC2180:
	add	r5, pc, r5
	add	r1, r5, #1760
	strb	r0, [r5, #1758]
	add	r1, r1, #8
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10527
	add	r5, r5, #1776
	str	r4, [r0]
	add	r5, r5, #4
	str	r0, [r4, #84]
	ldr	r0, [r6]
	mov	r1, r5
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10527
	str	r4, [r0]
	mov	r1, r5
	str	r0, [r4, #88]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10527
	ldr	fp, .L10575+12
	add	r10, r4, #1648
	add	r9, r4, #80
	mov	r6, #4
	str	r4, [r0]
	str	r0, [r4, #88]
.LPIC2192:
	add	fp, pc, fp
.L10537:
	ldr	r8, [r4, #84]
	mov	r1, #208
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	mov	r1, #2
	movw	r0, #16592
	beq	.L10530
	bl	__get_free_pages(PLT)
	mov	r3, r0
	mov	r0, r9
	cmp	r3, #0
	str	r3, [r5]
	beq	.L10571
	str	fp, [r5, #28]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #1652]
	add	r2, r5, #36
	mov	r1, r0
	mov	r0, r9
	str	r2, [r4, #1652]
	str	r10, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	subs	r6, r6, #1
	bne	.L10537
	ldr	fp, .L10575+16
.LPIC2194:
	add	fp, pc, fp
.L10538:
	ldr	r8, [r4, #88]
	mov	r1, #208
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	mov	r1, #2
	movw	r0, #16592
	beq	.L10530
	bl	__get_free_pages(PLT)
	cmp	r0, #0
	add	r3, r6, #420
	str	r0, [r5]
	beq	.L10571
	cmp	r6, #1
	str	fp, [r5, #28]
	str	r5, [r4, r3, asl #2]
	beq	.L10569
	mov	r6, #1
	b	.L10538
.L10569:
	ldr	r2, [r7, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L10572
	ldr	r3, .L10575+20
.LPIC2184:
	add	r3, pc, r3
	ldrb	r0, [r3, #1770]	@ zero_extendqisi2
	ldrb	r1, [r3, #1782]	@ zero_extendqisi2
	strb	r0, [r3, #1794]
	strb	r1, [r3, #1806]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L10572
	strb	r0, [r3, #1818]
	mov	r0, #0
	strb	r1, [r3, #1830]
	b	.L10568
.L10572:
	mov	r0, #0
	b	.L10568
.L10571:
	ldr	r3, [r8, #8]
	mov	r1, r5
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L10530:
	ldr	r0, .L10575+24
	mov	r6, #256
	mov	r5, #512
.LPIC2193:
	add	r0, pc, r0
	bl	printk(PLT)
.L10539:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r7, [r4, #1648]
	mov	r3, r0
	mov	r0, r9
	mov	r1, r3
	cmp	r7, r10
	sub	r8, r7, #36
	beq	.L10532
	ldrd	r2, [r7]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r6, [r7]
	str	r5, [r7, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r8, #0
	beq	.L10541
	ldr	fp, [r4, #84]
	ldr	r0, [r7, #-36]
	bl	kfree(PLT)
	mov	r1, r8
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10539
.L10527:
	mvn	r0, #18
	b	.L10568
.L10532:
	mov	r0, r9
	mov	r1, r3
	bl	_raw_spin_unlock_irqrestore(PLT)
.L10541:
	mov	r5, #0
.L10535:
	add	r3, r5, #420
	ldr	r7, [r4, #88]
	ldr	r6, [r4, r3, asl #2]
	cmp	r6, #0
	beq	.L10534
	ldr	r0, [r6]
	bl	kfree(PLT)
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L10534:
	cmp	r5, #1
	mov	r5, #1
	bne	.L10535
	mvn	r0, #0
	b	.L10568
.L10576:
	.align	2
.L10575:
	.word	.LANCHOR0-(.LPIC2178+8)
	.word	.LC509-(.LPIC2179+8)
	.word	.LANCHOR1-(.LPIC2180+8)
	.word	acc_complete_in-(.LPIC2192+8)
	.word	acc_complete_out-(.LPIC2194+8)
	.word	.LANCHOR1-(.LPIC2184+8)
	.word	.LC510-(.LPIC2193+8)
	.fnend
	.size	acc_function_bind, .-acc_function_bind
	.align	2
	.type	fsg_bind, %function
fsg_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #24]
	ldr	r6, [r3]
	str	r6, [r1, #76]
	bl	usb_interface_id(PLT)
	subs	r3, r0, #0
	movlt	r0, r3
	blt	.L10578
	ldr	r4, .L10586
	strh	r3, [r5, #84]	@ movhi
	mov	r0, r6
.LPIC2195:
	add	r4, pc, r4
	add	r1, r4, #1840
	add	r1, r1, #12
	strb	r3, [r4, #1842]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L10580
	ldr	r2, [r5, #80]
	add	r1, r4, #1856
	mov	r0, r6
	add	r1, r1, #8
	str	r2, [r3]
	str	r3, [r5, #92]
	bl	usb_ep_autoconfig(PLT)
	subs	ip, r0, #0
	beq	.L10580
	ldr	r2, [r5, #80]
	mov	lr, #15
	mov	r0, r5
	ldr	r3, .L10586+4
	str	r2, [ip]
	ldrb	r7, [r4, #1854]	@ zero_extendqisi2
	ldrb	r6, [r4, #1866]	@ zero_extendqisi2
.LPIC2207:
	add	r3, pc, r3
	str	ip, [r5, #96]
	add	r1, r3, #1712
	add	r2, r3, #1728
	strb	lr, [r4, #1914]
	add	r3, r3, #1744
	add	r1, r1, #12
	strb	lr, [r4, #1934]
	add	r2, r2, #12
	add	r3, r3, #12
	strb	r7, [r4, #1878]
	strb	r7, [r4, #1902]
	strb	r6, [r4, #1890]
	strb	r6, [r4, #1922]
	bl	usb_assign_descriptors(PLT)
	cmp	r0, #0
	bne	.L10580
.L10578:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10580:
	ldr	r0, [r5, #76]
	ldr	r1, .L10586+8
	add	r0, r0, #32
.LPIC2197:
	add	r1, pc, r1
	bl	dev_err(PLT)
	movw	r0, #65012
	movt	r0, 65535
	b	.L10578
.L10587:
	.align	2
.L10586:
	.word	.LANCHOR1-(.LPIC2195+8)
	.word	.LANCHOR0-(.LPIC2207+8)
	.word	.LC511-(.LPIC2197+8)
	.fnend
	.size	fsg_bind, .-fsg_bind
	.align	2
	.type	mtp_function_bind, %function
mtp_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L10664
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
.LPIC2214:
	add	r3, pc, r3
	.pad #20
	sub	sp, sp, #20
	mov	r7, r3
	str	r3, [sp, #4]
	ldr	r3, [r0, #24]
	str	r0, [sp, #8]
	str	r3, [r1, #76]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L10653
	ldr	r5, .L10664+4
	ldr	r6, [r4, #76]
.LPIC2210:
	add	r5, pc, r5
	add	r1, r5, #1952
	strb	r0, [r5, #1942]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10590
	add	r1, r5, #1952
	str	r4, [r0]
	add	r1, r1, #12
	str	r0, [r4, #84]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10590
	str	r4, [r0]
	add	r1, r5, #644
	str	r0, [r4, #88]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10590
.L10591:
	str	r4, [r0]
	ldr	r2, .L10664+8
	mov	r1, #4
	str	r0, [r4, #92]
	ldr	r0, .L10664+12
	ldr	r3, .L10664+16
.LPIC2224:
	add	r0, pc, r0
	str	r0, [sp]
	ldr	r6, [r7, r2]
	ldr	r5, [r7, r3]
	ldr	r10, [r6]
	cmp	r10, #16384
	strhi	r1, [r5]
	bhi	.L10593
.L10592:
	ldr	r3, [r5]
	cmp	r3, #0
	beq	.L10594
.L10593:
	mov	r8, #0
	add	r9, r4, #80
	mov	r7, r10
	b	.L10614
.L10660:
	ldr	r7, [r6]
.L10614:
	ldr	r10, [r4, #84]
	mov	r1, #208
	add	r8, r8, #1
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #8]
	blx	r3
	subs	fp, r0, #0
	mov	r1, #208
	mov	r0, r7
	beq	.L10595
	bl	__kmalloc(PLT)
	mov	r3, r0
	mov	r0, r9
	cmp	r3, #0
	str	r3, [fp]
	beq	.L10659
	ldr	r3, [sp]
	str	r3, [fp, #28]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #112]
	add	ip, fp, #36
	add	r3, r4, #108
	mov	r1, r0
	mov	r0, r9
	str	ip, [r4, #112]
	str	r3, [fp, #36]
	str	r2, [fp, #40]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r5]
	cmp	r8, r3
	bcc	.L10660
.L10594:
	ldr	r3, .L10664+20
	ldr	r2, [sp, #4]
	ldr	r8, [r2, r3]
	ldr	fp, [r8]
	ubfx	r3, fp, #0, #10
	cmp	r3, #0
	bne	.L10661
.L10599:
	ldr	r9, .L10664+24
	ldr	r7, [r4, #88]
.LPIC2225:
	add	r9, pc, r9
.L10606:
	mov	r6, #0
.L10618:
	ldr	r3, [r7, #8]
	mov	r1, #208
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	mov	r1, #208
	mov	r0, fp
	beq	.L10600
	bl	__kmalloc(PLT)
	cmp	r0, #0
	add	r3, r6, #40
	str	r0, [r5]
	beq	.L10662
	cmp	r6, #1
	str	r9, [r5, #28]
	mov	r6, #1
	str	r5, [r4, r3, asl #2]
	beq	.L10625
	ldr	fp, [r8]
	ldr	r7, [r4, #88]
	b	.L10618
.L10625:
	ldr	r8, .L10664+28
	mov	r7, #5
	mov	r9, #16
	ldr	r10, [sp, #4]
.LPIC2226:
	add	r8, pc, r8
.L10617:
	ldr	r6, [r4, #92]
	mov	r1, #208
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	ldr	r3, .L10664+32
	mov	r1, #208
	beq	.L10610
	ldr	r3, [r10, r3]
	ldr	r3, [r3, #24]
	subs	r0, r3, #0
	beq	.L10608
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r5]
	beq	.L10663
.L10609:
	add	r6, r4, #80
	str	r8, [r5, #28]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #120]
	add	ip, r5, #36
	add	r3, r4, #116
	mov	r1, r0
	mov	r0, r6
	str	ip, [r4, #120]
	str	r3, [r5, #36]
	str	r2, [r5, #40]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore(PLT)
	subs	r7, r7, #1
	bne	.L10617
	ldr	r3, [sp, #8]
	ldr	r2, [r3, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L10658
	ldr	r3, .L10664+36
.LPIC2216:
	add	r3, pc, r3
	ldrb	r0, [r3, #1954]	@ zero_extendqisi2
	ldrb	r1, [r3, #1966]	@ zero_extendqisi2
	strb	r0, [r3, #1978]
	strb	r1, [r3, #1990]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L10658
	strb	r0, [r3, #2002]
	mov	r0, r7
	strb	r1, [r3, #2014]
.L10653:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10608:
	str	r9, [r5]
	b	.L10609
.L10661:
	mov	r3, #16384
	mov	fp, r3
	str	r3, [r8]
	b	.L10599
.L10658:
	mov	r0, r7
	b	.L10653
.L10659:
	ldr	r2, [r10, #8]
	mov	r1, fp
	mov	r0, r10
	ldr	r3, [r2, #12]
	blx	r3
.L10595:
	ldr	r3, [r6]
	cmp	r3, #16384
	bls	.L10610
	add	r3, r4, #108
	add	r9, r4, #80
	mov	fp, #256
	mov	r10, r3
.L10613:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r7, [r4, #108]
	mov	r2, r0
	mov	r0, r9
	mov	r1, r2
	cmp	r7, r10
	sub	r8, r7, #36
	beq	.L10597
	ldrd	r2, [r7]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r3, #512
	str	fp, [r7]
	str	r3, [r7, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r8, #0
	beq	.L10615
	ldr	r3, [r4, #84]
	ldr	r0, [r7, #-36]
	str	r3, [sp, #12]
	bl	kfree(PLT)
	ldr	r3, [sp, #12]
	mov	r1, r8
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L10613
.L10597:
	mov	r0, r9
	mov	r1, r2
	bl	_raw_spin_unlock_irqrestore(PLT)
.L10615:
	mov	r3, #16384
	mov	r1, #8
	mov	r10, r3
	str	r3, [r6]
	str	r1, [r5]
	b	.L10592
.L10662:
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L10600:
	ldr	r3, [r8]
	cmp	r3, #16384
	bls	.L10610
	cmp	r6, #0
	bne	.L10602
	ldr	r7, [r4, #88]
.L10603:
	mov	r3, #16384
	mov	fp, r3
	str	r3, [r8]
	b	.L10606
.L10602:
	add	r5, r6, #41
	ldr	r7, [r4, #88]
	add	r5, r4, r5, asl #2
.L10605:
	ldr	r10, [r5, #-4]!
	cmp	r10, #0
	beq	.L10604
	ldr	r0, [r10]
	bl	kfree(PLT)
	ldr	r3, [r7, #8]
	mov	r0, r7
	mov	r1, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r7, [r4, #88]
.L10604:
	subs	r6, r6, #1
	bne	.L10605
	b	.L10603
.L10590:
	mvn	r0, #18
	b	.L10653
.L10663:
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L10610:
	ldr	r0, .L10664+40
.LPIC2215:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #0
	b	.L10653
.L10665:
	.align	2
.L10664:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC2214+8)
	.word	.LANCHOR1-(.LPIC2210+8)
	.word	mtp_tx_req_len(GOT)
	.word	mtp_complete_in-(.LPIC2224+8)
	.word	mtp_tx_reqs(GOT)
	.word	mtp_rx_req_len(GOT)
	.word	mtp_complete_out-(.LPIC2225+8)
	.word	mtp_complete_intr-(.LPIC2226+8)
	.word	kmalloc_caches(GOT)
	.word	.LANCHOR1-(.LPIC2216+8)
	.word	.LC512-(.LPIC2215+8)
	.fnend
	.size	mtp_function_bind, .-mtp_function_bind
	.align	2
	.type	ccid_function_bind, %function
ccid_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #24]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	str	r0, [r6, #80]
	blt	.L10682
	ldr	r5, .L10686
.LPIC2229:
	add	r5, pc, r5
	add	r1, r5, #2032
	strb	r0, [r5, #2026]
	add	r1, r1, #4
	ldr	r0, [r4]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10683
	str	r0, [r6, #92]
	add	r1, r5, #2048
	str	r4, [r0]
	ldr	r0, [r4]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10684
	add	r1, r5, #2048
	str	r0, [r6, #96]
	add	r1, r1, #12
	str	r4, [r0]
	ldr	r0, [r4]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10685
	ldr	r7, .L10686+4
	str	r0, [r6, #100]
	str	r4, [r0]
.LPIC2239:
	add	r7, pc, r7
	add	r0, r7, #880
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r6, #8]
	beq	.L10673
	ldr	r3, [r4]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10675
.L10677:
	mov	r0, #0
.L10668:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10675:
	ldrb	r1, [r5, #2050]	@ zero_extendqisi2
	add	r0, r7, #904
	ldrb	r2, [r5, #2062]	@ zero_extendqisi2
	ldrb	r3, [r5, #2038]	@ zero_extendqisi2
	strb	r1, [r5, #2074]
	strb	r2, [r5, #2086]
	strb	r3, [r5, #2098]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r6, #12]
	bne	.L10677
.L10673:
	ldr	r2, [r6, #100]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r6, #100]
.L10671:
	ldr	r2, [r6, #96]
	mov	r3, #0
	mvn	r0, #18
	str	r3, [r2]
	str	r3, [r6, #96]
	b	.L10668
.L10685:
	ldr	r1, .L10686+8
	ldr	r0, .L10686+12
.LPIC2238:
	add	r1, pc, r1
	add	r1, r1, #3216
.LPIC2237:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L10673
.L10684:
	ldr	r1, .L10686+16
	ldr	r0, .L10686+20
.LPIC2235:
	add	r1, pc, r1
	add	r1, r1, #3216
.LPIC2234:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L10671
.L10683:
	ldr	r1, .L10686+24
	ldr	r0, .L10686+28
.LPIC2232:
	add	r1, pc, r1
	add	r1, r1, #3216
.LPIC2231:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L10668
.L10682:
	ldr	r1, .L10686+32
	mov	r2, r0
	ldr	r0, .L10686+36
.LPIC2228:
	add	r1, pc, r1
	add	r1, r1, #3216
.LPIC2227:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, [r6, #80]
	b	.L10668
.L10687:
	.align	2
.L10686:
	.word	.LANCHOR1-(.LPIC2229+8)
	.word	.LANCHOR0-(.LPIC2239+8)
	.word	.LANCHOR3-(.LPIC2238+8)
	.word	.LC495-(.LPIC2237+8)
	.word	.LANCHOR3-(.LPIC2235+8)
	.word	.LC493-(.LPIC2234+8)
	.word	.LANCHOR3-(.LPIC2232+8)
	.word	.LC514-(.LPIC2231+8)
	.word	.LANCHOR3-(.LPIC2228+8)
	.word	.LC513-(.LPIC2227+8)
	.fnend
	.size	ccid_function_bind, .-ccid_function_bind
	.align	2
	.type	qdss_bind, %function
qdss_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	str	r8, [sp, #16]
	mov	r8, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	ldr	r3, [r0, #24]
	ldr	r7, [r3]
	ldr	r3, [r7, #20]
	cmp	r3, #2
	bhi	.L10689
	ldr	r0, .L10731
	movw	r4, #65012
	movt	r4, 65535
.LPIC2247:
	add	r0, pc, r0
	bl	printk(PLT)
.L10690:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10689:
	mov	r5, r1
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L10728
	ldr	r6, .L10731+4
	uxtb	r4, r4
	mov	r0, r8
	mov	r1, r5
	strb	r4, [r5, #81]
.LPIC2249:
	add	r6, pc, r6
	strb	r4, [r6, #2110]
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L10729
	uxtb	r4, r4
	add	r1, r6, #2128
	add	r1, r1, #4
	mov	r0, r7
	add	r2, r6, #2144
	strb	r4, [r5, #80]
	strb	r4, [r6, #2122]
	bl	usb_ep_autoconfig_ss(PLT)
	subs	r3, r0, #0
	beq	.L10695
	add	r1, r6, #2144
	str	r3, [r5, #100]
	mov	r0, r7
	add	r1, r1, #8
	str	r5, [r3]
	add	r2, r1, #12
	bl	usb_ep_autoconfig_ss(PLT)
	subs	r3, r0, #0
	beq	.L10695
	add	r1, r6, #2160
	str	r3, [r5, #96]
	mov	r0, r7
	add	r1, r1, #12
	str	r5, [r3]
	add	r2, r1, #12
	bl	usb_ep_autoconfig_ss(PLT)
	cmp	r0, #0
	beq	.L10695
	ldr	r4, .L10731+8
	str	r0, [r5, #92]
	str	r5, [r0]
	ldrb	r1, [r6, #2134]	@ zero_extendqisi2
	ldrb	r2, [r6, #2154]	@ zero_extendqisi2
	ldrb	r3, [r6, #2174]	@ zero_extendqisi2
.LPIC2265:
	add	r4, pc, r4
	add	r0, r4, #1776
	strb	r1, [r6, #2194]
	add	r0, r0, #4
	strb	r2, [r6, #2206]
	strb	r3, [r6, #2218]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r5, #12]
	beq	.L10698
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bhi	.L10730
.L10697:
	ldr	r0, .L10731+12
	ldr	r1, [r7, #28]
.LPIC2268:
	add	r0, pc, r0
	bl	strcmp(PLT)
	subs	r4, r0, #0
	movne	r4, #0
	bne	.L10690
	ldr	r0, [r5, #100]
	mov	r1, #1
	bl	dwc3_tx_fifo_resize_request(PLT)
	b	.L10690
.L10730:
	add	r0, r4, #1792
	add	r0, r0, #12
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r5, #16]
	bne	.L10697
.L10698:
	ldr	r0, .L10731+16
.LPIC2266:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10694
.L10695:
	ldr	r0, .L10731+20
.LPIC2254:
	add	r0, pc, r0
	bl	printk(PLT)
.L10694:
	ldr	r3, [r5, #96]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #100]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bls	.L10702
	ldr	r0, [r5, #16]
	cmp	r0, #0
	beq	.L10702
	bl	kfree(PLT)
	ldr	r3, [r7, #20]
.L10702:
	cmp	r3, #2
	movwls	r4, #65012
	movtls	r4, 65535
	bls	.L10690
	ldr	r0, [r5, #12]
	movw	r4, #65012
	cmp	r0, #0
	movteq	r4, 65535
	beq	.L10690
	bl	kfree(PLT)
	movt	r4, 65535
	b	.L10690
.L10728:
	ldr	r0, .L10731+24
.LPIC2248:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10690
.L10729:
	ldr	r0, .L10731+28
.LPIC2250:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10690
.L10732:
	.align	2
.L10731:
	.word	.LC515-(.LPIC2247+8)
	.word	.LANCHOR1-(.LPIC2249+8)
	.word	.LANCHOR0-(.LPIC2265+8)
	.word	.LC328-(.LPIC2268+8)
	.word	.LC518-(.LPIC2266+8)
	.word	.LC517-(.LPIC2254+8)
	.word	.LC516-(.LPIC2248+8)
	.word	.LC516-(.LPIC2250+8)
	.fnend
	.size	qdss_bind, .-qdss_bind
	.align	2
	.type	rmnet_mux_bind, %function
rmnet_mux_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #24]
	str	r5, [r1, #76]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L10734
	ldr	r6, .L10757
	uxtb	r0, r0
	strb	r0, [r4, #348]
.LPIC2269:
	add	r6, pc, r6
	add	r1, r6, #2240
	strb	r0, [r6, #2230]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10735
	add	r1, r6, #2240
	str	r5, [r0]
	add	r1, r1, #12
	str	r0, [r4, #84]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10735
	add	r1, r6, #2256
	str	r5, [r0]
	add	r1, r1, #8
	str	r0, [r4, #80]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10735
	str	r5, [r0]
	str	r0, [r4, #88]
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L10736
	ldrb	r1, [r6, #2242]	@ zero_extendqisi2
	ldrb	r2, [r6, #2254]	@ zero_extendqisi2
	ldrb	r3, [r6, #2266]	@ zero_extendqisi2
	strb	r1, [r6, #2278]
	strb	r2, [r6, #2290]
	strb	r3, [r6, #2302]
.L10736:
	ldr	r0, [r4, #368]
	add	r1, r4, #248
	mov	r2, #0
	bl	queue_delayed_work(PLT)
	mov	r0, #0
.L10734:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10735:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	cmp	r3, #0
	movne	r2, #0
	mvnne	r0, #18
	mvneq	r0, #18
	strne	r2, [r3]
	b	.L10734
.L10758:
	.align	2
.L10757:
	.word	.LANCHOR1-(.LPIC2269+8)
	.fnend
	.size	rmnet_mux_bind, .-rmnet_mux_bind
	.align	2
	.type	ffs_func_bind, %function
ffs_func_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r1, #-44]
	.pad #44
	sub	sp, sp, #44
	ldr	r3, [r1, #-48]
	ldr	r4, [r5, #168]
	ldr	r7, [r3, #20]
	adds	r4, r4, #0
	movne	r4, #1
	cmp	r7, #2
	bls	.L10760
	ldr	r8, [r5, #172]
	cmp	r8, #0
	bne	.L10761
	cmp	r7, #4
	bls	.L10762
	ldr	r3, [r5, #176]
	cmp	r3, #0
	beq	.L10762
.L10821:
	mov	r3, #1
	str	r3, [sp, #12]
.L10763:
	ldrh	r3, [r5, #184]
	mov	r1, #208
	mov	r9, r3, asl #5
	sub	r3, r9, r3, asl #2
	mov	r0, r3
	str	r3, [sp, #36]
	bl	__kmalloc(PLT)
	cmp	r4, #0
	mov	r9, r0
	bne	.L10819
	cmp	r8, #0
	beq	.L10863
.L10809:
	ldr	r0, [r5, #172]
	mov	r3, #16
	str	r3, [sp, #20]
	add	r0, r0, #1
	mov	r0, r0, asl #2
	b	.L10808
.L10760:
	cmp	r4, #0
	beq	.L10860
	ldrh	r3, [r5, #184]
	mov	r9, #28
	mov	r2, #0
	mov	r1, #208
	str	r2, [sp, #12]
	mul	r3, r9, r3
	mov	r0, r3
	str	r3, [sp, #36]
	bl	__kmalloc(PLT)
	mov	r9, r0
	ldr	r0, [r5, #168]
	mov	r1, #208
	add	r0, r0, #1
	mov	r0, r0, asl #2
	bl	__kmalloc(PLT)
	str	r0, [sp, #20]
.L10857:
	ldr	r2, [sp, #20]
	mov	r3, #16
	mov	r8, #0
	str	r3, [sp, #24]
	str	r3, [sp, #16]
	clz	r10, r2
	mov	r10, r10, lsr #5
	b	.L10813
.L10761:
	cmp	r7, #4
	bls	.L10864
	ldr	r3, [r5, #176]
	mov	r8, #1
	cmp	r3, #0
	bne	.L10821
.L10762:
	orr	r3, r8, r4
	cmp	r3, #1
	bne	.L10860
	mov	r3, #0
	str	r3, [sp, #12]
	b	.L10763
.L10864:
	ldrh	r3, [r5, #184]
	mov	r2, #0
	mov	r1, #208
	mov	r8, #1
	str	r2, [sp, #12]
	mov	r9, r3, asl #5
	sub	r3, r9, r3, asl #2
	mov	r0, r3
	str	r3, [sp, #36]
	bl	__kmalloc(PLT)
	cmp	r4, #0
	mov	r9, r0
	beq	.L10809
.L10819:
	ldr	r0, [r5, #168]
	mov	r1, #208
	add	r0, r0, #1
	mov	r0, r0, asl #2
	bl	__kmalloc(PLT)
	cmp	r8, #0
	str	r0, [sp, #20]
	beq	.L10766
	ldr	r0, [r5, #172]
	ldr	r3, [sp, #20]
	add	r0, r0, #1
	mov	r0, r0, asl #2
.L10808:
	clz	r10, r3
	mov	r10, r10, lsr #5
	mov	r1, #208
	mov	r8, #1
	bl	__kmalloc(PLT)
	str	r0, [sp, #24]
.L10810:
	ldr	r3, [sp, #12]
	cmp	r3, #0
	beq	.L10767
	ldr	r0, [r5, #176]
	add	r0, r0, #1
	mov	r0, r0, asl #2
.L10811:
	mov	r3, #1
	mov	r1, #208
	str	r3, [sp, #12]
	bl	__kmalloc(PLT)
	str	r0, [sp, #16]
.L10813:
	ldrh	r2, [r5, #182]
	mov	r3, r2, asl #1
	mov	r0, r3
	str	r3, [sp, #32]
.L10814:
	mov	r1, #208
	cmp	r9, #0
	orreq	r10, r10, #1
	bl	__kmalloc(PLT)
	ldr	r7, [r5, #152]
	str	r0, [sp, #28]
	mov	r1, #208
	mov	r0, r7
	bl	__kmalloc(PLT)
	tst	r10, #255
	mov	fp, r0
	bne	.L10768
	ldr	r3, [sp, #24]
	ldr	r2, [sp, #16]
	cmp	r2, #0
	cmpne	r3, #0
	beq	.L10768
	ldr	r3, [sp, #28]
	cmp	r3, #0
	cmpne	r0, #0
	beq	.L10768
	ldr	r3, [sp, #36]
	cmp	r3, #0
	bne	.L10865
.L10770:
	ldr	r1, [r5, #148]
	mov	r0, fp
	ldr	r2, [r5, #156]
	add	r1, r1, #16
	bl	memcpy(PLT)
	ldr	r2, [r6, #-44]
	ldr	r2, [r2, #176]
	cmp	r2, #0
	bne	.L10866
.L10771:
	ldr	r3, [sp, #32]
	cmp	r3, #0
	bne	.L10867
.L10772:
	ldrh	r0, [r5, #184]
	cmp	r0, #0
	beq	.L10777
	mov	r2, r0, asl #5
	mvn	r1, #0
	sub	r2, r2, r0, asl #2
	add	r2, r9, r2
.L10776:
	strb	r1, [r2, #20]
	sub	r2, r2, #28
	cmp	r2, r9
	bne	.L10776
.L10777:
	ldr	r3, [sp, #20]
	cmp	r4, #0
	str	r9, [r6, #-40]
	sub	r9, r6, #52
	str	r3, [r6, #-20]
	ldr	r3, [sp, #24]
	str	r3, [r6, #-16]
	ldr	r3, [sp, #16]
	str	r3, [r6, #-12]
	ldr	r3, [sp, #28]
	stmdb	r6, {r3, fp}
	beq	.L10775
	ldr	r3, [sp, #20]
	mov	r1, fp
	mov	r2, r7
	str	r3, [r6, #8]
	ldr	r3, .L10871
	ldr	r0, [r5, #168]
	str	r9, [sp]
.LPIC2279:
	add	r3, pc, r3
	bl	ffs_do_descs.constprop.143(PLT)
	subs	r4, r0, #0
	blt	.L10823
.L10775:
	cmp	r8, #0
	beq	.L10778
	ldr	r8, .L10871+4
	rsb	r10, r4, r7
	add	r1, fp, r4
	ldr	r3, [sp, #24]
	mov	r2, r10
.LPIC2280:
	add	r8, pc, r8
	str	r3, [r6, #12]
	mov	r3, r8
	ldr	r0, [r5, #172]
	str	r9, [sp]
	bl	ffs_do_descs.constprop.143(PLT)
	subs	r2, r0, #0
	blt	.L10868
	ldr	r3, [sp, #12]
	cmp	r3, #0
	beq	.L10816
	ldr	r3, [sp, #16]
	add	r1, r4, r2
	rsb	r2, r2, r10
	add	r1, fp, r1
	str	r3, [r6, #16]
	mov	r3, r8
	ldr	r0, [r5, #176]
	str	r9, [sp]
	bl	ffs_do_descs.constprop.143(PLT)
	cmp	r0, #0
	blt	.L10838
	ldr	r3, [r5, #172]
	ldr	r10, [r5, #168]
	add	r10, r3, r10
.L10818:
	ldr	r3, [r5, #176]
.L10815:
	adds	r10, r10, r3
	beq	.L10782
	cmp	r7, #1
	bls	.L10826
	ldrb	r8, [fp]	@ zero_extendqisi2
	cmp	r7, r8
	bcc	.L10826
	mov	r4, r7
	mov	r9, #0
.L10785:
	ldrb	r3, [fp, #1]	@ zero_extendqisi2
	sub	r3, r3, #4
	cmp	r3, #44
	addls	pc, pc, r3, asl #2
	b	.L10826
.L10788:
	b	.L10787
	b	.L10789
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10790
	b	.L10826
	b	.L10791
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10826
	b	.L10792
	.p2align 1
.L10789:
	sub	r3, r8, #7
	tst	r3, #253
	bne	.L10826
	ldrb	r3, [fp, #2]	@ zero_extendqisi2
	tst	r3, #15
	bne	.L10795
.L10826:
	mvn	r0, #21
.L10838:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10790:
	cmp	r8, #5
	bne	.L10826
.L10795:
	adds	fp, fp, r8
	add	r9, r9, #1
	moveq	r3, #1
	movne	r3, #0
	cmp	r10, r9
	orreq	r3, r3, #1
	rsb	r4, r8, r4
	cmp	r3, #0
	bne	.L10869
	cmp	r4, #1
	bls	.L10826
	ldrb	r8, [fp]	@ zero_extendqisi2
	cmp	r4, r8
	bcs	.L10785
	b	.L10826
.L10792:
	cmp	r8, #6
	beq	.L10795
	b	.L10826
.L10787:
	cmp	r8, #9
	bne	.L10826
	ldrb	r3, [fp, #2]	@ zero_extendqisi2
	ldr	r2, [r6, #-8]
	mov	r3, r3, asl #1
	ldrh	r2, [r2, r3]
	tst	r2, #32768
	bne	.L10870
.L10793:
	ldrb	r3, [fp, #8]	@ zero_extendqisi2
	strb	r2, [fp, #2]
	cmp	r3, #0
	beq	.L10795
	ldr	r2, [r6, #-44]
	sub	r3, r3, #-536870911
	ldr	r2, [r2, #192]
	ldr	r2, [r2]
	ldr	r2, [r2, #4]
	ldrb	r3, [r2, r3, asl #3]	@ zero_extendqisi2
	strb	r3, [fp, #8]
	b	.L10795
.L10791:
	cmp	r8, #8
	bne	.L10826
	ldrb	r3, [fp, #7]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L10795
	ldr	r2, [r6, #-44]
	sub	r3, r3, #-536870911
	ldr	r2, [r2, #192]
	ldr	r2, [r2]
	ldr	r2, [r2, #4]
	ldrb	r3, [r2, r3, asl #3]	@ zero_extendqisi2
	strb	r3, [fp, #7]
	b	.L10795
.L10778:
	ldr	r3, [sp, #12]
	cmp	r3, #0
	beq	.L10780
	ldr	r3, [sp, #16]
	add	r1, fp, r4
	rsb	r2, r4, r7
	str	r3, [r6, #16]
	ldr	r3, .L10871+8
	ldr	r0, [r5, #176]
	str	r9, [sp]
.LPIC2281:
	add	r3, pc, r3
	bl	ffs_do_descs.constprop.143(PLT)
	cmp	r0, #0
	ldrge	r10, [r5, #168]
	bge	.L10818
	b	.L10838
.L10766:
	ldr	r3, [sp, #12]
	cmp	r3, #0
	beq	.L10857
	ldr	r3, [sp, #20]
	ldr	r0, [r5, #176]
	clz	r10, r3
	mov	r3, #16
	mov	r10, r10, lsr #5
	add	r0, r0, #1
	str	r3, [sp, #24]
	mov	r0, r0, asl #2
	b	.L10811
.L10767:
	ldrh	r2, [r5, #182]
	mov	r3, #16
	str	r3, [sp, #16]
	mov	r3, r2, asl #1
	mov	r0, r3
	str	r3, [sp, #32]
	b	.L10814
.L10869:
	subs	r0, r7, r4
	bmi	.L10838
.L10782:
	add	r4, r5, #120
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #100]
	mov	r6, r0
	add	lr, r5, #104
	ldrh	ip, [r5, #108]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r5, #100]
	cmp	ip, #0
	beq	.L10828
	add	ip, lr, ip
	mov	r3, lr
	mov	r1, lr
.L10802:
	ldrb	r2, [r3], #1	@ zero_extendqisi2
	sub	r0, r2, #5
	cmp	r0, #1
	bhi	.L10806
	strb	r2, [r1]
	add	r1, r1, #1
.L10806:
	cmp	r3, ip
	bne	.L10802
	rsb	r1, lr, r1
	add	r2, r1, #1
	uxth	r3, r1
	uxth	r2, r2
.L10800:
	add	r3, r5, r3
	strh	r2, [r5, #108]	@ movhi
	mov	fp, #0
	mov	r0, r4
	mov	r1, #3
	mov	r2, #1
	strb	fp, [r3, #104]
	bl	__wake_up_locked(PLT)
	mov	r0, r4
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, fp
	b	.L10838
.L10768:
	mov	r0, r9
	bl	kfree(PLT)
	ldr	r0, [sp, #20]
	bl	kfree(PLT)
	ldr	r0, [sp, #24]
	bl	kfree(PLT)
	ldr	r0, [sp, #16]
	bl	kfree(PLT)
	ldr	r0, [sp, #28]
	bl	kfree(PLT)
	mov	r0, fp
	bl	kfree(PLT)
	mvn	r0, #11
	b	.L10838
.L10863:
	mov	r3, #16
	mov	r10, r8
	str	r3, [sp, #20]
	str	r3, [sp, #24]
	b	.L10810
.L10860:
	movw	r0, #65012
	movt	r0, 65535
	b	.L10838
.L10865:
	mov	r1, r3
	mov	r0, r9
	bl	__memzero(PLT)
	b	.L10770
.L10867:
	mov	r2, r3
	mov	r1, #255
	ldr	r0, [sp, #28]
	bl	memset(PLT)
	b	.L10772
.L10866:
	ldr	r0, [r5, #156]
	ldr	lr, [r5, #148]
	ldr	r1, [r5, #160]
	ldr	r2, [r5, #164]
	add	r0, fp, r0
	add	r1, lr, r1
	bl	memcpy(PLT)
	b	.L10771
.L10823:
	mov	r0, r4
	b	.L10838
.L10780:
	ldr	r10, [r5, #168]
	b	.L10815
.L10868:
	mov	r0, r2
	b	.L10838
.L10828:
	mov	r3, ip
	mov	r2, #1
	b	.L10800
.L10870:
	ldr	r0, [r6, #-52]
	mov	r1, r6
	str	r3, [sp, #12]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L10838
	ldr	r2, [r6, #-8]
	ldr	r3, [sp, #12]
	strh	r0, [r2, r3]	@ movhi
	ldr	r2, [r6, #-8]
	ldrh	r2, [r2, r3]
	b	.L10793
.L10816:
	ldr	r2, [r5, #168]
	ldr	r10, [r5, #172]
	add	r10, r2, r10
	b	.L10815
.L10872:
	.align	2
.L10871:
	.word	__ffs_func_bind_do_descs-(.LPIC2279+8)
	.word	__ffs_func_bind_do_descs-(.LPIC2280+8)
	.word	__ffs_func_bind_do_descs-(.LPIC2281+8)
	.fnend
	.size	ffs_func_bind, .-ffs_func_bind
	.align	2
	.global	usb_add_config
	.type	usb_add_config, %function
usb_add_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r4, [r1, #20]	@ zero_extendqisi2
	cmp	r4, #0
	cmpne	r2, #0
	beq	.L10880
	mov	lr, r0
	ldr	r3, [lr, #36]!
	cmp	lr, r3
	sub	ip, r3, #28
	bne	.L10878
	b	.L10875
.L10885:
	ldr	r3, [ip, #28]
	cmp	lr, r3
	sub	ip, r3, #28
	beq	.L10875
.L10878:
	ldrb	r3, [r3, #-8]	@ zero_extendqisi2
	cmp	r3, r4
	bne	.L10885
	mvn	r5, #15
.L10874:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10875:
	mov	r4, r1
	mov	r5, r2
	add	ip, r1, #28
	add	r3, r1, #36
	str	r0, [r4, #24]
	ldr	r2, [r0, #40]
	mov	r7, #0
	str	ip, [r0, #40]
	mov	r6, r0
	add	r0, r1, #48
	str	lr, [r4, #28]
	mov	r1, #64
	str	r2, [r4, #32]
	str	ip, [r2]
	str	r3, [r4, #36]
	str	r3, [r4, #40]
	strb	r7, [r4, #44]
	bl	__memzero(PLT)
	mov	r0, r4
	blx	r5
	subs	r5, r0, #0
	blt	.L10886
.L10879:
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_reset(PLT)
	b	.L10874
.L10886:
	ldr	r3, [r4, #32]
	mov	r0, #256
	mov	r1, #512
	ldr	r2, [r4, #28]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r7, [r4, #24]
	strd	r0, [r4, #28]
	b	.L10879
.L10880:
	mvn	r5, #21
	b	.L10874
	.fnend
	.size	usb_add_config, .-usb_add_config
	.align	2
	.type	adb_android_function_disable, %function
adb_android_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #4]
	ldr	r8, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, r1
	beq	.L10904
.L10887:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10904:
	ldr	r3, [r8, #24]
	ldr	r6, [r8, #8]
	cmp	r3, r1
	beq	.L10905
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r8, #24]
	bne	.L10887
	mov	r5, r8
	ldr	r4, [r5, #156]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L10896
	ldr	r7, .L10907
.LPIC2284:
	add	r7, pc, r7
.L10895:
	mov	r0, r6
	mov	r1, r4
	mov	r2, r7
	bl	usb_add_config(PLT)
	cmp	r0, #0
	blt	.L10906
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L10895
.L10896:
	ldr	r0, [r6]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L10887
	ldrd	r4, [sp]
	mov	r1, #1
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3
.L10905:
	ldr	r0, .L10907+4
	movw	r1, #411
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC2283:
	add	r0, pc, r0
	add	sp, sp, #24
	b	warn_slowpath_null(PLT)
.L10906:
	ldr	r1, .L10907+8
	mov	r3, r0
	ldr	r0, .L10907+12
.LPIC2286:
	add	r1, pc, r1
	add	r1, r1, #3232
.LPIC2285:
	add	r0, pc, r0
	add	r1, r1, #8
	mov	r2, r1
	bl	printk(PLT)
	ldr	r3, [r8, #24]
	add	r3, r3, #1
	str	r3, [r8, #24]
	b	.L10887
.L10908:
	.align	2
.L10907:
	.word	android_bind_config-(.LPIC2284+8)
	.word	.LC519-(.LPIC2283+8)
	.word	.LANCHOR3-(.LPIC2286+8)
	.word	.LC520-(.LPIC2285+8)
	.fnend
	.size	adb_android_function_disable, .-adb_android_function_disable
	.align	2
	.type	ffs_function_disable, %function
ffs_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #4]
	ldr	r8, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, r1
	beq	.L10926
.L10909:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10926:
	ldr	r3, [r8, #24]
	ldr	r6, [r8, #8]
	cmp	r3, r1
	beq	.L10927
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r8, #24]
	bne	.L10909
	mov	r5, r8
	ldr	r4, [r5, #156]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L10918
	ldr	r7, .L10929
.LPIC2289:
	add	r7, pc, r7
.L10917:
	mov	r0, r6
	mov	r1, r4
	mov	r2, r7
	bl	usb_add_config(PLT)
	cmp	r0, #0
	blt	.L10928
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L10917
.L10918:
	ldr	r0, [r6]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L10909
	ldrd	r4, [sp]
	mov	r1, #1
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3
.L10927:
	ldr	r0, .L10929+4
	movw	r1, #411
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC2288:
	add	r0, pc, r0
	add	sp, sp, #24
	b	warn_slowpath_null(PLT)
.L10928:
	ldr	r1, .L10929+8
	mov	r3, r0
	ldr	r0, .L10929+12
.LPIC2291:
	add	r1, pc, r1
	add	r1, r1, #3232
.LPIC2290:
	add	r0, pc, r0
	add	r1, r1, #8
	mov	r2, r1
	bl	printk(PLT)
	ldr	r3, [r8, #24]
	add	r3, r3, #1
	str	r3, [r8, #24]
	b	.L10909
.L10930:
	.align	2
.L10929:
	.word	android_bind_config-(.LPIC2289+8)
	.word	.LC519-(.LPIC2288+8)
	.word	.LANCHOR3-(.LPIC2291+8)
	.word	.LC520-(.LPIC2290+8)
	.fnend
	.size	ffs_function_disable, .-ffs_function_disable
	.align	2
	.type	adb_open, %function
adb_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr	r0, .L10966
	mov	r4, r1
	ldr	r1, .L10966+4
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
.LPIC2293:
	add	r0, pc, r0
	str	lr, [sp, #28]
.LPIC2294:
	add	r1, pc, r1
	add	r0, r0, #2304
	add	r1, r1, #3248
	add	r0, r0, #8
	add	r1, r1, #8
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L10962
.L10932:
	ldr	r1, .L10966+8
.LPIC2296:
	add	r1, pc, r1
	ldr	r3, [r1, #-644]
	cmp	r3, #0
	beq	.L10948
	add	r2, r3, #108
#APP
@ 61 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r0, r5, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r5, #1
	beq	.L10934
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #15
.L10958:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10934:
	ldr	r3, [r1, #-644]
	mov	r2, #0
	str	r3, [r4, #124]
	ldrb	r1, [r3, #153]	@ zero_extendqisi2
	str	r2, [r3, #96]
	cmp	r1, r2
	bne	.L10963
.L10946:
	mov	r2, #1
	mov	r0, #0
	strb	r2, [r3, #152]
	b	.L10958
.L10963:
	ldr	r1, .L10966+12
	strb	r2, [r3, #153]
.LPIC2297:
	add	r1, pc, r1
	ldr	r6, [r1, #1860]
	ldr	r4, [r1, #1844]
	cmp	r6, #0
	beq	.L10935
	add	r8, r6, #28
	mov	r0, r8
	bl	mutex_lock(PLT)
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	str	r6, [r4, #4]
	strb	r5, [r4]
	cmp	r3, #0
	beq	.L10938
	ldr	r3, [r6, #24]
	ldr	r7, [r6, #8]
	cmp	r3, #0
	beq	.L10964
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r6, #24]
	bne	.L10938
	mov	r5, r6
	ldr	r4, [r5, #156]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L10943
	ldr	r9, .L10966+16
.LPIC2300:
	add	r9, pc, r9
.L10942:
	mov	r0, r7
	mov	r1, r4
	mov	r2, r9
	bl	usb_add_config(PLT)
	cmp	r0, #0
	blt	.L10965
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L10942
.L10943:
	ldr	r0, [r7]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L10938
	mov	r1, #1
	blx	r3
.L10938:
	mov	r0, r8
	bl	mutex_unlock(PLT)
	ldr	r3, .L10966+20
.LPIC2304:
	add	r3, pc, r3
	ldr	r3, [r3, #-644]
	b	.L10946
.L10935:
	str	r6, [r4, #4]
	strb	r5, [r4]
	b	.L10946
.L10948:
	mvn	r0, #18
	b	.L10958
.L10964:
	ldr	r0, .L10966+24
	movw	r1, #411
.LPIC2299:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L10938
.L10962:
	ldr	r0, .L10966+28
.LPIC2295:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10932
.L10965:
	ldr	r1, .L10966+32
	mov	r3, r0
	ldr	r0, .L10966+36
.LPIC2302:
	add	r1, pc, r1
	add	r1, r1, #3232
.LPIC2301:
	add	r0, pc, r0
	add	r1, r1, #8
	mov	r2, r1
	bl	printk(PLT)
	ldr	r3, [r6, #24]
	add	r3, r3, #1
	str	r3, [r6, #24]
	b	.L10938
.L10967:
	.align	2
.L10966:
	.word	.LANCHOR1-(.LPIC2293+8)
	.word	.LANCHOR3-(.LPIC2294+8)
	.word	.LANCHOR4-(.LPIC2296+8)
	.word	.LANCHOR0-(.LPIC2297+8)
	.word	android_bind_config-(.LPIC2300+8)
	.word	.LANCHOR4-(.LPIC2304+8)
	.word	.LC519-(.LPIC2299+8)
	.word	.LC521-(.LPIC2295+8)
	.word	.LANCHOR3-(.LPIC2302+8)
	.word	.LC520-(.LPIC2301+8)
	.fnend
	.size	adb_open, .-adb_open
	.align	2
	.global	usb_remove_config
	.type	usb_remove_config, %function
usb_remove_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L10993
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r3, r1
	strd	r8, [sp, #16]
	add	r8, r0, #60
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	lr, [sp, #28]
	str	r10, [sp, #24]
	ldr	r2, [r0, #12]
.LPIC2308:
	add	ip, pc, ip
	ldr	r0, .L10993+4
	add	r1, ip, #3264
	add	r1, r1, #4
.LPIC2307:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #24]
	mov	r9, r0
	cmp	r3, #0
	beq	.L10991
	ldr	r3, [r7, #12]
	cmp	r3, r4
	beq	.L10979
	add	r5, r4, #36
.L10972:
	ldr	ip, [r4, #32]
	mov	r2, #256
	mov	r3, #512
	ldr	lr, [r4, #28]
	mov	r0, r8
	mov	r1, r9
	mov	r7, r2
	mov	r6, r3
	str	ip, [lr, #4]
	str	lr, [ip]
	strd	r2, [r4, #28]
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L10977
.L10978:
	ldrd	r2, [r1]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r3, [r1, #-36]
	str	r7, [r1]
	str	r6, [r1, #4]
	cmp	r3, #0
	bne	.L10992
.L10977:
	ldr	r1, [r4, #36]
	cmp	r1, r5
	bne	.L10978
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L10985
	mov	r0, r4
	blx	r3
.L10985:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10992:
	sub	r1, r1, #64
	mov	r0, r4
	blx	r3
	b	.L10977
.L10991:
	ldr	r0, .L10993+8
	movw	r1, #845
.LPIC2309:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	mov	r0, r8
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L10985
.L10979:
	mov	r5, r4
	ldr	r6, [r5, #36]!
	cmp	r6, r5
	sub	r6, r6, #64
	movne	r10, #0
	beq	.L10975
.L10974:
	ldr	r3, [r6, #40]
	mov	r0, r6
	cmp	r3, #0
	beq	.L10973
	blx	r3
.L10973:
	str	r10, [r6, #72]
	ldr	r3, [r7, #12]
	ldr	r6, [r6, #64]
	add	r3, r3, #36
	cmp	r6, r3
	sub	r6, r6, #64
	bne	.L10974
.L10975:
	mov	r3, #0
	str	r3, [r7, #12]
	str	r3, [r7, #56]
	b	.L10972
.L10994:
	.align	2
.L10993:
	.word	.LANCHOR3-(.LPIC2308+8)
	.word	.LC522-(.LPIC2307+8)
	.word	.LC81-(.LPIC2309+8)
	.fnend
	.size	usb_remove_config, .-usb_remove_config
	.align	2
	.type	enable_store, %function
enable_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r2
	strd	r8, [sp, #16]
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r3, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r4, [r0, #8]
	mov	r3, #0
	mov	r8, r0
	str	r3, [sp, #12]
	cmp	r4, r3
	beq	.L11030
	add	fp, r0, #28
	mov	r0, fp
	bl	mutex_lock(PLT)
	ldr	r1, .L11070
	mov	r0, r5
	add	r2, sp, #12
.LPIC2312:
	add	r1, pc, r1
	bl	sscanf(PLT)
	ldr	r3, [sp, #12]
	cmp	r3, #0
	ldrb	r3, [r8, #20]	@ zero_extendqisi2
	beq	.L10997
	cmp	r3, #0
	bne	.L10998
	ldr	r3, .L11070+4
	mov	r9, r8
.LPIC2313:
	add	r3, pc, r3
	ldrh	r2, [r3, #224]
	strh	r2, [r4, #25]	@ unaligned
	ldrh	r2, [r3, #226]
	strh	r2, [r4, #27]	@ unaligned
	ldrh	r3, [r3, #228]
	cmp	r3, #0
	strneh	r3, [r4, #29]	@ unaligned
	ldr	r3, .L11070+8
.LPIC2316:
	add	r3, pc, r3
	ldrb	r1, [r3, #220]	@ zero_extendqisi2
	ldrb	r2, [r3, #221]	@ zero_extendqisi2
	ldrb	r3, [r3, #222]	@ zero_extendqisi2
	strb	r1, [r4, #21]
	strb	r2, [r4, #22]
	strb	r3, [r4, #23]
	ldr	r7, [r9, #156]!
	cmp	r9, r7
	sub	r7, r7, #120
	beq	.L11001
	ldr	r6, .L11070+12
	mov	r4, #0
.LPIC2319:
	add	r6, pc, r6
.L11006:
	mov	r5, r7
	ldr	r3, [r5, #112]!
	cmp	r5, r3
	sub	r10, r3, #4
	beq	.L11002
.L11005:
	ldr	ip, [r10]
	ldr	r2, [ip, #32]
	mov	r0, ip
	cmp	r2, #0
	beq	.L11003
	blx	r2
	ldr	ip, [r10]
.L11003:
	mov	r1, r6
	mov	r2, #12
	ldr	r0, [ip]
	bl	strncmp(PLT)
	ldr	r3, [r10, #4]
	cmp	r0, #0
	moveq	r4, #1
	cmp	r5, r3
	sub	r10, r3, #4
	bne	.L11005
.L11002:
	ldr	r7, [r7, #120]
	cmp	r9, r7
	sub	r7, r7, #120
	bne	.L11006
	cmp	r4, #0
	bne	.L11065
.L11001:
	ldr	r3, [r8, #24]
	ldr	r5, [r8, #8]
	cmp	r3, #0
	beq	.L11066
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r8, #24]
	bne	.L11009
	ldr	r4, [r8, #156]
	cmp	r9, r4
	sub	r4, r4, #120
	beq	.L11015
	ldr	r6, .L11070+16
.LPIC2321:
	add	r6, pc, r6
.L11014:
	mov	r0, r5
	mov	r1, r4
	mov	r2, r6
	bl	usb_add_config(PLT)
	cmp	r0, #0
	blt	.L11067
	ldr	r4, [r4, #120]
	cmp	r9, r4
	sub	r4, r4, #120
	bne	.L11014
.L11015:
	ldr	r0, [r5]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L11009
	mov	r1, #1
	blx	r3
.L11009:
	mov	r3, #1
	strb	r3, [r8, #20]
	b	.L11021
.L10997:
	cmp	r3, #0
	bne	.L11068
.L10998:
	ldr	r1, .L11070+20
	ldr	r0, .L11070+24
.LPIC2329:
	add	r1, pc, r1
.LPIC2328:
	add	r0, pc, r0
	add	r1, r1, #3280
	add	r1, r1, #8
	add	r0, r0, #2336
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L11069
.L11021:
	mov	r0, fp
	bl	mutex_unlock(PLT)
	ldr	r0, [sp, #4]
.L11063:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11065:
	mov	r0, #100
	bl	msleep(PLT)
	b	.L11001
.L11068:
	ldr	r1, [r8, #24]
	ldr	r5, [r8, #8]
	cmp	r1, #0
	add	r3, r1, #1
	addne	r7, r8, #156
	str	r3, [r8, #24]
	bne	.L11018
	ldr	r0, [r5]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L11019
	blx	r3
	ldr	r0, [r5]
.L11019:
	ldr	r0, [r0, #4]
	mov	r7, r8
	ldr	r1, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r4, [r7, #156]!
	cmp	r7, r4
	sub	r4, r4, #120
	beq	.L11023
.L11022:
	mov	r1, r4
	mov	r0, r5
	bl	usb_remove_config(PLT)
	ldr	r4, [r4, #120]
	cmp	r7, r4
	sub	r4, r4, #120
	bne	.L11022
.L11018:
	ldr	r6, [r8, #156]
	cmp	r7, r6
	sub	r6, r6, #120
	beq	.L11023
.L11025:
	mov	r5, r6
	ldr	r4, [r5, #112]!
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L11028
.L11027:
	ldr	r0, [r4]
	ldr	r3, [r0, #36]
	cmp	r3, #0
	beq	.L11026
	blx	r3
.L11026:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L11027
.L11028:
	ldr	r6, [r6, #120]
	cmp	r7, r6
	sub	r6, r6, #120
	bne	.L11025
.L11023:
	mov	r3, #0
	strb	r3, [r8, #20]
	b	.L11021
.L11066:
	ldr	r0, .L11070+28
	movw	r1, #411
.LPIC2320:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L11009
.L11030:
	mvn	r0, #18
	b	.L11063
.L11067:
	ldr	r4, .L11070+32
	mov	r3, r0
	ldr	r0, .L11070+36
.LPIC2323:
	add	r4, pc, r4
	add	r1, r4, #3232
.LPIC2322:
	add	r0, pc, r0
	add	r1, r1, #8
	mov	r2, r1
	bl	printk(PLT)
	ldr	r3, [r8, #24]
	add	r1, r4, #3280
	ldr	r0, .L11070+40
	add	r1, r1, #8
	mov	r2, r1
	add	r3, r3, #1
.LPIC2325:
	add	r0, pc, r0
	str	r3, [r8, #24]
	bl	printk(PLT)
	mov	r3, #0
	mov	r0, fp
	strb	r3, [r8, #56]
	strb	r3, [r8, #20]
	bl	mutex_unlock(PLT)
	ldr	r0, [sp, #4]
	b	.L11063
.L11069:
	ldrb	r3, [r8, #20]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11031
	ldr	r2, .L11070+44
.LPIC2311:
	add	r2, pc, r2
.L11029:
	ldr	r1, .L11070+48
	ldr	r0, .L11070+52
.LPIC2331:
	add	r1, pc, r1
	add	r1, r1, #3280
.LPIC2330:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L11021
.L11031:
	ldr	r2, .L11070+56
.LPIC2310:
	add	r2, pc, r2
	b	.L11029
.L11071:
	.align	2
.L11070:
	.word	.LC235-(.LPIC2312+8)
	.word	.LANCHOR1-(.LPIC2313+8)
	.word	.LANCHOR1-(.LPIC2316+8)
	.word	.LC525-(.LPIC2319+8)
	.word	android_bind_config-(.LPIC2321+8)
	.word	.LANCHOR3-(.LPIC2329+8)
	.word	.LANCHOR1-(.LPIC2328+8)
	.word	.LC519-(.LPIC2320+8)
	.word	.LANCHOR3-(.LPIC2323+8)
	.word	.LC520-(.LPIC2322+8)
	.word	.LC526-(.LPIC2325+8)
	.word	.LC524-(.LPIC2311+8)
	.word	.LANCHOR3-(.LPIC2331+8)
	.word	.LC527-(.LPIC2330+8)
	.word	.LC523-(.LPIC2310+8)
	.fnend
	.size	enable_store, .-enable_store
	.align	2
	.type	ffs_function_enable, %function
ffs_function_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	ldr	r5, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, #0
	beq	.L11082
.L11072:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11082:
	ldr	r1, [r5, #24]
	ldr	r6, [r5, #8]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r5, #24]
	bne	.L11072
	ldr	r0, [r6]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L11075
	blx	r3
	ldr	r0, [r6]
.L11075:
	ldr	r0, [r0, #4]
	ldr	r1, [r6, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r4, [r5, #156]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L11072
.L11076:
	mov	r1, r4
	mov	r0, r6
	bl	usb_remove_config(PLT)
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L11076
	b	.L11072
	.fnend
	.size	ffs_function_enable, .-ffs_function_enable
	.align	2
	.type	adb_android_function_enable, %function
adb_android_function_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	ldr	r5, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, #0
	beq	.L11093
.L11083:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11093:
	ldr	r1, [r5, #24]
	ldr	r6, [r5, #8]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r5, #24]
	bne	.L11083
	ldr	r0, [r6]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L11086
	blx	r3
	ldr	r0, [r6]
.L11086:
	ldr	r0, [r0, #4]
	ldr	r1, [r6, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r4, [r5, #156]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L11083
.L11087:
	mov	r1, r4
	mov	r0, r6
	bl	usb_remove_config(PLT)
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L11087
	b	.L11083
	.fnend
	.size	adb_android_function_enable, .-adb_android_function_enable
	.align	2
	.type	adb_release, %function
adb_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L11126
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r1, .L11126+4
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC2332:
	add	r0, pc, r0
.LPIC2333:
	add	r1, pc, r1
	add	r0, r0, #2352
	add	r1, r1, #3296
	add	r0, r0, #8
	add	r1, r1, #8
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L11122
.L11095:
	ldr	r3, .L11126+8
.LPIC2335:
	add	r3, pc, r3
	ldr	r3, [r3, #-644]
	ldrb	r2, [r3, #152]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L11123
.L11096:
	add	r2, r3, #108
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11123:
	ldr	r3, .L11126+12
.LPIC2336:
	add	r3, pc, r3
	ldr	r5, [r3, #1860]
	ldr	r6, [r3, #1844]
	cmp	r5, #0
	beq	.L11124
.L11097:
	add	r8, r5, #28
	mov	r0, r8
	bl	mutex_lock(PLT)
	ldrb	r3, [r6, #1]	@ zero_extendqisi2
	mov	r2, #0
	strb	r2, [r6]
	cmp	r3, r2
	beq	.L11125
	ldr	r1, [r5, #24]
	ldr	r7, [r5, #8]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r5, #24]
	bne	.L11103
	ldr	r0, [r7]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L11102
	blx	r3
	ldr	r0, [r7]
.L11102:
	ldr	r0, [r0, #4]
	ldr	r1, [r7, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r4, [r5, #156]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L11103
.L11104:
	mov	r1, r4
	mov	r0, r7
	bl	usb_remove_config(PLT)
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L11104
.L11103:
	mov	r3, #0
	str	r3, [r6, #4]
.L11101:
	mov	r0, r8
	bl	mutex_unlock(PLT)
.L11105:
	ldr	r3, .L11126+16
	mov	r2, #1
.LPIC2340:
	add	r3, pc, r3
	ldr	r3, [r3, #-644]
	strb	r2, [r3, #153]
	b	.L11096
.L11124:
	ldr	r5, [r6, #4]
	cmp	r5, #0
	bne	.L11097
	ldr	r1, .L11126+20
	ldr	r0, .L11126+24
.LPIC2339:
	add	r1, pc, r1
	add	r1, r1, #3312
.LPIC2338:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mov	r3, #0
	strb	r5, [r6]
	str	r3, [r6, #4]
	b	.L11105
.L11125:
	str	r3, [r6, #4]
	b	.L11101
.L11122:
	ldr	r0, .L11126+28
.LPIC2334:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L11095
.L11127:
	.align	2
.L11126:
	.word	.LANCHOR1-(.LPIC2332+8)
	.word	.LANCHOR3-(.LPIC2333+8)
	.word	.LANCHOR4-(.LPIC2335+8)
	.word	.LANCHOR0-(.LPIC2336+8)
	.word	.LANCHOR4-(.LPIC2340+8)
	.word	.LANCHOR3-(.LPIC2339+8)
	.word	.LC529-(.LPIC2338+8)
	.word	.LC528-(.LPIC2334+8)
	.fnend
	.size	adb_release, .-adb_release
	.align	2
	.type	ffs_data_clear, %function
ffs_data_clear:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r0, #0
	add	r1, r6, #132
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	bne	.L11168
.L11129:
	ldr	r7, [r6]
	cmp	r7, #0
	bne	.L11169
.L11138:
	ldr	r8, [r6, #220]
	cmp	r8, #0
	beq	.L11139
	ldrh	r5, [r6, #184]
	cmp	r5, #0
	beq	.L11146
	ldr	r3, [r8]
	cmp	r3, #1
	bne	.L11141
	ldr	r2, [r8, #28]
	add	r3, r8, #28
	cmp	r2, r3
	bne	.L11141
	mov	r4, r8
.L11143:
	ldr	r0, [r4, #48]
	cmp	r0, #0
	beq	.L11144
	bl	d_delete(PLT)
	ldr	r0, [r4, #48]
	bl	dput(PLT)
	str	r7, [r4, #48]
.L11144:
	subs	r5, r5, #1
	add	r4, r4, #60
	beq	.L11146
	ldr	r0, [r4]
	cmp	r0, #1
	bne	.L11141
	ldr	r2, [r4, #28]
	add	r3, r4, #28
	cmp	r2, r3
	beq	.L11143
.L11141:
#APP
@ 1527 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1528, 0
.popsection
@ 0 "" 2
.L11146:
	mov	r0, r8
	bl	kfree(PLT)
.L11139:
	ldr	r0, [r6, #148]
	bl	kfree(PLT)
	ldr	r0, [r6, #188]
	bl	kfree(PLT)
	ldr	r0, [r6, #192]
	bl	kfree(PLT)
	ldr	r0, [r6, #196]
	bl	kfree(PLT)
	ldrd	r4, [sp]
	ldr	r0, [r6, #200]
	ldrd	r8, [sp, #16]
	ldrd	r6, [sp, #8]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree(PLT)
.L11168:
	ldr	r3, .L11172
.LPIC2341:
	add	r3, pc, r3
	ldr	r5, [r3, #1912]
	ldr	r7, [r3, #1896]
	cmp	r5, #0
	beq	.L11170
.L11130:
	add	r9, r5, #28
	mov	r0, r9
	bl	mutex_lock(PLT)
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11171
	ldr	r1, [r5, #24]
	ldr	r8, [r5, #8]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r5, #24]
	bne	.L11136
	ldr	r0, [r8]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L11135
	blx	r3
	ldr	r0, [r8]
.L11135:
	ldr	r0, [r0, #4]
	ldr	r1, [r8, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r4, [r5, #156]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L11136
.L11137:
	mov	r1, r4
	mov	r0, r8
	bl	usb_remove_config(PLT)
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L11137
.L11136:
	mov	r3, #0
	mov	r0, r6
	str	r3, [r7, #8]
	strb	r3, [r7]
	str	r3, [r7, #4]
	bl	functionfs_unbind(PLT)
.L11134:
	mov	r0, r9
	bl	mutex_unlock(PLT)
	ldr	r7, [r6]
	cmp	r7, #0
	beq	.L11138
.L11169:
#APP
@ 1396 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1396, 0
.popsection
@ 0 "" 2
.L11171:
	str	r3, [r7, #8]
	mov	r0, r6
	strb	r3, [r7]
	str	r3, [r7, #4]
	bl	functionfs_unbind(PLT)
	b	.L11134
.L11170:
	ldr	r5, [r7, #8]
	cmp	r5, #0
	bne	.L11130
	ldr	r1, .L11172+4
	ldr	r0, .L11172+8
.LPIC2344:
	add	r1, pc, r1
	add	r1, r1, #3328
.LPIC2343:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11131
	str	r3, [r7, #8]
	mov	r0, r6
	strb	r3, [r7]
	str	r3, [r7, #4]
	bl	functionfs_unbind(PLT)
	b	.L11129
.L11131:
	str	r5, [r7, #8]
	mov	r0, r6
	strb	r5, [r7]
	str	r5, [r7, #4]
	bl	functionfs_unbind(PLT)
	b	.L11129
.L11173:
	.align	2
.L11172:
	.word	.LANCHOR0-(.LPIC2341+8)
	.word	.LANCHOR3-(.LPIC2344+8)
	.word	.LC530-(.LPIC2343+8)
	.fnend
	.size	ffs_data_clear, .-ffs_data_clear
	.align	2
	.type	ffs_func_free, %function
ffs_func_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r4, [r0, #12]
	add	r0, r3, #28
	ldrh	r5, [r3, #184]
	bl	_raw_spin_lock_irqsave(PLT)
	add	r4, r4, #28
	mov	r8, r0
.L11176:
	ldr	r0, [r4, #-28]
	cmp	r0, #0
	beq	.L11175
	ldr	r1, [r4, #-24]
	cmp	r1, #0
	beq	.L11175
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L11175:
	subs	r5, r5, #1
	str	r6, [r4, #-24]
	add	r4, r4, #28
	str	r6, [r4, #-56]
	bne	.L11176
	ldr	r0, [r7, #8]
	mov	r1, r8
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r4, [r7, #8]
	add	r3, r4, #88
#APP
@ 99 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	beq	.L11188
.L11177:
	ldr	r0, [r7, #12]
	bl	kfree(PLT)
	ldr	r0, [r7, #32]
	bl	kfree(PLT)
	ldr	r0, [r7, #36]
	bl	kfree(PLT)
	ldr	r0, [r7, #40]
	bl	kfree(PLT)
	ldr	r0, [r7, #44]
	bl	kfree(PLT)
	ldr	r0, [r7, #48]
	bl	kfree(PLT)
	ldrd	r4, [sp]
	mov	r0, r7
	ldr	r8, [sp, #16]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	kfree(PLT)
.L11188:
	ldr	r1, .L11189
	ldr	r0, .L11189+4
.LPIC2346:
	add	r1, pc, r1
	add	r1, r1, #3360
.LPIC2345:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	bl	ffs_data_clear(PLT)
	ldr	r2, [r4, #124]
	add	r3, r4, #124
	cmp	r2, r3
	bne	.L11178
	ldr	r2, [r4, #44]
	add	r3, r4, #44
	cmp	r2, r3
	bne	.L11178
	mov	r0, r4
	bl	kfree(PLT)
	b	.L11177
.L11178:
#APP
@ 1347 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1348, 0
.popsection
@ 0 "" 2
.L11190:
	.align	2
.L11189:
	.word	.LANCHOR3-(.LPIC2346+8)
	.word	.LC531-(.LPIC2345+8)
	.fnend
	.size	ffs_func_free, .-ffs_func_free
	.align	2
	.type	ffs_function_bind_config, %function
ffs_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L11201
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #4]
.LPIC2356:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r7, [r1, #24]
	ldr	r5, [r2, #4]
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L11194
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L11199
.L11192:
	ldr	r0, .L11201+4
	add	r3, r5, #88
	ldr	r1, .L11201+8
	ldr	r2, .L11201+12
	ldr	lr, .L11201+16
.LPIC2348:
	add	r0, pc, r0
	ldr	ip, .L11201+20
.LPIC2349:
	add	r1, pc, r1
.LPIC2350:
	add	r2, pc, r2
	str	r0, [r4, #52]
	ldr	r0, .L11201+24
	ldr	r8, [r5, #192]
	str	r1, [r4, #76]
.LPIC2351:
	add	lr, pc, lr
	str	r2, [r4, #80]
	ldr	r1, .L11201+28
.LPIC2352:
	add	ip, pc, ip
	ldr	r2, .L11201+32
	str	r6, [r4]
.LPIC2353:
	add	r0, pc, r0
	str	lr, [r4, #84]
	str	r8, [r4, #56]
.LPIC2354:
	add	r1, pc, r1
	str	ip, [r4, #92]
.LPIC2355:
	add	r2, pc, r2
	strd	r0, [r4, #96]
	str	r2, [r4, #104]
	ldr	r2, [r7]
	stmib	r4, {r2, r5}
#APP
@ 45 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	mov	r0, r6
	add	r1, r4, #52
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L11200
.L11193:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11194:
	mov	r4, #16
	b	.L11192
.L11199:
	mvn	r0, #11
	b	.L11193
.L11200:
	mov	r0, r4
	bl	ffs_func_free(PLT)
	mov	r0, r5
	b	.L11193
.L11202:
	.align	2
.L11201:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2356+8))
	.word	.LC532-(.LPIC2348+8)
	.word	ffs_func_bind-(.LPIC2349+8)
	.word	ffs_func_unbind-(.LPIC2350+8)
	.word	ffs_func_set_alt-(.LPIC2351+8)
	.word	ffs_func_disable-(.LPIC2352+8)
	.word	ffs_func_setup-(.LPIC2353+8)
	.word	ffs_func_suspend-(.LPIC2354+8)
	.word	ffs_func_resume-(.LPIC2355+8)
	.fnend
	.size	ffs_function_bind_config, .-ffs_function_bind_config
	.align	2
	.type	ffs_func_unbind, %function
ffs_func_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r4, r1, #52
	strd	r10, [sp, #24]
	mov	fp, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldr	r7, [r1, #-44]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r7, #136]
	cmp	r3, r4
	beq	.L11219
.L11204:
	add	r5, r7, #120
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r7, #100]
	mov	r6, r0
	add	lr, r7, #104
	ldrh	ip, [r7, #108]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r7, #100]
	cmp	ip, #0
	beq	.L11212
	add	ip, lr, ip
	mov	r3, lr
	mov	r1, lr
.L11210:
	ldrb	r2, [r3], #1	@ zero_extendqisi2
	sub	r0, r2, #5
	cmp	r0, #1
	bhi	.L11211
	strb	r2, [r1]
	add	r1, r1, #1
.L11211:
	cmp	r3, ip
	bne	.L11210
	rsb	r1, lr, r1
	add	r3, r1, #1
	uxth	r1, r1
	uxth	r3, r3
.L11208:
	mov	ip, #1
	strh	r3, [r7, #108]	@ movhi
	add	r1, r7, r1
	mov	r2, ip
	mov	r0, r5
	strb	ip, [r1, #104]
	mov	r1, #3
	bl	__wake_up_locked(PLT)
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	ffs_func_free(PLT)
.L11219:
	ldr	r5, [r1, #-40]
	add	r0, r7, #28
	mov	r9, #1
	mov	r10, #0
	ldr	r6, [r7, #220]
	ldrh	r8, [r7, #184]
	bl	_raw_spin_lock_irqsave(PLT)
	add	r5, r5, #28
	str	r0, [sp, #4]
.L11206:
	str	r9, [r6, #36]
	ldr	r3, [r5, #-28]
	subs	r0, r3, #0
	beq	.L11205
	ldr	r3, [r3, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #-28]
	str	r10, [r3]
.L11205:
	subs	r8, r8, #1
	str	r10, [r6, #44]
	add	r5, r5, #28
	add	r6, r6, #60
	bne	.L11206
	ldr	r0, [fp, #-44]
	ldr	r1, [sp, #4]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore(PLT)
	str	r8, [r7, #136]
	b	.L11204
.L11212:
	mov	r1, ip
	mov	r3, #1
	b	.L11208
	.fnend
	.size	ffs_func_unbind, .-ffs_func_unbind
	.align	2
	.type	ffs_fs_kill_sb, %function
ffs_fs_kill_sb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	bl	kill_litter_super(PLT)
	ldr	r4, [r4, #496]
	cmp	r4, #0
	beq	.L11220
	add	r3, r4, #88
#APP
@ 99 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	beq	.L11227
.L11220:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L11227:
	ldr	r1, .L11228
	ldr	r0, .L11228+4
.LPIC2358:
	add	r1, pc, r1
	add	r1, r1, #3360
.LPIC2357:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	bl	ffs_data_clear(PLT)
	ldr	r2, [r4, #124]
	add	r3, r4, #124
	cmp	r2, r3
	bne	.L11224
	ldr	r2, [r4, #44]
	add	r3, r4, #44
	cmp	r2, r3
	bne	.L11224
	mov	r0, r4
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
.L11224:
#APP
@ 1347 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1348, 0
.popsection
@ 0 "" 2
.L11229:
	.align	2
.L11228:
	.word	.LANCHOR3-(.LPIC2358+8)
	.word	.LC531-(.LPIC2357+8)
	.fnend
	.size	ffs_fs_kill_sb, .-ffs_fs_kill_sb
	.align	2
	.type	ffs_ep0_release, %function
ffs_ep0_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #124]
	add	r3, r4, #92
#APP
@ 99 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r5, [r3]
	sub	r5, r5, #1
	strex	r2, r5, [r3]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r5, #0
	bne	.L11231
	mov	r3, #3
	mov	r0, r4
	str	r3, [r4, #96]
	bl	ffs_data_clear(PLT)
	str	r5, [r4, #220]
	str	r5, [r4, #148]
	str	r5, [r4, #188]
	str	r5, [r4, #192]
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r5, [r4, #160]
	str	r5, [r4, #164]
	str	r5, [r4, #168]
	str	r5, [r4, #172]
	str	r5, [r4, #176]
	strh	r5, [r4, #180]	@ movhi
	strh	r5, [r4, #182]	@ movhi
	strh	r5, [r4, #184]	@ movhi
	strh	r5, [r4, #108]	@ movhi
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	str	r5, [r4, #132]
.L11231:
	add	r3, r4, #88
#APP
@ 99 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	beq	.L11236
.L11232:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11236:
	ldr	r1, .L11237
	ldr	r0, .L11237+4
.LPIC2360:
	add	r1, pc, r1
	add	r1, r1, #3360
.LPIC2359:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	bl	ffs_data_clear(PLT)
	ldr	r2, [r4, #124]
	add	r3, r4, #124
	cmp	r2, r3
	bne	.L11233
	ldr	r2, [r4, #44]
	add	r3, r4, #44
	cmp	r2, r3
	bne	.L11233
	mov	r0, r4
	bl	kfree(PLT)
	b	.L11232
.L11233:
#APP
@ 1347 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1348, 0
.popsection
@ 0 "" 2
.L11238:
	.align	2
.L11237:
	.word	.LANCHOR3-(.LPIC2360+8)
	.word	.LC531-(.LPIC2359+8)
	.fnend
	.size	ffs_ep0_release, .-ffs_ep0_release
	.align	2
	.type	ffs_epfile_release, %function
ffs_epfile_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r2, #1
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r3, [r0, #348]
	ldr	r4, [r3, #40]
	str	r2, [r3, #36]
	add	r3, r4, #92
#APP
@ 99 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r5, [r3]
	sub	r5, r5, #1
	strex	r2, r5, [r3]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r5, #0
	bne	.L11240
	mov	r3, #3
	mov	r0, r4
	str	r3, [r4, #96]
	bl	ffs_data_clear(PLT)
	str	r5, [r4, #220]
	str	r5, [r4, #148]
	str	r5, [r4, #188]
	str	r5, [r4, #192]
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r5, [r4, #160]
	str	r5, [r4, #164]
	str	r5, [r4, #168]
	str	r5, [r4, #172]
	str	r5, [r4, #176]
	strh	r5, [r4, #180]	@ movhi
	strh	r5, [r4, #182]	@ movhi
	strh	r5, [r4, #184]	@ movhi
	strh	r5, [r4, #108]	@ movhi
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	str	r5, [r4, #132]
.L11240:
	add	r3, r4, #88
#APP
@ 99 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	beq	.L11245
.L11241:
	mov	r3, #0
	mov	r0, r3
	str	r3, [r6, #124]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11245:
	ldr	r1, .L11246
	ldr	r0, .L11246+4
.LPIC2362:
	add	r1, pc, r1
	add	r1, r1, #3360
.LPIC2361:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	bl	ffs_data_clear(PLT)
	ldr	r2, [r4, #124]
	add	r3, r4, #124
	cmp	r2, r3
	bne	.L11242
	ldr	r2, [r4, #44]
	add	r3, r4, #44
	cmp	r2, r3
	bne	.L11242
	mov	r0, r4
	bl	kfree(PLT)
	b	.L11241
.L11242:
#APP
@ 1347 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1348, 0
.popsection
@ 0 "" 2
.L11247:
	.align	2
.L11246:
	.word	.LANCHOR3-(.LPIC2362+8)
	.word	.LC531-(.LPIC2361+8)
	.fnend
	.size	ffs_epfile_release, .-ffs_epfile_release
	.align	2
	.type	functionfs_unbind, %function
functionfs_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L11254
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r3, #4]
	ldr	r1, [r4, #32]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r2, #0
	mov	r3, r4
	str	r2, [r4, #32]
	str	r2, [r3], #88
#APP
@ 99 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	beq	.L11255
.L11250:
	add	r1, r4, #132
	ldr	lr, [sp, #4]
	mov	r0, #1
	ldr	r4, [sp]
	add	sp, sp, #8
	b	_clear_bit(PLT)
.L11254:
	ldr	r0, .L11256
	movw	r1, #1481
.LPIC2363:
	add	r0, pc, r0
	b	warn_slowpath_null(PLT)
.L11255:
	ldr	r1, .L11256+4
	ldr	r0, .L11256+8
.LPIC2365:
	add	r1, pc, r1
	add	r1, r1, #3360
.LPIC2364:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	bl	ffs_data_clear(PLT)
	ldr	r2, [r4, #124]
	add	r3, r4, #124
	cmp	r2, r3
	bne	.L11251
	ldr	r2, [r4, #44]
	add	r3, r4, #44
	cmp	r2, r3
	bne	.L11251
	mov	r0, r4
	bl	kfree(PLT)
	b	.L11250
.L11251:
#APP
@ 1347 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1348, 0
.popsection
@ 0 "" 2
.L11257:
	.align	2
.L11256:
	.word	.LC182-(.LPIC2363+8)
	.word	.LANCHOR3-(.LPIC2365+8)
	.word	.LC531-(.LPIC2364+8)
	.fnend
	.size	functionfs_unbind, .-functionfs_unbind
	.align	2
	.global	usb_string_id
	.type	usb_string_id, %function
usb_string_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	mov	r2, r0
	cmp	r3, #253
	bhi	.L11260
	add	r3, r3, #1
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r2, #48]
.L11259:
	bx	lr
.L11260:
	mvn	r0, #18
	b	.L11259
	.fnend
	.size	usb_string_id, .-usb_string_id
	.align	2
	.type	f_midi_bind, %function
f_midi_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 504
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	ldr	r6, .L11294
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #24]
	.pad #508
	sub	sp, sp, #508
.LPIC2390:
	add	r6, pc, r6
	str	r0, [sp, #12]
	str	r3, [sp, #8]
	ldrb	r3, [r6, #1944]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11262
	ldr	r0, [sp, #8]
	bl	usb_string_id(PLT)
	subs	r5, r0, #0
	blt	.L11263
	strb	r5, [r6, #1944]
.L11262:
	ldr	r7, [sp, #12]
	mov	r1, r4
	mov	r0, r7
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L11263
	ldr	r6, .L11294+4
	mov	r0, r7
	mov	r1, r4
.LPIC2392:
	add	r6, pc, r6
	strb	r5, [r6, #2386]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L11263
	uxtb	r5, r5
	add	r1, r6, #2416
	add	r1, r1, #4
	strb	r5, [r6, #2398]
	strb	r5, [r6, #2416]
	ldr	r5, [sp, #8]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	str	r0, [r4, #80]
	beq	.L11264
	str	r5, [r0]
	add	r1, r6, #2432
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	str	r0, [r4, #84]
	beq	.L11276
	str	r5, [r0]
	movw	r1, #32976
	mov	r0, #292
	bl	__kmalloc(PLT)
	subs	r3, r0, #0
	mov	r0, r3
	str	r3, [sp, #20]
	beq	.L11277
	add	r2, r6, #2384
	add	r1, r2, #24
	add	r3, r2, #12
	str	r2, [r0]
	add	r2, r2, #60
	stmib	r0, {r1, r3}
	ldr	r3, [r4, #316]
	ldr	r1, [r4, #312]
	str	r2, [r0, #12]
	ldr	r10, [r4, #312]
	add	r3, r3, r1
	rsb	r3, r3, r3, asl #4
	cmp	r10, #0
	add	r3, r3, #7
	strh	r3, [r2, #5]	@ unaligned
	beq	.L11278
	add	ip, r6, #2448
	mov	r1, #1
	mov	lr, #0
	add	ip, ip, #7
	mov	r6, r1
	mov	r9, lr
	add	r2, sp, #24
	add	r3, sp, #360
	str	ip, [sp]
	mov	r8, #36
	mov	r7, #2
.L11267:
	mov	ip, #9
	mov	r5, #6
	strb	r1, [r2, #4]
	strb	r8, [r2, #1]
	add	r1, r1, #2
	add	lr, lr, #1
	str	ip, [sp, #4]
	ldrb	ip, [sp, #4]	@ zero_extendqisi2
	sub	r10, r1, #1
	strb	r5, [r2]
	add	r0, r0, #8
	add	r5, r1, #3
	strb	r7, [r2, #2]
	strb	r7, [r2, #3]
	strb	r9, [r2, #5]
	str	r2, [r0, #8]
	ldrb	fp, [r2, #4]	@ zero_extendqisi2
	add	r2, r2, #6
	strb	ip, [r3]
	mov	ip, #3
	strb	r10, [r3, #4]
	str	ip, [sp, #4]
	ldrb	ip, [sp, #4]	@ zero_extendqisi2
	strb	r8, [r3, #1]
	strb	r6, [r3, #3]
	strb	r6, [r3, #5]
	strb	ip, [r3, #2]
	ldr	ip, [sp]
	strb	r6, [r3, #7]
	strb	r9, [r3, #8]
	strb	fp, [r3, #6]
	str	r3, [r0, #12]
	ldrb	r10, [r3, #4]	@ zero_extendqisi2
	add	r3, r3, #9
	strb	r10, [ip, #1]!
	ldr	r10, [r4, #312]
	str	ip, [sp]
	cmp	lr, r10
	bcc	.L11267
	mov	r3, r5, asl #2
	add	lr, r3, #4
	add	ip, r3, #8
.L11266:
	ldr	r2, [r4, #316]
	cmp	r2, #0
	beq	.L11279
	ldr	r3, [sp, #20]
	mov	ip, #0
	add	r2, sp, #120
	ldr	r6, .L11294+8
	mov	r9, ip
	mov	r8, #36
	mov	r7, #2
	mov	lr, #1
	add	r0, r3, r5, asl #2
	rsb	r3, r1, r5
.LPIC2403:
	add	r6, pc, r6
	add	r6, r6, #2464
	str	r3, [sp, #16]
	add	r3, sp, #216
	add	r6, r6, #11
.L11269:
	mov	r5, #6
	strb	r1, [r2, #4]
	add	r1, r1, #2
	strb	r8, [r2, #1]
	sub	r10, r1, #1
	add	ip, ip, #1
	strb	r5, [r2]
	ldr	r5, [sp, #16]
	add	r0, r0, #8
	strb	r7, [r2, #2]
	strb	lr, [r2, #3]
	strb	r9, [r2, #5]
	add	r5, r5, r1
	str	r2, [r0, #-8]
	ldrb	fp, [r2, #4]	@ zero_extendqisi2
	strb	r10, [r3, #4]
	add	r2, r2, #6
	str	r5, [sp]
	mov	r5, #9
	strb	r8, [r3, #1]
	str	r5, [sp, #4]
	ldrb	r5, [sp, #4]	@ zero_extendqisi2
	strb	fp, [r3, #6]
	strb	r7, [r3, #3]
	strb	lr, [r3, #5]
	strb	r5, [r3]
	mov	r5, #3
	strb	r9, [r3, #8]
	str	r5, [sp, #4]
	ldrb	r5, [sp, #4]	@ zero_extendqisi2
	strb	lr, [r3, #7]
	strb	r5, [r3, #2]
	str	r3, [r0, #-4]
	ldrb	r10, [r2, #-2]	@ zero_extendqisi2
	add	r3, r3, #9
	strb	r10, [r6, #1]!
	ldr	fp, [r4, #316]
	cmp	ip, fp
	bcc	.L11269
	ldr	r5, [sp]
	uxtb	r2, fp
	ldr	r10, [r4, #312]
	add	r1, r2, #4
	uxtb	r1, r1
	mov	r3, r5, asl #2
	add	lr, r3, #4
	add	ip, r3, #8
.L11268:
	ldr	r0, .L11294+12
	add	r6, r5, #3
	uxtb	fp, r10
	ldr	r5, [sp, #20]
	mov	r7, #0
.LPIC2404:
	add	r0, pc, r0
	add	r9, r5, r6, asl #2
	add	r5, fp, #4
	strb	r2, [r0, #2455]
	ldr	r2, [sp, #20]
	add	r10, r0, #2464
	strb	r5, [r0, #2472]
	add	r5, r0, #2416
	add	r8, r0, #2432
	strb	r1, [r0, #2452]
	add	r1, r0, #2448
	add	r10, r10, #8
	add	r1, r1, #4
	add	r5, r5, #4
	strb	fp, [r0, #2475]
	str	r8, [r2, r3]
	mov	r0, r2
	str	r10, [r2, lr]
	str	r5, [r2, ip]
	str	r1, [r2, r6, asl #2]
	str	r7, [r9, #4]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, r7
	str	r0, [r4, #8]
	beq	.L11270
	ldr	r3, [sp, #12]
	ldr	r3, [r3, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L11273
	ldr	r1, [sp, #12]
	mov	r2, #512
	ldr	r0, [sp, #20]
	strh	r2, [r5, #4]	@ movhi
	strh	r2, [r8, #4]	@ movhi
	ldrb	r3, [r1, #45]	@ zero_extendqisi2
	orr	r3, r3, #2
	strb	r3, [r1, #45]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L11270
.L11273:
	ldr	r0, [sp, #20]
	bl	kfree(PLT)
	mov	r0, #0
	b	.L11292
.L11277:
	mvn	r5, #11
.L11263:
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L11265
.L11275:
	mov	r2, #0
	str	r2, [r3]
.L11265:
	ldr	r3, [r4, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
.L11274:
	ldr	r3, [sp, #8]
	ldr	r1, .L11294+16
	ldr	r2, [r4]
	ldr	r0, [r3]
	mov	r3, r5
.LPIC2414:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r0, r5
.L11292:
	add	sp, sp, #508
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11264:
	ldr	r3, [r4, #84]
	mvn	r5, #18
	cmp	r3, #0
	bne	.L11275
	b	.L11274
.L11276:
	mvn	r5, #18
	b	.L11265
.L11270:
	ldr	r0, [sp, #20]
	mvn	r5, #18
	bl	kfree(PLT)
	ldr	r0, [r4, #12]
	bl	kfree(PLT)
	b	.L11263
.L11279:
	mov	r1, #4
	b	.L11268
.L11278:
	mov	ip, #24
	mov	lr, #20
	mov	r3, #16
	mov	r5, #4
	mov	r1, #1
	b	.L11266
.L11295:
	.align	2
.L11294:
	.word	.LANCHOR0-(.LPIC2390+8)
	.word	.LANCHOR1-(.LPIC2392+8)
	.word	.LANCHOR1-(.LPIC2403+8)
	.word	.LANCHOR1-(.LPIC2404+8)
	.word	.LC503-(.LPIC2414+8)
	.fnend
	.size	f_midi_bind, .-f_midi_bind
	.align	2
	.type	android_bind, %function
android_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L11407
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC2415:
	add	r3, pc, r3
	str	lr, [sp, #32]
	ldr	r7, [r0]
	ldr	r4, [r3, #4]
	.pad #20
	sub	sp, sp, #20
	str	r0, [r4, #-160]
	ldr	r3, [r0, #4]
	ldr	r3, [r3, #28]
	str	r3, [r4, #-152]
	ldr	r3, [r7]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L11297
	mov	r0, r7
	mov	r1, #0
	blx	r3
.L11297:
	ldr	r3, .L11407+4
.LPIC2416:
	add	r3, pc, r3
	ldr	r3, [r3, #-480]
	cmp	r3, #1
	beq	.L11298
.L11305:
	mov	r0, r5
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L11396
	ldr	r4, .L11407+8
	uxtb	r3, r0
	mov	r0, r5
	ldr	r6, .L11407+12
.LPIC2433:
	add	r4, pc, r4
.LPIC2434:
	add	r6, pc, r6
	strb	r3, [r4, #1960]
	strb	r3, [r6, #230]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L11396
	ldr	r8, .L11407+16
	uxtb	r3, r0
	mov	r2, #255
	ldr	r9, .L11407+20
	strb	r3, [r4, #1968]
.LPIC2437:
	add	r8, pc, r8
	strb	r3, [r6, #231]
.LPIC2438:
	add	r9, pc, r9
	add	r0, r8, #2912
	mov	r1, r9
	bl	strlcpy(PLT)
	mov	r1, r9
	mov	r2, #255
	add	r0, r8, #2656
	bl	strlcpy(PLT)
	ldr	r1, .L11407+24
	mov	r2, #255
	add	r0, r8, #2400
.LPIC2442:
	add	r1, pc, r1
	bl	strlcpy(PLT)
	mov	r0, r5
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L11396
	uxtb	r3, r0
	ldr	r5, [r7, #28]
	ldr	r0, .L11407+28
	strb	r3, [r4, #1976]
	mov	r1, r5
	strb	r3, [r6, #232]
.LPIC2445:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L11400
	movw	r2, #513
.L11326:
	ldr	r3, .L11407+32
	mov	r0, #0
.LPIC2472:
	add	r3, pc, r3
	strh	r2, [r3, #228]	@ movhi
.L11396:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11298:
	ldr	r2, .L11407+36
	ldr	fp, [r4, #-164]
.LPIC2417:
	add	r2, pc, r2
	ldr	r3, [r2]
	cmp	r2, r3
	sub	r6, r3, #168
	bne	.L11304
	b	.L11301
.L11401:
	ldr	r3, [r6, #168]
	cmp	r2, r3
	sub	r6, r3, #168
	beq	.L11301
.L11304:
	ldr	r3, [r3, #-160]
	cmp	r5, r3
	bne	.L11401
.L11301:
	ldr	r10, [fp]
	cmp	r10, #0
	beq	.L11305
	ldr	r3, .L11407+40
	mov	r8, #1
.LPIC2420:
	add	r3, pc, r3
	str	r3, [sp, #8]
	ldr	r3, .L11407+44
.LPIC2421:
	add	r3, pc, r3
	str	r3, [sp, #12]
.L11318:
	mov	r0, #208
	ldr	r1, [sp, #8]
	mov	r9, #0
	ldr	r2, [r10]
	bl	kasprintf(PLT)
	cmp	r0, #0
	str	r0, [r10, #12]
	str	r9, [r10, #20]
	beq	.L11329
	ldr	r3, [sp, #12]
	mov	r2, r8
	ldr	r1, [r6, #12]
	ldr	lr, [r3, #3708]
	str	r0, [sp]
	mov	r3, r10
	mov	r0, lr
	bl	device_create(PLT)
	cmn	r0, #4096
	str	r0, [r10, #8]
	bhi	.L11402
	ldr	r3, [r10, #24]
	cmp	r3, #0
	beq	.L11309
	mov	r0, r10
	mov	r1, r5
	blx	r3
	subs	r4, r0, #0
	bne	.L11403
.L11309:
	ldr	r9, [r10, #16]
	cmp	r9, #0
	beq	.L11311
	ldr	r1, [r9]
	add	r9, r9, #4
	cmp	r1, #0
	bne	.L11313
	b	.L11311
.L11404:
	cmp	r0, #0
	bne	.L11316
.L11313:
	ldr	r0, [r10, #8]
	bl	device_create_file(PLT)
	ldr	r1, [r9], #4
	mov	r4, r0
	cmp	r1, #0
	bne	.L11404
	cmp	r0, #0
	bne	.L11316
.L11311:
	add	r8, r8, #1
	add	r3, fp, r8, asl #2
	ldr	r10, [r3, #-4]
	cmp	r10, #0
	bne	.L11318
	b	.L11305
.L11316:
	ldr	r1, .L11407+48
	sub	r8, r9, #8
	ldr	r0, .L11407+52
	ldr	r3, [r10]
.LPIC2429:
	add	r1, pc, r1
	add	r1, r1, #3376
.LPIC2428:
	add	r0, pc, r0
	add	r1, r1, #4
	mov	r2, r1
	bl	printk(PLT)
	ldr	r3, [r10, #16]
	ldr	r1, [r9, #-8]
	cmp	r8, r3
	beq	.L11315
.L11319:
	ldr	r0, [r10, #8]
	bl	device_remove_file(PLT)
	ldr	r1, [r8], #-4
	ldr	r3, [r10, #16]
	cmp	r8, r3
	bne	.L11319
.L11315:
	ldr	r3, [r10, #28]
	cmp	r3, #0
	beq	.L11310
	mov	r0, r10
	blx	r3
.L11310:
	ldr	r3, .L11407+56
	ldr	r2, [r10, #8]
.LPIC2431:
	add	r3, pc, r3
	ldr	r0, [r3, #3708]
	ldr	r1, [r2, #296]
	bl	device_destroy(PLT)
.L11308:
	mov	r3, #0
	ldr	r0, [r10, #12]
	str	r3, [r10, #8]
	bl	kfree(PLT)
.L11306:
	ldr	r9, [r6, #4]
	ldr	r10, .L11407+60
	sub	r9, r9, #4
.LPIC2432:
	add	r10, pc, r10
.L11320:
	ldr	r8, [r9, #4]!
	cmp	r8, #0
	beq	.L11405
.L11325:
	ldr	r3, [r8, #8]
	cmp	r3, #0
	beq	.L11320
	ldr	r1, [r3, #296]
	ldr	r0, [r10, #3708]
	bl	device_destroy(PLT)
	ldr	r0, [r8, #12]
	bl	kfree(PLT)
	ldr	r3, [r8, #28]
	cmp	r3, #0
	beq	.L11322
	mov	r0, r8
	blx	r3
.L11322:
	ldr	r6, [r8, #16]
	cmp	r6, #0
	beq	.L11320
	ldr	r1, [r6]
	add	r6, r6, #4
	cmp	r1, #0
	beq	.L11320
.L11324:
	ldr	r0, [r8, #8]
	bl	device_remove_file(PLT)
	ldr	r1, [r6], #4
	cmp	r1, #0
	bne	.L11324
	ldr	r8, [r9, #4]!
	cmp	r8, #0
	bne	.L11325
.L11405:
	cmp	r4, #0
	beq	.L11305
	mov	r0, r4
	b	.L11396
.L11400:
	ldr	r0, .L11407+64
	mov	r1, r5
.LPIC2446:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11335
	ldr	r0, .L11407+68
	mov	r1, r5
.LPIC2447:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11336
	ldr	r0, .L11407+72
	mov	r1, r5
.LPIC2448:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11337
	ldr	r0, .L11407+76
	mov	r1, r5
.LPIC2449:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11338
	ldr	r0, .L11407+80
	mov	r1, r5
.LPIC2450:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11339
	ldr	r0, .L11407+84
	mov	r1, r5
.LPIC2451:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11340
	ldr	r0, .L11407+88
	mov	r1, r5
.LPIC2452:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11341
	ldr	r0, .L11407+92
	mov	r1, r5
.LPIC2453:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11342
	ldr	r0, .L11407+96
	mov	r1, r5
.LPIC2454:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11343
	ldr	r0, .L11407+100
	mov	r1, r5
.LPIC2455:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11344
	ldr	r0, .L11407+104
	mov	r1, r5
.LPIC2456:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11345
	ldr	r0, .L11407+108
	mov	r1, r5
.LPIC2457:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11346
	ldr	r0, .L11407+112
	mov	r1, r5
.LPIC2458:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11347
	ldr	r0, .L11407+116
	mov	r1, r5
.LPIC2459:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11348
	ldr	r0, .L11407+120
	mov	r1, r5
.LPIC2460:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11349
	ldr	r0, .L11407+124
	mov	r1, r5
.LPIC2461:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11350
	ldr	r0, .L11407+128
	mov	r1, r5
.LPIC2462:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11351
	ldr	r0, .L11407+132
	mov	r1, r5
.LPIC2463:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11352
	ldr	r0, .L11407+136
	mov	r1, r5
.LPIC2464:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11353
	ldr	r0, .L11407+140
	mov	r1, r5
.LPIC2465:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11354
	ldr	r0, .L11407+144
	mov	r1, r5
.LPIC2466:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11355
	ldr	r0, .L11407+148
	mov	r1, r5
.LPIC2467:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11356
	ldr	r0, .L11407+152
	mov	r1, r5
.LPIC2468:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11357
	ldr	r0, .L11407+156
	mov	r1, r5
.LPIC2469:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11358
	ldr	r0, .L11407+160
	mov	r1, r5
.LPIC2470:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11359
	ldr	r0, .L11407+164
	mov	r1, r5
.LPIC2471:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L11406
	mov	r2, #564
	b	.L11326
.L11335:
	movw	r2, #514
	b	.L11326
.L11402:
	ldr	r1, .L11407+168
	ldr	r0, .L11407+172
	ldr	r3, [r10, #12]
.LPIC2423:
	add	r1, pc, r1
	add	r1, r1, #3376
.LPIC2422:
	add	r0, pc, r0
	add	r1, r1, #4
	mov	r2, r1
	bl	printk(PLT)
	ldr	r4, [r10, #8]
	str	r9, [r10, #8]
	b	.L11308
.L11336:
	movw	r2, #515
	b	.L11326
.L11337:
	movw	r2, #518
	b	.L11326
.L11329:
	mvn	r4, #11
	b	.L11306
.L11338:
	mov	r2, #520
	b	.L11326
.L11339:
	movw	r2, #529
	b	.L11326
.L11340:
	movw	r2, #530
	b	.L11326
.L11342:
	mov	r2, #532
	b	.L11326
.L11341:
	movw	r2, #531
	b	.L11326
.L11403:
	ldr	r1, .L11407+176
	ldr	r0, .L11407+180
	ldr	r3, [r10]
.LPIC2426:
	add	r1, pc, r1
	add	r1, r1, #3376
.LPIC2425:
	add	r0, pc, r0
	add	r1, r1, #4
	mov	r2, r1
	bl	printk(PLT)
	b	.L11310
.L11406:
	ldr	r2, .L11407+184
	mov	r3, r5
	ldr	r0, .L11407+188
.LPIC2474:
	add	r2, pc, r2
	add	r1, r2, #3392
	add	r2, r2, #3408
	add	r2, r2, #12
.LPIC2473:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r3, .L11407+192
	movw	r2, #39321
	mov	r0, #0
	movt	r2, 65535
.LPIC2476:
	add	r3, pc, r3
	strh	r2, [r3, #228]	@ movhi
	b	.L11396
.L11359:
	movw	r2, #563
	b	.L11326
.L11358:
	movw	r2, #562
	b	.L11326
.L11357:
	movw	r2, #561
	b	.L11326
.L11356:
	mov	r2, #560
	b	.L11326
.L11355:
	movw	r2, #553
	b	.L11326
.L11354:
	mov	r2, #552
	b	.L11326
.L11353:
	movw	r2, #551
	b	.L11326
.L11352:
	movw	r2, #550
	b	.L11326
.L11351:
	movw	r2, #549
	b	.L11326
.L11350:
	mov	r2, #548
	b	.L11326
.L11349:
	movw	r2, #547
	b	.L11326
.L11348:
	movw	r2, #546
	b	.L11326
.L11347:
	movw	r2, #545
	b	.L11326
.L11346:
	mov	r2, #544
	b	.L11326
.L11345:
	movw	r2, #537
	b	.L11326
.L11344:
	mov	r2, #536
	b	.L11326
.L11343:
	movw	r2, #534
	b	.L11326
.L11408:
	.align	2
.L11407:
	.word	.LANCHOR2-(.LPIC2415+8)
	.word	.LANCHOR4-(.LPIC2416+8)
	.word	.LANCHOR0-(.LPIC2433+8)
	.word	.LANCHOR1-(.LPIC2434+8)
	.word	.LANCHOR2-(.LPIC2437+8)
	.word	.LC537-(.LPIC2438+8)
	.word	.LC538-(.LPIC2442+8)
	.word	.LC403-(.LPIC2445+8)
	.word	.LANCHOR1-(.LPIC2472+8)
	.word	.LANCHOR2-(.LPIC2417+8)
	.word	.LC533-(.LPIC2420+8)
	.word	.LANCHOR4-(.LPIC2421+8)
	.word	.LANCHOR3-(.LPIC2429+8)
	.word	.LC536-(.LPIC2428+8)
	.word	.LANCHOR4-(.LPIC2431+8)
	.word	.LANCHOR4-(.LPIC2432+8)
	.word	.LC404-(.LPIC2446+8)
	.word	.LC261-(.LPIC2447+8)
	.word	.LC405-(.LPIC2448+8)
	.word	.LC406-(.LPIC2449+8)
	.word	.LC407-(.LPIC2450+8)
	.word	.LC408-(.LPIC2451+8)
	.word	.LC409-(.LPIC2452+8)
	.word	.LC410-(.LPIC2453+8)
	.word	.LC411-(.LPIC2454+8)
	.word	.LC412-(.LPIC2455+8)
	.word	.LC413-(.LPIC2456+8)
	.word	.LC414-(.LPIC2457+8)
	.word	.LC415-(.LPIC2458+8)
	.word	.LC416-(.LPIC2459+8)
	.word	.LC417-(.LPIC2460+8)
	.word	.LC418-(.LPIC2461+8)
	.word	.LC419-(.LPIC2462+8)
	.word	.LC420-(.LPIC2463+8)
	.word	.LC421-(.LPIC2464+8)
	.word	.LC422-(.LPIC2465+8)
	.word	.LC423-(.LPIC2466+8)
	.word	.LC424-(.LPIC2467+8)
	.word	.LC425-(.LPIC2468+8)
	.word	.LC328-(.LPIC2469+8)
	.word	.LC426-(.LPIC2470+8)
	.word	.LC427-(.LPIC2471+8)
	.word	.LANCHOR3-(.LPIC2423+8)
	.word	.LC534-(.LPIC2422+8)
	.word	.LANCHOR3-(.LPIC2426+8)
	.word	.LC535-(.LPIC2425+8)
	.word	.LANCHOR3-(.LPIC2474+8)
	.word	.LC539-(.LPIC2473+8)
	.word	.LANCHOR1-(.LPIC2476+8)
	.fnend
	.size	android_bind, .-android_bind
	.align	2
	.type	accessory_function_bind_config, %function
accessory_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r3, .L11415
	mov	r5, r1
	str	r6, [sp, #8]
	ldr	r0, .L11415+4
	ldr	r6, .L11415+8
	str	lr, [sp, #12]
.LPIC2477:
	add	r3, pc, r3
.LPIC2478:
	add	r0, pc, r0
	ldr	r4, [r3, #2316]
.LPIC2479:
	add	r6, pc, r6
	bl	printk(PLT)
	ldrb	r3, [r6, #1992]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11414
.L11410:
	ldr	r3, .L11415+12
	ldr	r2, .L11415+16
	ldr	lr, [r5, #24]
.LPIC2483:
	add	r3, pc, r3
	add	r1, r3, #2000
	add	ip, r3, #2016
	add	r0, r3, #2032
.LPIC2482:
	add	r2, pc, r2
	str	lr, [r4, #76]
	add	r1, r1, #8
	str	r0, [r4, #12]
	mov	r0, r5
	stmib	r4, {r1, ip}
	ldr	ip, .L11415+20
	mov	r1, r4
	str	r2, [r4]
	ldr	r2, [r5, #24]
	ldr	r5, .L11415+24
.LPIC2487:
	add	ip, pc, ip
	ldr	r2, [r2]
.LPIC2490:
	add	r5, pc, r5
	ldr	r2, [r2, #20]
	str	ip, [r4, #24]
	str	r5, [r4, #40]
	cmp	r2, #4
	ldr	r2, .L11415+28
	addhi	r3, r3, #2048
	strhi	r3, [r4, #16]
	ldr	r3, .L11415+32
.LPIC2488:
	add	r2, pc, r2
.LPIC2489:
	add	r3, pc, r3
	strd	r2, [r4, #28]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_add_function(PLT)
.L11414:
	ldr	r0, [r5, #24]
	bl	usb_string_id(PLT)
	subs	r3, r0, #0
	blt	.L11411
	ldr	r2, .L11415+36
	uxtb	r3, r3
	strb	r3, [r6, #1992]
.LPIC2481:
	add	r2, pc, r2
	strb	r3, [r2, #1764]
	b	.L11410
.L11411:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11416:
	.align	2
.L11415:
	.word	.LANCHOR2-(.LPIC2477+8)
	.word	.LC540-(.LPIC2478+8)
	.word	.LANCHOR0-(.LPIC2479+8)
	.word	.LANCHOR0-(.LPIC2483+8)
	.word	.LC541-(.LPIC2482+8)
	.word	acc_function_bind-(.LPIC2487+8)
	.word	acc_function_disable-(.LPIC2490+8)
	.word	acc_function_unbind-(.LPIC2488+8)
	.word	acc_function_set_alt-(.LPIC2489+8)
	.word	.LANCHOR1-(.LPIC2481+8)
	.fnend
	.size	accessory_function_bind_config, .-accessory_function_bind_config
	.align	2
	.type	mass_storage_function_bind_config, %function
mass_storage_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L11432
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0, #4]
	ldr	r0, [r1, #24]
.LPIC2491:
	add	r4, pc, r4
	ldrb	r3, [r4, #2072]	@ zero_extendqisi2
	ldr	r6, [r2, #96]
	cmp	r3, #0
	beq	.L11428
.L11418:
	ldr	r3, .L11432+4
.LPIC2503:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L11424
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L11429
.L11420:
	ldr	r2, .L11432+8
	str	r6, [r4, #80]
	mov	r0, r5
	ldr	r3, .L11432+12
	mov	r1, r4
	ldr	r6, .L11432+16
	ldr	r5, .L11432+20
.LPIC2495:
	add	r2, pc, r2
	ldr	lr, .L11432+24
	ldr	ip, .L11432+28
.LPIC2496:
	add	r3, pc, r3
	str	r2, [r4]
	ldr	r2, .L11432+32
	add	r3, r3, #2080
.LPIC2498:
	add	r5, pc, r5
	add	r3, r3, #8
.LPIC2499:
	add	lr, pc, lr
.LPIC2497:
	add	r6, pc, r6
.LPIC2500:
	add	ip, pc, ip
	str	r5, [r4, #28]
.LPIC2501:
	add	r2, pc, r2
	str	r6, [r4, #24]
	str	r3, [r4, #4]
	str	lr, [r4, #44]
	str	ip, [r4, #32]
	str	r2, [r4, #40]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	bne	.L11430
	ldr	r4, [r4, #80]
	ldr	r3, [r4, #212]
	cmp	r3, #0
	beq	.L11431
.L11422:
	add	r3, r4, #212
#APP
@ 45 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	mov	r0, #0
.L11419:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11424:
	mov	r4, #16
	b	.L11420
.L11428:
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L11419
	ldr	r3, .L11432+36
	uxtb	r0, r0
	strb	r0, [r4, #2072]
.LPIC2493:
	add	r3, pc, r3
	strb	r0, [r3, #1848]
	b	.L11418
.L11429:
	mvn	r0, #11
	b	.L11419
.L11430:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
	b	.L11419
.L11431:
	ldr	r0, .L11432+40
	mov	r1, #42
.LPIC2502:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L11422
.L11433:
	.align	2
.L11432:
	.word	.LANCHOR0-(.LPIC2491+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2503+8))
	.word	.LC542-(.LPIC2495+8)
	.word	.LANCHOR0-(.LPIC2496+8)
	.word	fsg_bind-(.LPIC2497+8)
	.word	fsg_unbind-(.LPIC2498+8)
	.word	fsg_setup-(.LPIC2499+8)
	.word	fsg_set_alt-(.LPIC2500+8)
	.word	fsg_disable-(.LPIC2501+8)
	.word	.LANCHOR1-(.LPIC2493+8)
	.word	.LC461-(.LPIC2502+8)
	.fnend
	.size	mass_storage_function_bind_config, .-mass_storage_function_bind_config
	.align	2
	.type	ptp_function_bind_config, %function
ptp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r3, .L11440
	mov	r5, r1
	str	r6, [sp, #8]
	ldr	r0, .L11440+4
	ldr	r6, .L11440+8
	str	lr, [sp, #12]
.LPIC2504:
	add	r3, pc, r3
.LPIC2505:
	add	r0, pc, r0
	ldr	r4, [r3, #2320]
.LPIC2506:
	add	r6, pc, r6
	bl	printk(PLT)
	ldrb	r3, [r6, #2096]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11439
.L11435:
	ldr	r3, .L11440+12
	ldr	ip, [r5, #24]
	ldr	r0, .L11440+16
.LPIC2510:
	add	r3, pc, r3
	add	r1, r3, #2112
	add	r2, r3, #2128
	str	ip, [r4, #76]
.LPIC2509:
	add	r0, pc, r0
	add	ip, r3, #2112
	add	r1, r1, #8
	add	r2, r2, #12
	str	r0, [r4]
	mov	r0, r5
	str	r1, [r4, #8]
	mov	r1, r4
	str	ip, [r4, #4]
	ldr	ip, .L11440+20
	str	r2, [r4, #12]
	ldr	r2, [r5, #24]
	ldr	r5, .L11440+24
.LPIC2514:
	add	ip, pc, ip
	ldr	r2, [r2]
.LPIC2517:
	add	r5, pc, r5
	ldr	r2, [r2, #20]
	str	ip, [r4, #24]
	str	r5, [r4, #40]
	cmp	r2, #4
	ldr	r2, .L11440+28
	addhi	r3, r3, #2160
	strhi	r3, [r4, #16]
	ldr	r3, .L11440+32
.LPIC2515:
	add	r2, pc, r2
.LPIC2516:
	add	r3, pc, r3
	strd	r2, [r4, #28]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_add_function(PLT)
.L11439:
	ldr	r0, [r5, #24]
	bl	usb_string_id(PLT)
	subs	r3, r0, #0
	blt	.L11436
	ldr	r2, .L11440+36
	uxtb	r3, r3
	strb	r3, [r6, #2096]
.LPIC2508:
	add	r2, pc, r2
	strb	r3, [r2, #1948]
	b	.L11435
.L11436:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11441:
	.align	2
.L11440:
	.word	.LANCHOR2-(.LPIC2504+8)
	.word	.LC543-(.LPIC2505+8)
	.word	.LANCHOR0-(.LPIC2506+8)
	.word	.LANCHOR0-(.LPIC2510+8)
	.word	.LC544-(.LPIC2509+8)
	.word	mtp_function_bind-(.LPIC2514+8)
	.word	mtp_function_disable-(.LPIC2517+8)
	.word	mtp_function_unbind-(.LPIC2515+8)
	.word	mtp_function_set_alt-(.LPIC2516+8)
	.word	.LANCHOR1-(.LPIC2508+8)
	.fnend
	.size	ptp_function_bind_config, .-ptp_function_bind_config
	.align	2
	.type	qdss_function_bind_config, %function
qdss_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r4, .L11467
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC2518:
	add	r4, pc, r4
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldrb	r3, [r4, #2192]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11443
	ldr	r0, [r1, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L11454
	ldr	r5, .L11467+4
	uxtb	r8, r0
	ldr	r0, [r6, #24]
	strb	r8, [r4, #2192]
.LPIC2520:
	add	r5, pc, r5
	strb	r8, [r5, #2116]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L11454
	uxtb	r0, r0
	strb	r0, [r4, #2200]
	strb	r0, [r5, #2128]
.L11443:
	ldr	r0, .L11467+8
.LPIC2523:
	add	r0, pc, r0
	sub	r0, r0, #664
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L11467+12
	mov	r7, r0
.LPIC2524:
	add	r3, pc, r3
	ldr	r4, [r3, #24]!
	cmp	r4, r3
	sub	r4, r4, #4
	beq	.L11445
	ldr	r5, .L11467+16
	ldr	r8, .L11467+20
.LPIC2527:
	add	r5, pc, r5
.LPIC2526:
	add	r8, pc, r8
	add	r5, r5, #24
	b	.L11447
.L11462:
	ldr	r4, [r4, #4]
	cmp	r4, r5
	sub	r4, r4, #4
	beq	.L11445
.L11447:
	mov	r0, r8
	ldr	r1, [r4]
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L11462
	sub	r5, r4, #104
	str	r5, [r4, #20]
.L11452:
	ldr	r0, .L11467+24
	mov	r1, r7
	add	r8, r5, #168
	ldr	fp, .L11467+28
	mov	r10, #2560
	add	r9, r5, #152
	mov	r7, #0
.LPIC2537:
	add	r0, pc, r0
	sub	r0, r0, #664
.LPIC2538:
	add	fp, pc, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r2, .L11467+32
	mov	r0, r6
	ldr	lr, [r6, #24]
	str	r8, [r5, #168]
	ldr	r1, .L11467+36
	str	r8, [r5, #172]
	ldr	r6, .L11467+40
	str	r7, [r5, #180]
.LPIC2539:
	add	r2, pc, r2
	ldr	ip, .L11467+44
	str	fp, [r5]
	add	r3, r2, #1776
	add	r2, r2, #2208
	str	lr, [r5, #76]
	add	r3, r3, #4
	add	r2, r2, #8
	ldr	lr, .L11467+48
.LPIC2542:
	add	r1, pc, r1
.LPIC2544:
	add	r6, pc, r6
	str	r10, [r5, #148]
	str	r3, [r5, #8]
.LPIC2546:
	add	ip, pc, ip
	str	r3, [r5, #12]
	ldr	r3, .L11467+52
	str	r2, [r5, #4]
	ldr	r2, .L11467+56
.LPIC2545:
	add	lr, pc, lr
	str	r1, [r5, #24]
	mov	r1, r5
	str	r6, [r5, #32]
.LPIC2543:
	add	r3, pc, r3
	str	lr, [r5, #40]
.LPIC2547:
	add	r2, pc, r2
	str	ip, [r5, #160]
	str	r3, [r5, #28]
	add	r3, r5, #132
	str	r2, [r5, #176]
	str	r3, [r5, #132]
	str	r3, [r5, #136]
	add	r3, r5, #140
	str	r10, [r5, #164]
	str	r3, [r5, #140]
	str	r3, [r5, #144]
	str	r9, [r5, #152]
	str	r9, [r5, #156]
	bl	usb_add_function(PLT)
	subs	r8, r0, #0
	bne	.L11463
.L11459:
	mov	r0, r8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11454:
	mov	r8, r0
.L11444:
	ldr	r1, .L11467+60
	ldr	r0, .L11467+64
.LPIC2551:
	add	r1, pc, r1
	add	r1, r1, #3424
.LPIC2550:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L11459
.L11445:
	ldr	r3, .L11467+68
.LPIC2552:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L11464
	movw	r1, #32800
	bl	kmem_cache_alloc(PLT)
	subs	r5, r0, #0
	beq	.L11465
.L11448:
	ldr	r4, .L11467+72
	mov	r1, r7
	ldr	r8, .L11467+76
.LPIC2530:
	add	r4, pc, r4
	sub	r4, r4, #664
.LPIC2531:
	add	r8, pc, r8
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r2, #0
	mov	r0, r8
	mov	r3, r2
	mov	r1, #10
	str	r2, [sp]
	mov	r2, #1
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, #0
	str	r0, [r5, #188]
	beq	.L11466
	mov	r0, r4
	add	r4, r5, #104
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L11467+80
	add	r2, r5, #108
	mov	r7, r0
	str	r8, [r5, #104]
.LPIC2534:
	add	r3, pc, r3
	ldr	r1, [r3, #28]
	add	r0, r3, #24
	str	r2, [r3, #28]
	strd	r0, [r5, #108]
	str	r2, [r1]
	b	.L11452
.L11464:
	mov	r5, #16
	b	.L11448
.L11466:
	mov	r0, r5
	mvn	r8, #11
	bl	kfree(PLT)
	b	.L11444
.L11465:
	ldr	r0, .L11467+84
	mvn	r8, #11
.LPIC2528:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L11467+88
	mov	r1, r7
.LPIC2529:
	add	r0, pc, r0
	sub	r0, r0, #664
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L11444
.L11463:
	ldr	r0, .L11467+92
.LPIC2548:
	add	r0, pc, r0
	bl	printk(PLT)
	str	r7, [r4, #20]
	mov	r0, r5
	bl	kfree(PLT)
	b	.L11444
.L11468:
	.align	2
.L11467:
	.word	.LANCHOR0-(.LPIC2518+8)
	.word	.LANCHOR1-(.LPIC2520+8)
	.word	.LANCHOR4-(.LPIC2523+8)
	.word	.LANCHOR0-(.LPIC2524+8)
	.word	.LANCHOR0-(.LPIC2527+8)
	.word	.LC545-(.LPIC2526+8)
	.word	.LANCHOR4-(.LPIC2537+8)
	.word	.LC545-(.LPIC2538+8)
	.word	.LANCHOR0-(.LPIC2539+8)
	.word	qdss_bind-(.LPIC2542+8)
	.word	qdss_set_alt-(.LPIC2544+8)
	.word	usb_qdss_connect_work-(.LPIC2546+8)
	.word	qdss_disable-(.LPIC2545+8)
	.word	qdss_unbind-(.LPIC2543+8)
	.word	usb_qdss_disconnect_work-(.LPIC2547+8)
	.word	.LANCHOR3-(.LPIC2551+8)
	.word	.LC548-(.LPIC2550+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2552+8))
	.word	.LANCHOR4-(.LPIC2530+8)
	.word	.LC545-(.LPIC2531+8)
	.word	.LANCHOR0-(.LPIC2534+8)
	.word	.LC546-(.LPIC2528+8)
	.word	.LANCHOR4-(.LPIC2529+8)
	.word	.LC547-(.LPIC2548+8)
	.fnend
	.size	qdss_function_bind_config, .-qdss_function_bind_config
	.align	2
	.type	composite_bind, %function
composite_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	ldr	r6, .L11531
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
.LPIC2576:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	ldr	r0, [r6, #28]
	cmp	r0, #0
	beq	.L11493
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L11526
.L11470:
	mov	r3, #0
	add	r8, r5, #32
	str	r5, [r4]
	mov	r1, r4
	mov	r0, r8
	str	r3, [r4, #60]
	bl	dev_set_drvdata(PLT)
	add	r3, r4, #36
	mov	r1, #208
	str	r3, [r4, #36]
	str	r3, [r4, #40]
	ldr	r0, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #4]
	beq	.L11472
	ldr	r0, [r6, #48]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L11473
	mov	r1, #208
	bl	kmem_cache_alloc(PLT)
.L11473:
	str	r0, [r7]
	ldr	r2, [r4, #4]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L11472
	ldr	r3, .L11531+4
	mov	r1, #4096
	ldr	r9, .L11531+8
	ldr	r7, .L11531+12
.LPIC2554:
	add	r3, pc, r3
.LPIC2555:
	add	r9, pc, r9
	str	r3, [r2, #28]
	ldr	r3, [r9, #88]
.LPIC2556:
	add	r7, pc, r7
	ldr	r2, [r5, #4]
	str	r4, [r2]
	ldr	r0, [r4]
	str	r3, [r4, #44]
	str	r1, [r4, #8]
	bl	usb_ep_autoconfig_reset(PLT)
	ldr	r3, [r7, #3776]
	mov	r0, r4
	blx	r3
	subs	r6, r0, #0
	blt	.L11474
	ldr	ip, [r9, #88]
	movw	r2, #3780
	movw	r3, #3782
	ldrh	r1, [r7, r2]
	ldr	r2, [ip, #12]
	cmp	r1, #0
	ldr	r0, [r2, #12]	@ unaligned
	ldr	r7, [r2]	@ unaligned
	ldr	r6, [r2, #4]	@ unaligned
	ldr	lr, [r2, #8]	@ unaligned
	str	r0, [r4, #29]	@ unaligned
	ldr	r0, .L11531+16
	str	r7, [r4, #17]	@ unaligned
	str	r6, [r4, #21]	@ unaligned
	str	lr, [r4, #25]	@ unaligned
	ldrh	r2, [r2, #16]	@ unaligned
	strneh	r1, [r4, #25]	@ unaligned
.LPIC2561:
	add	r0, pc, r0
	strh	r2, [r4, #33]	@ unaligned
	ldr	r2, .L11531+20
.LPIC2559:
	add	r2, pc, r2
	ldrh	r3, [r2, r3]
	ldr	r2, .L11531+24
	cmp	r3, #0
.LPIC2560:
	add	r2, pc, r2
	strneh	r3, [r4, #27]	@ unaligned
	movw	r3, #3784
	ldrh	r3, [r2, r3]
	cmp	r3, #0
	strneh	r3, [r4, #29]	@ unaligned
	ldr	r3, [r0, #3764]
	cmp	r3, #0
	beq	.L11527
.L11524:
	ldrb	r0, [r4, #31]	@ zero_extendqisi2
	cmp	r0, #0
	beq	.L11481
.L11482:
	strb	r0, [r4, #49]
.L11480:
	ldr	r3, .L11531+28
.LPIC2566:
	add	r3, pc, r3
	ldr	r3, [r3, #3768]
	cmp	r3, #0
	beq	.L11484
	ldrb	r0, [r4, #32]	@ zero_extendqisi2
	cmp	r0, #0
	beq	.L11485
.L11486:
	strb	r0, [r4, #50]
.L11487:
	ldr	r3, .L11531+32
.LPIC2569:
	add	r3, pc, r3
	ldr	r3, [r3, #3772]
	cmp	r3, #0
	beq	.L11489
	ldrb	r0, [r4, #33]	@ zero_extendqisi2
	cmp	r0, #0
	beq	.L11528
.L11490:
	strb	r0, [r4, #51]
.L11489:
	ldr	r3, .L11531+36
.LPIC2571:
	add	r3, pc, r3
	ldr	r3, [r3, #88]
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L11492
	ldrb	r3, [r4, #33]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11529
.L11492:
	ldr	r1, .L11531+40
	mov	r0, r8
.LPIC2573:
	add	r1, pc, r1
	add	r1, r1, #8
	bl	device_create_file(PLT)
	subs	r6, r0, #0
	beq	.L11530
.L11474:
	mov	r0, r5
	bl	composite_unbind(PLT)
	mov	r0, r6
.L11471:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L11472:
	mvn	r6, #11
	b	.L11474
.L11493:
	mov	r4, #16
	b	.L11470
.L11528:
	mov	r0, r4
	bl	usb_string_id(PLT)
	cmp	r0, #0
	uxtbge	r0, r0
	strgeb	r0, [r4, #33]
	bge	.L11490
	ldr	r0, [r4]
	ldr	r1, .L11531+44
	add	r0, r0, #32
.LPIC2570:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	ldrb	r0, [r4, #33]	@ zero_extendqisi2
	b	.L11490
.L11530:
	ldr	r3, .L11531+48
	ldr	r0, [r4]
	ldr	r1, .L11531+52
.LPIC2575:
	add	r3, pc, r3
	ldr	r3, [r3, #88]
	add	r0, r0, #32
.LPIC2574:
	add	r1, pc, r1
	ldr	r2, [r3]
	bl	_dev_info(PLT)
	mov	r0, r6
	b	.L11471
.L11529:
	ldr	r0, [r4]
	ldr	r1, .L11531+56
	add	r0, r0, #32
.LPIC2572:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	b	.L11492
.L11481:
	mov	r0, r4
	bl	usb_string_id(PLT)
	cmp	r0, #0
	uxtbge	r0, r0
	strgeb	r0, [r4, #31]
	bge	.L11482
	ldr	r0, [r4]
	ldr	r1, .L11531+60
	add	r0, r0, #32
.LPIC2565:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	ldrb	r0, [r4, #31]	@ zero_extendqisi2
	b	.L11482
.L11484:
	ldrb	r3, [r4, #32]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11487
	ldr	r3, .L11531+64
.LPIC2567:
	add	r3, pc, r3
	ldr	r3, [r3, #88]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L11487
.L11485:
	mov	r0, r4
	bl	usb_string_id(PLT)
	cmp	r0, #0
	uxtbge	r0, r0
	strgeb	r0, [r4, #32]
	bge	.L11486
	ldr	r0, [r4]
	ldr	r1, .L11531+68
	add	r0, r0, #32
.LPIC2568:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	ldrb	r0, [r4, #32]	@ zero_extendqisi2
	b	.L11486
.L11527:
	ldrb	r3, [r4, #31]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11480
	ldr	r3, [ip, #8]
	cmp	r3, #0
	bne	.L11481
	ldrb	r3, [r0, #3712]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11481
	ldr	r3, .L11531+72
	mov	r1, #50
	add	r0, r0, #3712
	ldr	ip, [r5, #28]
	ldr	r2, .L11531+76
.LPIC2577:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	ip, [sp, #4]
.LPIC2564:
	add	r2, pc, r2
	add	ip, r3, #134
	add	r3, r3, #4
	str	ip, [sp]
	bl	snprintf(PLT)
	b	.L11524
.L11526:
	mvn	r0, #11
	b	.L11471
.L11532:
	.align	2
.L11531:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2576+8))
	.word	composite_setup_complete-(.LPIC2554+8)
	.word	.LANCHOR2-(.LPIC2555+8)
	.word	.LANCHOR4-(.LPIC2556+8)
	.word	.LANCHOR4-(.LPIC2561+8)
	.word	.LANCHOR4-(.LPIC2559+8)
	.word	.LANCHOR4-(.LPIC2560+8)
	.word	.LANCHOR4-(.LPIC2566+8)
	.word	.LANCHOR4-(.LPIC2569+8)
	.word	.LANCHOR2-(.LPIC2571+8)
	.word	.LANCHOR0-(.LPIC2573+8)
	.word	.LC550-(.LPIC2570+8)
	.word	.LANCHOR2-(.LPIC2575+8)
	.word	.LC552-(.LPIC2574+8)
	.word	.LC551-(.LPIC2572+8)
	.word	.LC550-(.LPIC2565+8)
	.word	.LANCHOR2-(.LPIC2567+8)
	.word	.LC550-(.LPIC2568+8)
	.word	init_uts_ns(GOT_PREL)+(.-(.LPIC2577+8))
	.word	.LC549-(.LPIC2564+8)
	.fnend
	.size	composite_bind, .-composite_bind
	.align	2
	.type	mtp_function_bind_config, %function
mtp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r3, .L11539
	mov	r5, r1
	str	r6, [sp, #8]
	ldr	r0, .L11539+4
	ldr	r6, .L11539+8
	str	lr, [sp, #12]
.LPIC2578:
	add	r3, pc, r3
.LPIC2579:
	add	r0, pc, r0
	ldr	r4, [r3, #2320]
.LPIC2580:
	add	r6, pc, r6
	bl	printk(PLT)
	ldrb	r3, [r6, #2096]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11538
.L11534:
	ldr	r3, .L11539+12
	ldr	r2, .L11539+16
	ldr	lr, [r5, #24]
.LPIC2584:
	add	r3, pc, r3
	add	r1, r3, #2240
.LPIC2583:
	add	r2, pc, r2
	add	ip, r3, #2112
	add	r1, r1, #4
	str	lr, [r4, #76]
	add	r0, r3, #2224
	str	r2, [r4]
	str	ip, [r4, #4]
	strd	r0, [r4, #8]
	ldr	r2, [r5, #24]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L11536
	add	r3, r3, #2256
	add	r3, r3, #8
	str	r3, [r4, #16]
.L11536:
	ldr	ip, .L11539+20
	mov	r0, r5
	mov	r1, r4
	ldr	r2, .L11539+24
	ldr	r3, .L11539+28
	ldr	r5, .L11539+32
.LPIC2588:
	add	ip, pc, ip
.LPIC2589:
	add	r2, pc, r2
.LPIC2590:
	add	r3, pc, r3
	str	ip, [r4, #24]
.LPIC2591:
	add	r5, pc, r5
	strd	r2, [r4, #28]
	str	r5, [r4, #40]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_add_function(PLT)
.L11538:
	ldr	r0, [r5, #24]
	bl	usb_string_id(PLT)
	subs	r3, r0, #0
	blt	.L11535
	ldr	r2, .L11539+36
	uxtb	r3, r3
	strb	r3, [r6, #2096]
.LPIC2582:
	add	r2, pc, r2
	strb	r3, [r2, #1948]
	b	.L11534
.L11535:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11540:
	.align	2
.L11539:
	.word	.LANCHOR2-(.LPIC2578+8)
	.word	.LC543-(.LPIC2579+8)
	.word	.LANCHOR0-(.LPIC2580+8)
	.word	.LANCHOR0-(.LPIC2584+8)
	.word	.LC544-(.LPIC2583+8)
	.word	mtp_function_bind-(.LPIC2588+8)
	.word	mtp_function_unbind-(.LPIC2589+8)
	.word	mtp_function_set_alt-(.LPIC2590+8)
	.word	mtp_function_disable-(.LPIC2591+8)
	.word	.LANCHOR1-(.LPIC2582+8)
	.fnend
	.size	mtp_function_bind_config, .-mtp_function_bind_config
	.align	2
	.global	usb_string_ids_tab
	.type	usb_string_ids_tab, %function
usb_string_ids_tab:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r1, #4]
	ldrb	r2, [r0, #48]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11543
	cmp	r2, #253
	bgt	.L11544
	add	r3, r2, #1
	add	r1, r1, #8
.L11545:
	ldr	ip, [r1, #4]
	uxtb	r2, r3
	add	r1, r1, #8
	add	r3, r3, #1
	strb	r2, [r1, #-16]
	cmp	ip, #0
	beq	.L11543
	cmp	r3, #255
	bne	.L11545
.L11544:
	mvn	r3, #18
	mov	r0, r3
	bx	lr
.L11543:
	mov	r3, #0
	strb	r2, [r0, #48]
	mov	r0, r3
	bx	lr
	.fnend
	.size	usb_string_ids_tab, .-usb_string_ids_tab
	.align	2
	.global	usb_string_ids_n
	.type	usb_string_ids_n, %function
usb_string_ids_n:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #254
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	bhi	.L11555
	add	r1, r1, r3
	cmp	r1, #254
	bhi	.L11555
	strb	r1, [r0, #48]
	add	r0, r3, #1
	bx	lr
.L11555:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_string_ids_n, .-usb_string_ids_n
	.align	2
	.type	ffs_ep0_write, %function
ffs_ep0_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #52
	sub	sp, sp, #52
	add	r6, r4, #100
#APP
@ 193 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	mov	r5, #0
.L11557:
#APP
@ 170 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r3, [r6]
	mov	ip, #0
	teq	r3, #2
	strexeq ip, r5, [r6]

@ 0 "" 2
	cmp	ip, #0
	bne	.L11557
#APP
@ 195 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #2
	beq	.L11633
	ldr	r3, [r0, #32]
	add	r8, r4, #4
	mov	r7, r2
	mov	r10, r1
	mov	r0, r8
	tst	r3, #2048
	bne	.L11716
	bl	mutex_lock_interruptible(PLT)
	subs	r5, r0, #0
	blt	.L11659
.L11563:
	ldr	r3, [r4, #96]
	cmp	r3, #1
	bls	.L11561
	cmp	r3, #2
	bne	.L11717
	add	fp, r4, #120
	mov	r0, fp
	bl	_raw_spin_lock_irq(PLT)
#APP
@ 193 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	mov	r5, #0
.L11616:
#APP
@ 170 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r3, [r6]
	mov	r9, #0
	teq	r3, #2
	strexeq r9, r5, [r6]

@ 0 "" 2
	cmp	r9, #0
	bne	.L11616
#APP
@ 195 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #0
	beq	.L11618
	cmp	r3, #2
	bne	.L11718
	mov	r10, r9
.L11708:
	mvn	r5, #42
.L11619:
	mov	r0, fp
	bl	_raw_spin_unlock_irq(PLT)
.L11624:
	mov	r0, r10
	bl	kfree(PLT)
.L11560:
	mov	r0, r8
	bl	mutex_unlock(PLT)
.L11659:
	mov	r0, r5
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11716:
	bl	mutex_trylock(PLT)
	cmp	r0, #0
	bne	.L11563
	mvn	r5, #10
	b	.L11659
.L11561:
	cmp	r7, #15
	bls	.L11636
	mov	r0, r10
	mov	r1, r7
	bl	ffs_prepare_buffer(PLT)
	cmn	r0, #4096
	mov	r6, r0
	movhi	r5, r0
	bhi	.L11560
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L11565
	ldr	r0, .L11732
.LPIC2592:
	add	r0, pc, r0
	bl	printk(PLT)
	ldrb	r2, [r6, #2]	@ zero_extendqisi2
	ldrb	r0, [r6, #1]	@ zero_extendqisi2
	ldrb	r3, [r6]	@ zero_extendqisi2
	ldrb	r1, [r6, #3]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	orr	r2, r2, r0, asl #8
	orr	r3, r2, r3
	orr	r3, r3, r1, asl #24
	cmp	r3, #1
	bne	.L11566
	ldrb	r2, [r6, #6]	@ zero_extendqisi2
	ldrb	r0, [r6, #5]	@ zero_extendqisi2
	ldrb	r3, [r6, #4]	@ zero_extendqisi2
	ldrb	r1, [r6, #7]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	orr	r2, r2, r0, asl #8
	orr	r3, r2, r3
	orr	r3, r3, r1, asl #24
	cmp	r7, r3
	bne	.L11566
	ldrb	r9, [r6, #10]	@ zero_extendqisi2
	add	fp, r6, #16
	sub	r10, r7, #16
	ldrb	ip, [r6, #9]	@ zero_extendqisi2
	ldrb	r5, [r6, #14]	@ zero_extendqisi2
	ldrb	r3, [r6, #8]	@ zero_extendqisi2
	mov	r9, r9, asl #16
	ldrb	r1, [r6, #11]	@ zero_extendqisi2
	ldrb	r0, [r6, #13]	@ zero_extendqisi2
	orr	ip, r9, ip, asl #8
	mov	r5, r5, asl #16
	ldrb	r2, [r6, #12]	@ zero_extendqisi2
	ldrb	r9, [r6, #15]	@ zero_extendqisi2
	orr	r3, ip, r3
	orrs	r3, r3, r1, asl #24
	orr	r0, r5, r0, asl #8
	orr	r2, r0, r2
	str	r3, [sp, #8]
	orr	r9, r2, r9, asl #24
	beq	.L11637
	mov	r0, r3
	ldr	r3, .L11732+4
	str	r4, [sp]
	mov	r1, fp
	mov	r2, r10
.LPIC2593:
	add	r3, pc, r3
	bl	ffs_do_descs.constprop.142(PLT)
	subs	r5, r0, #0
	blt	.L11709
	add	fp, fp, r5
	rsb	r10, r5, r10
.L11567:
	cmp	r9, #0
	beq	.L11638
	ldr	r3, .L11732+8
	str	r4, [sp]
	mov	r0, r9
	mov	r1, fp
	mov	r2, r10
.LPIC2594:
	add	r3, pc, r3
	bl	ffs_do_descs.constprop.142(PLT)
	subs	ip, r0, #0
	blt	.L11639
	add	r2, ip, #8
	mov	r3, ip
.L11569:
	cmp	r10, r2
	bcc	.L11570
	add	r1, fp, r3
	ldrb	lr, [fp, r3]	@ zero_extendqisi2
	ldrb	r2, [r1, #2]	@ zero_extendqisi2
	ldrb	r0, [r1, #1]	@ zero_extendqisi2
	ldrb	r1, [r1, #3]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	orr	r2, r2, r0, asl #8
	str	r1, [sp, #12]
	movw	r1, #56924
	movt	r1, 85
	orr	lr, r2, lr
	ldr	r2, [sp, #12]
	orr	r0, lr, r2, asl #24
	cmp	r0, r1
	bne	.L11566
	ldr	r1, [sp, #8]
	add	r2, r3, #4
	add	r0, fp, r2
	orr	lr, r9, r1
	ldrb	r1, [fp, r2]	@ zero_extendqisi2
	ldrb	r2, [r0, #2]	@ zero_extendqisi2
	str	r1, [sp, #12]
	ldrb	r1, [r0, #1]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	ldrb	r0, [r0, #3]	@ zero_extendqisi2
	orr	r2, r2, r1, asl #8
	ldr	r1, [sp, #12]
	orr	r1, r2, r1
	orr	r2, r1, r0, asl #24
	str	r2, [sp, #12]
	orrs	r2, lr, r2
	beq	.L11566
	ldr	r2, [sp, #12]
	sub	r10, r10, #8
	rsb	r10, r3, r10
	cmp	r2, #0
	bne	.L11719
.L11572:
	cmp	r10, #0
	bne	.L11566
	ldr	r3, [sp, #8]
	add	r5, ip, r5
	str	r10, [r4, #164]
	str	r6, [r4, #148]
	str	r5, [r4, #156]
	str	r5, [r4, #152]
	str	r3, [r4, #168]
	str	r9, [r4, #172]
	str	r10, [r4, #176]
.L11631:
	mov	r3, #1
	mov	r0, r8
	mov	r5, r7
	str	r3, [r4, #96]
	bl	mutex_unlock(PLT)
	b	.L11659
.L11717:
	mov	r0, r8
	mvn	r5, #76
	bl	mutex_unlock(PLT)
	b	.L11659
.L11565:
	ldr	r0, .L11732+12
.LPIC2596:
	add	r0, pc, r0
	bl	printk(PLT)
	ldrb	r2, [r6, #2]	@ zero_extendqisi2
	ldrb	r0, [r6, #1]	@ zero_extendqisi2
	ldrb	r3, [r6]	@ zero_extendqisi2
	ldrb	r1, [r6, #3]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	orr	r2, r2, r0, asl #8
	orr	r3, r2, r3
	orr	r3, r3, r1, asl #24
	cmp	r3, #2
	bne	.L11574
	ldrb	r2, [r6, #6]	@ zero_extendqisi2
	ldrb	r0, [r6, #5]	@ zero_extendqisi2
	ldrb	r3, [r6, #4]	@ zero_extendqisi2
	ldrb	r1, [r6, #7]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	orr	r2, r2, r0, asl #8
	orr	r3, r2, r3
	orr	r3, r3, r1, asl #24
	cmp	r7, r3
	bne	.L11574
	ldrb	r3, [r6, #10]	@ zero_extendqisi2
	ldrb	r2, [r6, #9]	@ zero_extendqisi2
	ldrb	r5, [r6, #14]	@ zero_extendqisi2
	ldrb	r1, [r6, #8]	@ zero_extendqisi2
	mov	r3, r3, asl #16
	ldrb	r0, [r6, #13]	@ zero_extendqisi2
	ldrb	r9, [r6, #11]	@ zero_extendqisi2
	orr	r3, r3, r2, asl #8
	mov	r5, r5, asl #16
	ldrb	r2, [r6, #12]	@ zero_extendqisi2
	ldrb	r10, [r6, #15]	@ zero_extendqisi2
	orr	r3, r3, r1
	orr	r5, r5, r0, asl #8
	orrs	r9, r3, r9, asl #24
	orr	r3, r5, r2
	moveq	r2, #1
	movne	r2, #0
	orrs	r3, r3, r10, asl #24
	str	r3, [sp, #12]
	moveq	r3, #1
	movne	r3, #0
	cmp	r2, r3
	bne	.L11574
	ldrh	r3, [r4, #180]
	cmp	r9, r3
	str	r3, [sp, #20]
	bcc	.L11574
	cmp	r3, #0
	beq	.L11720
	ldr	r5, [sp, #12]
	mov	r1, #208
	add	r2, r5, #1
	mov	r10, r2, asl #2
	mov	r0, r10
	bl	__kmalloc(PLT)
	str	r0, [sp, #8]
	mov	r1, #208
	mov	r0, r5, asl #3
	bl	__kmalloc(PLT)
	ldr	r3, [sp, #20]
	mov	fp, r0
	str	r0, [sp, #16]
	mov	r1, #208
	add	r0, r3, #1
	mov	r0, r0, asl #3
	mul	r0, r5, r0
	bl	__kmalloc(PLT)
	ldr	r2, [sp, #8]
	mov	r3, fp
	str	r0, [sp, #24]
	cmp	r2, #0
	cmpne	fp, #0
	moveq	r3, #1
	movne	r3, #0
	cmp	r0, #0
	orreq	r3, r3, #1
	ldr	r0, [sp, #8]
	cmp	r3, #0
	bne	.L11721
	ldr	r1, [sp, #12]
	ldr	r3, [sp, #16]
.L11579:
	subs	r1, r1, #1
	str	r3, [r0], #4
	add	r3, r3, #8
	bne	.L11579
	ldr	r3, [sp, #8]
	sub	r5, r7, #16
	add	fp, r6, #16
	cmp	r5, #2
	add	r2, r3, r10
	str	r1, [r2, #-4]
	bls	.L11580
	ldr	r3, [sp, #16]
	str	r4, [sp, #28]
	ldr	r10, [sp, #24]
	str	r7, [sp, #32]
	add	r3, r3, #8
	mov	r7, r10
	mov	r4, r3
	mov	r10, r9
.L11581:
	ldrb	r0, [fp, #1]	@ zero_extendqisi2
	sub	r5, r5, #2
	ldrb	r1, [fp], #2	@ zero_extendqisi2
	str	r7, [r4, #-4]
	ldr	r9, [sp, #20]
	orr	r1, r1, r0, asl #8
	strh	r1, [r4, #-8]	@ movhi
	b	.L11583
.L11723:
	cmp	r9, #0
	beq	.L11582
	str	fp, [r7, #4]
	sub	r9, r9, #1
	add	r7, r7, #8
.L11582:
	subs	r10, r10, #1
	rsb	r5, r0, r5
	add	r0, r0, #1
	sub	r5, r5, #1
	add	fp, fp, r0
	beq	.L11722
.L11583:
	mov	r0, fp
	mov	r1, r5
	bl	strnlen(PLT)
	cmp	r5, r0
	bne	.L11723
.L11580:
	ldr	r0, [sp, #8]
	bl	kfree(PLT)
	ldr	r0, [sp, #16]
	bl	kfree(PLT)
	ldr	r0, [sp, #24]
	bl	kfree(PLT)
.L11574:
	mov	r0, r6
	mvn	r5, #21
	bl	kfree(PLT)
	b	.L11560
.L11618:
	mov	r10, r3
	mvn	r5, #2
	b	.L11619
.L11721:
	bl	kfree(PLT)
	ldr	r0, [sp, #16]
	mvn	r5, #11
	bl	kfree(PLT)
	ldr	r0, [sp, #24]
	bl	kfree(PLT)
.L11709:
	mov	r0, r6
	bl	kfree(PLT)
	mov	r0, r8
	bl	mutex_unlock(PLT)
	b	.L11659
.L11718:
	ldrsb	r3, [r4, #112]
	cmp	r3, #0
	blt	.L11620
	mov	r0, fp
	bl	_raw_spin_unlock_irq(PLT)
	ldrh	r3, [r4, #110]
	cmp	r3, #0
	mvneq	r5, #2
	beq	.L11560
	ldr	r3, [r4]
	mov	r1, #1
	mvn	r5, #50
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	str	r9, [r4, #100]
	b	.L11560
.L11570:
	ldr	r2, [sp, #8]
	orrs	r2, r9, r2
	rsbne	r10, r3, r10
	bne	.L11572
.L11566:
	mvn	r5, #21
	b	.L11709
.L11633:
	mvn	r5, #42
	b	.L11659
.L11636:
	mvn	r5, #21
	b	.L11560
.L11620:
	ldrh	r3, [r4, #118]
	mov	r0, fp
	cmp	r7, r3
	movcs	r7, r3
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r10
	mov	r1, r7
	bl	ffs_prepare_buffer(PLT)
	cmn	r0, #4096
	mov	r10, r0
	movhi	r5, r0
	bhi	.L11560
	mov	r0, fp
	bl	_raw_spin_lock_irq(PLT)
#APP
@ 193 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
.L11622:
#APP
@ 170 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r1, [r6]
	mov	r3, #0
	teq	r1, #2
	strexeq r3, r9, [r6]

@ 0 "" 2
	cmp	r3, #0
	bne	.L11622
#APP
@ 195 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r1, #2
	beq	.L11708
	ldr	r6, [r4, #32]
	mov	r0, fp
	ldrh	r3, [r4, #118]
	ldrb	r2, [r6, #26]	@ zero_extendqisi2
	cmp	r7, r3
	movcs	r3, #0
	movcc	r3, #1
	bfi	r2, r3, #1, #1
	strb	r2, [r6, #26]
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r10, #0
	str	r10, [r6]
	str	r7, [r6, #4]
	beq	.L11724
.L11625:
	ldr	r3, [r4]
	mov	r0, #0
	mov	r1, r6
	mov	r2, #32
	str	r0, [r4, #36]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	blt	.L11624
	add	r0, r4, #36
	bl	wait_for_completion_interruptible(PLT)
	cmp	r0, #0
	bne	.L11725
	ldr	r5, [r4, #52]
	str	r0, [r4, #100]
	b	.L11624
.L11722:
	ldr	r3, [sp, #12]
	strb	r10, [r7]
	add	r7, r7, #8
	str	r10, [r7, #-4]
	subs	r3, r3, #1
	str	r3, [sp, #12]
	beq	.L11726
	cmp	r5, #2
	add	r4, r4, #8
	bhi	.L11581
	b	.L11580
.L11720:
	mov	r0, r6
	bl	kfree(PLT)
.L11576:
	ldrh	r10, [r4, #184]
	movw	r1, #32976
	mov	r0, r10, asl #6
	sub	r0, r0, r10, asl #2
	bl	__kmalloc(PLT)
	subs	r3, r0, #0
	str	r3, [sp, #8]
	beq	.L11594
	cmp	r10, #0
	beq	.L11585
	ldr	r3, [sp, #8]
	mov	r5, #1
	str	r8, [sp, #32]
	ldr	r6, .L11732+16
	str	r7, [sp, #36]
	add	r2, r3, #52
	mov	r9, r3
	ldr	r3, .L11732+20
.LPIC2598:
	add	r6, pc, r6
	str	r2, [sp, #12]
	ldr	r2, .L11732+24
	add	r6, r6, #3776
	add	r6, r6, #12
.LPIC2602:
	add	r3, pc, r3
	add	r3, r3, #212
.LPIC2597:
	add	r2, pc, r2
	str	r3, [sp, #28]
	str	r2, [sp, #16]
	ldr	r2, .L11732+28
.LPIC2599:
	add	r2, pc, r2
	str	r2, [sp, #20]
	ldr	r2, .L11732+32
.LPIC2601:
	add	r2, pc, r2
	str	r2, [sp, #24]
.L11628:
	mov	r0, r9
	ldr	r1, [sp, #16]
	mov	r2, r6
	str	r4, [r9, #40]
	bl	__mutex_init(PLT)
	ldr	r1, [sp, #20]
	add	r0, r9, #24
	mov	r2, r6
	bl	__init_waitqueue_head(PLT)
	ldr	r7, [sp, #12]
	mov	r2, r5
	ldr	r1, [sp, #24]
	mov	r0, r7
	bl	sprintf(PLT)
	ldr	r8, [r4, #204]
	mov	r1, r7
	ldr	r0, [r8, #60]
	ldr	r7, [r8, #496]
	bl	d_alloc_name(PLT)
	subs	fp, r0, #0
	beq	.L11706
	mov	r0, r8
	bl	new_inode(PLT)
	subs	r8, r0, #0
	beq	.L11587
	add	r0, sp, #40
	add	r5, r5, #1
	bl	current_kernel_time(PLT)
	bl	get_next_ino(PLT)
	str	r0, [r8, #40]
	ldrh	r0, [r7, #208]
	ldr	r1, [sp, #28]
	ldrd	r2, [sp, #40]
	strh	r0, [r8]	@ movhi
	ldr	r0, [r7, #212]
	cmp	r1, #0
	str	r0, [r8, #4]
	ldr	r0, [r7, #216]
	strd	r2, [r8, #52]
	strd	r2, [r8, #60]
	strd	r2, [r8, #68]
	movne	r3, r1
	mov	r1, r8
	str	r9, [r8, #348]
	strne	r3, [r8, #208]
	str	r0, [r8, #8]
	mov	r0, fp
	bl	d_instantiate(PLT)
	mov	r0, fp
	bl	d_rehash(PLT)
	cmn	r9, #48
	add	r9, r9, #60
	strne	fp, [r9, #-12]
	cmp	r10, r5
	bcs	.L11628
	ldr	r8, [sp, #32]
	ldr	r7, [sp, #36]
.L11585:
	ldr	r2, [sp, #8]
	mov	r3, #2
	mov	r0, r8
	str	r3, [r4, #96]
	str	r2, [r4, #220]
	bl	mutex_unlock(PLT)
	ldr	r3, .L11732+36
.LPIC2604:
	add	r3, pc, r3
	ldr	r6, [r3, #1912]
	ldr	r8, [r3, #1896]
	cmp	r6, #0
	beq	.L11641
	add	r9, r6, #28
	mov	r0, r9
	bl	mutex_lock(PLT)
	ldr	r3, [r4, #96]
	ldr	fp, [r6, #8]
	cmp	r3, #2
	beq	.L11727
.L11596:
	ldr	r0, .L11732+40
	movw	r1, #1449
	mvn	r5, #76
.LPIC2607:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
.L11598:
	mov	r0, r9
	bl	mutex_unlock(PLT)
.L11595:
	mov	r3, #3
	str	r3, [r4, #96]
	b	.L11659
.L11629:
	ldr	r0, [sp, #8]
	bl	kfree(PLT)
.L11594:
	mov	r3, #3
	mvn	r5, #11
	str	r3, [r4, #96]
	b	.L11560
.L11706:
	ldr	r8, [sp, #32]
.L11586:
	subs	r5, r5, #1
	beq	.L11629
	ldr	r7, [sp, #8]
	ldr	r3, [r7]
	cmp	r3, #1
	bne	.L11590
	ldr	r2, [r7, #28]
	add	r3, r7, #28
	cmp	r2, r3
	bne	.L11590
	mov	r6, #0
	b	.L11591
.L11728:
	ldr	r2, [r7, #28]
	add	r3, r7, #28
	cmp	r2, r3
	bne	.L11590
.L11591:
	ldr	r0, [r7, #48]
	cmp	r0, #0
	beq	.L11592
	bl	d_delete(PLT)
	ldr	r0, [r7, #48]
	bl	dput(PLT)
	str	r6, [r7, #48]
.L11592:
	subs	r5, r5, #1
	add	r7, r7, #60
	beq	.L11629
	ldr	r3, [r7]
	cmp	r3, #1
	beq	.L11728
.L11590:
#APP
@ 1527 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1528, 0
.popsection
@ 0 "" 2
.L11587:
	mov	r0, fp
	ldr	r8, [sp, #32]
	bl	dput(PLT)
	b	.L11586
.L11637:
	mov	r5, r3
	b	.L11567
.L11638:
	mov	r3, r9
	mov	r2, #8
	mov	ip, r9
	b	.L11569
.L11639:
	mov	r5, ip
	b	.L11709
.L11727:
	add	r10, r4, #132
	mov	r0, #1
	mov	r1, r10
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	bne	.L11596
	mov	r0, fp
	ldrh	r1, [r4, #180]
	bl	usb_string_ids_n(PLT)
	subs	r5, r0, #0
	blt	.L11598
	ldr	r3, [fp]
	mov	r1, #208
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #32]
	beq	.L11642
	ldr	r3, .L11732+44
.LPIC2606:
	add	r3, pc, r3
	str	r3, [r0, #28]
	ldr	r3, [r4, #32]
	str	r4, [r3, #32]
	ldr	r0, [r4, #192]
	cmp	r0, #0
	beq	.L11602
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L11602
.L11604:
	ldr	r3, [r3, #4]
	ldr	r2, [r3, #4]
	cmp	r2, #0
	addne	r3, r3, #8
	movne	r2, r5
	beq	.L11606
.L11605:
	strb	r2, [r3, #-8]
	add	r3, r3, #8
	ldr	r1, [r3, #-4]
	add	r2, r2, #1
	cmp	r1, #0
	bne	.L11605
.L11606:
	ldr	r3, [r0, #4]!
	cmp	r3, #0
	bne	.L11604
.L11602:
	ldr	r2, [fp]
	mov	r3, r4
	str	r2, [r3], #88
#APP
@ 45 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldrb	r3, [r8, #1]	@ zero_extendqisi2
	mov	r2, #1
	stmib	r8, {r4, r6}
	strb	r2, [r8]
	cmp	r3, #0
	bne	.L11729
.L11607:
	mov	r0, r9
	mov	r5, r7
	bl	mutex_unlock(PLT)
	mov	r1, r10
	mov	r0, #0
	bl	_set_bit(PLT)
	b	.L11659
.L11729:
	ldr	r3, [r6, #24]
	ldr	r5, [r6, #8]
	cmp	r3, #0
	beq	.L11730
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r6, #24]
	bne	.L11607
	mov	fp, r6
	ldr	r4, [fp, #156]!
	cmp	fp, r4
	sub	r4, r4, #120
	beq	.L11614
	ldr	r8, .L11732+48
.LPIC2609:
	add	r8, pc, r8
.L11613:
	mov	r0, r5
	mov	r1, r4
	mov	r2, r8
	bl	usb_add_config(PLT)
	cmp	r0, #0
	blt	.L11731
	ldr	r4, [r4, #120]
	cmp	fp, r4
	sub	r4, r4, #120
	bne	.L11613
.L11614:
	ldr	r0, [r5]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L11607
	mov	r1, #1
	blx	r3
	b	.L11607
.L11724:
	movw	r3, #47806
	movt	r3, 57005
	str	r3, [r6]
	b	.L11625
.L11725:
	ldr	r3, [r4]
	mov	r1, r6
	mvn	r5, #3
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11624
.L11719:
	add	r1, r3, #8
	ldr	r3, .L11732+52
	mov	r0, r2
	str	r4, [sp]
	add	r1, fp, r1
	mov	r2, r10
	str	ip, [sp, #16]
.LPIC2595:
	add	r3, pc, r3
	bl	ffs_do_descs.constprop.142(PLT)
	cmp	r0, #0
	blt	.L11640
	cmp	r10, r0
	ldr	ip, [sp, #16]
	bne	.L11566
	ldr	r3, [sp, #8]
	add	r5, ip, r5
	str	r10, [r4, #164]
	add	fp, r5, #24
	add	r10, r10, r5
	str	r6, [r4, #148]
	str	r5, [r4, #156]
	str	r10, [r4, #152]
	str	r3, [r4, #168]
	ldr	r3, [sp, #12]
	str	fp, [r4, #160]
	str	r9, [r4, #172]
	str	r3, [r4, #176]
	b	.L11631
.L11726:
	cmp	r5, #0
	ldr	r4, [sp, #28]
	ldr	r7, [sp, #32]
	bne	.L11580
	ldr	r3, [sp, #8]
	str	r6, [r4, #188]
	str	r3, [r4, #192]
	ldr	r3, [sp, #16]
	str	r3, [r4, #196]
	ldr	r3, [sp, #24]
	str	r3, [r4, #200]
	b	.L11576
.L11640:
.L11568:
	mov	r5, r0
	b	.L11709
.L11730:
	ldr	r0, .L11732+56
	movw	r1, #411
.LPIC2608:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L11607
.L11731:
	ldr	r1, .L11732+60
	mov	r3, r0
	ldr	r0, .L11732+64
.LPIC2611:
	add	r1, pc, r1
	add	r1, r1, #3232
.LPIC2610:
	add	r0, pc, r0
	add	r1, r1, #8
	mov	r2, r1
	bl	printk(PLT)
	ldr	r3, [r6, #24]
	add	r3, r3, #1
	str	r3, [r6, #24]
	b	.L11607
.L11642:
	mvn	r5, #11
	b	.L11598
.L11641:
	mvn	r5, #18
	b	.L11595
.L11733:
	.align	2
.L11732:
	.word	.LC553-(.LPIC2592+8)
	.word	__ffs_data_do_entity-(.LPIC2593+8)
	.word	__ffs_data_do_entity-(.LPIC2594+8)
	.word	.LC554-(.LPIC2596+8)
	.word	.LANCHOR4-(.LPIC2598+8)
	.word	.LANCHOR6-(.LPIC2602+8)
	.word	.LC555-(.LPIC2597+8)
	.word	.LC556-(.LPIC2599+8)
	.word	.LC557-(.LPIC2601+8)
	.word	.LANCHOR0-(.LPIC2604+8)
	.word	.LC182-(.LPIC2607+8)
	.word	ffs_ep0_complete-(.LPIC2606+8)
	.word	android_bind_config-(.LPIC2609+8)
	.word	__ffs_data_do_entity-(.LPIC2595+8)
	.word	.LC519-(.LPIC2608+8)
	.word	.LANCHOR3-(.LPIC2611+8)
	.word	.LC520-(.LPIC2610+8)
	.fnend
	.size	ffs_ep0_write, .-ffs_ep0_write
	.align	2
	.global	usb_composite_probe
	.type	usb_composite_probe, %function
usb_composite_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L11739
	ldr	r3, [r0, #12]
	cmp	r3, #0
	cmpne	r1, #0
	beq	.L11739
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L11743
.L11736:
	ldr	r3, [r0, #4]
	mov	r2, r1
	ldr	ip, .L11744
	ldr	r5, .L11744+4
	ldr	lr, .L11744+8
	cmp	r3, #0
	mov	r3, r0
	ldr	r1, .L11744+12
.LPIC2615:
	add	ip, pc, ip
	streq	r4, [r0, #4]
.LPIC2618:
	add	r5, pc, r5
	str	r4, [ip, #508]
	ldr	r4, [r0]
.LPIC2619:
	add	lr, pc, lr
	str	r3, [r5, #88]
.LPIC2621:
	add	r1, pc, r1
	add	r0, ip, #508
	str	r2, [lr, #3776]
	str	r4, [ip, #536]
	ldr	r3, [r3, #20]
	str	r3, [ip, #512]
	bl	usb_gadget_probe_driver(PLT)
	cmp	r0, #0
	movne	r3, #0
	strne	r3, [r5, #88]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11743:
	ldr	r3, .L11744+16
.LPIC2614:
	add	r3, pc, r3
	mov	r4, r3
	str	r3, [r0]
	b	.L11736
.L11739:
	mvn	r0, #21
	bx	lr
.L11745:
	.align	2
.L11744:
	.word	.LANCHOR0-(.LPIC2615+8)
	.word	.LANCHOR2-(.LPIC2618+8)
	.word	.LANCHOR4-(.LPIC2619+8)
	.word	composite_bind-(.LPIC2621+8)
	.word	.LC558-(.LPIC2614+8)
	.fnend
	.size	usb_composite_probe, .-usb_composite_probe
	.section	.devinit.text,"ax",%progbits
	.align	2
	.type	android_probe, %function
android_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.pad #44
	sub	sp, sp, #44
	ldr	r7, .L11790
	mov	r5, r0
	ldr	r3, [r0, #300]
.LPIC2676:
	ldr	r7, [pc, r7]		@ tls_load_dot_plus_eight
	cmp	r3, #0
	ldr	r3, [r7]
	str	r7, [sp, #12]
	str	r3, [sp, #36]
	beq	.L11747
	add	r0, r0, #8
	mov	r1, #52
	mov	r2, #208
	bl	devm_kzalloc(PLT)
	subs	r6, r0, #0
	bne	.L11748
	ldr	r1, .L11790+4
	ldr	r0, .L11790+8
.LPIC2625:
	add	r1, pc, r1
	add	r1, r1, #3456
.LPIC2624:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #11
	b	.L11749
.L11748:
	ldr	r1, .L11790+12
	mov	r3, #1
	add	r2, r6, #4
	ldr	r0, [r5, #300]
	mov	r4, #0
.LPIC2626:
	add	r1, pc, r1
	bl	of_property_read_u32_array(PLT)
	ldr	r1, .L11790+16
	mov	r2, r4
	ldr	r0, [r5, #300]
.LPIC2627:
	add	r1, pc, r1
	bl	of_find_property(PLT)
	ldr	r1, .L11790+20
	subs	r0, r0, r4
	mov	r2, r4
	movne	r0, #1
	strb	r0, [r6, #9]
	ldr	r0, [r5, #300]
.LPIC2628:
	add	r1, pc, r1
	bl	of_find_property(PLT)
	ldr	r1, .L11790+24
	subs	r0, r0, r4
	mov	r2, r4
	movne	r0, #1
	mov	r3, r4
	strb	r0, [r6, #10]
	ldr	r0, [r5, #300]
.LPIC2629:
	add	r1, pc, r1
	str	r4, [sp]
	bl	of_property_read_string_helper(PLT)
	cmp	r0, #3
	mov	r8, r0
	bgt	.L11750
	ldr	fp, .L11790+28
	add	r7, r6, #11
	mov	r10, r4
	add	r9, sp, #20
.LPIC2632:
	add	fp, pc, fp
	b	.L11751
.L11750:
	ldr	r1, .L11790+32
	ldr	r0, .L11790+36
.LPIC2631:
	add	r1, pc, r1
	add	r1, r1, #3456
.LPIC2630:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #21
	b	.L11749
.L11754:
	str	r4, [sp]
	mov	r1, fp
	ldr	r0, [r5, #300]
	mov	r2, r9
	mov	r3, #1
	str	r10, [sp, #20]
	bl	of_property_read_string_helper(PLT)
	ldr	r1, [sp, #20]
	cmp	r1, #0
	beq	.L11753
	mov	r0, r7
	mov	r2, #10
	bl	strlcpy(PLT)
.L11753:
	add	r4, r4, #1
	add	r7, r7, #10
.L11751:
	cmp	r4, r8
	blt	.L11754
	ldr	r1, .L11790+40
	str	r8, [r6, #44]
	add	r2, r6, #48
	ldr	r0, [r5, #300]
	mov	r3, #1
.LPIC2633:
	add	r1, pc, r1
	bl	of_property_read_u32_array(PLT)
	b	.L11755
.L11747:
	ldr	r6, [r0, #92]
.L11755:
	ldr	r4, .L11790+44
.LPIC2634:
	add	r4, pc, r4
	ldr	r0, [r4, #3708]
	cmp	r0, #0
	bne	.L11756
	ldr	r1, .L11790+48
	add	r2, r4, #3776
	add	r2, r2, #12
.LPIC2635:
	add	r1, pc, r1
	bl	__class_create(PLT)
	cmn	r0, #4096
	str	r0, [r4, #3708]
	bhi	.L11749
.L11756:
	ldr	r3, .L11790+52
.LPIC2675:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L11772
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	bne	.L11757
	ldr	r1, .L11790+56
	mvn	r5, #11
	ldr	r0, .L11790+60
.LPIC2639:
	add	r1, pc, r1
	add	r1, r1, #3456
.LPIC2638:
	add	r0, pc, r0
	add	r1, r1, #8
	mov	r2, r1
	bl	printk(PLT)
	b	.L11758
.L11772:
	mov	r4, #16
.L11757:
	ldr	r3, .L11790+64
	mov	r1, #1
	mov	r2, #0
	ldr	r8, .L11790+68
	add	ip, r4, #156
	add	r9, r4, #144
	ldr	lr, .L11790+72
	mov	r10, #2560
	add	r0, r4, #28
	ldr	fp, [r5]
	str	r1, [r4, #24]
.LPIC2641:
	add	r3, pc, r3
	ldr	r1, .L11790+76
	str	r2, [r4, #164]
	add	r3, r3, #2288
.LPIC2644:
	add	r8, pc, r8
	str	ip, [r4, #156]
.LPIC2642:
	add	lr, pc, lr
	add	r3, r3, #8
	str	ip, [r4, #160]
	add	r2, r8, #3776
	str	fp, [r4]
.LPIC2643:
	add	r1, pc, r1
	add	r2, r2, #12
	str	r3, [r4, #4]
	str	lr, [r4, #152]
	str	r10, [r4, #140]
	str	r9, [r4, #144]
	str	r9, [r4, #148]
	bl	__mutex_init(PLT)
	ldr	r3, .L11790+80
	add	r2, r4, #168
	cmp	r6, #0
	ldr	r1, [r8, #-480]
	str	r6, [r4, #52]
	moveq	ip, r6
.LPIC2645:
	add	r3, pc, r3
	ldr	r0, [r3, #4]
	add	r1, r1, #1
	str	r3, [r4, #168]
	str	r2, [r3, #4]
	ldr	r3, .L11790+84
	str	r1, [r8, #-480]
	mov	r1, #512
	str	r0, [r4, #172]
	str	r2, [r0]
	ldrneb	ip, [r6, #8]	@ zero_extendqisi2
	mov	r0, r5
.LPIC2650:
	add	r3, pc, r3
	mov	r2, #0
	strb	ip, [r3, #592]
	bl	platform_get_resource(PLT)
	cmp	r0, #0
	beq	.L11760
	ldr	r2, [r0, #4]
	add	r5, r5, #8
	ldr	r1, [r0]
	mov	r0, r5
	add	r2, r2, #1
	rsb	r2, r1, r2
	bl	devm_ioremap(PLT)
	ldr	r3, .L11790+88
	cmp	r0, #0
.LPIC2674:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r0, [r3]
	bne	.L11760
	ldr	r1, .L11790+92
	mov	r0, r5
	mvn	r5, #11
.LPIC2651:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L11761
.L11760:
	ldr	r8, .L11790+96
	add	r5, sp, #25
	mov	r1, #11
	ldr	r2, .L11790+100
	mov	r0, r5
.LPIC2653:
	add	r8, pc, r8
.LPIC2652:
	add	r2, pc, r2
	ldrb	r3, [r8, #592]	@ zero_extendqisi2
	bl	snprintf(PLT)
	ldr	r0, .L11790+104
	mov	r1, #0
	str	r5, [sp]
	mov	r2, r1
	mov	r3, r1
.LPIC2654:
	add	r0, pc, r0
	ldr	r0, [r0, #3708]
	bl	device_create(PLT)
	cmn	r0, #4096
	mov	r5, r0
	str	r0, [r4, #12]
	bhi	.L11763
	add	r8, r8, #2400
	mov	r1, r4
	add	r8, r8, #4
	bl	dev_set_drvdata(PLT)
.L11764:
	ldr	r1, [r8, #4]!
	cmp	r1, #0
	beq	.L11766
	ldr	r0, [r4, #12]
	bl	device_create_file(PLT)
	subs	r5, r0, #0
	beq	.L11764
	ldr	r3, .L11790+108
	ldr	r2, [r4, #12]
.LPIC2656:
	add	r3, pc, r3
	ldr	r0, [r3, #3708]
	ldr	r1, [r2, #296]
	bl	device_destroy(PLT)
.L11763:
	cmp	r5, #0
	beq	.L11766
	ldr	r1, .L11790+112
	ldr	r0, .L11790+116
.LPIC2658:
	add	r1, pc, r1
	add	r1, r1, #3456
.LPIC2657:
	add	r0, pc, r0
	add	r1, r1, #8
	mov	r2, r1
	bl	printk(PLT)
	b	.L11761
.L11766:
	ldr	r8, .L11790+120
	ldr	r1, .L11790+124
.LPIC2660:
	add	r8, pc, r8
	add	r0, r8, #2464
.LPIC2661:
	add	r1, pc, r1
	add	r0, r0, #4
	bl	usb_composite_probe(PLT)
	subs	r5, r0, #0
	beq	.L11767
	ldr	r1, .L11790+128
	add	r8, r8, #2400
	ldr	r0, .L11790+132
	add	r8, r8, #4
.LPIC2663:
	add	r1, pc, r1
	add	r1, r1, #3456
.LPIC2662:
	add	r0, pc, r0
	add	r1, r1, #8
	mov	r2, r1
	bl	printk(PLT)
.L11768:
	ldr	r1, [r8, #4]!
	cmp	r1, #0
	beq	.L11789
	ldr	r0, [r4, #12]
	bl	device_remove_file(PLT)
	b	.L11768
.L11789:
	ldr	r3, .L11790+136
	ldr	r2, [r4, #12]
.LPIC2666:
	add	r3, pc, r3
	ldr	r0, [r3, #3708]
	ldr	r1, [r2, #296]
	bl	device_destroy(PLT)
	b	.L11761
.L11767:
	cmp	r6, #0
	beq	.L11770
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L11770
	add	r0, r4, #68
	mov	r1, #1
	mvn	r2, #0
	bl	pm_qos_add_request(PLT)
.L11770:
	ldr	r1, .L11790+140
	add	r0, r4, #60
	mov	r2, #5
.LPIC2667:
	add	r1, pc, r1
	bl	strlcpy(PLT)
	mov	r0, #0
	b	.L11749
.L11761:
	ldr	r2, .L11790+144
	mov	r6, #256
	mov	lr, #512
	ldr	r1, [r4, #172]
	mov	r0, r4
	ldr	ip, [r4, #168]
.LPIC2668:
	add	r2, pc, r2
	ldr	r3, [r2, #-480]
	str	r1, [ip, #4]
	str	ip, [r1]
	str	r6, [r4, #168]
	sub	r3, r3, #1
	str	lr, [r4, #172]
	str	r3, [r2, #-480]
	bl	kfree(PLT)
.L11758:
	ldr	r3, .L11790+148
.LPIC2670:
	add	r3, pc, r3
	ldr	r2, [r3]
	cmp	r2, r3
	movne	r0, r5
	bne	.L11749
	ldr	r4, .L11790+152
.LPIC2672:
	add	r4, pc, r4
	ldr	r0, [r4, #3708]
	bl	class_destroy(PLT)
	mov	r3, #0
	mov	r0, r5
	str	r3, [r4, #3708]
.L11749:
	ldr	r3, [sp, #12]
	ldr	r2, [sp, #36]
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L11771
	bl	__stack_chk_fail(PLT)
.L11771:
	add	sp, sp, #44
	@ sp needed
	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L11791:
	.align	2
.L11790:
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC2676+8))
	.word	.LANCHOR3-(.LPIC2625+8)
	.word	.LC559-(.LPIC2624+8)
	.word	.LC560-(.LPIC2626+8)
	.word	.LC561-(.LPIC2627+8)
	.word	.LC562-(.LPIC2628+8)
	.word	.LC563-(.LPIC2629+8)
	.word	.LC563-(.LPIC2632+8)
	.word	.LANCHOR3-(.LPIC2631+8)
	.word	.LC564-(.LPIC2630+8)
	.word	.LC565-(.LPIC2633+8)
	.word	.LANCHOR4-(.LPIC2634+8)
	.word	.LC566-(.LPIC2635+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2675+8))
	.word	.LANCHOR3-(.LPIC2639+8)
	.word	.LC567-(.LPIC2638+8)
	.word	.LANCHOR0-(.LPIC2641+8)
	.word	.LANCHOR4-(.LPIC2644+8)
	.word	android_work-(.LPIC2642+8)
	.word	.LC568-(.LPIC2643+8)
	.word	.LANCHOR2-(.LPIC2645+8)
	.word	.LANCHOR0-(.LPIC2650+8)
	.word	diag_dload(GOT_PREL)+(.-(.LPIC2674+8))
	.word	.LC569-(.LPIC2651+8)
	.word	.LANCHOR0-(.LPIC2653+8)
	.word	.LC570-(.LPIC2652+8)
	.word	.LANCHOR4-(.LPIC2654+8)
	.word	.LANCHOR4-(.LPIC2656+8)
	.word	.LANCHOR3-(.LPIC2658+8)
	.word	.LC571-(.LPIC2657+8)
	.word	.LANCHOR0-(.LPIC2660+8)
	.word	android_bind-(.LPIC2661+8)
	.word	.LANCHOR3-(.LPIC2663+8)
	.word	.LC572-(.LPIC2662+8)
	.word	.LANCHOR4-(.LPIC2666+8)
	.word	.LC573-(.LPIC2667+8)
	.word	.LANCHOR4-(.LPIC2668+8)
	.word	.LANCHOR2-(.LPIC2670+8)
	.word	.LANCHOR4-(.LPIC2672+8)
	.fnend
	.size	android_probe, .-android_probe
	.text
	.align	2
	.global	usb_composite_unregister
	.type	usb_composite_unregister, %function
usb_composite_unregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L11795
.LPIC2677:
	add	r3, pc, r3
	ldr	r3, [r3, #88]
	cmp	r3, r0
	beq	.L11794
	bx	lr
.L11794:
	ldr	r0, .L11795+4
.LPIC2678:
	add	r0, pc, r0
	add	r0, r0, #508
	b	usb_gadget_unregister_driver(PLT)
.L11796:
	.align	2
.L11795:
	.word	.LANCHOR2-(.LPIC2677+8)
	.word	.LANCHOR0-(.LPIC2678+8)
	.fnend
	.size	usb_composite_unregister, .-usb_composite_unregister
	.align	2
	.type	android_remove, %function
android_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L11828
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #92]
.LPIC2679:
	add	r2, pc, r2
	ldr	r0, [r2]
	cmp	r6, #0
	ldrneb	r1, [r6, #8]	@ zero_extendqisi2
	moveq	r1, r6
	cmp	r2, r0
	sub	r4, r0, #168
	beq	.L11799
	ldr	r3, [r0, #-116]
	cmp	r3, #0
	bne	.L11824
	b	.L11799
.L11825:
	ldr	r3, [r4, #168]
	cmp	r2, r3
	sub	r4, r3, #168
	beq	.L11799
	ldr	r3, [r3, #-116]
	cmp	r3, #0
	beq	.L11799
.L11824:
	ldrb	r3, [r3, #8]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L11825
.L11799:
	cmp	r4, #0
	beq	.L11803
	ldr	r5, .L11828+4
.LPIC2682:
	add	r5, pc, r5
	ldr	r1, [r5, #2408]
	cmp	r1, #0
	addne	r5, r5, #2400
	addne	r5, r5, #8
	beq	.L11808
.L11807:
	ldr	r0, [r4, #12]
	bl	device_remove_file(PLT)
	ldr	r1, [r5, #4]!
	cmp	r1, #0
	bne	.L11807
.L11808:
	ldr	r3, .L11828+8
	ldr	r2, [r4, #12]
.LPIC2683:
	add	r3, pc, r3
	ldr	r0, [r3, #3708]
	ldr	r1, [r2, #296]
	bl	device_destroy(PLT)
	cmp	r6, #0
	beq	.L11806
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L11826
.L11806:
	ldr	r2, .L11828+12
	mov	lr, #512
	mov	r5, #256
	ldr	r1, [r4, #172]
	mov	r0, r4
	ldr	ip, [r4, #168]
.LPIC2685:
	add	r2, pc, r2
	ldr	r3, [r2, #-480]
	str	r1, [ip, #4]
	str	ip, [r1]
	str	r5, [r4, #168]
	sub	r3, r3, #1
	str	lr, [r4, #172]
	str	r3, [r2, #-480]
	bl	kfree(PLT)
	ldr	r3, .L11828+16
.LPIC2687:
	ldr	r0, [pc, r3]		@ tls_load_dot_plus_eight
.L11803:
	ldr	r3, .L11828+20
.LPIC2688:
	add	r3, pc, r3
	cmp	r0, r3
	beq	.L11827
.L11809:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11826:
	add	r0, r4, #68
	bl	pm_qos_remove_request(PLT)
	b	.L11806
.L11827:
	ldr	r4, .L11828+24
.LPIC2689:
	add	r4, pc, r4
	ldr	r0, [r4, #3708]
	bl	class_destroy(PLT)
	ldr	r0, .L11828+28
	mov	r3, #0
	str	r3, [r4, #3708]
.LPIC2691:
	add	r0, pc, r0
	add	r0, r0, #2464
	add	r0, r0, #4
	bl	usb_composite_unregister(PLT)
	b	.L11809
.L11829:
	.align	2
.L11828:
	.word	.LANCHOR2-(.LPIC2679+8)
	.word	.LANCHOR0-(.LPIC2682+8)
	.word	.LANCHOR4-(.LPIC2683+8)
	.word	.LANCHOR4-(.LPIC2685+8)
	.word	.LANCHOR2-(.LPIC2687+8)
	.word	.LANCHOR2-(.LPIC2688+8)
	.word	.LANCHOR4-(.LPIC2689+8)
	.word	.LANCHOR0-(.LPIC2691+8)
	.fnend
	.size	android_remove, .-android_remove
	.align	2
	.global	usb_composite_setup_continue
	.type	usb_composite_setup_continue, %function
usb_composite_setup_continue:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #60
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r8, [r0, #4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #56]
	mov	r7, r0
	cmp	r3, #0
	bne	.L11831
	cmp	r4, #0
	bne	.L11836
.L11833:
	mov	r0, r6
	mov	r1, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L11831:
	sub	r5, r3, #1
	cmp	r5, #0
	str	r5, [r4, #56]
	bne	.L11833
	str	r5, [r8, #4]
	ldr	r3, [r4]
	mov	r1, r8
	mov	r2, #32
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r8, #44]
	b	.L11833
.L11836:
	ldr	r3, .L11837
	movw	r1, #1736
	ldr	r0, .L11837+4
	ldr	r2, .L11837+8
.LPIC2694:
	add	r3, pc, r3
	add	r3, r3, #3472
.LPIC2692:
	add	r0, pc, r0
.LPIC2693:
	add	r2, pc, r2
	add	r3, r3, #8
	bl	warn_slowpath_fmt(PLT)
	b	.L11833
.L11838:
	.align	2
.L11837:
	.word	.LANCHOR3-(.LPIC2694+8)
	.word	.LC81-(.LPIC2692+8)
	.word	.LC574-(.LPIC2693+8)
	.fnend
	.size	usb_composite_setup_continue, .-usb_composite_setup_continue
	.align	2
	.type	handle_exception, %function
handle_exception:
	.fnstart
	@ args = 0, pretend = 0, frame = 128
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r8, [sp, #16]
	mov	r9, r0
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	add	r10, r0, #44
	str	lr, [sp, #28]
	.pad #128
	sub	sp, sp, #128
	mov	r3, sp
	mov	r8, sp
	bic	r7, r3, #8128
	bic	r7, r7, #63
	b	.L11841
.L11932:
	cmp	r5, #10
	bne	.L11931
.L11841:
	ldr	r4, [r7, #12]
	ldr	r0, [r4, #720]
	add	r0, r0, #1280
	add	r0, r0, #4
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	add	r1, r4, #724
	mov	r2, r8
	mov	r0, r4
	bl	dequeue_signal(PLT)
	mov	r5, r0
	ldr	r0, [r4, #720]
	mov	r1, r6
	add	r0, r0, #1280
	add	r0, r0, #4
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r5, #0
	bne	.L11932
	ldr	r3, [r9, #8]
	cmp	r3, #0
	beq	.L11847
	ldr	r4, [r9, #68]
	ldr	r2, [r4, #20]
	cmp	r2, #0
	bne	.L11933
.L11848:
	ldr	r3, [r4, #28]
	cmp	r3, #0
	bne	.L11934
.L11849:
	ldr	r4, [r9, #68]
	ldr	r3, [r4, #52]
	cmp	r3, #0
	bne	.L11935
.L11850:
	ldr	r3, [r4, #60]
	cmp	r3, #0
	bne	.L11936
.L11851:
	ldr	r4, [r9, #68]
	ldr	r3, [r4, #84]
	cmp	r3, #0
	bne	.L11937
.L11852:
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L11938
.L11853:
	ldr	r4, [r9, #68]
	ldr	r3, [r4, #116]
	cmp	r3, #0
	bne	.L11939
.L11854:
	ldr	r3, [r4, #124]
	cmp	r3, #0
	bne	.L11940
.L11858:
	mov	r0, r10
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r9, #68]
	mov	r0, r10
	ldr	ip, [r3, #28]
	ldr	r1, [r3, #20]
	ldr	r2, [r3, #52]
	ldr	r6, [r3, #60]
	ldr	lr, [r3, #84]
	ldr	r5, [r3, #92]
	add	r1, r1, ip
	ldr	r4, [r3, #124]
	ldr	ip, [r3, #116]
	add	r2, r2, r6
	add	r2, r1, r2
	add	r3, lr, r5
	add	r3, r2, r3
	add	r4, ip, r4
	add	r4, r4, r3
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r4, #0
	mov	r0, r9
	beq	.L11856
	bl	sleep_thread(PLT)
	cmp	r0, #0
	beq	.L11858
.L11839:
	add	sp, sp, #128
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11931:
	mov	r0, r10
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r9, #112]
	mov	ip, #6
	mov	r4, r0
	mov	r1, #2
	mov	r0, #10
	cmp	r3, ip
	bgt	.L11843
	ldr	r2, [r9, #168]
	str	ip, [r9, #112]
	ldr	r3, [r9, #56]
	cmp	r2, #0
	str	r3, [r9, #116]
	beq	.L11843
	bl	send_sig_info(PLT)
.L11843:
	mov	r1, r4
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L11841
.L11940:
	ldr	r3, [r9, #8]
	ldr	r1, [r4, #120]
	ldr	r0, [r3, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11858
.L11939:
	ldr	r3, [r9, #8]
	ldr	r1, [r4, #112]
	ldr	r0, [r3, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11854
.L11938:
	ldr	r3, [r9, #8]
	ldr	r1, [r4, #88]
	ldr	r0, [r3, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11853
.L11937:
	ldr	r3, [r9, #8]
	ldr	r1, [r4, #80]
	ldr	r0, [r3, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11852
.L11936:
	ldr	r3, [r9, #8]
	ldr	r1, [r4, #56]
	ldr	r0, [r3, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11851
.L11935:
	ldr	r3, [r9, #8]
	ldr	r1, [r4, #48]
	ldr	r0, [r3, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11850
.L11934:
	ldr	r3, [r9, #8]
	ldr	r1, [r4, #24]
	ldr	r0, [r3, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11849
.L11933:
	ldr	r0, [r3, #92]
	ldr	r1, [r4, #16]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11848
.L11856:
	ldr	r3, [r9, #8]
	ldrb	r2, [r3, #86]	@ zero_extendqisi2
	tst	r2, #1
	beq	.L11859
	ldr	r0, [r3, #92]
	ldr	r1, [r0, #8]
	ldr	r1, [r1, #36]
	cmp	r1, #0
	beq	.L11859
	blx	r1
	ldr	r3, [r9, #8]
	ldrb	r2, [r3, #86]	@ zero_extendqisi2
.L11859:
	tst	r2, #2
	beq	.L11847
	ldr	r0, [r3, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L11847
	blx	r3
.L11847:
	mov	r0, r10
	mov	r5, #0
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r9, #68]
	str	r5, [r3, #4]
	ldr	r3, [r9, #68]
	str	r5, [r3, #36]
	ldr	r3, [r9, #68]
	str	r5, [r3, #68]
	ldr	r3, [r9, #68]
	str	r5, [r3, #100]
	ldr	r6, [r9, #112]
	ldr	r3, [r9, #68]
	ldr	r4, [r9, #116]
	cmp	r6, #1
	str	r3, [r9, #60]
	str	r3, [r9, #64]
	beq	.L11861
	ldr	r3, [r9, #92]
	cmp	r3, r5
	movne	r1, r5
	movne	ip, r1
	movne	r0, r1
	beq	.L11870
.L11862:
	ldr	r3, [r9, #100]
	add	ip, ip, #1
	add	r3, r3, r1
	add	r1, r1, #400
	ldrb	r2, [r3, #24]	@ zero_extendqisi2
	str	r0, [r3, #28]
	str	r0, [r3, #36]
	str	r0, [r3, #32]
	and	r2, r2, #239
	bfc	r2, #6, #1
	strb	r2, [r3, #24]
	ldr	r3, [r9, #92]
	cmp	ip, r3
	bcc	.L11862
.L11870:
	mov	r3, #0
	mov	r0, r10
	sub	r6, r6, #2
	str	r3, [r9, #112]
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r6, #5
	addls	pc, pc, r6, asl #2
	b	.L11839
.L11865:
	b	.L11864
	b	.L11839
	b	.L11866
	b	.L11839
	b	.L11867
	b	.L11867
	.p2align 1
.L11861:
	mvn	r3, #7
	mov	r0, r10
	str	r3, [r9, #112]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r9
	bl	send_status(PLT)
	mov	r0, r10
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r9, #112]
	cmn	r3, #8
	beq	.L11941
.L11869:
	mov	r0, r10
	bl	_raw_spin_unlock_irq(PLT)
	b	.L11839
.L11864:
	ldr	r1, [r9, #8]
	cmp	r1, #0
	beq	.L11942
	add	r1, r1, #88
	mov	r0, #0
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	bne	.L11943
.L11877:
	ldr	r3, [r9, #56]
	cmp	r3, r4
	bne	.L11839
	ldr	r0, [r9, #4]
	cmp	r0, #0
	beq	.L11944
.L11928:
	bl	usb_composite_setup_continue(PLT)
	b	.L11839
.L11866:
	mov	r0, r9
	ldr	r1, [r9, #12]
	bl	do_set_interface(PLT)
	ldr	r3, [r9, #12]
	cmp	r3, #0
	beq	.L11839
	ldr	r0, [r9, #4]
	b	.L11928
.L11867:
	mov	r1, #0
	mov	r0, r9
	bl	do_set_interface(PLT)
	mov	r0, r10
	bl	_raw_spin_lock_irq(PLT)
	mov	r3, #7
	mov	r0, r10
	str	r3, [r9, #112]
	bl	_raw_spin_unlock_irq(PLT)
	b	.L11839
.L11941:
	str	r5, [r9, #112]
	b	.L11869
.L11943:
	ldr	r3, [r9, #8]
	mov	r1, #0
	ldr	r0, [r3, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	b	.L11877
.L11944:
	ldr	r0, [r9, #48]
	mov	r2, #32
	ldr	r1, [r9, #52]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	ldr	r2, [r9, #48]
	cmp	r0, #0
	cmnne	r0, #108
	mov	r3, r0
	str	r9, [r2]
	beq	.L11839
	ldr	r0, [r9]
	ldr	r2, [r9, #48]
	ldr	r1, .L11945
	add	r0, r0, #32
	ldr	r2, [r2, #4]
.LPIC2698:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	b	.L11839
.L11942:
	ldr	r2, .L11945+4
	movw	r3, #2700
	ldr	r0, [r9]
	ldr	r1, .L11945+8
.LPIC2696:
	add	r2, pc, r2
	add	r2, r2, #3504
	add	r0, r0, #32
.LPIC2695:
	add	r1, pc, r1
	add	r2, r2, #8
	bl	dev_err(PLT)
	ldr	r0, .L11945+12
	movw	r1, #461
.LPIC2697:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L11839
.L11946:
	.align	2
.L11945:
	.word	.LC365-(.LPIC2698+8)
	.word	.LANCHOR3-(.LPIC2696+8)
	.word	.LC363-(.LPIC2695+8)
	.word	.LC364-(.LPIC2697+8)
	.fnend
	.size	handle_exception, .-handle_exception
	.align	2
	.type	fsg_main_thread, %function
fsg_main_thread:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L12358
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	str	lr, [sp, #32]
	mov	r0, #2
	add	r4, r5, #44
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
.LPIC2706:
	add	r3, pc, r3
	strd	r8, [sp, #16]
	.pad #60
	sub	sp, sp, #60
	str	r3, [sp, #12]
	bl	allow_signal(PLT)
	ldr	r3, .L12358+4
	mov	r0, #15
.LPIC2707:
	add	r3, pc, r3
	str	r3, [sp, #16]
	bl	allow_signal(PLT)
	mov	r0, #9
	bl	allow_signal(PLT)
	mov	r0, #10
	bl	allow_signal(PLT)
	bl	set_freezable(PLT)
	ldr	r1, .L12358+8
	mov	r3, sp
	mov	r2, #0
	ldr	lr, .L12358+12
	bic	r3, r3, #8128
	bic	r3, r3, #63
.LPIC2743:
	add	r1, pc, r1
	str	r2, [r3, #8]
.LPIC2739:
	add	lr, pc, lr
	add	r3, r1, #2752
	add	r10, lr, #2752
	add	r3, r3, #4
	add	r10, r10, #4
	str	r3, [sp, #20]
.L11948:
	ldr	r3, [r5, #112]
	cmp	r3, #7
	beq	.L12332
.L12127:
	cmp	r3, #0
	bgt	.L11949
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L11949
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	tst	r3, #32
	bne	.L11952
	mov	r0, r5
	bl	sleep_thread(PLT)
	ldr	r3, [r5, #112]
	cmp	r3, #7
	bne	.L12127
.L12332:
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	mov	r3, #0
	mov	r0, r4
	str	r3, [r5, #168]
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r5, #172]
	cmp	r3, #0
	beq	.L12131
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L12131
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	blt	.L12131
.L12132:
	add	r0, r5, #152
	mov	r1, #0
	bl	complete_and_exit(PLT)
.L12131:
	ldr	r6, [r5, #92]
	add	r8, r5, #28
	ldr	r4, [r5, #100]
	mov	r0, r8
	bl	down_write(PLT)
	cmp	r6, #0
	movne	r7, #14848
	addne	r4, r4, #400
	movtne	r7, 2
	movne	r9, #0
	beq	.L12130
.L12134:
	ldr	r0, [r4, #-400]
	cmp	r0, #0
	beq	.L12133
	bl	fput(PLT)
	str	r9, [r4, #-400]
	str	r7, [r4, #-364]
.L12133:
	subs	r6, r6, #1
	add	r4, r4, #400
	bne	.L12134
.L12130:
	mov	r0, r8
	bl	up_write(PLT)
	b	.L12132
.L11949:
	mov	r0, r5
	bl	handle_exception(PLT)
	b	.L11948
.L11952:
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L11957
.L12243:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	bl	sleep_thread(PLT)
	cmp	r0, #0
	bne	.L11948
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L12243
.L11957:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	mov	r2, #31
	str	r2, [r6, #12]
	ldr	r1, [r5, #108]
	udiv	r3, r2, r1
	mul	r3, r1, r3
	subs	r3, r2, r3
	addne	r1, r1, #31
	rsbne	r2, r3, r1
	ldr	r3, [r6, #24]
	str	r2, [r3, #4]
	ldr	r7, [r5, #8]
	cmp	r7, #0
	beq	.L12333
	ldr	r0, [r7, #80]
	ldr	r8, [r7, #96]
	ldr	r9, [r6, #24]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq(PLT)
	mov	r2, #1
	mov	r3, #2
	str	r2, [r6, #28]
	str	r3, [r6, #4]
	ldr	r0, [r7, #80]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r8, #8]
	mov	r0, r8
	mov	r1, r9
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L11961
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r6, #28]
	str	r2, [r6, #4]
	beq	.L11961
	cmn	r3, #95
	beq	.L12334
.L11960:
	ldr	r0, [r7, #76]
	ldr	r1, .L12358+16
	ldr	r2, [r8, #4]
	add	r0, r0, #32
.LPIC2702:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	b	.L11961
.L12242:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	bl	sleep_thread(PLT)
	cmp	r0, #0
	bne	.L11948
.L11961:
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r6, #4]
	cmp	r3, #1
	bne	.L12242
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
#APP
@ 2446 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	ldr	r7, [r5, #8]
	cmp	r7, #0
	beq	.L12335
	ldr	r3, [r6, #24]
	ldr	r8, [r7, #80]
	ldr	r2, [r3, #44]
	ldr	r9, [r3]
	cmp	r2, #0
	bne	.L11964
	ldr	r2, [r7, #88]
	tst	r2, #1
	bne	.L11964
	ldr	r3, [r3, #48]
	cmp	r3, #31
	bne	.L12327
	ldr	r2, [r9]
	movw	r3, #21333
	movt	r3, 17218
	cmp	r2, r3
	bne	.L12327
	ldrb	r3, [r9, #13]	@ zero_extendqisi2
	cmp	r3, #7
	bls	.L12336
.L11979:
	ldrb	r3, [r8, #144]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L12337
.L11964:
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq(PLT)
	b	.L11948
.L12339:
	blx	r3
.L11977:
	cmp	r0, #0
	beq	.L11971
	cmn	r0, #11
	bne	.L12338
	mov	r0, #100
	bl	msleep_interruptible(PLT)
	cmp	r0, #0
	bne	.L11971
.L12327:
	ldr	r0, [r7, #92]
	ldr	r2, [r0, #8]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	bne	.L12339
	ldr	r3, [r2, #24]
	mov	r1, #1
	blx	r3
	b	.L11977
.L12334:
	ldr	r2, [r9, #4]
	cmp	r2, #0
	bne	.L11960
	b	.L11961
.L12336:
	ldrb	r3, [r9, #12]	@ zero_extendqisi2
	tst	r3, #127
	bne	.L11979
	ldrb	r2, [r9, #14]	@ zero_extendqisi2
	sub	r3, r2, #1
	cmp	r3, #15
	bhi	.L11979
	add	r1, r9, #15
	str	r2, [r8, #72]
	add	r0, r8, #76
	bl	memcpy(PLT)
	ldrsb	r3, [r9, #12]
	mov	r0, r4
	cmp	r3, #0
	movlt	r3, #2
	movge	r3, #1
	str	r3, [r8, #120]
	ldr	r3, [r9, #8]
	cmp	r3, #0
	str	r3, [r8, #124]
	moveq	r3, #3
	streq	r3, [r8, #120]
	ldr	r3, [r8, #92]
	ldrb	r2, [r9, #13]	@ zero_extendqisi2
	cmp	r2, r3
	str	r2, [r8, #96]
	ldrcc	r3, [r8, #100]
	movcc	r1, #400
	movcs	r3, #0
	mlacc	r3, r1, r2, r3
	str	r3, [r8, #104]
	ldr	r3, [r9, #4]
	str	r3, [r8, #132]
	bl	_raw_spin_lock_irq(PLT)
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r5, #112]
	mov	r0, r4
	cmp	r3, #0
	mvnle	r3, #8
	strle	r3, [r5, #112]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r6, [r5, #60]
	str	r6, [r5, #64]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L12018
.L12241:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	bl	sleep_thread(PLT)
	cmp	r0, #0
	bne	.L11948
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L12241
.L12018:
	mov	r0, r4
	add	r8, r5, #28
	bl	_raw_spin_unlock_irq(PLT)
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	mov	r0, r8
	and	r3, r3, #251
	bfc	r3, #3, #1
	strb	r3, [r5, #144]
	bl	down_read(PLT)
	ldrb	r3, [r5, #76]	@ zero_extendqisi2
	cmp	r3, #37
	beq	.L11990
	bhi	.L11991
	cmp	r3, #18
	beq	.L11992
	bls	.L12340
	cmp	r3, #27
	beq	.L11999
	bhi	.L12000
	cmp	r3, #21
	beq	.L12001
	cmp	r3, #26
	bne	.L11989
	ldr	ip, .L12358+20
	mov	r3, #0
	mov	r0, r5
	ldrb	lr, [r5, #80]	@ zero_extendqisi2
	mov	r1, #6
	mov	r2, #2
	str	r3, [sp]
	mov	r3, #22
.LPIC2711:
	add	ip, pc, ip
	str	lr, [r5, #128]
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r7, r0, #0
	beq	.L12313
.L12019:
	mov	r0, r8
	bl	up_read(PLT)
	cmn	r7, #4
	beq	.L11948
.L12077:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r3, r3, #1
	bne	.L11948
	cmn	r7, #22
	beq	.L12146
	cmp	r7, #0
	ldrlt	r8, [r5, #120]
	blt	.L12076
.L12075:
	ldr	r8, [r5, #120]
	cmp	r8, #2
	bne	.L12076
	ldr	r3, [r5, #128]
	mov	r2, #1
	ldr	r1, [r6, #16]
	cmp	r7, r3
	movcs	r7, r3
	str	r7, [r1, #4]
	str	r2, [r6, #4]
	ldr	r3, [r5, #136]
	ldr	r8, [r5, #120]
	rsb	r3, r7, r3
	str	r3, [r5, #136]
.L12076:
	cmp	r8, #1
	ldr	r6, [r5, #60]
	beq	.L12098
	bcc	.L12078
	cmp	r8, #2
	bne	.L12136
	ldr	r3, [r5, #124]
	cmp	r3, #0
	beq	.L12136
	ldr	r3, [r5, #8]
	cmp	r3, #0
	beq	.L12341
	ldr	r9, [r5, #136]
	cmp	r9, #0
	bne	.L12342
	ldr	r3, [r6, #16]
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfi	r2, r9, #1, #1
	strb	r2, [r3, #26]
	ldr	r7, [r5, #8]
	cmp	r7, #0
	beq	.L12343
	ldr	r0, [r7, #80]
	ldr	r3, [r6, #16]
	ldr	fp, [r7, #92]
	add	r0, r0, #44
	str	r3, [sp, #32]
	bl	_raw_spin_lock_irq(PLT)
	mov	r3, #1
	str	r8, [r6, #4]
	str	r3, [r6, #20]
	ldr	r0, [r7, #80]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [fp, #8]
	mov	r0, fp
	mov	r2, #208
	ldr	r1, [sp, #32]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L12087
	cmn	r3, #108
	str	r9, [r6, #20]
	str	r9, [r6, #4]
	beq	.L12087
	cmn	r3, #95
	bne	.L12086
	ldr	r2, [sp, #32]
	ldr	r2, [r2, #4]
	cmp	r2, #0
	beq	.L12087
.L12086:
	ldr	r0, [r7, #76]
	ldr	r1, .L12358+24
	ldr	r2, [fp, #4]
	add	r0, r0, #32
.LPIC2741:
	add	r1, pc, r1
	bl	dev_warn(PLT)
.L12087:
	ldr	r3, [r6, #8]
	str	r3, [r5, #60]
.L12136:
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r5, #112]
	mov	r0, r4
	cmp	r3, #0
	mvnle	r3, #7
	strle	r3, [r5, #112]
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, .L12358+28
.LPIC2752:
	add	r3, pc, r3
	ldr	r2, [r3, #3704]
	cmp	r2, #0
	beq	.L12125
	mov	r2, #0
	str	r2, [r3, #3704]
	b	.L11948
.L12337:
	ldr	r0, [r7, #96]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	b	.L12328
.L11982:
	mov	r0, #100
	bl	msleep_interruptible(PLT)
	cmp	r0, #0
	bne	.L11964
.L12328:
	ldr	r0, [r7, #92]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	cmp	r0, #0
	beq	.L11964
	cmn	r0, #11
	beq	.L11982
	ldr	r3, [r7, #76]
	mov	r2, r0
	ldr	r1, [sp, #16]
	add	r0, r3, #32
	bl	dev_warn(PLT)
	b	.L11964
.L12333:
	ldr	r2, .L12358+32
	mov	r3, #716
	ldr	r0, [r5]
	ldr	r1, .L12358+36
.LPIC2700:
	add	r2, pc, r2
	add	r2, r2, #2768
	add	r0, r0, #32
.LPIC2699:
	add	r1, pc, r1
	add	r2, r2, #8
	bl	dev_err(PLT)
	ldr	r0, .L12358+40
	movw	r1, #461
.LPIC2701:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L11948
.L12338:
	ldr	r3, [r7, #76]
	mov	r2, r0
	ldr	r1, [sp, #12]
	add	r0, r3, #32
	bl	dev_warn(PLT)
.L11971:
	add	r1, r7, #88
	mov	r0, #0
	bl	_set_bit(PLT)
	b	.L11964
.L12335:
	ldr	r2, .L12358+44
	movw	r3, #2447
	ldr	r0, [r5]
	ldr	r1, .L12358+48
.LPIC2704:
	add	r2, pc, r2
	add	r2, r2, #3520
	add	r0, r0, #32
.LPIC2703:
	add	r1, pc, r1
	add	r2, r2, #12
	bl	dev_err(PLT)
	ldr	r0, .L12358+52
	movw	r1, #461
.LPIC2705:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L11964
.L11991:
	cmp	r3, #67
	beq	.L12005
	bls	.L12344
	cmp	r3, #90
	beq	.L12012
	bhi	.L12013
	cmp	r3, #68
	beq	.L12014
	cmp	r3, #85
	bne	.L11989
	ldrb	r3, [r5, #84]	@ zero_extendqisi2
	mov	r2, #0
	mov	r0, r5
	ldrb	ip, [r5, #83]	@ zero_extendqisi2
	mov	r1, #10
	ldr	lr, .L12358+56
	str	r2, [sp]
	mov	r2, #1
	orr	ip, r3, ip, asl #8
	movw	r3, #386
.LPIC2710:
	add	lr, pc, lr
	str	lr, [sp, #4]
	str	ip, [r5, #128]
	bl	check_command(PLT)
	subs	r7, r0, #0
	bne	.L12019
.L12324:
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L12026
.L12318:
	mov	r2, #335872
	mvn	r7, #21
	str	r2, [r3, #28]
.L12021:
	mov	r0, r8
	bl	up_read(PLT)
	b	.L12077
.L12146:
	mov	r7, r3
	b	.L12075
.L12340:
	cmp	r3, #3
	beq	.L11994
	bls	.L12345
	cmp	r3, #8
	beq	.L11997
	cmp	r3, #10
	bne	.L11989
	ldrb	r3, [r5, #80]	@ zero_extendqisi2
	ldr	r2, [r5, #104]
	cmp	r3, #0
	moveq	r3, #256
	cmp	r2, #0
	str	r3, [r5, #128]
	beq	.L12072
	ldr	r2, [r2, #40]
	mov	r3, r3, asl r2
	str	r3, [r5, #128]
.L12072:
	ldr	ip, .L12358+60
	mov	r3, #1
	mov	r0, r5
	mov	r2, r3
	mov	r1, #6
	str	r3, [sp]
	mov	r3, #30
.LPIC2726:
	add	ip, pc, ip
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r7, r0, #0
	bne	.L12019
.L12316:
	mov	r0, r5
	bl	do_write(PLT)
	mov	r7, r0
	b	.L12019
.L12344:
	cmp	r3, #42
	beq	.L12007
	bls	.L12346
	cmp	r3, #47
	beq	.L12010
	cmp	r3, #53
	bne	.L11989
	ldr	ip, .L12358+64
	mov	r2, #0
	mov	r3, #1
	mov	r0, r5
	mov	r1, #10
	str	r2, [r5, #128]
	mov	r2, #3
	str	r3, [sp]
	mov	r3, #444
.LPIC2723:
	add	ip, pc, ip
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r7, r0, #0
	bne	.L12019
	ldr	r9, [r5, #104]
	ldrb	r3, [r9, #24]	@ zero_extendqisi2
	ldr	r0, [r9]
	ubfx	r3, r3, #1, #1
	cmp	r0, #0
	orreq	r3, r3, #1
	cmp	r3, #0
	bne	.L12021
	mov	r1, #1
	bl	vfs_fsync(PLT)
	cmp	r0, #0
	beq	.L12021
	movw	r3, #3074
	movt	r3, 3
	str	r3, [r9, #28]
	b	.L12021
.L12078:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L12136
	ldr	r3, [r5, #8]
	cmp	r3, #0
	beq	.L12347
	ldr	r0, [r3, #96]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	ldr	r6, [r5, #8]
	mov	r1, #1
	ldr	r0, [r6, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	b	.L12119
.L12120:
	mov	r0, #100
	bl	msleep_interruptible(PLT)
	cmp	r0, #0
	bne	.L11948
	ldr	r0, [r6, #92]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
.L12119:
	cmp	r0, #0
	beq	.L12136
	cmn	r0, #11
	beq	.L12120
	ldr	r3, [r6, #76]
	mov	r2, r0
	ldr	r1, .L12358+68
	add	r0, r3, #32
.LPIC2751:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	b	.L12136
.L12098:
	ldr	r3, [r5, #136]
	cmp	r3, #0
	beq	.L12136
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L12099
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #112]
	mov	r6, r0
	cmp	r3, #1
	bgt	.L12108
	ldr	r2, [r5, #168]
	str	r8, [r5, #112]
	ldr	r3, [r5, #56]
	cmp	r2, #0
	str	r3, [r5, #116]
	beq	.L12108
.L12325:
	mov	r0, #10
	mov	r1, #2
	bl	send_sig_info(PLT)
.L12108:
	mov	r1, r6
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L11948
.L11989:
	ldr	r7, .L12358+72
	mov	r9, #0
	mov	r2, r3
	ldr	r1, .L12358+76
	str	r9, [r5, #128]
.LPIC2729:
	add	r7, pc, r7
	add	r7, r7, #3776
.LPIC2730:
	add	r1, pc, r1
	add	r7, r7, #12
	mov	r0, r7
	bl	sprintf(PLT)
	str	r7, [sp, #4]
	mov	r2, r9
	mov	r0, r5
	str	r9, [sp]
	mvn	r3, #0
	ldr	r1, [r5, #72]
	bl	check_command(PLT)
	subs	r7, r0, #0
	bne	.L12019
	ldr	r3, [r5, #104]
	b	.L12318
.L12013:
	cmp	r3, #168
	beq	.L12016
	cmp	r3, #170
	bne	.L11989
	ldrb	r2, [r5, #83]	@ zero_extendqisi2
	ldrb	ip, [r5, #82]	@ zero_extendqisi2
	ldrb	r3, [r5, #85]	@ zero_extendqisi2
	ldrb	r0, [r5, #84]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	ldr	r1, [r5, #104]
	orr	r2, r2, ip, asl #24
	orr	r3, r2, r3
	cmp	r1, #0
	orr	r3, r3, r0, asl #8
	str	r3, [r5, #128]
	beq	.L12074
	ldr	r2, [r1, #40]
	mov	r3, r3, asl r2
	str	r3, [r5, #128]
.L12074:
	ldr	ip, .L12358+80
	mov	r3, #1
	mov	r0, r5
	mov	r2, r3
	mov	r1, #12
	str	r3, [sp]
	movw	r3, #1022
.LPIC2728:
	add	ip, pc, ip
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r7, r0, #0
	bne	.L12019
	b	.L12316
.L12000:
	cmp	r3, #30
	beq	.L12003
	cmp	r3, #35
	bne	.L11989
	ldrb	r3, [r5, #84]	@ zero_extendqisi2
	mov	r2, #1
	mov	r0, r5
	ldrb	ip, [r5, #83]	@ zero_extendqisi2
	mov	r1, #10
	ldr	lr, .L12358+84
	str	r2, [sp]
	mov	r2, #2
	orr	ip, r3, ip, asl #8
	mov	r3, #384
.LPIC2720:
	add	lr, pc, lr
	str	lr, [sp, #4]
	str	ip, [r5, #128]
	bl	check_command(PLT)
	subs	r7, r0, #0
	bne	.L12019
	ldr	r1, [r5, #104]
	mov	r2, #8
	mov	ip, #2
	ldr	r3, [r6]
	strb	r7, [r3, #2]
	strb	r7, [r3, #1]
	strb	r7, [r3]
	mov	r7, #12
	strb	r2, [r3, #3]
	ldr	r2, [r1, #16]
	mov	r0, r2, lsr #16
	strb	r2, [r3, #7]
	ubfx	r2, r2, #8, #8
	strb	r2, [r3, #6]
	mov	r2, r0, lsr #8
	strb	r0, [r3, #5]
	strb	r2, [r3, #4]
	ldr	r2, [r1, #44]
	strb	ip, [r3, #8]
	mov	r1, r2, lsr #16
	ubfx	r0, r2, #8, #8
	strb	r2, [r3, #11]
	strb	r0, [r3, #10]
	strb	r1, [r3, #9]
	b	.L12021
.L12345:
	cmp	r3, #0
	bne	.L11989
	ldr	ip, .L12358+88
	mov	r2, #1
	str	r3, [r5, #128]
	mov	r0, r5
	mov	r1, #6
	str	r2, [sp]
	mov	r2, #3
.LPIC2724:
	add	ip, pc, ip
	str	ip, [sp, #4]
	bl	check_command(PLT)
	mov	r7, r0
	b	.L12019
.L12346:
	cmp	r3, #40
	bne	.L11989
	ldrb	r1, [r5, #83]	@ zero_extendqisi2
	ldrb	r3, [r5, #84]	@ zero_extendqisi2
	ldr	r2, [r5, #104]
	orr	r3, r3, r1, asl #8
	cmp	r2, #0
	str	r3, [r5, #128]
	beq	.L12032
	ldr	r2, [r2, #40]
	mov	r3, r3, asl r2
	str	r3, [r5, #128]
.L12032:
	ldr	ip, .L12358+92
	mov	r3, #1
	mov	r0, r5
	mov	r1, #10
	mov	r2, #2
	str	r3, [sp]
	movw	r3, #446
.LPIC2715:
	add	ip, pc, ip
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r7, r0, #0
	bne	.L12019
.L12315:
	mov	r0, r5
	bl	do_read(PLT)
	mov	r7, r0
	b	.L12019
.L12007:
	ldrb	r1, [r5, #83]	@ zero_extendqisi2
	ldrb	r3, [r5, #84]	@ zero_extendqisi2
	ldr	r2, [r5, #104]
	orr	r3, r3, r1, asl #8
	cmp	r2, #0
	str	r3, [r5, #128]
	beq	.L12073
	ldr	r2, [r2, #40]
	mov	r3, r3, asl r2
	str	r3, [r5, #128]
.L12073:
	ldr	ip, .L12358+96
	mov	r3, #1
	mov	r0, r5
	mov	r2, r3
	mov	r1, #10
	str	r3, [sp]
	movw	r3, #446
.LPIC2727:
	add	ip, pc, ip
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r7, r0, #0
	bne	.L12019
	b	.L12316
.L11992:
	ldr	ip, .L12358+100
	mov	r3, #0
	mov	r0, r5
	ldrb	lr, [r5, #80]	@ zero_extendqisi2
	mov	r1, #6
	mov	r2, #2
	str	r3, [sp]
	mov	r3, #16
.LPIC2708:
	add	ip, pc, ip
	str	lr, [r5, #128]
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r7, r0, #0
	bne	.L12019
	ldr	lr, [r5, #104]
	ldr	r9, [r6]
	cmp	lr, #0
	beq	.L12348
	ldrb	r3, [lr, #24]	@ zero_extendqisi2
	mov	r0, #2
	mov	ip, #31
	mov	r2, r5
	ands	r3, r3, #8
	movne	r3, #5
	strb	r3, [r9]
	ldrb	r3, [lr, #24]	@ zero_extendqisi2
	strb	r7, [r9, #5]
	strb	r7, [r9, #6]
	strb	r7, [r9, #7]
	mov	r7, #36
	and	r3, r3, #4
	strb	r0, [r9, #2]
	cmp	r3, #0
	strb	r0, [r9, #3]
	movne	r3, #128
	moveq	r3, #0
	strb	ip, [r9, #4]
	strb	r3, [r9, #1]
	ldr	ip, [r2, #180]!	@ unaligned
	ldr	r0, [r2, #4]	@ unaligned
	ldr	r3, [r2, #8]	@ unaligned
	ldr	lr, [r2, #12]	@ unaligned
	str	ip, [r9, #8]	@ unaligned
	str	r0, [r9, #12]	@ unaligned
	str	r3, [r9, #16]	@ unaligned
	str	lr, [r9, #20]	@ unaligned
	ldr	r3, [r2, #24]	@ unaligned
	ldr	ip, [r2, #16]	@ unaligned
	ldr	r0, [r2, #20]	@ unaligned
	str	r3, [r9, #32]	@ unaligned
	str	ip, [r9, #24]	@ unaligned
	str	r0, [r9, #28]	@ unaligned
	ldrb	r3, [r2, #28]	@ zero_extendqisi2
	strb	r3, [r9, #36]
	b	.L12021
.L12125:
	mov	r0, r5
	bl	send_status(PLT)
	subs	r6, r0, #0
	bne	.L11948
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r5, #112]
	mov	r0, r4
	cmp	r3, #0
	strle	r6, [r5, #112]
	bl	_raw_spin_unlock_irq(PLT)
	b	.L11948
.L11990:
	ldr	ip, .L12358+104
	mov	r3, #1
	mov	r9, #8
	mov	r0, r5
	mov	r1, #10
	str	r9, [r5, #128]
	mov	r2, #2
	str	r3, [sp]
	mov	r3, #316
.LPIC2717:
	add	ip, pc, ip
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r7, r0, #0
	bne	.L12019
	ldrb	r1, [r5, #79]	@ zero_extendqisi2
	ldrb	r0, [r5, #78]	@ zero_extendqisi2
	ldrb	r3, [r5, #84]	@ zero_extendqisi2
	ldrb	r2, [r5, #81]	@ zero_extendqisi2
	mov	r1, r1, asl #16
	ldrb	ip, [r5, #80]	@ zero_extendqisi2
	orr	r0, r1, r0, asl #24
	cmp	r3, #1
	ldr	r1, [r5, #104]
	orr	r0, r0, r2
	ldr	r2, [r6]
	orr	r0, r0, ip, asl r9
	bgt	.L12034
	eor	r3, r3, #1
	cmp	r0, #0
	moveq	r3, #0
	andne	r3, r3, #1
	cmp	r3, #0
	bne	.L12034
	ldr	r3, [r1, #16]
	mov	r7, r9
	sub	r3, r3, #1
	mov	r0, r3, lsr #16
	ubfx	ip, r3, #8, #8
	strb	r3, [r2, #3]
	mov	r3, r0, lsr #8
	strb	ip, [r2, #2]
	strb	r0, [r2, #1]
	strb	r3, [r2]
	ldr	r3, [r1, #44]
	mov	r1, r3, lsr #16
	ubfx	r0, r3, #8, #8
	strb	r3, [r2, #7]
	mov	r3, r1, lsr #8
	strb	r0, [r2, #6]
	strb	r1, [r2, #5]
	strb	r3, [r2, #4]
	b	.L12021
.L12003:
	ldr	ip, .L12358+108
	mov	r3, #0
	mov	r0, r5
	mov	r1, #6
	mov	r2, #3
	str	r3, [r5, #128]
	str	r3, [sp]
	mov	r3, #16
.LPIC2713:
	add	ip, pc, ip
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r7, r0, #0
	bne	.L12019
	ldr	r9, [r5, #104]
	cmp	r9, #0
	beq	.L12026
	ldrb	r3, [r9, #24]	@ zero_extendqisi2
	tst	r3, #4
	beq	.L12319
	ldrb	fp, [r5, #80]	@ zero_extendqisi2
	tst	fp, #254
	and	fp, fp, #1
	bne	.L12044
	and	r1, r3, #144
	eor	r2, fp, #1
	cmp	r1, #16
	movne	r2, #0
	andeq	r2, r2, #1
	cmp	r2, #0
	bne	.L12349
.L12029:
	ldrb	r3, [r9, #24]	@ zero_extendqisi2
	bfi	r3, fp, #4, #1
	strb	r3, [r9, #24]
	b	.L12021
.L12359:
	.align	2
.L12358:
	.word	.LC575-(.LPIC2706+8)
	.word	.LC576-(.LPIC2707+8)
	.word	.LANCHOR3-(.LPIC2743+8)
	.word	.LANCHOR3-(.LPIC2739+8)
	.word	.LC365-(.LPIC2702+8)
	.word	.LC580-(.LPIC2711+8)
	.word	.LC365-(.LPIC2741+8)
	.word	.LANCHOR4-(.LPIC2752+8)
	.word	.LANCHOR3-(.LPIC2700+8)
	.word	.LC363-(.LPIC2699+8)
	.word	.LC364-(.LPIC2701+8)
	.word	.LANCHOR3-(.LPIC2704+8)
	.word	.LC363-(.LPIC2703+8)
	.word	.LC364-(.LPIC2705+8)
	.word	.LC579-(.LPIC2710+8)
	.word	.LC595-(.LPIC2726+8)
	.word	.LC592-(.LPIC2723+8)
	.word	.LC576-(.LPIC2751+8)
	.word	.LANCHOR4-(.LPIC2729+8)
	.word	.LC598-(.LPIC2730+8)
	.word	.LC597-(.LPIC2728+8)
	.word	.LC589-(.LPIC2720+8)
	.word	.LC593-(.LPIC2724+8)
	.word	.LC584-(.LPIC2715+8)
	.word	.LC596-(.LPIC2727+8)
	.word	.LC577-(.LPIC2708+8)
	.word	.LC586-(.LPIC2717+8)
	.word	.LC582-(.LPIC2713+8)
	.word	.LC591-(.LPIC2722+8)
	.word	.LC594-(.LPIC2725+8)
	.word	.LC585-(.LPIC2716+8)
	.word	.LC581-(.LPIC2712+8)
	.word	.LC583-(.LPIC2714+8)
	.word	.LC588-(.LPIC2719+8)
	.word	.LC587-(.LPIC2718+8)
	.word	.LC578-(.LPIC2709+8)
	.word	.LC590-(.LPIC2721+8)
	.word	.LC365-(.LPIC2750+8)
	.word	.LC365-(.LPIC2745+8)
	.word	.LC576-(.LPIC2746+8)
	.word	.LANCHOR3-(.LPIC2748+8)
	.word	.LC363-(.LPIC2747+8)
	.word	.LC364-(.LPIC2749+8)
	.word	.LANCHOR3-(.LPIC2733+8)
	.word	.LC363-(.LPIC2732+8)
	.word	.LC364-(.LPIC2734+8)
	.word	.LANCHOR3-(.LPIC2736+8)
	.word	.LC363-(.LPIC2735+8)
	.word	.LC364-(.LPIC2737+8)
	.word	.LC363-(.LPIC2738+8)
	.word	.LC364-(.LPIC2740+8)
	.word	.LC363-(.LPIC2742+8)
	.word	.LC364-(.LPIC2744+8)
.L11999:
	ldr	ip, .L12358+112
	mov	r3, #0
	mov	r0, r5
	mov	r1, #6
	mov	r2, #3
	str	r3, [r5, #128]
	str	r3, [sp]
	mov	r3, #18
.LPIC2722:
	add	ip, pc, ip
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r7, r0, #0
	bne	.L12019
	ldr	r9, [r5, #104]
	cmp	r9, #0
	beq	.L12026
	ldrb	r2, [r9, #24]	@ zero_extendqisi2
	tst	r2, #4
	beq	.L12319
	ldrb	r3, [r5, #77]	@ zero_extendqisi2
	tst	r3, #254
	bne	.L12044
	ldrb	r3, [r5, #80]	@ zero_extendqisi2
	tst	r3, #252
	bne	.L12044
	tst	r3, #1
	beq	.L12046
	ldr	r3, [r9]
	cmp	r3, #0
	moveq	r3, #14848
	mvneq	r7, #21
	movteq	r3, 2
	streq	r3, [r9, #28]
	b	.L12021
.L12010:
	ldr	ip, .L12358+116
	mov	r2, #0
	mov	r3, #1
	mov	r0, r5
	mov	r1, #10
	str	r2, [r5, #128]
	mov	r2, #3
	str	r3, [sp]
	movw	r3, #446
.LPIC2725:
	add	ip, pc, ip
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r7, r0, #0
	bne	.L12019
	ldrb	r2, [r5, #79]	@ zero_extendqisi2
	ldrb	r0, [r5, #78]	@ zero_extendqisi2
	ldr	r3, [r5, #60]
	ldr	r9, [r5, #104]
	ldrb	r1, [r5, #81]	@ zero_extendqisi2
	mov	fp, r2, asl #16
	ldrb	ip, [r5, #80]	@ zero_extendqisi2
	orr	r0, fp, r0, asl #24
	str	r3, [sp, #40]
	ldrd	r2, [r9, #16]
	orr	r1, r0, r1
	orr	ip, r1, ip, asl #8
	mov	r1, #0
	cmp	ip, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r7, #21
	movtge	r3, 5
	strge	r3, [r9, #28]
	bge	.L12019
	ldrb	r3, [r5, #77]	@ zero_extendqisi2
	tst	r3, #239
	movne	r3, #9216
	mvnne	r7, #21
	movtne	r3, 5
	strne	r3, [r9, #28]
	bne	.L12019
	ldrb	fp, [r5, #83]	@ zero_extendqisi2
	ldrb	r3, [r5, #84]	@ zero_extendqisi2
	orrs	fp, r3, fp, asl #8
	beq	.L12144
	ldr	r2, [r9, #40]
	mov	lr, #0
	ldrb	r3, [r9, #24]	@ zero_extendqisi2
	ldr	r0, [r9]
	sub	r1, r2, #32
	mov	fp, fp, asl r2
	orr	r1, lr, ip, asl r1
	ubfx	r3, r3, #1, #1
	cmp	r0, lr
	orreq	r3, r3, #1
	str	r1, [sp, #28]
	rsb	r1, r2, #32
	cmp	r3, #0
	ldr	lr, [sp, #28]
	mov	r3, ip, asl r2
	str	r3, [sp, #24]
	orr	r1, lr, ip, lsr r1
	str	r1, [sp, #28]
	bne	.L12059
	mov	r1, #1
	bl	vfs_fsync(PLT)
.L12059:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r1, r3, #1
	bne	.L12061
	ldr	r3, [r9]
	mvn	r2, #0
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #40]
	ldr	r0, [r3, #32]
	bl	invalidate_mapping_pages(PLT)
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L12061
	mov	r3, sp
	str	r10, [sp, #36]
	mov	r10, r4
	bic	ip, r3, #8128
	str	r5, [sp, #32]
	bic	ip, ip, #63
	str	ip, [sp, #44]
.L12062:
	cmp	fp, #0
	beq	.L12350
	ldrd	r0, [r9, #8]
	mov	r3, #0
	ldrd	r4, [sp, #24]
	subs	r4, r0, r4
	sbc	r5, r1, r5
	cmp	fp, #16384
	movcc	r2, fp
	movcs	r2, #16384
	cmp	r4, r2
	sbcs	ip, r5, r3
	movlt	r2, r4
	cmp	r2, #0
	mov	r4, r2
	beq	.L12351
	ldrd	r0, [sp, #24]
	add	r3, sp, #56
	strd	r0, [r3, #-8]!
	ldr	r1, [sp, #40]
	ldr	r0, [r9]
	ldr	r1, [r1]
	bl	vfs_read(PLT)
	ldr	r3, [sp, #44]
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L12305
	cmp	r0, #0
	blt	.L12069
	cmp	r4, r0
	bls	.L12068
	ldr	r3, [r9, #44]
	rsb	r3, r3, #0
	and	r0, r0, r3
.L12068:
	cmp	r0, #0
	beq	.L12069
	ldrd	r2, [sp, #24]
	rsb	fp, r0, fp
	adds	r2, r2, r0
	adc	r3, r3, r0, asr #31
	strd	r2, [sp, #24]
	b	.L12062
.L12016:
	ldrb	r2, [r5, #83]	@ zero_extendqisi2
	ldrb	ip, [r5, #82]	@ zero_extendqisi2
	ldrb	r3, [r5, #85]	@ zero_extendqisi2
	ldrb	r0, [r5, #84]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	ldr	r1, [r5, #104]
	orr	r2, r2, ip, asl #24
	orr	r3, r2, r3
	cmp	r1, #0
	orr	r3, r3, r0, asl #8
	str	r3, [r5, #128]
	beq	.L12033
	ldr	r2, [r1, #40]
	mov	r3, r3, asl r2
	str	r3, [r5, #128]
.L12033:
	ldr	ip, .L12358+120
	mov	r3, #1
	mov	r0, r5
	mov	r1, #12
	mov	r2, #2
	str	r3, [sp]
	movw	r3, #1022
.LPIC2716:
	add	ip, pc, ip
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r7, r0, #0
	bne	.L12019
	b	.L12315
.L12012:
	ldrb	r3, [r5, #84]	@ zero_extendqisi2
	mov	r2, #0
	mov	r0, r5
	ldrb	ip, [r5, #83]	@ zero_extendqisi2
	mov	r1, #10
	ldr	lr, .L12358+124
	str	r2, [sp]
	mov	r2, #2
	orr	ip, r3, ip, asl #8
	movw	r3, #390
.LPIC2712:
	add	lr, pc, lr
	str	lr, [sp, #4]
	str	ip, [r5, #128]
	bl	check_command(PLT)
	subs	r7, r0, #0
	bne	.L12019
.L12313:
	mov	r0, r5
	mov	r1, r6
	bl	do_mode_sense(PLT)
	mov	r7, r0
	b	.L12019
.L11997:
	ldrb	r3, [r5, #80]	@ zero_extendqisi2
	ldr	r2, [r5, #104]
	cmp	r3, #0
	moveq	r3, #256
	cmp	r2, #0
	str	r3, [r5, #128]
	beq	.L12031
	ldr	r2, [r2, #40]
	mov	r3, r3, asl r2
	str	r3, [r5, #128]
.L12031:
	ldr	ip, .L12358+128
	mov	r3, #1
	mov	r0, r5
	mov	r1, #6
	mov	r2, #2
	str	r3, [sp]
	mov	r3, #30
.LPIC2714:
	add	ip, pc, ip
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r7, r0, #0
	bne	.L12019
	b	.L12315
.L12005:
	ldr	r2, [r5, #104]
	cmp	r2, #0
	beq	.L11989
	ldrb	r2, [r2, #24]	@ zero_extendqisi2
	tst	r2, #8
	beq	.L11989
	ldrb	r7, [r5, #83]	@ zero_extendqisi2
	mov	fp, #1
	mov	r0, r5
	ldrb	ip, [r5, #84]	@ zero_extendqisi2
	mov	r1, #10
	mov	r2, #2
	ldr	lr, .L12358+132
	str	fp, [sp]
	movw	r3, #450
	orr	ip, ip, r7, asl #8
.LPIC2719:
	add	lr, pc, lr
	str	lr, [sp, #4]
	str	ip, [r5, #128]
	bl	check_command(PLT)
	subs	r7, r0, #0
	bne	.L12019
	ldrb	r9, [r5, #77]	@ zero_extendqisi2
	ldrb	r0, [r5, #82]	@ zero_extendqisi2
	ldr	r3, [r5, #104]
	tst	r9, #253
	and	r2, r9, #2
	ldr	r9, [r6]
	movne	r1, fp
	moveq	r1, #0
	cmp	r0, fp
	orrgt	r1, r1, #1
	uxtb	r2, r2
	cmp	r1, #0
	movne	r2, #9216
	mvnne	r7, #21
	movtne	r2, 5
	strne	r2, [r3, #28]
	bne	.L12021
	mov	r1, #20
	mov	r0, r9
	str	r2, [sp, #36]
	str	r3, [sp, #32]
	bl	__memzero(PLT)
	ldr	r2, [sp, #36]
	mov	r1, #18
	strb	fp, [r9, #2]
	strb	fp, [r9, #3]
	ldr	r3, [sp, #32]
	strb	fp, [r9, #6]
	strb	r1, [r9, #1]
	cmp	r2, #0
	mov	r2, #22
	strb	r2, [r9, #5]
	bne	.L12352
	mvn	r1, #85
	strb	r7, [r9, #8]
	strb	r7, [r9, #9]
	strb	r7, [r9, #10]
	strb	r7, [r9, #11]
	mov	r7, #20
	strb	r2, [r9, #13]
	strb	r1, [r9, #14]
	ldr	r3, [r3, #16]
	mov	r2, r3, lsr #16
	ubfx	r1, r3, #8, #8
	strb	r3, [r9, #19]
	mov	r3, r2, lsr #8
	strb	r1, [r9, #18]
	strb	r2, [r9, #17]
	strb	r3, [r9, #16]
	b	.L12021
.L12014:
	ldr	r2, [r5, #104]
	cmp	r2, #0
	beq	.L11989
	ldrb	r2, [r2, #24]	@ zero_extendqisi2
	tst	r2, #8
	beq	.L11989
	ldrb	r3, [r5, #84]	@ zero_extendqisi2
	mov	r2, #1
	mov	r0, r5
	ldrb	ip, [r5, #83]	@ zero_extendqisi2
	mov	r1, #10
	ldr	lr, .L12358+136
	str	r2, [sp]
	mov	r2, #2
	orr	ip, r3, ip, asl #8
	movw	r3, #446
.LPIC2718:
	add	lr, pc, lr
	str	lr, [sp, #4]
	str	ip, [r5, #128]
	bl	check_command(PLT)
	subs	r7, r0, #0
	bne	.L12019
	ldrb	r0, [r5, #79]	@ zero_extendqisi2
	ldrb	r2, [r5, #78]	@ zero_extendqisi2
	ldrb	r9, [r5, #77]	@ zero_extendqisi2
	ldrb	r7, [r5, #81]	@ zero_extendqisi2
	mov	r0, r0, asl #16
	ldrb	r3, [r5, #80]	@ zero_extendqisi2
	ldr	ip, [r5, #104]
	orr	r2, r0, r2, asl #24
	bics	r1, r9, #2
	and	fp, r9, #2
	ldr	r9, [r6]
	orr	r7, r2, r7
	str	r1, [sp, #32]
	uxtb	fp, fp
	orr	r7, r7, r3, asl #8
	movne	r3, #9216
	movtne	r3, 5
	mvnne	r7, #21
	strne	r3, [ip, #28]
	bne	.L12021
	ldrd	r2, [ip, #16]
	mov	r1, #0
	cmp	r7, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r7, #21
	movtge	r3, 5
	strge	r3, [ip, #28]
	bge	.L12021
	mov	r0, r9
	mov	r1, #8
	bl	__memzero(PLT)
	mov	r3, #1
	cmp	fp, #0
	strb	r3, [r9]
	bne	.L12353
	mov	r3, r7, lsr #16
	ubfx	r1, r7, #8, #8
	strb	r7, [r9, #7]
	mov	r7, #8
	mov	r2, r3, lsr r7
	strb	r1, [r9, #6]
	strb	r3, [r9, #5]
	strb	r2, [r9, #4]
	b	.L12021
.L12001:
	ldr	ip, .L12358+140
	mov	r3, #0
	mov	r0, r5
	ldrb	lr, [r5, #80]	@ zero_extendqisi2
	mov	r1, #6
	mov	r2, #1
	str	r3, [sp]
	mov	r3, #18
.LPIC2709:
	add	ip, pc, ip
	str	lr, [r5, #128]
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r7, r0, #0
	bne	.L12019
	b	.L12324
.L11994:
	ldr	ip, .L12358+144
	mov	r3, #0
	mov	r0, r5
	ldrb	lr, [r5, #80]	@ zero_extendqisi2
	mov	r1, #6
	mov	r2, #2
	str	r3, [sp]
	mov	r3, #16
.LPIC2721:
	add	ip, pc, ip
	str	lr, [r5, #128]
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r7, r0, #0
	bne	.L12019
	ldr	r3, [r5, #104]
	ldr	r9, [r6]
	cmp	r3, #0
	beq	.L12354
	ldrb	r1, [r3, #24]	@ zero_extendqisi2
	ldr	ip, [r3, #28]
	str	r7, [r3, #28]
	ldr	r2, [r3, #32]
	str	r7, [r3, #32]
	mov	r0, r1
	ubfx	r1, r1, #6, #1
	mov	fp, r1, asl #7
	bfi	r0, r7, #6, #1
	strb	r0, [r3, #24]
.L12042:
	mov	r0, r9
	mov	r1, #18
	str	r2, [sp, #36]
	str	ip, [sp, #32]
	orr	fp, fp, #112
	mov	r7, #18
	bl	__memzero(PLT)
	ldr	r2, [sp, #36]
	strb	fp, [r9]
	ldr	ip, [sp, #32]
	mov	r3, r2, lsr #16
	strb	r2, [r9, #6]
	mov	r1, ip, lsr #16
	strb	ip, [r9, #13]
	mov	r0, r3, lsr #8
	mov	ip, ip, lsr #8
	strb	r3, [r9, #4]
	ubfx	r3, r2, #8, #8
	strb	r1, [r9, #2]
	mov	r2, #10
	strb	r0, [r9, #3]
	strb	r3, [r9, #5]
	strb	ip, [r9, #12]
	strb	r2, [r9, #7]
	b	.L12021
.L12099:
	ldr	r2, .L12358+148
	str	r8, [sp, #32]
	ldr	r3, [r5, #64]
.LPIC2750:
	add	r2, pc, r2
	str	r2, [sp, #36]
	b	.L12103
.L12356:
	ldr	r3, [r5, #140]
	cmp	r3, #0
	beq	.L12136
	ldr	r6, [r5, #60]
	ldr	r2, [r6, #4]
	cmp	r2, #0
	bne	.L12110
.L12137:
	cmp	r3, #16384
	movcc	r7, r3
	movcs	r7, #16384
	str	r7, [r6, #12]
	ldr	r3, [r5, #108]
	udiv	r2, r7, r3
	mls	r2, r3, r2, r7
	cmp	r2, #0
	addne	r3, r7, r3
	moveq	r3, r7
	rsbne	r3, r2, r3
	ldr	r2, [r6, #24]
	str	r3, [r2, #4]
	ldr	r8, [r5, #8]
	cmp	r8, #0
	beq	.L12355
	ldr	r0, [r8, #80]
	ldr	r9, [r8, #96]
	ldr	fp, [r6, #24]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [sp, #32]
	str	r3, [r6, #28]
	mov	r3, #2
	str	r3, [r6, #4]
	ldr	r0, [r8, #80]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r9, #8]
	mov	r0, r9
	mov	r1, fp
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L12115
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r6, #28]
	str	r2, [r6, #4]
	beq	.L12115
	cmn	r3, #95
	bne	.L12114
	ldr	r2, [fp, #4]
	cmp	r2, #0
	beq	.L12115
.L12114:
	ldr	r0, [r8, #76]
	ldr	r1, [sp, #36]
	ldr	r2, [r9, #4]
	add	r0, r0, #32
	bl	dev_warn(PLT)
.L12115:
	ldr	r3, [r5, #140]
	ldr	r2, [r6, #8]
	rsb	r7, r7, r3
	str	r2, [r5, #60]
	str	r7, [r5, #140]
.L12106:
	ldr	r3, [r5, #64]
.L12103:
	ldr	r2, [r3, #4]
	cmp	r2, #0
	beq	.L12356
	cmp	r2, #1
	bne	.L12104
#APP
@ 1683 "/home/ikke/Workspace/kernel_oneplus_onyx/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	ldr	r2, [r3, #8]
	mov	r1, #0
	str	r1, [r3, #4]
	str	r2, [r5, #64]
	ldr	r2, [r3, #24]
	ldr	r3, [r3, #12]
	ldr	r1, [r2, #48]
	cmp	r1, r3
	bcc	.L12105
	ldr	r3, [r2, #44]
	cmp	r3, #0
	beq	.L12106
.L12105:
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #112]
	mov	r6, r0
	cmp	r3, #1
	bgt	.L12108
	ldr	r2, [r5, #168]
	mov	r1, #1
	ldr	r3, [r5, #56]
	str	r1, [r5, #112]
	cmp	r2, #0
	str	r3, [r5, #116]
	bne	.L12325
	b	.L12108
.L12104:
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L12110
	ldr	r3, [r5, #140]
	cmp	r3, #0
	bne	.L12137
.L12110:
	mov	r0, r5
	bl	sleep_thread(PLT)
	cmp	r0, #0
	beq	.L12106
	b	.L11948
.L12342:
	ldr	r2, [r6, #16]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #2
	strb	r3, [r2, #26]
	ldr	r7, [r5, #8]
	cmp	r7, #0
	beq	.L12357
	ldr	r0, [r7, #80]
	ldr	r9, [r7, #92]
	ldr	fp, [r6, #16]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq(PLT)
	mov	r3, #1
	str	r8, [r6, #4]
	str	r3, [r6, #20]
	ldr	r0, [r7, #80]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r9, #8]
	mov	r0, r9
	mov	r1, fp
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L12093
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r6, #20]
	str	r2, [r6, #4]
	beq	.L12093
	cmn	r3, #95
	bne	.L12092
	ldr	r2, [fp, #4]
	cmp	r2, #0
	beq	.L12093
.L12092:
	ldr	r0, [r7, #76]
	ldr	r1, .L12358+152
	ldr	r2, [r9, #4]
	add	r0, r0, #32
.LPIC2745:
	add	r1, pc, r1
	bl	dev_warn(PLT)
.L12093:
	ldrb	r2, [r5, #144]	@ zero_extendqisi2
	ldr	r3, [r6, #8]
	tst	r2, #1
	str	r3, [r5, #60]
	beq	.L12136
.L12089:
	ldr	r6, [r5, #8]
	mov	r1, #1
	ldr	r0, [r6, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	b	.L12094
.L12095:
	mov	r0, #100
	bl	msleep_interruptible(PLT)
	cmp	r0, #0
	bne	.L11948
	ldr	r0, [r6, #92]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
.L12094:
	cmp	r0, #0
	beq	.L12136
	cmn	r0, #11
	beq	.L12095
	ldr	r3, [r6, #76]
	mov	r2, r0
	ldr	r1, .L12358+156
	add	r0, r3, #32
.LPIC2746:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	b	.L12136
.L12355:
	ldr	r2, .L12358+160
	mov	r3, #716
	ldr	r0, [r5]
	ldr	r1, .L12358+164
.LPIC2748:
	add	r2, pc, r2
	add	r2, r2, #2768
	add	r0, r0, #32
.LPIC2747:
	add	r1, pc, r1
	add	r2, r2, #8
	bl	dev_err(PLT)
	ldr	r0, .L12358+168
	movw	r1, #461
.LPIC2749:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L11948
.L12305:
	mov	r4, r10
	ldr	r5, [sp, #32]
	ldr	r10, [sp, #36]
.L12061:
	mvn	r7, #3
	b	.L12019
.L12046:
	tst	r2, #16
	movwne	r3, #21250
	mvnne	r7, #21
	movtne	r3, 5
	strne	r3, [r9, #28]
	bne	.L12021
	tst	r3, #2
	beq	.L12021
	ldr	r3, [r5, #172]
	cmp	r3, #0
	beq	.L12053
	ldr	ip, [r3, #4]
	cmp	ip, #0
	beq	.L12053
	ldr	r3, [r5, #100]
	movw	r2, #23593
	mov	r0, r5
	movt	r2, 49807
	mov	r1, r9
	rsb	r3, r3, r9
	mov	r3, r3, asr #4
	mul	r2, r2, r3
	blx	ip
	cmp	r0, #0
	blt	.L12143
	bne	.L12021
.L12053:
	mov	r0, r8
	bl	up_read(PLT)
	mov	r0, r8
	bl	down_write(PLT)
	ldr	r0, [r9]
	cmp	r0, #0
	beq	.L12052
	bl	fput(PLT)
	mov	r3, #0
	str	r3, [r9]
.L12052:
	mov	r0, r8
	bl	up_write(PLT)
	mov	r0, r8
	bl	down_read(PLT)
	ldr	r3, [r5, #172]
	cmp	r3, #0
	beq	.L12021
	ldr	ip, [r3, #8]
	cmp	ip, #0
	beq	.L12021
	ldr	r3, [r5, #100]
	movw	r2, #23593
	mov	r1, r9
	movt	r2, 49807
	mov	r0, r5
	rsb	r3, r3, r9
	mov	r3, r3, asr #4
	mul	r2, r2, r3
	blx	ip
	and	r7, r0, r0, asr #31
	b	.L12019
.L12347:
	ldr	r2, .L12358+172
	movw	r3, #1743
	ldr	r0, [r5]
	ldr	r1, .L12358+176
.LPIC2733:
	add	r2, pc, r2
	add	r2, r2, #3552
	add	r0, r0, #32
.LPIC2732:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldr	r0, .L12358+180
	movw	r1, #461
.LPIC2734:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L11948
.L12341:
	ldr	r2, .L12358+184
	movw	r3, #1758
	ldr	r0, [r5]
	ldr	r1, .L12358+188
.LPIC2736:
	add	r2, pc, r2
	add	r2, r2, #3552
	add	r0, r0, #32
.LPIC2735:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldr	r0, .L12358+192
	movw	r1, #461
.LPIC2737:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L11948
.L12351:
	mov	r4, r10
	ldr	r5, [sp, #32]
	mov	r2, #8448
	ldr	r10, [sp, #36]
	movt	r2, 5
	ldr	r3, [r9, #40]
.L12322:
	str	r2, [r9, #28]
	ldr	r2, [sp, #24]
	subs	r1, r3, #32
	ldr	r0, [sp, #28]
	mov	r2, r2, lsr r3
	rsb	r3, r3, #32
	orr	r2, r2, r0, asl r3
	movpl	r3, r0
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r9, #24]	@ zero_extendqisi2
	str	r2, [r9, #32]
	orr	r3, r3, #64
	strb	r3, [r9, #24]
	b	.L12019
.L12350:
	mov	r4, r10
	ldr	r5, [sp, #32]
	ldr	r10, [sp, #36]
	b	.L12019
.L12353:
	mov	r3, r7, lsr #2
	mov	r0, #75
	ldrb	r2, [sp, #32]	@ zero_extendqisi2
	mov	r7, #8
	add	r3, r3, #150
	udiv	r1, r3, r0
	strb	r2, [r9, #4]
	mov	r2, #60
	udiv	ip, r1, r2
	mls	r0, r0, r1, r3
	strb	r0, [r9, #7]
	mls	r2, r2, ip, r1
	strb	ip, [r9, #5]
	strb	r2, [r9, #6]
	b	.L12021
.L12354:
	ldrb	r1, [r5, #144]	@ zero_extendqisi2
	mov	ip, #9472
	mov	fp, r3
	movt	ip, 5
	mov	r2, r3
	orr	r1, r1, #16
	strb	r1, [r5, #144]
	b	.L12042
.L12143:
	mov	r7, r0
	b	.L12019
.L12349:
	ldr	r0, [r9]
	ubfx	r3, r3, #1, #1
	cmp	r0, #0
	orreq	r3, r3, #1
	cmp	r3, #0
	bne	.L12029
	mov	r1, #1
	bl	vfs_fsync(PLT)
	b	.L12029
.L12044:
	mov	r3, #9216
	mvn	r7, #21
	movt	r3, 5
	str	r3, [r9, #28]
	b	.L12021
.L12319:
	mov	r3, #335872
	mvn	r7, #21
	str	r3, [r9, #28]
	b	.L12021
.L12144:
	mvn	r7, #4
	b	.L12019
.L12343:
	ldr	r0, [r5]
	mov	r2, r10
	movw	r3, #707
	ldr	r1, .L12358+196
	add	r0, r0, #32
.LPIC2738:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldr	r0, .L12358+200
	movw	r1, #461
.LPIC2740:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L11948
.L12348:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	mov	r1, #36
	mov	r0, r9
	mov	r7, r1
	orr	r3, r3, #16
	strb	r3, [r5, #144]
	bl	__memzero(PLT)
	mov	r2, #127
	mov	r3, #31
	strb	r2, [r9]
	strb	r3, [r9, #4]
	b	.L12021
.L12034:
	mov	r3, #9216
	mvn	r7, #21
	movt	r3, 5
	str	r3, [r1, #28]
	b	.L12021
.L12357:
	ldr	r0, [r5]
	movw	r3, #707
	ldr	r1, .L12358+204
	ldr	r2, [sp, #20]
	add	r0, r0, #32
.LPIC2742:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldr	r0, .L12358+208
	movw	r1, #461
.LPIC2744:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldrb	r2, [r5, #144]	@ zero_extendqisi2
	ldr	r3, [r6, #8]
	tst	r2, #1
	str	r3, [r5, #60]
	beq	.L11948
	b	.L12089
.L12069:
	mov	r2, #4352
	mov	r4, r10
	ldr	r5, [sp, #32]
	ldr	r10, [sp, #36]
	movt	r2, 3
	ldr	r3, [r9, #40]
	b	.L12322
.L12026:
	mvn	r7, #21
	b	.L12021
.L12352:
	mov	r1, #2
	mvn	r0, #85
	strb	r7, [r9, #11]
	strb	r7, [r9, #9]
	strb	r7, [r9, #8]
	strb	r2, [r9, #13]
	mov	r2, #60
	strb	r1, [r9, #10]
	mov	r1, #75
	strb	r0, [r9, #14]
	ldr	r3, [r3, #16]
	strb	r7, [r9, #16]
	mov	r7, #20
	mov	r3, r3, lsr #2
	add	r3, r3, #150
	udiv	r0, r3, r1
	udiv	ip, r0, r2
	mls	r3, r1, r0, r3
	strb	r3, [r9, #19]
	mls	r2, r2, ip, r0
	strb	ip, [r9, #17]
	strb	r2, [r9, #18]
	b	.L12021
	.fnend
	.size	fsg_main_thread, .-fsg_main_thread
	.align	2
	.global	f_midi_bind_config
	.type	f_midi_bind_config, %function
f_midi_bind_config:
	.fnstart
	@ args = 16, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	r6, [sp, #76]
	cmp	r6, #0
	beq	.L12361
	mvn	r4, #0
	str	r4, [r6]
	str	r4, [r6, #4]
.L12361:
	ldr	ip, [sp, #64]
	cmp	ip, #16
	cmpls	r3, #16
	bhi	.L12378
	ldr	r9, .L12408
	mov	r7, r0
	mov	r5, r3
	str	r2, [sp, #12]
	str	r1, [sp, #8]
.LPIC2773:
	ldr	r9, [pc, r9]		@ tls_load_dot_plus_eight
	ldr	r0, [r9, #36]
	cmp	r0, #0
	beq	.L12379
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L12401
.L12363:
	cmp	r5, #0
	beq	.L12364
	mov	fp, #0
	add	r10, r4, #220
	mov	r8, fp
	b	.L12367
.L12403:
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	beq	.L12402
.L12365:
	strb	fp, [r0, #8]
	add	fp, fp, #1
	cmp	fp, r5
	stmia	r0, {r4, r8}
	str	r0, [r10, #4]!
	beq	.L12364
.L12367:
	ldr	r3, [r9, #24]
	movw	r1, #32976
	subs	r0, r3, #0
	bne	.L12403
	mov	r0, #16
	b	.L12365
.L12364:
	ldr	r3, [r7, #24]
	mov	r2, r4
	add	r0, r4, #292
	ldr	r1, .L12408+4
	ldr	r3, [r3]
.LPIC2755:
	add	r1, pc, r1
	str	r3, [r4, #76]
	bl	tasklet_init(PLT)
	ldr	r0, [sp, #12]
	mov	r1, #208
	bl	kstrdup(PLT)
	ldr	ip, [sp, #68]
	mov	r1, r0
	mov	r2, #0
	ldr	r3, [sp, #8]
	str	r5, [r4, #312]
	str	r1, [r4, #324]
	str	ip, [r4, #328]
	ldr	ip, [sp, #72]
	str	r3, [r4, #320]
	mov	r0, r3
	mov	r3, r2
	str	ip, [r4, #332]
	ldr	ip, [sp, #64]
	str	ip, [r4, #316]
	add	ip, sp, #16
	str	ip, [sp]
	bl	snd_card_create(PLT)
	subs	r9, r0, #0
	blt	.L12404
	ldr	r8, .L12408+8
	mov	r1, #8192
	mov	r2, r4
	ldr	r0, [sp, #16]
.LPIC2757:
	add	r8, pc, r8
	str	r0, [r4, #88]
	add	r3, r8, #2512
	bl	snd_device_new(PLT)
	subs	r9, r0, #0
	blt	.L12405
	ldr	r0, .L12408+12
	ldr	r2, .L12408+16
	ldr	r3, [sp, #16]
	ldr	r1, .L12408+20
.LPIC2759:
	add	r0, pc, r0
.LPIC2761:
	add	r2, pc, r2
	ldrd	r10, [r0]
	ldr	lr, [r0, #8]
	ldr	r0, [r2]
.LPIC2762:
	add	r1, pc, r1
	ldrh	r9, [r2, #4]
	ldrb	r2, [r2, #6]	@ zero_extendqisi2
	str	r10, [r3, #20]	@ unaligned
	str	lr, [r3, #28]	@ unaligned
	str	r0, [sp, #8]
	mov	r0, r3
	str	lr, [r3, #76]	@ unaligned
	ldr	lr, [sp, #8]
	strh	r9, [r3, #40]	@ unaligned
	strb	r2, [r3, #42]
	str	fp, [r3, #24]	@ unaligned
	str	lr, [r3, #36]	@ unaligned
	str	r10, [r3, #68]	@ unaligned
	str	fp, [r3, #72]	@ unaligned
	bl	snd_component_add(PLT)
	ldr	r0, [sp, #16]
	add	r1, sp, #20
	mov	r2, #0
	ldr	ip, [r4, #312]
	ldr	r3, [r4, #316]
	str	r1, [sp, #4]
	add	r1, r0, #68
	str	ip, [sp]
	bl	snd_rawmidi_new(PLT)
	subs	r9, r0, #0
	blt	.L12406
	ldr	r9, [sp, #20]
	add	r10, r8, #2512
	ldr	r1, [sp, #16]
	add	r10, r10, #12
	str	r9, [r4, #92]
	add	r0, r9, #84
	add	r1, r1, #36
	bl	strcpy(PLT)
	mov	r3, #7
	mov	r0, r9
	str	r4, [r9, #200]
	mov	r2, r10
	mov	r1, #0
	str	r3, [r9, #16]
	bl	snd_rawmidi_set_ops(PLT)
	ldr	r0, [sp, #20]
	add	r2, r10, #16
	mov	r1, #1
	bl	snd_rawmidi_set_ops(PLT)
	ldr	r3, [r4, #76]
	ldr	r2, [sp, #16]
	add	r3, r3, #32
	mov	r0, r2
	str	r3, [r2, #500]
	bl	snd_card_register(PLT)
	subs	r9, r0, #0
	blt	.L12407
	add	r8, r8, #2544
	mov	r0, r7
	ldr	ip, .L12408+24
	add	r8, r8, #12
	ldr	r2, .L12408+28
	mov	r1, r4
	ldr	r3, .L12408+32
	str	r8, [r4, #4]
	ldr	r7, .L12408+36
	ldr	r8, .L12408+40
.LPIC2767:
	add	ip, pc, ip
.LPIC2769:
	add	r2, pc, r2
.LPIC2770:
	add	r3, pc, r3
	str	ip, [r4]
.LPIC2771:
	add	r7, pc, r7
.LPIC2772:
	add	r8, pc, r8
	strd	r2, [r4, #24]
	str	r7, [r4, #32]
	str	r8, [r4, #40]
	bl	usb_add_function(PLT)
	subs	r9, r0, #0
	bne	.L12385
	cmp	r6, #0
	moveq	r0, r6
	beq	.L12395
	ldr	r3, [r4, #92]
	mov	r0, r9
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r6]
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #12]
	str	r3, [r6, #4]
	b	.L12395
.L12402:
	mvn	r9, #11
.L12366:
	subs	r5, fp, #1
	addcs	r3, fp, #56
	addcs	r6, r4, r3, asl #2
	bcc	.L12376
.L12375:
	sub	r5, r5, #1
	ldr	r0, [r6, #-4]!
	bl	kfree(PLT)
	cmn	r5, #1
	bne	.L12375
.L12376:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r9
.L12395:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12379:
	mov	r4, #16
	b	.L12363
.L12406:
	ldr	r0, [r4, #76]
	mov	r2, r9
	ldr	r1, .L12408+44
	add	r0, r0, #32
.LPIC2763:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L12369:
	ldr	r0, [r4, #88]
	cmp	r0, #0
	beq	.L12385
	bl	snd_card_free(PLT)
	mov	r3, #0
	str	r3, [r4, #88]
.L12385:
	mov	fp, r5
	b	.L12366
.L12401:
	mvn	r0, #11
	b	.L12395
.L12404:
	ldr	r0, [r4, #76]
	ldr	r1, .L12408+48
	add	r0, r0, #32
.LPIC2756:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L12369
.L12405:
	ldr	r0, [r4, #76]
	mov	r2, r9
	ldr	r1, .L12408+52
	add	r0, r0, #32
.LPIC2758:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L12369
.L12378:
	mvn	r0, #21
	b	.L12395
.L12407:
	ldr	r0, [r4, #76]
	ldr	r1, .L12408+56
	add	r0, r0, #32
.LPIC2766:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L12369
.L12409:
	.align	2
.L12408:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2773+8))
	.word	f_midi_in_tasklet-(.LPIC2755+8)
	.word	.LANCHOR0-(.LPIC2757+8)
	.word	.LC601-(.LPIC2759+8)
	.word	.LC602-(.LPIC2761+8)
	.word	.LC603-(.LPIC2762+8)
	.word	.LC606-(.LPIC2767+8)
	.word	f_midi_bind-(.LPIC2769+8)
	.word	f_midi_unbind-(.LPIC2770+8)
	.word	f_midi_set_alt-(.LPIC2771+8)
	.word	f_midi_disable-(.LPIC2772+8)
	.word	.LC604-(.LPIC2763+8)
	.word	.LC599-(.LPIC2756+8)
	.word	.LC600-(.LPIC2758+8)
	.word	.LC605-(.LPIC2766+8)
	.fnend
	.size	f_midi_bind_config, .-f_midi_bind_config
	.align	2
	.type	midi_function_bind_config, %function
midi_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	mov	r2, #1
	.pad #20
	sub	sp, sp, #20
	mov	lr, #1024
	mov	ip, #32
	str	r2, [sp]
	mov	r3, r2
	mov	r2, #0
	str	lr, [sp, #4]
	str	ip, [sp, #8]
	ldr	ip, [r0, #4]
	mov	r0, r1
	mvn	r1, #0
	str	ip, [sp, #12]
	bl	f_midi_bind_config(PLT)
	add	sp, sp, #20
	@ sp needed
	ldr	pc, [sp], #4
	.fnend
	.size	midi_function_bind_config, .-midi_function_bind_config
	.align	2
	.global	usb_diag_open
	.type	usb_diag_open, %function
usb_diag_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L12425
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r8, r1
	mov	r9, r2
	str	r10, [sp, #24]
.LPIC2774:
	add	r3, pc, r3
	str	lr, [sp, #28]
	sub	r0, r3, #652
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L12425+4
	mov	r10, r0
.LPIC2775:
	add	r3, pc, r3
	ldr	r4, [r3]
	mov	r5, r4
	sub	r4, r4, #4
	cmp	r5, r3
	beq	.L12413
	ldr	r7, .L12425+8
.LPIC2777:
	add	r7, pc, r7
	b	.L12415
.L12424:
	ldr	r4, [r4, #4]
	mov	r5, r4
	sub	r4, r4, #4
	cmp	r5, r7
	beq	.L12413
.L12415:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L12424
	ldr	r0, .L12425+12
	mov	r1, r10
.LPIC2785:
	add	r0, pc, r0
	sub	r0, r0, #652
	bl	_raw_spin_unlock_irqrestore(PLT)
.L12418:
	ldr	r7, .L12425+16
	str	r6, [r4]
	str	r8, [r4, #16]
	str	r9, [r4, #12]
.LPIC2778:
	add	r7, pc, r7
	sub	r7, r7, #652
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L12425+20
	mov	r1, r0
	mov	r0, r7
.LPIC2779:
	add	r3, pc, r3
	ldr	r2, [r3, #4]
	str	r5, [r3, #4]
	str	r3, [r4, #4]
	str	r2, [r4, #8]
	str	r5, [r2]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
.L12421:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12413:
	ldr	r0, .L12425+24
	mov	r1, r10
.LPIC2783:
	add	r0, pc, r0
	sub	r0, r0, #652
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L12425+28
.LPIC2786:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r5, #20
	moveq	r4, #16
	beq	.L12418
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	mvneq	r0, #11
	beq	.L12421
	add	r5, r4, #4
	b	.L12418
.L12426:
	.align	2
.L12425:
	.word	.LANCHOR4-(.LPIC2774+8)
	.word	.LANCHOR0-(.LPIC2775+8)
	.word	.LANCHOR0-(.LPIC2777+8)
	.word	.LANCHOR4-(.LPIC2785+8)
	.word	.LANCHOR4-(.LPIC2778+8)
	.word	.LANCHOR0-(.LPIC2779+8)
	.word	.LANCHOR4-(.LPIC2783+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2786+8))
	.fnend
	.size	usb_diag_open, .-usb_diag_open
	.align	2
	.global	usb_diag_close
	.type	usb_diag_close, %function
usb_diag_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L12434
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC2787:
	add	r4, pc, r4
	sub	r0, r4, #652
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #8]
	mov	r6, r0
	mov	r0, #0
	ldr	r1, [r5, #4]
	mov	r2, r4
	mov	lr, #256
	str	r0, [r5, #16]
	mov	ip, #512
	str	r0, [r5, #12]
	str	r3, [r1, #4]
	str	r1, [r3]
	ldr	r3, [r2, #-628]!
	str	lr, [r5, #4]
	str	ip, [r5, #8]
	cmp	r3, r2
	sub	r3, r3, #132
	beq	.L12431
.L12430:
	ldr	r4, [r3, #116]
	cmp	r4, r5
	streq	r0, [r3, #116]
	ldr	r3, [r3, #132]
	cmp	r3, r2
	sub	r3, r3, #132
	bne	.L12430
.L12431:
	mov	r0, r5
	bl	kfree(PLT)
	ldr	r0, .L12434+4
	mov	r1, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
.LPIC2790:
	add	r0, pc, r0
	sub	r0, r0, #652
	b	_raw_spin_unlock_irqrestore(PLT)
.L12435:
	.align	2
.L12434:
	.word	.LANCHOR4-(.LPIC2787+8)
	.word	.LANCHOR4-(.LPIC2790+8)
	.fnend
	.size	usb_diag_close, .-usb_diag_close
	.align	2
	.global	usb_diag_alloc_req
	.type	usb_diag_alloc_req, %function
usb_diag_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	fp, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	cmp	fp, #0
	beq	.L12455
	add	r3, fp, #100
	mov	r4, fp
	mov	r0, r3
	mov	r9, r2
	mov	r6, r1
	str	r3, [sp]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #92]!
	str	r0, [sp, #4]
	cmp	r2, r4
	ldr	r8, [r2]
	movne	r7, #256
	movne	r5, #512
	bne	.L12441
	b	.L12442
.L12456:
	mov	r8, r1
.L12441:
	ldr	r0, [r2, #4]
	sub	r1, r2, #36
	str	r0, [r8, #4]
	str	r8, [r0]
	str	r7, [r2]
	str	r5, [r2, #4]
	ldr	r0, [fp, #80]
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #12]
	blx	r2
	cmp	r4, r8
	ldr	r1, [r8]
	mov	r2, r8
	bne	.L12456
.L12442:
	mov	r5, fp
	ldr	r0, [r5, #84]!
	cmp	r0, r5
	ldr	r10, [r0]
	movne	r8, #256
	movne	r7, #512
	bne	.L12445
	b	.L12440
.L12458:
	mov	r10, r1
.L12445:
	ldr	ip, [r0, #4]
	sub	r1, r0, #36
	str	ip, [r10, #4]
	str	r10, [ip]
	str	r8, [r0]
	str	r7, [r0, #4]
	ldr	r0, [fp, #76]
	ldr	ip, [r0, #8]
	ldr	ip, [ip, #12]
	blx	ip
	cmp	r5, r10
	ldr	r1, [r10]
	mov	r0, r10
	bne	.L12458
.L12440:
	cmp	r6, #0
	ble	.L12444
	ldr	r7, .L12473
	mov	r8, #0
.LPIC2792:
	add	r7, pc, r7
	b	.L12443
.L12471:
	str	r7, [r0, #28]
	cmp	r8, r6
	ldr	r1, [fp, #96]
	str	r2, [fp, #96]
	str	r4, [r0, #36]
	str	r1, [r0, #40]
	str	r2, [r1]
	beq	.L12444
.L12443:
	ldr	r0, [fp, #80]
	mov	r1, #32
	add	r8, r8, #1
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #8]
	blx	r2
	cmp	r0, #0
	add	r2, r0, #36
	bne	.L12471
.L12448:
	ldr	r2, [fp, #92]
	cmp	r2, r4
	ldr	r6, [r2]
	movne	r8, #256
	movne	r7, #512
	bne	.L12452
	b	.L12453
.L12460:
	mov	r6, r1
.L12452:
	ldr	r0, [r2, #4]
	sub	r1, r2, #36
	str	r0, [r6, #4]
	str	r6, [r0]
	str	r8, [r2]
	str	r7, [r2, #4]
	ldr	r0, [fp, #80]
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #12]
	blx	r2
	cmp	r4, r6
	ldr	r1, [r6]
	mov	r2, r6
	bne	.L12460
.L12453:
	ldr	r2, [fp, #84]
	cmp	r2, r5
	ldr	r4, [r2]
	movne	r7, #256
	movne	r6, #512
	bne	.L12454
	b	.L12451
.L12461:
	mov	r4, r1
.L12454:
	ldr	r0, [r2, #4]
	sub	r1, r2, #36
	str	r0, [r4, #4]
	str	r4, [r0]
	str	r7, [r2]
	str	r6, [r2, #4]
	ldr	r0, [fp, #76]
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #12]
	blx	r2
	cmp	r5, r4
	ldr	r1, [r4]
	mov	r2, r4
	bne	.L12461
.L12451:
	ldrd	r0, [sp]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #11
.L12437:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12444:
	cmp	r9, #0
	ble	.L12447
	ldr	r6, .L12473+4
	mov	r7, #0
.LPIC2793:
	add	r6, pc, r6
	b	.L12446
.L12472:
	str	r6, [r0, #28]
	cmp	r7, r9
	ldr	r1, [fp, #88]
	str	r2, [fp, #88]
	str	r5, [r0, #36]
	str	r1, [r0, #40]
	str	r2, [r1]
	beq	.L12447
.L12446:
	ldr	r0, [fp, #76]
	mov	r1, #32
	add	r7, r7, #1
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #8]
	blx	r2
	cmp	r0, #0
	add	r2, r0, #36
	bne	.L12472
	b	.L12448
.L12447:
	ldrd	r0, [sp]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L12437
.L12455:
	mvn	r0, #18
	b	.L12437
.L12474:
	.align	2
.L12473:
	.word	diag_write_complete-(.LPIC2792+8)
	.word	diag_read_complete-(.LPIC2793+8)
	.fnend
	.size	usb_diag_alloc_req, .-usb_diag_alloc_req
	.align	2
	.global	usb_diag_read
	.type	usb_diag_read, %function
usb_diag_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	cmp	r5, #0
	beq	.L12479
	add	r7, r5, #100
	mov	r6, r1
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #104]
	mov	r1, r0
	cmp	r3, #0
	beq	.L12485
	ldr	r4, [r5, #84]
	add	r8, r5, #84
	cmp	r4, r8
	beq	.L12486
	ldr	r3, [r4, #4]
	mov	lr, #256
	mov	ip, #512
	ldr	r2, [r4]
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4]
	str	ip, [r4, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r6]
	sub	r1, r4, #36
	mov	r2, #32
	str	r3, [r4, #-36]
	ldr	r3, [r6, #4]
	str	r6, [r4, #-4]
	str	r3, [r4, #-32]
	ldr	r0, [r5, #76]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L12487
.L12476:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12487:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #88]
	mov	r1, r0
	str	r4, [r5, #88]
	mov	r0, r7
	str	r8, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	ldr	r4, .L12488
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L12488+4
.LPIC2797:
	add	r4, pc, r4
	add	r4, r4, #3568
.LPIC2796:
	add	r0, pc, r0
	mov	r1, r4
	add	r0, r0, #2480
	add	r0, r0, #12
	bl	___ratelimit(PLT)
	cmp	r0, #0
	mvneq	r0, #4
	beq	.L12476
	ldr	r3, [r5, #108]
	mov	r2, r4
	ldr	r1, .L12488+8
	ldr	r0, [r3]
.LPIC2798:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	mvn	r0, #4
	b	.L12476
.L12479:
	mvn	r0, #18
	b	.L12476
.L12485:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #4
	b	.L12476
.L12486:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r5, #108]
	ldr	r2, .L12488+12
	ldr	r1, .L12488+16
	ldr	r0, [r3]
.LPIC2795:
	add	r2, pc, r2
.LPIC2794:
	add	r1, pc, r1
	add	r2, r2, #3568
	add	r0, r0, #32
	bl	dev_err(PLT)
	mvn	r0, #10
	b	.L12476
.L12489:
	.align	2
.L12488:
	.word	.LANCHOR3-(.LPIC2797+8)
	.word	.LANCHOR1-(.LPIC2796+8)
	.word	.LC608-(.LPIC2798+8)
	.word	.LANCHOR3-(.LPIC2795+8)
	.word	.LC607-(.LPIC2794+8)
	.fnend
	.size	usb_diag_read, .-usb_diag_read
	.align	2
	.global	usb_diag_write
	.type	usb_diag_write, %function
usb_diag_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L12496
	add	r7, r4, #100
	mov	r6, r1
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #104]
	mov	r1, r0
	cmp	r3, #0
	beq	.L12501
	ldr	r5, [r4, #92]
	add	r8, r4, #92
	cmp	r5, r8
	beq	.L12502
	ldr	r3, [r5, #4]
	mov	lr, #256
	mov	ip, #512
	ldr	r2, [r5]
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r5]
	str	ip, [r5, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r6]
	sub	r1, r5, #36
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r6, [r5, #-4]
	str	r3, [r5, #-32]
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L12503
	ldr	r2, [r4, #120]
	ldr	r3, [r4, #128]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r4, #120]
	str	r3, [r4, #128]
.L12491:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12496:
	mvn	r0, #18
	b	.L12491
.L12501:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #4
	b	.L12491
.L12503:
	mov	r0, r7
	ldr	r6, .L12504
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r9, r0
	ldr	r0, .L12504+4
	ldr	r3, [r4, #96]
	str	r5, [r4, #96]
.LPIC2803:
	add	r6, pc, r6
	str	r8, [r5]
	add	r6, r6, #3584
.LPIC2802:
	add	r0, pc, r0
	mov	r1, r6
	add	r0, r0, #2512
	str	r3, [r5, #4]
	add	r0, r0, #4
	str	r5, [r3]
	bl	___ratelimit(PLT)
	cmp	r0, #0
	beq	.L12495
	ldr	r3, [r4, #108]
	mov	r2, r6
	ldr	r1, .L12504+8
	ldr	r0, [r3]
.LPIC2804:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
.L12495:
	mov	r0, r7
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #4
	b	.L12491
.L12502:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #108]
	ldr	r2, .L12504+12
	ldr	r1, .L12504+16
	ldr	r0, [r3]
.LPIC2801:
	add	r2, pc, r2
.LPIC2800:
	add	r1, pc, r1
	add	r2, r2, #3584
	add	r0, r0, #32
	bl	dev_err(PLT)
	mvn	r0, #10
	b	.L12491
.L12505:
	.align	2
.L12504:
	.word	.LANCHOR3-(.LPIC2803+8)
	.word	.LANCHOR1-(.LPIC2802+8)
	.word	.LC608-(.LPIC2804+8)
	.word	.LANCHOR3-(.LPIC2801+8)
	.word	.LC607-(.LPIC2800+8)
	.fnend
	.size	usb_diag_write, .-usb_diag_write
	.align	2
	.global	diag_function_add
	.type	diag_function_add, %function
diag_function_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L12526
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC2806:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r4, [r3]
	cmp	r3, r4
	sub	r4, r4, #4
	beq	.L12507
	ldr	r8, .L12526+4
	mov	r5, r1
	mov	r7, r2
.LPIC2808:
	add	r8, pc, r8
	b	.L12509
.L12522:
	ldr	r4, [r4, #4]
	cmp	r8, r4
	sub	r4, r4, #4
	beq	.L12507
.L12509:
	mov	r0, r5
	ldr	r1, [r4]
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L12522
	ldr	r3, .L12526+8
.LPIC2821:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L12523
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r5, r0, #0
	beq	.L12524
.L12511:
	ldr	lr, .L12526+12
	add	ip, r5, #132
	add	r2, r5, #84
	ldr	r3, .L12526+16
	mov	fp, #0
	mov	r0, r6
	ldr	r8, .L12526+20
	mov	r1, r5
.LPIC2809:
	add	lr, pc, lr
	ldr	r10, [lr, #-624]
	sub	r9, lr, #628
.LPIC2812:
	add	r3, pc, r3
	str	ip, [lr, #-624]
	ldr	lr, .L12526+24
.LPIC2814:
	add	r8, pc, r8
	str	r9, [r5, #132]
	add	r9, r3, #1024
	add	r3, r3, #1040
	add	r3, r3, #8
	add	r9, r9, #8
	str	r10, [r5, #136]
	str	ip, [r10]
	ldr	ip, .L12526+28
.LPIC2815:
	add	lr, pc, lr
	str	r7, [r5, #112]
	ldr	r7, .L12526+32
	str	r4, [r5, #116]
	ldr	r10, [r6, #24]
.LPIC2816:
	add	ip, pc, ip
.LPIC2817:
	add	r7, pc, r7
	str	r10, [r5, #108]
	ldr	r4, [r4]
	str	r2, [r5, #84]
	str	r2, [r5, #88]
	add	r2, r5, #92
	str	r9, [r5, #8]
	str	r4, [r5]
	str	r3, [r5, #12]
	str	r8, [r5, #24]
	str	lr, [r5, #28]
	str	ip, [r5, #32]
	str	r7, [r5, #40]
	str	fp, [r5, #100]
	str	r2, [r5, #92]
	str	r2, [r5, #96]
	bl	usb_add_function(PLT)
	subs	r4, r0, #0
	moveq	r0, r4
	bne	.L12525
.L12517:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12507:
	ldr	r3, [r6, #24]
	ldr	r1, .L12526+36
	ldr	r0, [r3]
.LPIC2819:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	mvn	r0, #18
	b	.L12517
.L12523:
	mov	r5, #16
	b	.L12511
.L12525:
	ldr	r3, [r6, #24]
	ldr	r1, .L12526+40
	ldr	r0, [r3]
.LPIC2818:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	_dev_info(PLT)
	ldr	r3, [r5, #136]
	mov	ip, #256
	mov	r1, #512
	ldr	r2, [r5, #132]
	mov	r0, r5
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r5, #132]
	str	r1, [r5, #136]
	bl	kfree(PLT)
	mov	r0, r4
	b	.L12517
.L12524:
	mvn	r0, #11
	b	.L12517
.L12527:
	.align	2
.L12526:
	.word	.LANCHOR0-(.LPIC2806+8)
	.word	.LANCHOR0-(.LPIC2808+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2821+8))
	.word	.LANCHOR4-(.LPIC2809+8)
	.word	.LANCHOR0-(.LPIC2812+8)
	.word	diag_function_bind-(.LPIC2814+8)
	.word	diag_function_unbind-(.LPIC2815+8)
	.word	diag_function_set_alt-(.LPIC2816+8)
	.word	diag_function_disable-(.LPIC2817+8)
	.word	.LC610-(.LPIC2819+8)
	.word	.LC609-(.LPIC2818+8)
	.fnend
	.size	diag_function_add, .-diag_function_add
	.align	2
	.type	diag_function_bind_config, %function
diag_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r2, .L12552
	strd	r10, [sp, #24]
	ldr	r10, .L12552+4
	strd	r8, [sp, #16]
	mov	r8, r1
	strd	r6, [sp, #8]
.LPIC2825:
	add	r2, pc, r2
	str	lr, [sp, #32]
	.pad #60
	sub	sp, sp, #60
.LPIC2832:
	ldr	r10, [pc, r10]		@ tls_load_dot_plus_eight
	ldr	r3, [r2]
	ldr	r1, [r1, #24]
	ldr	r0, [r10]
	cmp	r2, r3
	sub	r5, r3, #168
	str	r0, [sp, #52]
	bne	.L12532
	b	.L12529
.L12549:
	ldr	r3, [r5, #168]
	cmp	r2, r3
	sub	r5, r3, #168
	beq	.L12529
.L12532:
	ldr	r3, [r3, #-160]
	cmp	r1, r3
	bne	.L12549
.L12529:
	ldr	r3, .L12552+8
	add	fp, sp, #20
	mov	r2, #32
	ldr	r1, .L12552+12
	mov	r0, fp
	mov	r4, #0
	ldr	r6, .L12552+16
	mvn	r7, #0
	ldr	r9, .L12552+20
.LPIC2824:
	add	r3, pc, r3
.LPIC2828:
	add	r1, pc, r1
	str	r3, [sp, #4]
	ldr	r3, .L12552+24
	sub	r1, r1, #544
.LPIC2829:
	add	r6, pc, r6
.LPIC2823:
	add	r9, pc, r9
.LPIC2830:
	add	r3, pc, r3
	str	r3, [sp, #8]
	bl	strlcpy(PLT)
	mov	r0, fp
	bl	strim(PLT)
	ldr	r3, .L12552+28
	str	r0, [sp, #16]
.LPIC2831:
	add	r3, pc, r3
	add	r3, r3, #3600
	str	r3, [sp, #12]
	b	.L12533
.L12536:
	add	r0, sp, #16
	mov	r1, r6
	bl	strsep(PLT)
	cmp	r4, #0
	mov	fp, r0
	movne	r2, #0
	bne	.L12534
	ldr	r2, [r5, #52]
	cmp	r2, #0
	beq	.L12539
	ldr	r2, [r2]
	cmp	r2, #0
	moveq	r2, r9
.L12534:
	cmp	fp, #0
	beq	.L12535
	mov	r0, r8
	mov	r1, fp
	bl	diag_function_add(PLT)
	subs	r7, r0, #0
	bne	.L12550
.L12535:
	ldr	r0, [sp, #16]
	add	r4, r4, #1
.L12533:
	cmp	r0, #0
	bne	.L12536
	ldr	r2, [sp, #52]
	mov	r0, r7
	ldr	r3, [r10]
	cmp	r2, r3
	bne	.L12551
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12539:
	ldr	r2, [sp, #4]
	b	.L12534
.L12550:
	mov	r2, fp
	ldrd	r0, [sp, #8]
	bl	printk(PLT)
	b	.L12535
.L12551:
	bl	__stack_chk_fail(PLT)
.L12553:
	.align	2
.L12552:
	.word	.LANCHOR2-(.LPIC2825+8)
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC2832+8))
	.word	usb_diag_update_pid_and_serial_num-(.LPIC2824+8)
	.word	.LANCHOR4-(.LPIC2828+8)
	.word	.LC241-(.LPIC2829+8)
	.word	usb_diag_update_pid_and_serial_num-(.LPIC2823+8)
	.word	.LC611-(.LPIC2830+8)
	.word	.LANCHOR3-(.LPIC2831+8)
	.fnend
	.size	diag_function_bind_config, .-diag_function_bind_config
	.align	2
	.global	send_sps_req
	.type	send_sps_req, %function
send_sps_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldr	r3, [r0, #8]
	ldr	r2, [r6, #76]
	ldr	r3, [r3, #8]
	ldr	r7, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L12563
	ldr	r0, .L12566
	ldr	r1, [r7, #28]
.LPIC2834:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L12564
	ldr	r3, .L12566+4
	mov	r2, #0
.LPIC2836:
	add	r3, pc, r3
	ldr	r3, [r3, #3804]
	bic	r3, r3, #65536
	bic	r3, r3, #96
	orr	r3, r3, #65536
	orr	r3, r3, #32
.L12558:
	str	r2, [r5, #4]
	mov	r1, r5
	mov	r0, r4
	str	r3, [r5, #52]
	mov	r2, #32
	str	r5, [r6, #88]
	ldr	r3, [r4, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L12565
.L12556:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12564:
	ldr	r3, .L12566+8
	mov	r2, #32768
.LPIC2835:
	add	r3, pc, r3
	ldr	r3, [r3, #3804]
	orr	r3, r3, #1312
	b	.L12558
.L12565:
	ldr	r0, .L12566+12
.LPIC2837:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #4
	b	.L12556
.L12563:
	ldr	r0, .L12566+16
.LPIC2833:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #11
	b	.L12556
.L12567:
	.align	2
.L12566:
	.word	.LC328-(.LPIC2834+8)
	.word	.LANCHOR4-(.LPIC2836+8)
	.word	.LANCHOR4-(.LPIC2835+8)
	.word	.LC613-(.LPIC2837+8)
	.word	.LC612-(.LPIC2833+8)
	.fnend
	.size	send_sps_req, .-send_sps_req
	.align	2
	.global	init_data
	.type	init_data, %function
init_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	ldr	r0, .L12576
	str	lr, [sp, #4]
	ldr	r3, [r4]
.LPIC2838:
	add	r0, pc, r0
	ldr	r3, [r3, #76]
	ldr	r3, [r3]
	ldr	r1, [r3, #28]
	bl	strcmp(PLT)
	cmp	r0, #0
	movne	r4, #0
	beq	.L12575
.L12569:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L12575:
	mov	r0, r4
	bl	msm_ep_config(PLT)
	subs	r4, r0, #0
	beq	.L12569
	ldr	r0, .L12576+4
.LPIC2839:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L12569
.L12577:
	.align	2
.L12576:
	.word	.LC328-(.LPIC2838+8)
	.word	.LC614-(.LPIC2839+8)
	.fnend
	.size	init_data, .-init_data
	.align	2
	.type	usb_qdss_connect_work, %function
usb_qdss_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r0, #-48]
	bl	init_data(PLT)
	subs	r3, r0, #0
	bne	.L12593
	ldr	r0, [r4, #-72]
	mov	r1, #1
	ldr	r5, .L12597
	mov	r2, r1
	ldr	r8, [r4, #-48]
	ldr	r6, [r0]
.LPIC2841:
	add	r5, pc, r5
	ldr	r0, [r6, #28]
	bl	usb_bam_get_connection_idx(PLT)
	uxtb	r9, r0
	add	r1, r5, #3792
	add	r1, r1, #12
	mov	r0, r9
	bl	usb_bam_connect(PLT)
	ldr	r3, .L12597+4
	mov	r7, r0
.LPIC2855:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L12580
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r5, #3816]
	beq	.L12594
.L12581:
	ldr	r5, .L12597+8
	ldr	r0, [r6, #28]
	bl	usb_bam_set_qdss_core(PLT)
	mov	r1, #0
	mov	r0, r9
.LPIC2845:
	add	r5, pc, r5
	ldr	ip, [r5, #3816]
	add	r2, r5, #3792
	add	r3, r5, #3808
	add	r2, r2, #12
	str	r1, [sp]
	add	r1, r2, #8
	str	ip, [sp, #4]
	bl	get_bam2bam_connection_info(PLT)
	ldr	r0, .L12597+12
	ldr	r1, [r6, #28]
.LPIC2849:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L12595
.L12583:
	cmp	r7, #0
	bne	.L12582
	ldr	ip, [r4, #-32]
	cmp	ip, #0
	beq	.L12585
	ldr	r0, [r4, #-28]
	mov	r1, r7
	mov	r2, r7
	sub	r3, r4, #44
	blx	ip
.L12585:
	ldr	r0, [r4, #-48]
	bl	send_sps_req(PLT)
	cmp	r0, #0
	bne	.L12596
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L12580:
	mov	r3, #16
	str	r3, [r5, #3816]
	b	.L12581
.L12595:
	ldr	r2, [r5, #3816]
	mov	r0, r8
	ldrb	r3, [r5, #3804]	@ zero_extendqisi2
	ldmib	r2, {r1, r2}
	bl	msm_data_fifo_config(PLT)
	b	.L12583
.L12593:
	ldr	r0, .L12597+16
.LPIC2840:
	add	r0, pc, r0
.L12592:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk(PLT)
.L12594:
	ldr	r0, .L12597+20
.LPIC2844:
	add	r0, pc, r0
	bl	printk(PLT)
.L12582:
	ldr	r0, .L12597+24
.LPIC2853:
	add	r0, pc, r0
	b	.L12592
.L12596:
	ldr	r0, .L12597+28
.LPIC2854:
	add	r0, pc, r0
	b	.L12592
.L12598:
	.align	2
.L12597:
	.word	.LANCHOR4-(.LPIC2841+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2855+8))
	.word	.LANCHOR4-(.LPIC2845+8)
	.word	.LC328-(.LPIC2849+8)
	.word	.LC615-(.LPIC2840+8)
	.word	.LC616-(.LPIC2844+8)
	.word	.LC617-(.LPIC2853+8)
	.word	.LC618-(.LPIC2854+8)
	.fnend
	.size	usb_qdss_connect_work, .-usb_qdss_connect_work
	.align	2
	.global	uninit_data
	.type	uninit_data, %function
uninit_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	ldr	r0, .L12607
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r3, [r4]
.LPIC2856:
	add	r0, pc, r0
	ldr	r3, [r3, #76]
	ldr	r5, [r3]
	bl	printk(PLT)
	ldr	r0, .L12607+4
	ldr	r1, [r5, #28]
.LPIC2857:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movne	r4, #0
	beq	.L12606
.L12600:
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12606:
	mov	r0, r4
	bl	msm_ep_unconfig(PLT)
	subs	r4, r0, #0
	beq	.L12600
	ldr	r0, .L12607+8
.LPIC2858:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L12600
.L12608:
	.align	2
.L12607:
	.word	.LC619-(.LPIC2856+8)
	.word	.LC328-(.LPIC2857+8)
	.word	.LC620-(.LPIC2858+8)
	.fnend
	.size	uninit_data, .-uninit_data
	.align	2
	.type	usb_qdss_disconnect_work, %function
usb_qdss_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-64]
	bl	uninit_data(PLT)
	cmp	r0, #0
	bne	.L12621
.L12610:
	ldr	ip, [r4, #-48]
	cmp	ip, #0
	beq	.L12609
	mov	r2, #0
	ldr	r0, [r4, #-44]
	mov	r1, #1
	mov	r3, r2
	blx	ip
	ldr	r0, [r4, #-88]
	mov	r1, #1
	mov	r3, #0
	mov	r2, r1
	ldr	r0, [r0]
	ldr	r0, [r0, #28]
	bl	usb_bam_get_connection_idx(PLT)
	ldr	r3, .L12623
	mov	r4, r0
.LPIC2861:
	add	r3, pc, r3
	ldr	r0, [r3, #3816]
	bl	kfree(PLT)
	uxtb	r0, r4
	bl	usb_bam_disconnect_pipe(PLT)
	cmp	r0, #0
	bne	.L12622
.L12609:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L12621:
	ldr	r1, .L12623+4
	ldr	r0, .L12623+8
.LPIC2860:
	add	r1, pc, r1
	add	r1, r1, #3616
.LPIC2859:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L12610
.L12622:
	ldr	r0, .L12623+12
.LPIC2862:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L12623+16
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC2863:
	add	r0, pc, r0
	b	printk(PLT)
.L12624:
	.align	2
.L12623:
	.word	.LANCHOR4-(.LPIC2861+8)
	.word	.LANCHOR3-(.LPIC2860+8)
	.word	.LC621-(.LPIC2859+8)
	.word	.LC622-(.LPIC2862+8)
	.word	.LC623-(.LPIC2863+8)
	.fnend
	.size	usb_qdss_disconnect_work, .-usb_qdss_disconnect_work
	.align	2
	.global	usb_qdss_free_req
	.type	usb_qdss_free_req, %function
usb_qdss_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	cmp	r5, #0
	beq	.L12637
	mov	r6, r5
	ldr	r3, [r6, #140]!
	cmp	r3, r6
	ldr	r4, [r3]
	movne	r8, #256
	movne	r7, #512
	bne	.L12630
	b	.L12631
.L12634:
	mov	r4, r2
.L12630:
	ldr	r2, [r3, #4]
	sub	r1, r3, #36
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r5, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r6, r4
	ldr	r2, [r4]
	mov	r3, r4
	bne	.L12634
.L12631:
	mov	r6, r5
	ldr	r3, [r6, #132]!
	cmp	r3, r6
	ldr	r4, [r3]
	movne	r8, #256
	movne	r7, #512
	bne	.L12633
	b	.L12625
.L12635:
	mov	r4, r2
.L12633:
	ldr	r2, [r3, #4]
	sub	r1, r3, #36
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r6, r4
	ldr	r2, [r4]
	mov	r3, r4
	bne	.L12635
.L12625:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12637:
	ldr	r0, .L12638
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC2864:
	add	r0, pc, r0
	add	sp, sp, #24
	b	printk(PLT)
.L12639:
	.align	2
.L12638:
	.word	.LC624-(.LPIC2864+8)
	.fnend
	.size	usb_qdss_free_req, .-usb_qdss_free_req
	.align	2
	.global	usb_qdss_alloc_req
	.type	usb_qdss_alloc_req, %function
usb_qdss_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r7, r2
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	cmpne	r2, #0
	movle	r5, #1
	movgt	r5, #0
	cmp	r1, #0
	orrle	r5, r5, #1
	cmp	r5, #0
	bne	.L12651
	ldr	r10, .L12654
	add	r9, r4, #140
.LPIC2867:
	add	r10, pc, r10
.L12641:
	ldr	r0, [r4, #96]
	mov	r1, #32
	add	r5, r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	beq	.L12652
	str	r10, [r0, #28]
	ldr	r2, [r4, #144]
	cmp	r6, r5
	str	r3, [r4, #144]
	str	r9, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	bgt	.L12641
	ldr	r9, .L12654+4
	mov	r5, #0
	add	r6, r4, #132
.LPIC2869:
	add	r9, pc, r9
.L12646:
	ldr	r0, [r4, #92]
	mov	r1, #32
	add	r5, r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	beq	.L12653
	str	r9, [r0, #28]
	ldr	r2, [r4, #136]
	cmp	r7, r5
	str	r3, [r4, #136]
	str	r6, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	bgt	.L12646
	mov	r0, #0
.L12642:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12652:
	ldr	r0, .L12654+8
.LPIC2866:
	add	r0, pc, r0
	bl	printk(PLT)
.L12644:
	mov	r0, r8
	bl	usb_qdss_free_req(PLT)
	mvn	r0, #11
	b	.L12642
.L12653:
	ldr	r0, .L12654+12
.LPIC2868:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L12644
.L12651:
	ldr	r0, .L12654+16
.LPIC2865:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #18
	b	.L12642
.L12655:
	.align	2
.L12654:
	.word	qdss_ctrl_write_complete-(.LPIC2867+8)
	.word	qdss_ctrl_read_complete-(.LPIC2869+8)
	.word	.LC626-(.LPIC2866+8)
	.word	.LC627-(.LPIC2868+8)
	.word	.LC625-(.LPIC2865+8)
	.fnend
	.size	usb_qdss_alloc_req, .-usb_qdss_alloc_req
	.align	2
	.global	usb_qdss_ctrl_read
	.type	usb_qdss_ctrl_read, %function
usb_qdss_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	cmp	r5, #0
	beq	.L12660
	add	r7, r5, #180
	mov	r6, r1
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #84]
	mov	r1, r0
	cmp	r3, #0
	beq	.L12665
	ldr	r4, [r5, #132]
	add	r8, r5, #132
	cmp	r4, r8
	beq	.L12666
	ldr	r3, [r4, #4]
	mov	lr, #256
	mov	ip, #512
	ldr	r2, [r4]
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4]
	str	ip, [r4, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r6]
	sub	r1, r4, #36
	mov	r2, #32
	str	r3, [r4, #-36]
	ldr	r3, [r6, #4]
	str	r6, [r4, #-4]
	str	r3, [r4, #-32]
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L12667
.L12657:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12660:
	mvn	r0, #18
	b	.L12657
.L12665:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #4
	b	.L12657
.L12667:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #136]
	mov	r1, r0
	str	r4, [r5, #136]
	mov	r0, r7
	str	r8, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L12668
.LPIC2871:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #4
	b	.L12657
.L12666:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L12668+4
.LPIC2870:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #10
	b	.L12657
.L12669:
	.align	2
.L12668:
	.word	.LC629-(.LPIC2871+8)
	.word	.LC628-(.LPIC2870+8)
	.fnend
	.size	usb_qdss_ctrl_read, .-usb_qdss_ctrl_read
	.align	2
	.global	usb_qdss_ctrl_write
	.type	usb_qdss_ctrl_write, %function
usb_qdss_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	cmp	r5, #0
	beq	.L12674
	add	r7, r5, #180
	mov	r6, r1
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #84]
	mov	r1, r0
	cmp	r3, #0
	beq	.L12679
	ldr	r4, [r5, #140]
	add	r8, r5, #140
	cmp	r4, r8
	beq	.L12680
	ldr	r3, [r4, #4]
	mov	lr, #256
	mov	ip, #512
	ldr	r2, [r4]
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4]
	str	ip, [r4, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r6]
	sub	r1, r4, #36
	mov	r2, #32
	str	r3, [r4, #-36]
	ldr	r3, [r6, #4]
	str	r6, [r4, #-4]
	str	r3, [r4, #-32]
	ldr	r0, [r5, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L12681
.L12671:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12674:
	mvn	r0, #18
	b	.L12671
.L12679:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #4
	b	.L12671
.L12681:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #144]
	mov	r1, r0
	str	r4, [r5, #144]
	mov	r0, r7
	str	r8, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L12682
.LPIC2873:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #4
	b	.L12671
.L12680:
	str	r0, [sp, #4]
	ldr	r0, .L12682+4
.LPIC2872:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r1, [sp, #4]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #10
	b	.L12671
.L12683:
	.align	2
.L12682:
	.word	.LC629-(.LPIC2873+8)
	.word	.LC630-(.LPIC2872+8)
	.fnend
	.size	usb_qdss_ctrl_write, .-usb_qdss_ctrl_write
	.align	2
	.global	usb_qdss_open
	.type	usb_qdss_open, %function
usb_qdss_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r8, [sp, #16]
	subs	r8, r2, #0
	strd	r6, [sp, #8]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	beq	.L12701
	mov	r6, r0
	ldr	r0, .L12707
	mov	r9, r1
.LPIC2875:
	add	r0, pc, r0
	sub	r0, r0, #664
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	ldr	r0, .L12707+4
.LPIC2876:
	add	r0, pc, r0
	ldr	r4, [r0, #24]!
	cmp	r4, r0
	sub	r4, r4, #4
	beq	.L12687
	ldr	r5, .L12707+8
.LPIC2878:
	add	r5, pc, r5
	add	r5, r5, #24
	b	.L12689
.L12702:
	ldr	r4, [r4, #4]
	cmp	r4, r5
	sub	r4, r4, #4
	beq	.L12687
.L12689:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L12702
	sub	r5, r4, #104
	str	r5, [r4, #20]
.L12693:
	ldr	r0, .L12707+12
	mov	r3, #1
	str	r6, [r4]
	str	r9, [r4, #16]
	mov	r1, r7
	str	r3, [r4, #24]
	str	r8, [r4, #12]
.LPIC2885:
	add	r0, pc, r0
	sub	r0, r0, #664
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r5, #84]
	cmp	r3, #1
	movne	r0, r4
	beq	.L12703
.L12697:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L12687:
	ldr	r3, .L12707+16
.LPIC2887:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L12704
	movw	r1, #32800
	bl	kmem_cache_alloc(PLT)
	subs	r5, r0, #0
	beq	.L12705
.L12690:
	ldr	r4, .L12707+20
	mov	r1, r7
.LPIC2880:
	add	r4, pc, r4
	sub	r4, r4, #664
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r2, #0
	mov	r0, r6
	mov	r3, r2
	mov	r1, #10
	str	r2, [sp]
	mov	r2, #1
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, #0
	str	r0, [r5, #188]
	beq	.L12706
	mov	r0, r4
	add	r4, r5, #104
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L12707+24
	add	r2, r5, #108
	mov	r7, r0
.LPIC2882:
	add	r3, pc, r3
	ldr	r1, [r3, #28]
	add	r0, r3, #24
	str	r2, [r3, #28]
	strd	r0, [r5, #108]
	str	r2, [r1]
	b	.L12693
.L12704:
	mov	r5, #16
	b	.L12690
.L12703:
	ldr	r0, [r5, #188]
	add	r1, r5, #148
	bl	queue_work(PLT)
	mov	r0, r4
	b	.L12697
.L12705:
	ldr	r0, .L12707+28
	mov	r1, r7
.LPIC2879:
	add	r0, pc, r0
	sub	r0, r0, #664
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #11
	b	.L12697
.L12706:
	mov	r0, r5
	bl	kfree(PLT)
	mvn	r0, #11
	b	.L12697
.L12701:
	ldr	r0, .L12707+32
.LPIC2874:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r8
	b	.L12697
.L12708:
	.align	2
.L12707:
	.word	.LANCHOR4-(.LPIC2875+8)
	.word	.LANCHOR0-(.LPIC2876+8)
	.word	.LANCHOR0-(.LPIC2878+8)
	.word	.LANCHOR4-(.LPIC2885+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2887+8))
	.word	.LANCHOR4-(.LPIC2880+8)
	.word	.LANCHOR0-(.LPIC2882+8)
	.word	.LANCHOR4-(.LPIC2879+8)
	.word	.LC631-(.LPIC2874+8)
	.fnend
	.size	usb_qdss_open, .-usb_qdss_open
	.align	2
	.global	usb_qdss_close
	.type	usb_qdss_close, %function
usb_qdss_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L12713
	str	lr, [sp, #20]
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	ldr	r4, [r0, #20]
.LPIC2888:
	add	r5, pc, r5
	sub	r5, r5, #664
	mov	r0, r5
	ldr	r3, [r4, #76]
	ldr	r7, [r3]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	ldr	r0, [r4, #100]
	ldr	r1, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r0, [r4, #100]
	ldr	r1, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r3, #0
	mov	r0, r5
	mov	r1, r8
	str	r3, [r4, #88]
	str	r3, [r6, #24]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L12713+4
	ldr	r1, [r7, #28]
.LPIC2890:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L12712
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12712:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	msm_dwc3_restart_usb_session(PLT)
.L12714:
	.align	2
.L12713:
	.word	.LANCHOR4-(.LPIC2888+8)
	.word	.LC328-(.LPIC2890+8)
	.fnend
	.size	usb_qdss_close, .-usb_qdss_close
	.align	2
	.global	rmnet_smd_bind_config
	.type	rmnet_smd_bind_config, %function
rmnet_smd_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L12733
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC2919:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L12723
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L12731
.L12716:
	ldr	ip, .L12733+4
	mov	r5, #0
	mov	r1, #10
	ldr	r0, .L12733+8
	mov	r3, r5
	mov	r2, #1
	str	r5, [sp]
.LPIC2892:
	add	ip, pc, ip
.LPIC2893:
	add	r0, pc, r0
	str	r4, [ip, #3408]
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, r5
	str	r0, [r4, #380]
	beq	.L12725
	ldr	ip, .L12733+12
	add	lr, r4, #404
	mov	r8, #2560
	ldr	r3, .L12733+16
	add	r7, r4, #388
	str	r5, [r4, #156]
	ldr	r1, .L12733+20
	str	lr, [r4, #404]
	add	r0, r4, #276
	str	lr, [r4, #408]
	mov	r2, r4
	add	r10, r4, #100
.LPIC2894:
	add	ip, pc, ip
	str	r5, [r4, #164]
	add	r9, r4, #116
.LPIC2895:
	add	r3, pc, r3
	str	r5, [r4, #160]
	str	ip, [r4, #396]
.LPIC2896:
	add	r1, pc, r1
	str	r3, [r4, #412]
	str	r5, [r4, #300]
	str	r5, [r4, #364]
	str	r8, [r4, #384]
	str	r8, [r4, #400]
	add	r8, r4, #108
	str	r7, [r4, #388]
	str	r7, [r4, #392]
	ldr	r7, .L12733+24
	bl	tasklet_init(PLT)
	ldr	r1, .L12733+28
	add	r0, r4, #256
	mov	r2, r4
.LPIC2901:
	add	r7, pc, r7
	add	r7, r7, #3808
.LPIC2897:
	add	r1, pc, r1
	add	r7, r7, #12
	bl	tasklet_init(PLT)
	ldr	r1, .L12733+32
	add	r0, r4, #340
	mov	r2, r4
.LPIC2898:
	add	r1, pc, r1
	bl	tasklet_init(PLT)
	ldr	r1, .L12733+36
	add	r0, r4, #320
	mov	r2, r4
.LPIC2899:
	add	r1, pc, r1
	bl	tasklet_init(PLT)
	ldr	r1, .L12733+40
	mov	r2, r7
	add	r0, r4, #304
.LPIC2900:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L12733+44
	mov	r2, r7
	add	r0, r4, #368
	add	r7, r4, #124
.LPIC2902:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r0, .L12733+48
	str	r5, [r4, #196]
	add	lr, r4, #140
	ldr	r1, .L12733+52
	add	ip, r4, #148
	add	r2, r4, #132
	ldr	r3, .L12733+56
	str	r10, [r4, #100]
	str	r10, [r4, #104]
.LPIC2907:
	add	r0, pc, r0
	str	r9, [r4, #116]
.LPIC2904:
	add	r1, pc, r1
	mov	r5, r0
	str	r9, [r4, #120]
.LPIC2905:
	add	r3, pc, r3
	add	fp, r0, #2560
	str	r8, [r4, #108]
	str	r1, [r4, #168]
	add	r1, r5, #2560
	add	r5, r5, #2592
	str	r3, [r4, #188]
	ldr	r3, .L12733+60
	add	fp, fp, #4
	str	r5, [r4, #12]
	ldr	r5, .L12733+64
	mov	r0, r6
	str	fp, [r4, #4]
	ldr	r6, .L12733+68
	add	r1, r1, #12
	ldr	fp, .L12733+72
	str	r8, [r4, #112]
.LPIC2906:
	add	r3, pc, r3
	str	r1, [r4, #8]
	mov	r1, r4
.LPIC2910:
	add	r5, pc, r5
	str	r7, [r4, #124]
	str	r3, [r4]
	ldr	r3, .L12733+76
.LPIC2912:
	add	r6, pc, r6
	str	r5, [r4, #24]
	ldr	r5, .L12733+80
.LPIC2913:
	add	fp, pc, fp
	str	r6, [r4, #44]
	str	fp, [r4, #32]
.LPIC2914:
	add	r3, pc, r3
	str	r7, [r4, #128]
.LPIC2911:
	add	r5, pc, r5
	str	lr, [r4, #140]
	str	r3, [r4, #40]
	str	r5, [r4, #28]
	str	lr, [r4, #144]
	str	ip, [r4, #148]
	str	ip, [r4, #152]
	str	r2, [r4, #132]
	str	r2, [r4, #136]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	beq	.L12732
.L12719:
	ldr	r0, [r4, #380]
	bl	destroy_workqueue(PLT)
.L12718:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
.L12717:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12732:
	ldr	r0, .L12733+84
	mov	r1, r5
	ldr	r6, .L12733+88
.LPIC2915:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
.LPIC2917:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	cmp	r0, #0
	str	r0, [r6]
	beq	.L12721
	cmn	r0, #4096
	bhi	.L12721
	ldr	ip, .L12733+92
	mov	r2, r0
	mov	r3, r4
	ldr	r0, .L12733+96
	mov	r1, #292
.LPIC2918:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
.LPIC2916:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	cmp	r0, #0
	beq	.L12722
	cmn	r0, #4096
	bhi	.L12722
.L12721:
	mov	r0, #0
	b	.L12717
.L12723:
	mov	r4, #16
	b	.L12716
.L12725:
	mvn	r5, #11
	b	.L12718
.L12722:
	ldr	r0, [r6]
	bl	debugfs_remove(PLT)
	mov	r3, #0
	mov	r0, r3
	str	r3, [r6]
	b	.L12717
.L12731:
	mvn	r0, #11
	b	.L12717
.L12734:
	.align	2
.L12733:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2919+8))
	.word	.LANCHOR2-(.LPIC2892+8)
	.word	.LC632-(.LPIC2893+8)
	.word	rmnet_smd_connect_work-(.LPIC2894+8)
	.word	rmnet_smd_disconnect_work-(.LPIC2895+8)
	.word	rmnet_control_rx_tlet-(.LPIC2896+8)
	.word	.LANCHOR4-(.LPIC2901+8)
	.word	rmnet_control_tx_tlet-(.LPIC2897+8)
	.word	rmnet_data_rx_tlet-(.LPIC2898+8)
	.word	rmnet_data_tx_tlet-(.LPIC2899+8)
	.word	.LC633-(.LPIC2900+8)
	.word	.LC634-(.LPIC2902+8)
	.word	.LANCHOR0-(.LPIC2907+8)
	.word	rmnet_smd_ch_probe-(.LPIC2904+8)
	.word	.LC294-(.LPIC2905+8)
	.word	.LC635-(.LPIC2906+8)
	.word	rmnet_smd_bind-(.LPIC2910+8)
	.word	rmnet_smd_setup-(.LPIC2912+8)
	.word	rmnet_smd_set_alt-(.LPIC2913+8)
	.word	rmnet_smd_disable-(.LPIC2914+8)
	.word	rmnet_smd_unbind-(.LPIC2911+8)
	.word	.LC636-(.LPIC2915+8)
	.word	dent_smd(GOT_PREL)+(.-(.LPIC2917+8))
	.word	rmnet_smd_debug_stats_ops(GOT_PREL)+(.-(.LPIC2918+8))
	.word	.LC135-(.LPIC2916+8)
	.fnend
	.size	rmnet_smd_bind_config, .-rmnet_smd_bind_config
	.align	2
	.type	rmnet_smd_function_bind_config, %function
rmnet_smd_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	b	rmnet_smd_bind_config(PLT)
	.fnend
	.size	rmnet_smd_function_bind_config, .-rmnet_smd_function_bind_config
	.align	2
	.global	rmnet_sdio_function_add
	.type	rmnet_sdio_function_add, %function
rmnet_sdio_function_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L12749
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC2942:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L12741
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L12747
.L12737:
	ldr	r0, .L12749+4
	mov	r5, #0
	mov	r1, #10
	mov	r3, r5
	mov	r2, #1
	str	r5, [sp]
.LPIC2921:
	add	r0, pc, r0
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, r5
	str	r0, [r4, #192]
	beq	.L12743
	ldr	r3, .L12749+8
	mov	r6, #2560
	add	lr, r4, #232
	ldr	fp, .L12749+12
	add	ip, r4, #248
	add	r10, r4, #200
	ldr	r1, .L12749+16
	add	r9, r4, #328
	add	r8, r4, #216
	ldr	r2, .L12749+20
	str	r5, [r4, #180]
	add	r0, r4, #260
.LPIC2925:
	add	r3, pc, r3
	str	r5, [r4, #188]
.LPIC2922:
	add	fp, pc, fp
	str	r5, [r4, #184]
	str	r3, [r4, #240]
	ldr	r3, .L12749+24
.LPIC2923:
	add	r1, pc, r1
.LPIC2924:
	add	r2, pc, r2
	str	fp, [r4, #208]
	ldr	fp, .L12749+28
	str	r1, [r4, #336]
	mov	r1, r5
	str	r2, [r4, #224]
	mov	r2, r5
.LPIC2926:
	add	r3, pc, r3
	str	r6, [r4, #196]
	str	r6, [r4, #324]
.LPIC2935:
	add	fp, pc, fp
	str	r3, [r4, #256]
	str	r6, [r4, #212]
	str	r6, [r4, #228]
	str	r6, [r4, #244]
	str	r10, [r4, #200]
	str	r10, [r4, #204]
	add	r10, r4, #296
	str	r9, [r4, #328]
	str	r9, [r4, #332]
	add	r9, r4, #100
	str	r8, [r4, #216]
	str	r8, [r4, #220]
	add	r8, r4, #112
	str	lr, [r4, #232]
	str	lr, [r4, #236]
	str	ip, [r4, #248]
	str	ip, [r4, #252]
	bl	init_timer_key(PLT)
	ldr	r1, .L12749+32
	add	r3, r4, #244
	mov	r0, r7
	ldr	r2, .L12749+36
	str	r5, [r4, #148]
	add	lr, r4, #152
	str	r3, [r4, #280]
	ldr	r3, .L12749+40
	add	ip, r4, #124
	str	r5, [r4, #144]
.LPIC2941:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	str	r5, [r4, #176]
	str	r5, [r4, #172]
	ldr	r5, .L12749+44
.LPIC2927:
	add	r2, pc, r2
.LPIC2929:
	add	r3, pc, r3
	str	r6, [r4, #292]
	add	r6, r4, #136
	add	r7, r3, #2608
	str	r2, [r4, #304]
	add	r2, r4, #164
	str	r1, [r4, #276]
	ldr	r1, .L12749+48
	add	r7, r7, #4
.LPIC2934:
	add	r5, pc, r5
	str	fp, [r4, #32]
	str	r7, [r4, #4]
	add	r7, r3, #2608
	add	r3, r3, #2640
	add	r7, r7, #12
	str	r5, [r4, #44]
.LPIC2928:
	add	r1, pc, r1
	str	r3, [r4, #12]
	ldr	r3, .L12749+52
	str	r7, [r4, #8]
	ldr	r7, .L12749+56
	str	r1, [r4]
	ldr	r1, .L12749+60
	str	r10, [r4, #296]
.LPIC2936:
	add	r3, pc, r3
	str	r10, [r4, #300]
.LPIC2937:
	add	r7, pc, r7
	str	r9, [r4, #100]
.LPIC2932:
	add	r1, pc, r1
	str	r3, [r4, #40]
	str	r7, [r4, #48]
	str	r1, [r4, #24]
	ldr	r1, .L12749+64
	str	r9, [r4, #104]
	str	r8, [r4, #112]
	str	r8, [r4, #116]
.LPIC2933:
	add	r1, pc, r1
	str	lr, [r4, #152]
	str	lr, [r4, #156]
	str	r1, [r4, #28]
	mov	r1, r4
	str	ip, [r4, #124]
	str	ip, [r4, #128]
	str	r6, [r4, #136]
	str	r6, [r4, #140]
	str	r2, [r4, #164]
	str	r2, [r4, #168]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	beq	.L12748
.L12740:
	ldr	r0, [r4, #192]
	bl	destroy_workqueue(PLT)
.L12739:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
.L12738:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12748:
	ldr	r0, .L12749+68
	mov	r1, r5
.LPIC2938:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	cmn	r0, #4096
	str	r0, [r4, #340]
	bhi	.L12744
	ldr	ip, .L12749+72
	mov	r2, r0
	mov	r3, r4
	ldr	r0, .L12749+76
	mov	r1, #292
.LPIC2940:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
.LPIC2939:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	mov	r0, r5
	b	.L12738
.L12741:
	mov	r4, #16
	b	.L12737
.L12743:
	mvn	r5, #11
	b	.L12739
.L12744:
	mov	r0, r5
	b	.L12738
.L12747:
	mvn	r0, #11
	b	.L12738
.L12750:
	.align	2
.L12749:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2942+8))
	.word	.LC632-(.LPIC2921+8)
	.word	rmnet_sdio_data_rx_work-(.LPIC2925+8)
	.word	rmnet_sdio_disconnect_work-(.LPIC2922+8)
	.word	rmnet_sdio_set_modem_cbits_w-(.LPIC2923+8)
	.word	rmnet_sdio_control_rx_work-(.LPIC2924+8)
	.word	rmnet_open_sdio_work-(.LPIC2926+8)
	.word	rmnet_sdio_set_alt-(.LPIC2935+8)
	.word	delayed_work_timer_fn(GOT_PREL)+(.-(.LPIC2941+8))
	.word	rmnet_close_sdio_work-(.LPIC2927+8)
	.word	.LANCHOR0-(.LPIC2929+8)
	.word	rmnet_sdio_setup-(.LPIC2934+8)
	.word	.LC637-(.LPIC2928+8)
	.word	rmnet_sdio_disable-(.LPIC2936+8)
	.word	rmnet_sdio_suspend-(.LPIC2937+8)
	.word	rmnet_sdio_bind-(.LPIC2932+8)
	.word	rmnet_sdio_unbind-(.LPIC2933+8)
	.word	.LC638-(.LPIC2938+8)
	.word	debug_rmnet_sdio_stats_ops(GOT_PREL)+(.-(.LPIC2940+8))
	.word	.LC135-(.LPIC2939+8)
	.fnend
	.size	rmnet_sdio_function_add, .-rmnet_sdio_function_add
	.align	2
	.type	rmnet_sdio_function_bind_config, %function
rmnet_sdio_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	b	rmnet_sdio_function_add(PLT)
	.fnend
	.size	rmnet_sdio_function_bind_config, .-rmnet_sdio_function_bind_config
	.align	2
	.global	frmnet_free_req
	.type	frmnet_free_req, %function
frmnet_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	frmnet_free_req, .-frmnet_free_req
	.align	2
	.type	frmnet_unbind, %function
frmnet_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L12758
.L12755:
	cmp	r3, #2
	bls	.L12756
	ldr	r0, [r4, #12]
	bl	kfree(PLT)
.L12756:
	ldr	r0, [r4, #8]
	bl	kfree(PLT)
	ldrd	r0, [r4, #128]
	bl	frmnet_free_req(PLT)
	ldr	r6, [sp, #8]
	ldr	r0, [r4]
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	kfree(PLT)
.L12758:
	ldr	r0, [r1, #16]
	bl	kfree(PLT)
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L12755
	.fnend
	.size	frmnet_unbind, .-frmnet_unbind
	.align	2
	.type	frmnet_bind, %function
frmnet_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #24]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	str	r0, [r4, #104]
	blt	.L12799
	ldr	r6, .L12805
.LPIC2945:
	add	r6, pc, r6
	add	r1, r6, #2544
	strb	r0, [r6, #2542]
	add	r1, r1, #8
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L12800
	add	r1, r6, #2560
	str	r0, [r4, #76]
	add	r1, r1, #4
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L12801
	str	r0, [r4, #80]
	add	r1, r6, #2576
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	subs	r7, r0, #0
	beq	.L12802
	str	r7, [r4, #128]
	ldr	r3, [r7, #8]
	mov	r1, #208
	str	r5, [r7]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L12767
	ldr	r3, .L12805+4
.LPIC2974:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L12768
	mov	r1, #208
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L12803
.L12769:
	mov	r3, #8
	cmn	r6, #4096
	str	r3, [r6, #4]
	str	r6, [r4, #132]
	bhi	.L12770
	ldr	r3, .L12805+8
	ldr	r7, .L12805+12
.LPIC2958:
	add	r3, pc, r3
.LPIC2959:
	add	r7, pc, r7
	str	r3, [r6, #28]
	ldr	r3, [r4, #132]
	add	r0, r7, #2656
	add	r0, r0, #4
	str	r4, [r3, #32]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L12773
	ldr	r3, [r5]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L12804
.L12774:
	mov	r0, #0
.L12796:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12768:
	mov	r3, #16
	str	r3, [r6]
	b	.L12769
.L12804:
	ldr	r6, .L12805+16
	add	r0, r7, #2672
	add	r0, r0, #8
.LPIC2960:
	add	r6, pc, r6
	ldrb	r1, [r6, #2554]	@ zero_extendqisi2
	ldrb	r2, [r6, #2566]	@ zero_extendqisi2
	ldrb	r3, [r6, #2578]	@ zero_extendqisi2
	strb	r1, [r6, #2590]
	strb	r2, [r6, #2602]
	strb	r3, [r6, #2614]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L12775
	ldr	r3, [r5]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L12774
	ldrb	r1, [r6, #2554]	@ zero_extendqisi2
	add	r0, r7, #2688
	ldrb	r2, [r6, #2566]	@ zero_extendqisi2
	add	r0, r0, #12
	ldrb	r3, [r6, #2578]	@ zero_extendqisi2
	strb	r1, [r6, #2626]
	strb	r2, [r6, #2638]
	strb	r3, [r6, #2650]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L12774
.L12777:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L12780
	bl	kfree(PLT)
.L12780:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12781
	bl	kfree(PLT)
.L12781:
	ldr	r1, [r4, #132]
	cmp	r1, #0
	beq	.L12772
	ldr	r0, [r4, #128]
	bl	frmnet_free_req(PLT)
.L12772:
	ldr	r2, [r4, #128]
	mov	r3, #0
	mvn	r0, #11
	str	r3, [r2]
	str	r3, [r4, #128]
.L12766:
	ldr	r2, [r4, #80]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #80]
.L12764:
	ldr	r2, [r4, #76]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #76]
	b	.L12796
.L12803:
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L12767:
	mvn	r3, #11
	str	r3, [r4, #132]
.L12770:
	ldr	r1, .L12805+20
	ldr	r0, .L12805+24
.LPIC2957:
	add	r1, pc, r1
	add	r1, r1, #3648
.LPIC2956:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L12772
.L12773:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L12777
.L12782:
	bl	kfree(PLT)
	b	.L12777
.L12775:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	bne	.L12782
	b	.L12780
.L12801:
	ldr	r1, .L12805+28
	ldr	r0, .L12805+32
.LPIC2951:
	add	r1, pc, r1
	add	r1, r1, #3648
.LPIC2950:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #18
	b	.L12764
.L12800:
	ldr	r1, .L12805+36
	ldr	r0, .L12805+40
.LPIC2948:
	add	r1, pc, r1
	add	r1, r1, #3648
.LPIC2947:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #18
	b	.L12796
.L12799:
	ldr	r1, .L12805+44
	mov	r2, r0
	ldr	r0, .L12805+48
.LPIC2944:
	add	r1, pc, r1
	add	r1, r1, #3648
.LPIC2943:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	ldr	r0, [r4, #104]
	b	.L12796
.L12802:
	ldr	r1, .L12805+52
	ldr	r0, .L12805+56
.LPIC2954:
	add	r1, pc, r1
	add	r1, r1, #3648
.LPIC2953:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #18
	b	.L12766
.L12806:
	.align	2
.L12805:
	.word	.LANCHOR1-(.LPIC2945+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2974+8))
	.word	frmnet_notify_complete-(.LPIC2958+8)
	.word	.LANCHOR0-(.LPIC2959+8)
	.word	.LANCHOR1-(.LPIC2960+8)
	.word	.LANCHOR3-(.LPIC2957+8)
	.word	.LC476-(.LPIC2956+8)
	.word	.LANCHOR3-(.LPIC2951+8)
	.word	.LC495-(.LPIC2950+8)
	.word	.LANCHOR3-(.LPIC2948+8)
	.word	.LC493-(.LPIC2947+8)
	.word	.LANCHOR3-(.LPIC2944+8)
	.word	.LC513-(.LPIC2943+8)
	.word	.LANCHOR3-(.LPIC2954+8)
	.word	.LC514-(.LPIC2953+8)
	.fnend
	.size	frmnet_bind, .-frmnet_bind
	.align	2
	.global	gps_free_req
	.type	gps_free_req, %function
gps_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gps_free_req, .-gps_free_req
	.align	2
	.type	gps_unbind, %function
gps_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L12813
.L12810:
	cmp	r3, #2
	bls	.L12811
	ldr	r0, [r4, #12]
	bl	kfree(PLT)
.L12811:
	ldr	r0, [r4, #8]
	bl	kfree(PLT)
	ldrd	r0, [r4, #128]
	bl	gps_free_req(PLT)
	ldr	r6, [sp, #8]
	ldr	r0, [r4]
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	kfree(PLT)
.L12813:
	ldr	r0, [r1, #16]
	bl	kfree(PLT)
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L12810
	.fnend
	.size	gps_unbind, .-gps_unbind
	.align	2
	.type	gps_bind, %function
gps_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0, #24]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	str	r0, [r4, #108]
	blt	.L12854
	ldr	r1, .L12858
	mov	r3, #0
	str	r3, [r4, #76]
	str	r3, [r4, #80]
.LPIC2980:
	add	r1, pc, r1
	add	r1, r1, #2672
	strb	r0, [r1, #-10]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	subs	r7, r0, #0
	beq	.L12855
	str	r7, [r4, #128]
	ldr	r3, [r7, #8]
	mov	r1, #208
	str	r6, [r7]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L12818
	ldr	r3, .L12858+4
.LPIC2997:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L12819
	mov	r1, #208
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r5]
	beq	.L12856
.L12820:
	mov	r3, #8
	cmn	r5, #4096
	str	r3, [r5, #4]
	str	r5, [r4, #132]
	bhi	.L12821
	ldr	r3, .L12858+8
	ldr	r7, .L12858+12
.LPIC2987:
	add	r3, pc, r3
.LPIC2988:
	add	r7, pc, r7
	str	r3, [r5, #28]
	ldr	r3, [r4, #132]
	add	r0, r7, #2720
	add	r0, r0, #12
	str	r4, [r3, #32]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L12824
	ldr	r3, [r6]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L12857
	ldr	r3, .L12858+16
	ldrb	r2, [r4, #104]	@ zero_extendqisi2
.LPIC2977:
	add	r3, pc, r3
	b	.L12828
.L12819:
	mov	r3, #16
	str	r3, [r5]
	b	.L12820
.L12857:
	ldr	r5, .L12858+20
	add	r0, r7, #2736
	add	r0, r0, #8
.LPIC2989:
	add	r5, pc, r5
	ldrb	r3, [r5, #2674]	@ zero_extendqisi2
	strb	r3, [r5, #2686]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L12826
	ldr	r3, [r6]
	ldr	r2, [r3, #20]
	cmp	r2, #4
	bls	.L12829
	ldrb	r3, [r5, #2674]	@ zero_extendqisi2
	add	r0, r7, #2752
	add	r0, r0, #4
	strb	r3, [r5, #2698]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #16]
	ldrne	r3, [r6]
	bne	.L12829
.L12830:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L12833
	bl	kfree(PLT)
.L12833:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12834
	bl	kfree(PLT)
.L12834:
	ldr	r1, [r4, #132]
	cmp	r1, #0
	beq	.L12823
	ldr	r0, [r4, #128]
	bl	gps_free_req(PLT)
.L12823:
	ldr	r2, [r4, #128]
	mov	r3, #0
	mvn	r0, #11
	str	r3, [r2]
	str	r3, [r4, #128]
.L12851:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12856:
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L12818:
	mvn	r3, #11
	str	r3, [r4, #132]
.L12821:
	ldr	r1, .L12858+24
	ldr	r0, .L12858+28
.LPIC2986:
	add	r1, pc, r1
	add	r1, r1, #3664
.LPIC2985:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L12823
.L12824:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L12830
.L12835:
	bl	kfree(PLT)
	b	.L12830
.L12826:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	bne	.L12835
	b	.L12833
.L12829:
	ldr	r3, [r3, #20]
	ldrb	r2, [r4, #104]	@ zero_extendqisi2
	cmp	r3, #2
	bhi	.L12837
	ldr	r3, .L12858+32
.LPIC2976:
	add	r3, pc, r3
.L12828:
	ldr	r1, .L12858+36
	ldr	r0, .L12858+40
.LPIC2996:
	add	r1, pc, r1
	add	r1, r1, #3664
.LPIC2995:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mov	r0, #0
	b	.L12851
.L12855:
	ldr	r1, .L12858+44
	ldr	r0, .L12858+48
.LPIC2983:
	add	r1, pc, r1
	add	r1, r1, #3664
.LPIC2982:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L12851
.L12854:
	ldr	r1, .L12858+52
	mov	r2, r0
	ldr	r0, .L12858+56
.LPIC2979:
	add	r1, pc, r1
	add	r1, r1, #3664
.LPIC2978:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, [r4, #108]
	b	.L12851
.L12837:
	ldr	r3, .L12858+60
.LPIC2975:
	add	r3, pc, r3
	b	.L12828
.L12859:
	.align	2
.L12858:
	.word	.LANCHOR1-(.LPIC2980+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2997+8))
	.word	gps_notify_complete-(.LPIC2987+8)
	.word	.LANCHOR0-(.LPIC2988+8)
	.word	.LC492-(.LPIC2977+8)
	.word	.LANCHOR1-(.LPIC2989+8)
	.word	.LANCHOR3-(.LPIC2986+8)
	.word	.LC476-(.LPIC2985+8)
	.word	.LC492-(.LPIC2976+8)
	.word	.LANCHOR3-(.LPIC2996+8)
	.word	.LC639-(.LPIC2995+8)
	.word	.LANCHOR3-(.LPIC2983+8)
	.word	.LC514-(.LPIC2982+8)
	.word	.LANCHOR3-(.LPIC2979+8)
	.word	.LC513-(.LPIC2978+8)
	.word	.LC491-(.LPIC2975+8)
	.fnend
	.size	gps_bind, .-gps_bind
	.align	2
	.global	audio_source_bind_config
	.type	audio_source_bind_config, %function
audio_source_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mvn	r3, #0
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r1, #0
	mov	r6, r0
	str	r8, [sp, #16]
	mov	r0, r3
	mov	r2, r1
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	add	ip, sp, #8
	str	r3, [r5]
	str	r3, [r5, #4]
	mov	r3, r1
	str	ip, [sp]
	bl	snd_card_create(PLT)
	subs	ip, r0, #0
	movne	r0, ip
	beq	.L12867
.L12861:
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12867:
	ldr	r0, [r6, #24]
	mov	r2, ip
	mov	r3, #1
	ldr	r4, [sp, #8]
	ldr	r1, .L12869
	ldr	lr, [r0]
	mov	r0, r4
.LPIC2998:
	add	r1, pc, r1
	add	lr, lr, #32
	str	lr, [r4, #500]
	str	ip, [sp]
	add	ip, sp, #12
	str	ip, [sp, #4]
	bl	snd_pcm_new(PLT)
	subs	r4, r0, #0
	bne	.L12864
	ldr	r8, .L12869+4
	mov	r2, #80
	ldr	r3, [sp, #12]
	ldr	r1, .L12869+8
.LPIC2999:
	add	r8, pc, r8
	add	r7, r8, #2768
	str	r4, [r3, #16]
	add	r0, r3, #88
	add	r7, r7, #8
.LPIC3001:
	add	r1, pc, r1
	str	r3, [r8, #2856]
	str	r7, [r3, #260]
	bl	strlcpy(PLT)
	ldr	r2, .L12869+12
	mov	r1, r4
	ldr	r0, [sp, #12]
.LPIC3002:
	add	r2, pc, r2
	add	r2, r2, #76
	bl	snd_pcm_set_ops(PLT)
	mov	ip, #65536
	mov	r3, r4
	ldr	r0, [sp, #12]
	mov	r2, r4
	mov	r1, #2
	str	ip, [sp]
	bl	snd_pcm_lib_preallocate_pages_for_all(PLT)
	ldr	r0, [sp, #8]
	mov	r2, #16
	ldr	r1, .L12869+16
	add	r0, r0, #20
.LPIC3003:
	add	r1, pc, r1
	bl	strlcpy(PLT)
	ldr	r1, [sp, #8]
	mov	r2, #32
	add	r0, r1, #36
	add	r1, r1, #20
	bl	strlcpy(PLT)
	ldr	r0, [sp, #8]
	mov	r2, #80
	ldr	r1, .L12869+20
	add	r0, r0, #68
.LPIC3004:
	add	r1, pc, r1
	bl	strlcpy(PLT)
	ldr	r0, [sp, #8]
	bl	snd_card_register(PLT)
	subs	r4, r0, #0
	bne	.L12864
	mov	r0, r6
	mov	r1, r7
	bl	usb_add_function(PLT)
	subs	r4, r0, #0
	beq	.L12868
.L12862:
.L12863:
.L12864:
	ldr	r3, .L12869+24
.LPIC3007:
	add	r3, pc, r3
	ldr	r0, [r3, #2852]
	bl	snd_card_free(PLT)
	mov	r0, r4
	b	.L12861
.L12868:
	ldr	r3, [sp, #12]
	mov	r0, r4
	ldr	r2, [sp, #8]
	ldr	r1, [r3]
	ldr	r1, [r1]
	str	r1, [r5]
	ldr	r3, [r3, #12]
	str	r3, [r5, #4]
	str	r2, [r8, #2852]
	b	.L12861
.L12870:
	.align	2
.L12869:
	.word	.LC640-(.LPIC2998+8)
	.word	.LANCHOR0-(.LPIC2999+8)
	.word	.LC641-(.LPIC3001+8)
	.word	.LANCHOR7-(.LPIC3002+8)
	.word	.LC525-(.LPIC3003+8)
	.word	.LC642-(.LPIC3004+8)
	.word	.LANCHOR0-(.LPIC3007+8)
	.fnend
	.size	audio_source_bind_config, .-audio_source_bind_config
	.align	2
	.type	audio_source_function_bind_config, %function
audio_source_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r0, r1
	mov	r1, r3
	b	audio_source_bind_config(PLT)
	.fnend
	.size	audio_source_function_bind_config, .-audio_source_function_bind_config
	.align	2
	.global	gs_alloc_req
	.type	gs_alloc_req, %function
gs_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, r2
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L12873
	str	r6, [r4, #4]
	mov	r0, r6
	mov	r1, r5
	bl	__kmalloc(PLT)
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L12878
.L12873:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12878:
	ldr	r2, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L12873
	.fnend
	.size	gs_alloc_req, .-gs_alloc_req
	.align	2
	.global	gs_free_req
	.type	gs_free_req, %function
gs_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gs_free_req, .-gs_free_req
	.align	2
	.type	gs_start_tx, %function
gs_start_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	add	r9, r0, #76
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #76]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r0, #4]
	cmp	r9, r5
	ldr	r7, [r3, #80]
	beq	.L12902
	ldr	r3, [r0, #84]
	cmp	r3, #7
	bgt	.L12902
	ldr	fp, .L12927
	mov	ip, #0
	mov	r4, r0
	mov	r10, #256
	mov	r0, ip
.LPIC3013:
	add	fp, pc, fp
	b	.L12885
.L12887:
	ldr	r2, [r4, #96]
	add	r3, r2, r3
	rsb	r3, r1, r3
	cmp	r3, r6
	bcs	.L12922
	mov	r0, ip
	rsb	ip, r3, r6
	str	r3, [sp, #4]
	mov	r2, r3
	str	ip, [sp]
	bl	memcpy(PLT)
	ldr	r3, [sp, #4]
	ldr	r2, [sp]
	ldr	r1, [r4, #96]
	add	r0, r0, r3
	bl	memcpy(PLT)
	ldr	ip, [sp]
	ldr	r3, [r4, #96]
	add	r3, r3, ip
	str	r3, [r4, #100]
.L12888:
	ldr	r3, [r5, #4]
	mov	r1, #512
	str	r6, [r5, #-32]
	ldr	r2, [r5]
	mov	r0, r4
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r1, [r5, #4]
	str	r10, [r5]
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r2, #32
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r6, r0
	mov	r0, r4
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L12923
	cmp	r6, #0
	bne	.L12924
	ldr	r1, [r5, #-32]
	ldr	r2, [r4, #136]
	ldr	r3, [r4, #84]
	ldr	r5, [r4, #76]
	str	r1, [fp, #3820]
	add	r2, r2, r1
	add	r3, r3, #1
	cmp	r9, r5
	str	r2, [r4, #136]
	str	r3, [r4, #84]
	beq	.L12884
	cmp	r3, #7
	mov	r0, #1
	bgt	.L12884
.L12885:
	ldr	r3, [r4, #92]
	sub	r8, r5, #36
	ldr	r2, [r4, #104]
	ldr	r1, [r4, #100]
	ldr	ip, [r5, #-36]
	add	r2, r2, r3
	rsb	r2, r1, r2
	udiv	r6, r2, r3
	mls	r6, r3, r6, r2
	cmp	r6, #4096
	movcs	r6, #4096
	bcs	.L12887
	cmp	r6, #0
	bne	.L12887
	ldr	r3, .L12927+4
	mov	ip, r0
.LPIC3008:
	add	r3, pc, r3
	ldr	r3, [r3, #3820]
	cmp	r3, #0
	beq	.L12903
	ldrh	r1, [r7, #20]
	sdiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L12890
	ldr	r2, [r5, #4]
	mov	lr, #512
	mov	r6, #256
	ldr	r1, [r5]
	str	r3, [r5, #-32]
	str	r0, [sp]
	mov	r0, r4
	str	r2, [r1, #4]
	str	r1, [r2]
	stmia	r5, {r6, lr}
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r2, #32
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r6, r0
	mov	r0, r4
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #4]
	ldr	ip, [sp]
	cmp	r3, #0
	beq	.L12925
	cmp	r6, #0
	bne	.L12926
.L12893:
	ldr	r3, .L12927+8
	mov	r2, #0
.LPIC3012:
	add	r3, pc, r3
	str	r2, [r3, #3820]
	b	.L12890
.L12922:
	mov	r0, ip
	mov	r2, r6
	str	r3, [sp]
	bl	memcpy(PLT)
	ldr	r3, [sp]
	cmp	r3, r6
	ldrhi	r3, [r4, #100]
	ldrls	r3, [r4, #96]
	addhi	r3, r3, r6
	str	r3, [r4, #100]
	b	.L12888
.L12924:
	ldr	r3, [r4, #76]
	str	r5, [r3, #4]
	stmia	r5, {r3, r9}
	str	r5, [r4, #76]
.L12884:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12908
	bl	tty_wakeup(PLT)
.L12908:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12903:
	mov	r6, r3
.L12890:
	mov	r1, #1
	add	r0, r4, #108
	str	ip, [sp]
	mov	r2, r1
	mov	r3, #0
	bl	__wake_up(PLT)
	ldr	ip, [sp]
.L12892:
	cmp	ip, #0
	beq	.L12908
	b	.L12884
.L12923:
	mov	r0, r7
	mov	r1, r8
	bl	gs_free_req(PLT)
	b	.L12908
.L12902:
	mov	r6, #0
	b	.L12908
.L12925:
	mov	r0, r7
	mov	r1, r8
	bl	gs_free_req(PLT)
	ldr	ip, [sp]
	b	.L12892
.L12926:
	ldr	r1, .L12927+12
	mov	r3, r6
	str	ip, [sp]
	ldr	r0, .L12927+16
	ldr	r2, .L12927+20
.LPIC3010:
	add	r1, pc, r1
.LPIC3009:
	add	r0, pc, r0
	add	r1, r1, #3680
.LPIC3011:
	add	r2, pc, r2
	bl	printk(PLT)
	ldr	r3, [r4, #76]
	ldr	ip, [sp]
	str	r5, [r3, #4]
	stmia	r5, {r3, r9}
	str	r5, [r4, #76]
	b	.L12893
.L12928:
	.align	2
.L12927:
	.word	.LANCHOR4-(.LPIC3013+8)
	.word	.LANCHOR4-(.LPIC3008+8)
	.word	.LANCHOR4-(.LPIC3012+8)
	.word	.LANCHOR3-(.LPIC3010+8)
	.word	.LC643-(.LPIC3009+8)
	.word	.LC644-(.LPIC3011+8)
	.fnend
	.size	gs_start_tx, .-gs_start_tx
	.align	2
	.type	gs_flush_chars, %function
gs_flush_chars:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #280]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #4]
	mov	r5, r0
	cmp	r3, #0
	beq	.L12930
	mov	r0, r4
	bl	gs_start_tx(PLT)
.L12930:
	mov	r0, r4
	mov	r1, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
	.fnend
	.size	gs_flush_chars, .-gs_flush_chars
	.align	2
	.type	gs_write, %function
gs_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #280]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r5, #0
	mov	r7, r0
	bne	.L12950
.L12936:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L12941
	mov	r0, r4
	bl	gs_start_tx(PLT)
.L12941:
	mov	r0, r4
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12950:
	ldr	r2, [r4, #92]
	mov	r8, r5
	ldr	r3, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r3, r2
	rsb	r3, r0, r3
	sub	r3, r3, #1
	udiv	r5, r3, r2
	mls	r5, r2, r5, r3
	cmp	r8, r5
	bhi	.L12951
.L12937:
	ldr	r5, [r4, #96]
	mov	r1, r6
	add	r5, r5, r2
	rsb	r5, r0, r5
	cmp	r5, r8
	bcs	.L12939
	mov	r2, r5
	rsb	r9, r5, r8
	bl	memcpy(PLT)
	add	r1, r6, r5
	mov	r2, r9
	ldr	r0, [r4, #96]
	bl	memcpy(PLT)
	ldr	r3, [r4, #96]
	mov	r5, r8
	add	r3, r3, r9
	str	r3, [r4, #104]
	b	.L12936
.L12951:
	cmp	r5, #0
	beq	.L12936
	mov	r8, r5
	b	.L12937
.L12939:
	mov	r2, r8
	bl	memcpy(PLT)
	cmp	r5, r8
	bls	.L12940
	ldr	r3, [r4, #104]
	mov	r5, r8
	add	r8, r3, r8
	str	r8, [r4, #104]
	b	.L12936
.L12940:
	ldr	r3, [r4, #96]
	mov	r5, r8
	str	r3, [r4, #104]
	b	.L12936
	.fnend
	.size	gs_write, .-gs_write
	.align	2
	.type	gs_write_complete, %function
gs_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	ldr	r2, [r4, #140]
	mov	r3, r4
	ldr	r0, [r5, #48]
	add	r1, r5, #36
	add	r2, r2, r0
	str	r2, [r4, #140]
	ldr	r2, [r3, #76]!
	str	r1, [r2, #4]
	strd	r2, [r5, #36]
	ldr	r3, [r4, #84]
	str	r1, [r4, #76]
	sub	r3, r3, #1
	str	r3, [r4, #84]
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L12954
	cmp	r3, #0
	bne	.L12966
.L12955:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L12954
	mov	r0, r4
	bl	gs_start_tx(PLT)
.L12954:
	mov	r0, r4
	mov	r1, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L12966:
	ldr	r1, .L12967
	ldr	r0, .L12967+4
	ldr	r2, [r7, #4]
.LPIC3015:
	add	r1, pc, r1
	add	r1, r1, #3680
.LPIC3014:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L12955
.L12968:
	.align	2
.L12967:
	.word	.LANCHOR3-(.LPIC3015+8)
	.word	.LC645-(.LPIC3014+8)
	.fnend
	.size	gs_write_complete, .-gs_write_complete
	.align	2
	.type	gs_start_rx, %function
gs_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	add	r8, r0, #32
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [r0, #4]
	cmp	r8, r4
	ldr	r5, [r3, #84]
	beq	.L12972
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L12972
	ldr	r6, [r0, #40]
	cmp	r6, #7
	bgt	.L12971
	mov	r9, r0
	mov	fp, #256
	mov	r10, #512
	b	.L12973
.L12974:
	cmp	r7, #0
	bne	.L12984
	ldr	r6, [r9, #40]
	ldr	r4, [r9, #32]
	add	r6, r6, #1
	cmp	r8, r4
	str	r6, [r9, #40]
	beq	.L12971
	ldr	r2, [r9, #8]
	cmp	r2, #0
	beq	.L12971
	cmp	r6, #7
	bgt	.L12971
.L12973:
	ldr	r2, [r4, #4]
	mov	r3, #4096
	mov	r0, r9
	ldr	r1, [r4]
	sub	r6, r4, #36
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r3, [r4, #-32]
	str	fp, [r4]
	str	r10, [r4, #4]
	bl	_raw_spin_unlock(PLT)
	ldr	ip, [r5, #8]
	mov	r2, #32
	mov	r1, r6
	mov	r0, r5
	ldr	ip, [ip, #16]
	blx	ip
	mov	r7, r0
	mov	r0, r9
	bl	_raw_spin_lock(PLT)
	ldr	r2, [r9, #4]
	cmp	r2, #0
	bne	.L12974
	mov	r1, r6
	mov	r0, r5
	bl	gs_free_req(PLT)
	ldr	r6, [r9, #40]
.L12971:
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12984:
	ldr	r2, [r9, #32]
	str	r4, [r2, #4]
	stmia	r4, {r2, r8}
	ldr	r6, [r9, #40]
	str	r4, [r9, #32]
	b	.L12971
.L12972:
	ldr	r6, [r0, #40]
	b	.L12971
	.fnend
	.size	gs_start_rx, .-gs_start_rx
	.align	2
	.type	gs_rx_push, %function
gs_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r3, r0, #60
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #12
	mov	r0, r3
	strd	r10, [sp, #24]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irq(PLT)
	ldr	r4, [r5, #-12]
	ldr	fp, [r5, #-52]
	cmp	r7, r4
	beq	.L12986
	ldr	r3, .L13025
	mov	r8, #0
	mov	r10, r8
	mov	r9, r8
.LPIC3016:
	add	r3, pc, r3
	str	r3, [sp]
.L12995:
	cmp	fp, #0
	beq	.L12987
	ldr	r3, [fp, #164]
	tst	r3, #1
	bne	.L12988
	ldr	r2, [r4, #8]
	cmn	r2, #108
	moveq	r10, #1
	beq	.L12991
	cmp	r2, #0
	beq	.L12991
	ldr	r0, [sp]
	ldrb	r1, [r5, #-43]	@ zero_extendqisi2
	bl	printk(PLT)
.L12991:
	ldr	r6, [r4, #12]
	cmp	r6, #0
	beq	.L12987
	ldr	r3, [r5, #-4]
	mov	r0, fp
	mov	r2, #0
	ldr	r1, [r4, #-36]
	cmp	r3, #0
	rsbne	r6, r3, r6
	addne	r1, r1, r3
	mov	r3, r6
	bl	tty_insert_flip_string_fixed_flag(PLT)
	ldr	r3, [r5, #72]
	cmp	r0, #0
	movne	r8, #1
	cmp	r6, r0
	add	r3, r3, r0
	str	r3, [r5, #72]
	bne	.L13024
	str	r9, [r5, #-4]
.L12987:
	ldr	r2, [r4, #4]
	mov	r3, r5
	ldr	r1, [r4]
	str	r2, [r1, #4]
	str	r1, [r2]
	ldr	r2, [r3, #-28]!
	str	r4, [r2, #4]
	strd	r2, [r4]
	ldr	r3, [r5, #-20]
	str	r4, [r5, #-28]
	ldr	r4, [r5, #-12]
	sub	r3, r3, #1
	cmp	r7, r4
	str	r3, [r5, #-20]
	bne	.L12995
	cmp	fp, #0
	moveq	r3, #0
	andne	r3, r8, #1
	cmp	r3, #0
	bne	.L12997
.L12999:
	cmp	r10, #0
	bne	.L13001
.L12986:
	ldr	r3, [r5, #-56]
	cmp	r3, #0
	beq	.L13001
	ldr	r0, [sp, #4]
	bl	gs_start_rx(PLT)
.L13001:
	ldr	r0, [sp, #4]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq(PLT)
.L13024:
	ldr	r3, [r5, #-4]
	add	r0, r3, r0
	str	r0, [r5, #-4]
.L12988:
	cmp	r8, #0
	bne	.L12997
.L13023:
	ldr	r3, [r5, #-12]
	cmp	r7, r3
	beq	.L12999
	ldr	r3, [fp, #164]
	tst	r3, #1
	bne	.L12999
	cmp	r8, #0
	beq	.L13000
	ldr	r3, .L13025+4
	mov	r1, r5
.LPIC3017:
	add	r3, pc, r3
	ldr	r0, [r3, #3412]
	bl	queue_work(PLT)
	b	.L12999
.L12997:
	mov	r0, fp
	bl	tty_flip_buffer_push(PLT)
	b	.L13023
.L13000:
	ldr	r0, .L13025+8
	ldrb	r1, [r5, #-43]	@ zero_extendqisi2
.LPIC3018:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L12999
.L13026:
	.align	2
.L13025:
	.word	.LC646-(.LPIC3016+8)
	.word	.LANCHOR2-(.LPIC3017+8)
	.word	.LC647-(.LPIC3018+8)
	.fnend
	.size	gs_rx_push, .-gs_rx_push
	.align	2
	.type	gser_unbind, %function
gser_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r1
	mov	r4, r1
	str	lr, [sp, #4]
	bl	usb_free_all_descriptors(PLT)
	ldrd	r0, [r4, #152]
	bl	gs_free_req(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
	.fnend
	.size	gser_unbind, .-gser_unbind
	.align	2
	.type	gser_bind, %function
gser_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	str	r8, [sp, #16]
	mov	r8, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	ldr	r6, [r0, #24]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L13030
	ldr	r7, .L13061
	uxtb	r5, r5
	strb	r5, [r4, #136]
.LPIC3019:
	add	r7, pc, r7
	add	r1, r7, #2720
	strb	r5, [r7, #2710]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L13032
	add	r1, r7, #2720
	str	r0, [r4, #80]
	add	r1, r1, #12
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L13032
	add	r1, r7, #2736
	str	r0, [r4, #84]
	add	r1, r1, #8
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L13032
	str	r3, [r4, #152]
	mov	r1, #10
	mov	r2, #208
	str	r6, [r3]
	bl	gs_alloc_req(PLT)
	cmp	r0, #0
	str	r0, [r4, #156]
	beq	.L13039
	ldr	r3, .L13061+4
	ldrb	r2, [r7, #2734]	@ zero_extendqisi2
	ldrb	r1, [r7, #2722]	@ zero_extendqisi2
.LPIC3023:
	add	r3, pc, r3
	strb	r2, [r7, #2770]
	str	r3, [r0, #28]
	ldr	r3, [r4, #156]
	strb	r1, [r7, #2758]
	strb	r1, [r7, #2782]
	strb	r2, [r7, #2794]
	str	r4, [r3, #32]
	ldr	r3, [r8, #24]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #2
	bls	.L13034
	ldrb	r2, [r7, #2746]	@ zero_extendqisi2
	strb	r2, [r7, #2806]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	strhib	r2, [r7, #2818]
.L13034:
	ldr	r1, .L13061+8
	mov	r0, r4
.LPIC3034:
	add	r1, pc, r1
	add	r2, r1, #2960
	add	r3, r1, #2992
	add	r2, r2, #4
	add	r3, r3, #8
	add	r1, r1, #2928
	bl	usb_assign_descriptors(PLT)
	subs	r5, r0, #0
	beq	.L13035
.L13030:
	ldr	r1, [r4, #156]
	cmp	r1, #0
	beq	.L13033
	ldr	r0, [r4, #152]
	bl	gs_free_req(PLT)
.L13033:
	ldr	r3, [r4, #152]
	ldr	r1, .L13061+12
	cmp	r3, #0
	movne	r2, #0
.LPIC3037:
	add	r1, pc, r1
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r6]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err(PLT)
.L13035:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13032:
	mvn	r5, #18
	b	.L13030
.L13039:
	mvn	r5, #18
	b	.L13033
.L13062:
	.align	2
.L13061:
	.word	.LANCHOR1-(.LPIC3019+8)
	.word	gser_notify_complete-(.LPIC3023+8)
	.word	.LANCHOR0-(.LPIC3034+8)
	.word	.LC503-(.LPIC3037+8)
	.fnend
	.size	gser_bind, .-gser_bind
	.align	2
	.type	acm_unbind, %function
acm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r1
	mov	r4, r1
	str	lr, [sp, #4]
	bl	usb_free_all_descriptors(PLT)
	ldrd	r0, [r4, #152]
	bl	gs_free_req(PLT)
	ldr	r0, [r4]
	bl	kfree(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
	.fnend
	.size	acm_unbind, .-acm_unbind
	.align	2
	.type	acm_bind, %function
acm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	str	r8, [sp, #16]
	mov	r8, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldr	r7, [r0, #24]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L13066
	ldr	r6, .L13106
	uxtb	r5, r5
	mov	r0, r8
	mov	r1, r4
	strb	r5, [r4, #136]
.LPIC3038:
	add	r6, pc, r6
	strb	r5, [r6, #2830]
	strb	r5, [r6, #2838]
	strb	r5, [r6, #2851]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L13066
	uxtb	r5, r5
	add	r1, r6, #2864
	add	r1, r1, #12
	strb	r5, [r4, #137]
	strb	r5, [r6, #2858]
	strb	r5, [r6, #2852]
	strb	r5, [r6, #2872]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L13068
	add	r1, r6, #2880
	str	r0, [r4, #80]
	add	r1, r1, #8
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L13068
	add	r1, r6, #2896
	str	r0, [r4, #84]
	add	r1, r1, #4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L13068
	str	r3, [r4, #152]
	mov	r2, #208
	mov	r1, #10
	str	r7, [r3]
	bl	gs_alloc_req(PLT)
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r4, #156]
	beq	.L13068
	ldr	r1, .L13106+4
	mov	r0, r4
	ldr	r3, .L13106+8
	ldrb	lr, [r6, #2878]	@ zero_extendqisi2
	ldrb	ip, [r6, #2890]	@ zero_extendqisi2
.LPIC3047:
	add	r1, pc, r1
	ldrb	r5, [r6, #2902]	@ zero_extendqisi2
.LPIC3056:
	add	r3, pc, r3
	str	r1, [r2, #28]
	ldr	r8, [r4, #156]
	add	r1, r3, #3040
	add	r2, r3, #3088
	add	r1, r1, #8
	strb	lr, [r6, #2914]
	add	r2, r2, #4
	add	r3, r3, #3136
	strb	r5, [r6, #2938]
	strb	lr, [r6, #2950]
	str	r4, [r8, #32]
	strb	ip, [r6, #2926]
	strb	ip, [r6, #2962]
	bl	usb_assign_descriptors(PLT)
	subs	r5, r0, #0
	beq	.L13069
.L13066:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L13070
	bl	kfree(PLT)
.L13070:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L13071
	bl	kfree(PLT)
.L13071:
	ldr	r1, [r4, #156]
	cmp	r1, #0
	beq	.L13072
	ldr	r0, [r4, #152]
	bl	gs_free_req(PLT)
.L13072:
	ldr	r3, [r4, #152]
	ldr	r1, .L13106+12
	cmp	r3, #0
	movne	r2, #0
.LPIC3059:
	add	r1, pc, r1
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r4
	str	r5, [sp]
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err(PLT)
.L13069:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13068:
	mvn	r5, #18
	b	.L13066
.L13107:
	.align	2
.L13106:
	.word	.LANCHOR1-(.LPIC3038+8)
	.word	acm_cdc_notify_complete-(.LPIC3047+8)
	.word	.LANCHOR0-(.LPIC3056+8)
	.word	.LC648-(.LPIC3059+8)
	.fnend
	.size	acm_bind, .-acm_bind
	.align	2
	.type	gs_start_io, %function
gs_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	adds	r3, r0, #44
	add	r4, r0, #32
	strd	r10, [sp, #24]
	mov	fp, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldr	r2, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	ldr	r5, [r2, #84]
	beq	.L13138
	ldr	r6, [r0, #44]
	rsb	r6, r6, #8
	cmp	r6, #0
	ble	.L13111
	ldr	r7, .L13169
	mov	r8, #0
.LPIC3061:
	add	r7, pc, r7
	b	.L13110
.L13114:
	str	r7, [r0, #28]
	cmp	r6, r8
	ldr	r1, [fp, #36]
	str	r2, [fp, #36]
	str	r4, [r0, #36]
	str	r1, [r0, #40]
	str	r2, [r1]
	ldr	r2, [fp, #44]
	add	r2, r2, #1
	str	r2, [fp, #44]
	ble	.L13113
.L13110:
	mov	r2, #32
	mov	r0, r5
	mov	r1, #4096
	add	r8, r8, #1
	bl	gs_alloc_req(PLT)
	cmp	r0, #0
	add	r2, r0, #36
	bne	.L13114
.L13112:
	ldr	r2, [fp, #32]
	cmp	r4, r2
	beq	.L13115
.L13113:
	ldr	r2, [fp, #4]
.L13111:
	adds	r3, fp, #88
	ldr	r7, [r2, #80]
	add	r6, fp, #76
	str	r3, [sp, #4]
	beq	.L13161
	ldr	r8, [fp, #88]
	rsb	r8, r8, #8
	cmp	r8, #0
	ble	.L13118
	ldr	r9, .L13169+4
	mov	r10, #0
.LPIC3063:
	add	r9, pc, r9
	b	.L13117
.L13121:
	str	r9, [r0, #28]
	cmp	r8, r10
	ldr	r1, [fp, #80]
	str	r2, [fp, #80]
	str	r6, [r0, #36]
	str	r1, [r0, #40]
	str	r2, [r1]
	ldr	r2, [fp, #88]
	add	r2, r2, #1
	str	r2, [fp, #88]
	ble	.L13118
.L13117:
	mov	r2, #32
	mov	r0, r7
	mov	r1, #4096
	add	r10, r10, #1
	bl	gs_alloc_req(PLT)
	cmp	r0, #0
	add	r2, r0, #36
	bne	.L13121
.L13119:
	ldr	r2, [fp, #76]
	cmp	r6, r2
	beq	.L13162
.L13118:
	mov	r7, #0
	mov	r0, fp
	str	r7, [fp, #56]
	bl	gs_start_rx(PLT)
	ldr	r2, [fp, #4]
	cmp	r2, r7
	beq	.L13133
	cmp	r0, #0
	moveq	r8, #256
	moveq	r7, #512
	bne	.L13163
.L13126:
	ldr	r3, [sp]
	cmp	r3, #0
	bne	.L13127
	mov	r8, #256
	mov	r7, #512
	b	.L13129
.L13164:
	ldr	ip, [r2, #4]
	ldr	lr, [r2]
	str	ip, [lr, #4]
	str	lr, [ip]
	str	r8, [r2]
	str	r7, [r2, #4]
	bl	gs_free_req(PLT)
.L13129:
	ldr	r2, [fp, #32]
	mov	r0, r5
	cmp	r4, r2
	sub	r1, r2, #36
	bne	.L13164
.L13128:
	ldr	r2, [fp, #4]
	mov	r7, #256
	mov	r5, #512
	ldr	r4, [r2, #80]
.L13131:
	ldr	r3, [sp, #4]
	cmp	r3, #0
	bne	.L13132
	mov	r7, #256
	mov	r5, #512
	b	.L13134
.L13165:
	ldr	ip, [r2, #4]
	ldr	lr, [r2]
	str	ip, [lr, #4]
	str	lr, [ip]
	str	r7, [r2]
	str	r5, [r2, #4]
	bl	gs_free_req(PLT)
.L13134:
	ldr	r2, [fp, #76]
	mov	r0, r4
	cmp	r6, r2
	sub	r1, r2, #36
	bne	.L13165
.L13133:
	mvn	r0, #4
	b	.L13155
.L13162:
	mov	r7, #256
	mov	r6, #512
.L13156:
	ldr	r3, [sp]
	cmp	r3, #0
	bne	.L13123
	mov	r7, #256
	mov	r6, #512
	b	.L13124
.L13166:
	ldr	ip, [r2, #4]
	ldr	lr, [r2]
	str	ip, [lr, #4]
	str	lr, [ip]
	str	r7, [r2]
	str	r6, [r2, #4]
	bl	gs_free_req(PLT)
.L13124:
	ldr	r2, [fp, #32]
	mov	r0, r5
	cmp	r4, r2
	sub	r1, r2, #36
	bne	.L13166
.L13115:
	mvn	r0, #11
.L13155:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13163:
	ldr	r0, [fp, #8]
	bl	tty_wakeup(PLT)
	mov	r0, r7
	b	.L13155
.L13138:
	ldr	r7, .L13169+8
	mov	r6, r3
.LPIC3060:
	add	r7, pc, r7
	b	.L13109
.L13167:
	str	r7, [r0, #28]
	cmp	r6, #8
	ldr	r1, [fp, #36]
	str	r2, [fp, #36]
	str	r4, [r0, #36]
	str	r1, [r0, #40]
	str	r2, [r1]
	beq	.L13113
.L13109:
	mov	r2, #32
	mov	r0, r5
	mov	r1, #4096
	add	r6, r6, #1
	bl	gs_alloc_req(PLT)
	cmp	r0, #0
	add	r2, r0, #36
	bne	.L13167
	b	.L13112
.L13161:
	ldr	r8, .L13169+12
	mov	r9, r3
.LPIC3062:
	add	r8, pc, r8
	b	.L13120
.L13168:
	str	r8, [r0, #28]
	cmp	r9, #8
	ldr	r1, [fp, #80]
	str	r2, [fp, #80]
	str	r6, [r0, #36]
	str	r1, [r0, #40]
	str	r2, [r1]
	beq	.L13118
.L13120:
	mov	r2, #32
	mov	r0, r7
	mov	r1, #4096
	add	r9, r9, #1
	bl	gs_alloc_req(PLT)
	cmp	r0, #0
	add	r2, r0, #36
	bne	.L13168
	b	.L13119
.L13132:
	ldr	r2, [fp, #76]
	mov	r0, r4
	cmp	r6, r2
	sub	r1, r2, #36
	beq	.L13133
	ldr	ip, [r2, #4]
	ldr	lr, [r2]
	str	ip, [lr, #4]
	str	lr, [ip]
	str	r7, [r2]
	str	r5, [r2, #4]
	bl	gs_free_req(PLT)
	ldr	r2, [fp, #88]
	sub	r2, r2, #1
	str	r2, [fp, #88]
	b	.L13131
.L13127:
	ldr	r2, [fp, #32]
	mov	r0, r5
	cmp	r4, r2
	sub	r1, r2, #36
	beq	.L13128
	ldr	ip, [r2, #4]
	ldr	lr, [r2]
	str	ip, [lr, #4]
	str	lr, [ip]
	str	r8, [r2]
	str	r7, [r2, #4]
	bl	gs_free_req(PLT)
	ldr	r2, [fp, #44]
	sub	r2, r2, #1
	str	r2, [fp, #44]
	b	.L13126
.L13123:
	ldr	r2, [fp, #32]
	mov	r0, r5
	cmp	r4, r2
	sub	r1, r2, #36
	beq	.L13115
	ldr	ip, [r2, #4]
	ldr	lr, [r2]
	str	ip, [lr, #4]
	str	lr, [ip]
	str	r7, [r2]
	str	r6, [r2, #4]
	bl	gs_free_req(PLT)
	ldr	r2, [fp, #44]
	sub	r2, r2, #1
	str	r2, [fp, #44]
	b	.L13156
.L13170:
	.align	2
.L13169:
	.word	gs_read_complete-(.LPIC3061+8)
	.word	gs_write_complete-(.LPIC3063+8)
	.word	gs_read_complete-(.LPIC3060+8)
	.word	gs_write_complete-(.LPIC3062+8)
	.fnend
	.size	gs_start_io, .-gs_start_io
	.align	2
	.type	gs_open, %function
gs_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L13190
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
.LPIC3064:
	add	r4, pc, r4
	add	r6, r4, #3824
	mov	r3, r5, asl #5
	sub	r5, r3, r5, asl #2
	add	r6, r6, r5
	add	r5, r4, r5
.L13176:
	mov	r0, r6
	bl	mutex_lock(PLT)
	ldr	r4, [r5, #3848]
	subs	r0, r4, #0
	beq	.L13172
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L13173
	add	r3, r3, #1
	mov	r0, r4
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r6
	bl	mutex_unlock(PLT)
	mov	r0, #0
.L13187:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13173:
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	mov	r0, r4
	cmp	r3, #0
	beq	.L13175
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r6
	bl	mutex_unlock(PLT)
	mov	r0, #1
	bl	msleep(PLT)
	b	.L13176
.L13172:
	mov	r0, r6
	bl	mutex_unlock(PLT)
	mvn	r0, #18
	b	.L13187
.L13175:
	mov	r3, #1
	mov	r0, r4
	strb	r3, [r4, #16]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r6
	bl	mutex_unlock(PLT)
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L13189
.L13177:
	str	r4, [r7, #280]
	ldr	r6, [r4, #4]
	mov	r5, #0
	mov	r3, #1
	str	r7, [r4, #8]
	strb	r5, [r4, #16]
	str	r3, [r4, #12]
	cmp	r6, r5
	beq	.L13183
	mov	r0, r4
	bl	gs_start_io(PLT)
	ldr	r3, [r6, #108]
	cmp	r3, #0
	beq	.L13183
	mov	r0, r6
	blx	r3
.L13182:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	b	.L13187
.L13183:
	mov	r5, #0
	b	.L13182
.L13189:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, .L13190+4
.LPIC3067:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #52]
	cmp	r0, #0
	beq	.L13178
	mov	r1, #208
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	mov	r6, r0
	str	r0, [r4, #96]
	beq	.L13179
.L13180:
	mov	r3, #8192
	str	r6, [r4, #104]
	mov	r0, r4
	str	r6, [r4, #100]
	str	r3, [r4, #92]
	bl	_raw_spin_lock_irq(PLT)
	b	.L13177
.L13179:
	mov	r0, r4
	mvn	r5, #11
	bl	_raw_spin_lock_irq(PLT)
	strb	r6, [r4, #16]
	b	.L13182
.L13178:
	mov	r3, #16
	mov	r6, r3
	str	r3, [r4, #96]
	b	.L13180
.L13191:
	.align	2
.L13190:
	.word	.LANCHOR4-(.LPIC3064+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3067+8))
	.fnend
	.size	gs_open, .-gs_open
	.align	2
	.global	gserial_setup
	.type	gserial_setup, %function
gserial_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 88
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r3, .L13230
	strd	r10, [sp, #24]
	ldr	r10, .L13230+4
	sub	fp, r1, #1
	strd	r8, [sp, #16]
	cmp	fp, #7
	mov	r8, r1
	strd	r6, [sp, #8]
	str	lr, [sp, #32]
	.pad #100
	sub	sp, sp, #100
.LPIC3068:
	add	r10, pc, r10
	str	r0, [sp, #24]
	ldr	r3, [r10, r3]
	str	r3, [sp, #20]
	ldr	r3, [r3]
	str	r3, [sp, #92]
	bhi	.L13208
	ldr	r9, .L13230+8
	mov	r0, r1
	mov	r1, #0
	bl	__alloc_tty_driver(PLT)
	cmp	r0, #0
.LPIC3069:
	add	r9, pc, r9
	str	r0, [r9, #4048]
	beq	.L13209
	ldr	r1, .L13230+12
	mov	r5, #3
	mov	lr, #14
	ldr	r2, .L13230+16
	ldr	r3, .L13230+20
	strh	r5, [r0, #96]	@ movhi
	mov	r5, #1
	str	lr, [r0, #144]
	mov	lr, #9600
.LPIC3070:
	add	r1, pc, r1
	strh	r5, [r0, #98]	@ movhi
	mov	r5, #0
.LPIC3071:
	add	r2, pc, r2
	str	r1, [r0, #72]
	ldr	r1, .L13230+24
	str	r2, [r0, #76]
	ldr	r3, [r10, r3]
	movw	r2, #3261
	str	lr, [r0, #140]
.LPIC3072:
	add	r1, pc, r1
	ldrd	r6, [r3]
	add	r1, r1, #208
	strd	r6, [r0, #100]
	ldrd	r6, [r3, #8]
	strd	r6, [r0, #108]
	ldrd	r6, [r3, #16]
	str	r2, [r0, #108]
	strd	r6, [r0, #116]
	ldrd	r6, [r3, #24]
	strd	r6, [r0, #124]
	ldrd	r6, [r3, #32]
	strd	r6, [r0, #132]
	str	lr, [r0, #136]
	bl	tty_set_operations(PLT)
	ldr	r0, .L13230+28
	mov	r3, r5
	str	r5, [sp]
	mov	r2, #1
	mov	r1, #10
.LPIC3073:
	add	r0, pc, r0
	bl	__alloc_workqueue_key(PLT)
	ldr	r3, .L13230+32
	cmp	r0, r5
.LPIC3074:
	add	r3, pc, r3
	str	r0, [r3, #3412]
	beq	.L13210
	add	r2, r9, #3824
	ldr	r1, .L13230+36
	add	r9, r9, #4048
	mov	r6, r2
	ldr	r3, .L13230+40
	add	r9, r9, #4
	str	r2, [sp, #28]
	ldr	r2, .L13230+44
	ldr	r0, .L13230+48
.LPIC3079:
	add	r1, pc, r1
	add	r7, r1, #4048
.LPIC3078:
	add	r2, pc, r2
	str	r1, [sp, #32]
	add	r7, r7, #4
.LPIC3076:
	add	r0, pc, r0
	str	r2, [sp, #12]
	ldr	r3, [r10, r3]
	mov	fp, r0
	str	r10, [sp, #36]
	str	r3, [sp, #8]
	ldr	r3, .L13230+52
.LPIC3080:
	add	r3, pc, r3
	str	r3, [sp, #16]
	b	.L13197
.L13226:
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L13224
.L13195:
	mov	r10, #0
	mov	r0, r4
	ldr	r1, [sp, #12]
	mov	r2, r7
	add	r6, r6, #28
	str	r10, [r0], #20
	bl	__init_waitqueue_head(PLT)
	ldr	r1, [sp, #16]
	add	r0, r4, #108
	mov	r2, r7
	bl	__init_waitqueue_head(PLT)
	ldr	r3, .L13230+56
	mov	r2, #2560
	strb	r5, [r4, #17]
	add	r5, r5, #1
	add	lr, r4, #64
	strb	r10, [r4, #125]
	add	r0, r4, #32
	add	r1, r4, #48
	str	r2, [r4, #60]
	mov	ip, #9600
	add	r2, r4, #76
	strb	r10, [r4, #126]
.LPIC3082:
	add	r3, pc, r3
	cmp	r5, r8
	str	lr, [r4, #64]
	str	lr, [r4, #68]
	str	r3, [r4, #72]
	mov	r3, #8
	str	r0, [r4, #32]
	str	r0, [r4, #36]
	str	r1, [r4, #48]
	str	r1, [r4, #52]
	str	r2, [r4, #76]
	str	r2, [r4, #80]
	str	ip, [r4, #120]
	strb	r3, [r4, #124]
	str	r4, [r6, #-4]
	beq	.L13225
.L13197:
	mov	r0, r6
	mov	r1, fp
	mov	r2, r9
	bl	__mutex_init(PLT)
	ldr	r3, [sp, #8]
	ldr	r0, [r3, #8]
	cmp	r0, #0
	bne	.L13226
	mov	r4, #16
	b	.L13195
.L13224:
.L13196:
	cmp	r5, #0
	sub	fp, r5, #1
	mvn	r4, #11
	beq	.L13199
.L13194:
	ldr	r3, .L13230+60
	mov	r5, fp, asl #5
	mov	r6, fp
	sub	r5, r5, fp, asl #2
.LPIC3093:
	add	r3, pc, r3
	add	r3, r3, #3824
	add	r5, r3, r5
.L13205:
	ldr	r0, [r5, #24]
	sub	r5, r5, #28
	bl	kfree(PLT)
	cmp	r6, #0
	sub	r6, r6, #1
	bne	.L13205
.L13199:
	ldr	r3, .L13230+64
.LPIC3094:
	add	r3, pc, r3
	ldr	r0, [r3, #3412]
	cmp	r0, #0
	beq	.L13206
	bl	destroy_workqueue(PLT)
.L13206:
	ldr	r5, .L13230+68
.LPIC3095:
	add	r5, pc, r5
	ldr	r0, [r5, #4048]
	bl	put_tty_driver(PLT)
	mov	r3, #0
	mov	r0, r4
	str	r3, [r5, #4048]
.L13193:
	ldr	r3, [sp, #20]
	ldr	r2, [sp, #92]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L13227
	add	sp, sp, #100
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13225:
	ldr	r3, [sp, #32]
	ldr	r10, [sp, #36]
	ldr	r0, [r3, #4048]
	str	r5, [r3, #4052]
	bl	tty_register_driver(PLT)
	subs	r4, r0, #0
	bne	.L13228
	ldr	r9, .L13230+72
	sub	r7, r7, #4048
	ldr	r3, [sp, #24]
	sub	r7, r7, #4
	ldr	r6, .L13230+76
.LPIC3089:
	add	r9, pc, r9
	add	r5, r3, #32
	add	r9, r9, #3712
.LPIC3088:
	add	r6, pc, r6
	b	.L13201
.L13200:
	add	r4, r4, #1
	cmp	r4, r8
	beq	.L13229
.L13201:
	ldr	r0, [r7, #4048]
	mov	r1, r4
	mov	r2, r5
	bl	tty_register_device(PLT)
	cmn	r0, #4096
	bls	.L13200
	mov	r3, r0
	mov	r2, r4
	mov	r0, r6
	mov	r1, r9
	add	r4, r4, #1
	bl	printk(PLT)
	cmp	r4, r8
	bne	.L13201
.L13229:
	ldr	r2, .L13230+80
	mov	r9, #0
	add	r5, sp, #44
	ldr	r3, .L13230+84
	ldr	fp, .L13230+88
	ldr	r7, .L13230+92
.LPIC3092:
	add	r2, pc, r2
	ldr	r4, [sp, #28]
	str	r2, [sp, #8]
	ldr	r6, [r10, r3]
.LPIC3091:
	add	fp, pc, fp
.LPIC3090:
	add	r7, pc, r7
	str	fp, [sp, #12]
	mov	fp, r9
	mov	r9, r7
	mov	r7, r6
	mov	r6, r5
.L13204:
	mov	r1, #48
	mov	r2, r9
	ldr	r5, [r4, #24]
	mov	r3, fp
	mov	r0, r6
	bl	snprintf(PLT)
	mov	r0, r6
	mov	r1, #0
	bl	debugfs_create_dir(PLT)
	cmp	r0, #0
	str	r0, [r7]
	beq	.L13203
	cmn	r0, #4096
	bhi	.L13203
	ldr	lr, .L13230+96
	mov	r2, r0
	mov	r1, #292
	mov	r3, r5
	ldr	r0, [sp, #12]
	ldr	lr, [r10, lr]
	str	lr, [sp]
	bl	debugfs_create_file(PLT)
	ldr	lr, .L13230+100
	mov	r3, r5
	mov	r1, #420
	ldr	r2, [r7]
	ldr	r0, [sp, #8]
	ldr	lr, [r10, lr]
	str	lr, [sp]
	bl	debugfs_create_file(PLT)
.L13203:
	add	fp, fp, #1
	add	r4, r4, #28
	cmp	fp, r8
	bne	.L13204
	mov	r0, #0
	b	.L13193
.L13210:
	mvn	r4, #11
	b	.L13194
.L13208:
	mvn	r0, #21
	b	.L13193
.L13209:
	mvn	r0, #11
	b	.L13193
.L13227:
	bl	__stack_chk_fail(PLT)
.L13228:
	ldr	r1, .L13230+104
	mov	r2, r4
	sub	fp, r5, #1
	ldr	r0, .L13230+108
.LPIC3086:
	add	r1, pc, r1
	add	r1, r1, #3712
.LPIC3085:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13194
.L13231:
	.align	2
.L13230:
	.word	__stack_chk_guard(GOT)
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC3068+8)
	.word	.LANCHOR4-(.LPIC3069+8)
	.word	.LC649-(.LPIC3070+8)
	.word	.LC650-(.LPIC3071+8)
	.word	tty_std_termios(GOT)
	.word	.LANCHOR5-(.LPIC3072+8)
	.word	.LC651-(.LPIC3073+8)
	.word	.LANCHOR2-(.LPIC3074+8)
	.word	.LANCHOR4-(.LPIC3079+8)
	.word	kmalloc_caches(GOT)
	.word	.LC653-(.LPIC3078+8)
	.word	.LC652-(.LPIC3076+8)
	.word	.LC654-(.LPIC3080+8)
	.word	gs_rx_push-(.LPIC3082+8)
	.word	.LANCHOR4-(.LPIC3093+8)
	.word	.LANCHOR2-(.LPIC3094+8)
	.word	.LANCHOR4-(.LPIC3095+8)
	.word	.LANCHOR3-(.LPIC3089+8)
	.word	.LC656-(.LPIC3088+8)
	.word	.LC659-(.LPIC3092+8)
	.word	gs_dent(GOT)
	.word	.LC658-(.LPIC3091+8)
	.word	.LC657-(.LPIC3090+8)
	.word	debug_adb_ops(GOT)
	.word	debug_rst_ops(GOT)
	.word	.LANCHOR3-(.LPIC3086+8)
	.word	.LC655-(.LPIC3085+8)
	.fnend
	.size	gserial_setup, .-gserial_setup
	.align	2
	.global	gserial_cleanup
	.type	gserial_cleanup, %function
gserial_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	ldr	r8, .L13267
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
.LPIC3097:
	add	r8, pc, r8
	ldr	r0, [r8, #4048]
	cmp	r0, #0
	beq	.L13232
	ldr	r3, [r8, #4052]
	cmp	r3, #0
	beq	.L13234
	mov	r4, #0
	b	.L13235
.L13264:
	ldr	r0, [r8, #4048]
.L13235:
	mov	r1, r4
	add	r4, r4, #1
	bl	tty_unregister_device(PLT)
	ldr	r3, [r8, #4052]
	cmp	r3, r4
	bhi	.L13264
	cmp	r3, #0
	beq	.L13234
	ldr	fp, .L13267+4
	mov	r9, #0
	add	r7, r8, #3824
	mov	r10, r9
.LPIC3108:
	add	fp, pc, fp
.L13243:
	mov	r0, r7
	bl	mutex_lock(PLT)
	ldr	r4, [r7, #24]
	mov	r0, r7
	str	r10, [r7, #24]
	bl	mutex_unlock(PLT)
	add	r0, r4, #60
	bl	cancel_work_sync(PLT)
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	bne	.L13237
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L13265
.L13237:
	mov	r0, r4
	add	r5, sp, #4
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r2, .L13267+8
	mov	r3, sp
	str	r10, [sp, #4]
	bic	r3, r3, #8128
	add	r6, r4, #20
	bic	r3, r3, #63
	ldr	r1, [r3, #12]
	add	r3, sp, #16
.LPIC3110:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L13241
.L13239:
	bl	_raw_spin_unlock_irq(PLT)
	bl	schedule(PLT)
.L13241:
	mov	r0, r6
	mov	r1, r5
	mov	r2, #2
	bl	prepare_to_wait(PLT)
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #12]
	mov	r0, r4
	cmp	r3, #0
	bne	.L13239
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13239
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r6
	mov	r1, r5
	bl	finish_wait(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L13266
.L13242:
	mov	r0, r4
	add	r9, r9, #1
	bl	kfree(PLT)
	ldr	r3, [r8, #4052]
	add	r7, r7, #28
	cmp	r9, r3
	bcc	.L13243
.L13234:
	ldr	r3, .L13267+12
	mov	r5, #0
	ldr	r4, .L13267+16
.LPIC3111:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
.LPIC3099:
	add	r4, pc, r4
	str	r5, [r4, #4052]
	ldr	r0, [r3]
	bl	debugfs_remove_recursive(PLT)
	ldr	r3, .L13267+20
.LPIC3101:
	add	r3, pc, r3
	ldr	r0, [r3, #3412]
	bl	destroy_workqueue(PLT)
	ldr	r0, [r4, #4048]
	bl	tty_unregister_driver(PLT)
	ldr	r0, [r4, #4048]
	bl	put_tty_driver(PLT)
	str	r5, [r4, #4048]
.L13232:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13265:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L13242
.L13266:
	mov	r0, fp
	movw	r1, #1457
	bl	warn_slowpath_null(PLT)
	b	.L13242
.L13268:
	.align	2
.L13267:
	.word	.LANCHOR4-(.LPIC3097+8)
	.word	.LC339-(.LPIC3108+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC3110+8))
	.word	gs_dent(GOT_PREL)+(.-(.LPIC3111+8))
	.word	.LANCHOR4-(.LPIC3099+8)
	.word	.LANCHOR2-(.LPIC3101+8)
	.fnend
	.size	gserial_cleanup, .-gserial_cleanup
	.align	2
	.type	acm_function_cleanup, %function
acm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	gserial_cleanup(PLT)
	.fnend
	.size	acm_function_cleanup, .-acm_function_cleanup
	.align	2
	.type	serial_function_cleanup, %function
serial_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	gserial_cleanup(PLT)
	.fnend
	.size	serial_function_cleanup, .-serial_function_cleanup
	.align	2
	.global	gserial_connect
	.type	gserial_connect, %function
gserial_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13286
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3112:
	add	r3, pc, r3
	ldr	r2, [r3, #4048]
	cmp	r2, #0
	beq	.L13279
	ldr	r2, [r3, #4052]
	cmp	r1, r2
	bcs	.L13279
	mov	r4, r0
	ldr	r0, [r0, #80]
	mov	r2, r1, asl #5
	sub	r1, r2, r1, asl #2
	ldr	r2, [r0, #8]
	add	r3, r3, r1
	ldr	r5, [r3, #3848]
	ldr	r1, [r0, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	blt	.L13272
	ldr	r3, [r4, #80]
	str	r5, [r3]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	blt	.L13273
	ldr	r3, [r4, #84]
	mov	r0, r5
	str	r5, [r3]
	bl	_raw_spin_lock_irqsave(PLT)
	str	r5, [r4, #76]
	ldr	r1, [r5, #120]
	mov	r7, r0
	str	r4, [r5, #4]
	str	r1, [r4, #88]
	ldrh	r1, [r5, #124]
	strh	r1, [r4, #92]	@ movhi
	ldrb	r2, [r5, #126]	@ zero_extendqisi2
	strb	r2, [r4, #94]
	ldr	r3, [r5, #12]
	cmp	r3, #0
	bne	.L13285
	ldr	r3, [r4, #112]
	cmp	r3, #0
	beq	.L13276
.L13284:
	mov	r0, r4
	blx	r3
.L13276:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
.L13272:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13273:
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #80]
	mov	r2, #0
	str	r2, [r3]
	b	.L13272
.L13285:
	mov	r0, r5
	bl	gs_start_io(PLT)
	ldr	r3, [r4, #108]
	cmp	r3, #0
	bne	.L13284
	b	.L13276
.L13279:
	mvn	r6, #5
	b	.L13272
.L13287:
	.align	2
.L13286:
	.word	.LANCHOR4-(.LPIC3112+8)
	.fnend
	.size	gserial_connect, .-gserial_connect
	.align	2
	.global	gserial_disconnect
	.type	gserial_disconnect, %function
gserial_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #76]
	cmp	r4, #0
	beq	.L13288
	mov	r6, r0
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r5, r0
	ldr	r0, [r6, #88]
	mov	r2, #0
	str	r0, [r4, #120]
	ldrh	r0, [r6, #92]
	strh	r0, [r4, #124]	@ movhi
	ldrb	r1, [r6, #94]	@ zero_extendqisi2
	str	r2, [r4, #4]
	strb	r1, [r4, #126]
	str	r2, [r6, #76]
	ldr	r3, [r4, #12]
	cmp	r3, r2
	bne	.L13290
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L13291
.L13290:
	mov	r1, #1
	add	r0, r4, #108
	mov	r2, r1
	mov	r3, #0
	bl	__wake_up(PLT)
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L13291
	bl	tty_hangup(PLT)
.L13291:
	mov	r1, r5
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r6, #84]
	mov	r5, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #84]
	str	r5, [r3]
	ldr	r0, [r6, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #80]
	mov	r0, r4
	str	r5, [r3]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #12]
	mov	r7, r0
	cmp	r3, r5
	beq	.L13309
.L13293:
	ldr	r3, [r4, #32]
	add	r8, r4, #32
	ldr	r5, [r6, #84]
	cmp	r8, r3
	beq	.L13294
	mov	r10, #256
	mov	r9, #512
.L13295:
	ldr	r2, [r3, #4]
	sub	r1, r3, #36
	mov	r0, r5
	ldr	ip, [r3]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	bl	gs_free_req(PLT)
	ldr	r3, [r4, #32]
	cmp	r8, r3
	bne	.L13295
	ldr	r5, [r6, #84]
.L13294:
	ldr	r3, [r4, #48]
	add	r8, r4, #48
	cmp	r3, r8
	movne	r10, #256
	movne	r9, #512
	beq	.L13300
.L13299:
	ldr	r2, [r3, #4]
	sub	r1, r3, #36
	mov	r0, r5
	ldr	ip, [r3]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	bl	gs_free_req(PLT)
	ldr	r3, [r4, #48]
	cmp	r3, r8
	bne	.L13299
.L13300:
	ldr	r3, [r4, #76]
	add	r5, r4, #76
	ldr	r6, [r6, #80]
	cmp	r3, r5
	movne	r9, #256
	movne	r8, #512
	beq	.L13298
.L13301:
	ldr	r2, [r3, #4]
	sub	r1, r3, #36
	mov	r0, r6
	ldr	ip, [r3]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	bl	gs_free_req(PLT)
	ldr	r3, [r4, #76]
	cmp	r3, r5
	bne	.L13301
.L13298:
	mov	r3, #0
	mov	r1, r7
	mov	r0, r4
	str	r3, [r4, #84]
	str	r3, [r4, #88]
	str	r3, [r4, #40]
	str	r3, [r4, #44]
	str	r3, [r4, #140]
	str	r3, [r4, #136]
	str	r3, [r4, #132]
	str	r3, [r4, #128]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L13309:
	ldrb	r5, [r4, #16]	@ zero_extendqisi2
	cmp	r5, #0
	bne	.L13293
	ldr	r0, [r4, #96]
	bl	kfree(PLT)
	str	r5, [r4, #96]
	b	.L13293
.L13288:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	gserial_disconnect, .-gserial_disconnect
	.align	2
	.global	gsdio_free_req
	.type	gsdio_free_req, %function
gsdio_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gsdio_free_req, .-gsdio_free_req
	.align	2
	.global	gsdio_alloc_req
	.type	gsdio_alloc_req, %function
gsdio_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, r2
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L13316
	mov	r1, r5
	str	r6, [r4, #4]
	mov	r0, r6
	bl	__kmalloc(PLT)
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4]
	beq	.L13317
.L13314:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13316:
	ldr	r1, .L13318
	ldr	r0, .L13318+4
.LPIC3116:
	add	r1, pc, r1
	add	r1, r1, #3728
.LPIC3115:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13314
.L13317:
	ldr	r1, .L13318+8
	ldr	r0, .L13318+12
.LPIC3118:
	add	r1, pc, r1
	add	r1, r1, #3728
.LPIC3117:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mov	r4, r5
	ldr	r3, [r3, #12]
	blx	r3
	b	.L13314
.L13319:
	.align	2
.L13318:
	.word	.LANCHOR3-(.LPIC3116+8)
	.word	.LC379-(.LPIC3115+8)
	.word	.LANCHOR3-(.LPIC3118+8)
	.word	.LC380-(.LPIC3117+8)
	.fnend
	.size	gsdio_alloc_req, .-gsdio_alloc_req
	.align	2
	.global	gsdio_free_requests
	.type	gsdio_free_requests, %function
gsdio_free_requests:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1]
	cmp	r1, r3
	bxeq	lr
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, #256
	mov	r6, #512
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.L13322:
	ldr	r2, [r3, #4]
	sub	r1, r3, #36
	mov	r0, r5
	ldr	ip, [r3]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r7, [r3]
	str	r6, [r3, #4]
	bl	gsdio_free_req(PLT)
	ldr	r3, [r4]
	cmp	r4, r3
	bne	.L13322
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	gsdio_free_requests, .-gsdio_free_requests
	.align	2
	.global	gsdio_alloc_requests
	.type	gsdio_alloc_requests, %function
gsdio_alloc_requests:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r8, [sp, #16]
	ldr	r9, [sp, #32]
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ble	.L13333
	mov	r7, r3
	mov	r4, r1
	mov	r6, r0
	mov	r8, r2
	mov	r5, #0
	b	.L13332
.L13330:
	str	r9, [r0, #28]
	ldr	r3, [r4]
	cmp	r5, r8
	str	r1, [r3, #4]
	str	r3, [r0, #36]
	str	r4, [r0, #40]
	str	r1, [r4]
	beq	.L13333
.L13332:
	mov	r1, r7
	mov	r0, r6
	mov	r2, #32
	add	r5, r5, #1
	bl	gsdio_alloc_req(PLT)
	cmp	r0, #0
	add	r1, r0, #36
	bne	.L13330
	ldr	r3, [r4]
	cmp	r4, r3
	mvneq	r0, #11
	movne	r0, #0
	b	.L13329
.L13333:
	mov	r0, #0
.L13329:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	gsdio_alloc_requests, .-gsdio_alloc_requests
	.align	2
	.global	gsdio_start_rx
	.type	gsdio_start_rx, %function
gsdio_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L13352
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #4
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L13340
	ldr	r2, [r5, #108]
	cmp	r2, #0
	beq	.L13340
	ldr	r7, [r3, #84]
	add	r8, r5, #12
	mov	fp, #256
	mov	r10, #512
	b	.L13342
.L13344:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r3, #2048
	str	fp, [r4]
	str	r10, [r4, #4]
	str	r3, [r4, #-32]
	ldr	r3, [r5, #44]
	sub	r3, r3, #1
	str	r3, [r5, #44]
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r7, #8]
	sub	r1, r4, #36
	mov	r2, #32
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock_irq(PLT)
	cmp	r9, #0
	bne	.L13353
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L13340
.L13342:
	ldr	r4, [r5, #12]
	mov	r0, r6
	cmp	r8, r4
	bne	.L13344
.L13340:
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq(PLT)
.L13353:
	ldr	r1, .L13354
	mov	r2, r5
	ldr	r0, .L13354+4
	ldr	r3, [r5]
.LPIC3122:
	add	r1, pc, r1
.LPIC3121:
	add	r0, pc, r0
	add	r1, r1, #3744
	bl	printk(PLT)
	ldr	r3, [r5, #16]
	str	r4, [r5, #16]
	str	r8, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	ldr	r3, [r5, #44]
	add	r3, r3, #1
	str	r3, [r5, #44]
	b	.L13340
.L13352:
	ldr	r1, .L13354+8
	ldr	r0, .L13354+12
.LPIC3120:
	add	r1, pc, r1
.LPIC3119:
	add	r0, pc, r0
	add	r1, r1, #3744
	b	printk(PLT)
.L13355:
	.align	2
.L13354:
	.word	.LANCHOR3-(.LPIC3122+8)
	.word	.LC28-(.LPIC3121+8)
	.word	.LANCHOR3-(.LPIC3120+8)
	.word	.LC27-(.LPIC3119+8)
	.fnend
	.size	gsdio_start_rx, .-gsdio_start_rx
	.align	2
	.global	gsdio_write
	.type	gsdio_write, %function
gsdio_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L13365
	cmp	r1, #0
	beq	.L13366
	ldr	r3, [r4, #108]
	cmp	r3, #0
	beq	.L13358
	ldr	r3, [r1, #48]
	cmp	r3, #0
	bne	.L13360
	str	r3, [r4, #8]
.L13358:
	ldrd	r4, [sp]
	mvn	r0, #18
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13365:
	ldr	r1, .L13367
	ldr	r0, .L13367+4
.LPIC3124:
	add	r1, pc, r1
	add	r1, r1, #3760
.LPIC3123:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13358
.L13366:
	ldr	r1, .L13367+8
	ldr	r0, .L13367+12
	ldr	r2, [r4]
.LPIC3126:
	add	r1, pc, r1
	add	r1, r1, #3760
.LPIC3125:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13358
.L13360:
	add	r5, r4, #4
	mov	r0, r5
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irq(PLT)
	ldr	r1, .L13367+16
	mvn	r3, #18
	ldr	r0, .L13367+20
	ldr	r2, [r4]
.LPIC3128:
	add	r1, pc, r1
	add	r1, r1, #3760
.LPIC3127:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13358
.L13368:
	.align	2
.L13367:
	.word	.LANCHOR3-(.LPIC3124+8)
	.word	.LC27-(.LPIC3123+8)
	.word	.LANCHOR3-(.LPIC3126+8)
	.word	.LC660-(.LPIC3125+8)
	.word	.LANCHOR3-(.LPIC3128+8)
	.word	.LC661-(.LPIC3127+8)
	.fnend
	.size	gsdio_write, .-gsdio_write
	.align	2
	.global	gsdio_rx_push
	.type	gsdio_rx_push, %function
gsdio_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r10, [sp, #24]
	sub	r10, r0, #24
	strd	r6, [sp, #8]
	sub	r7, r0, #28
	mov	r0, r10
	strd	r8, [sp, #16]
	sub	r9, r4, #8
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L13390
	ldr	r5, [r4, #-8]
	ldr	r3, [r3, #84]
	cmp	r9, r5
	str	r3, [sp, #12]
	beq	.L13372
	ldr	r6, .L13393
	ldr	fp, .L13393+4
.LPIC3130:
	add	r6, pc, r6
	add	r6, r6, #3760
.LPIC3129:
	add	fp, pc, fp
	add	r6, r6, #12
.L13379:
	ldr	ip, [r5, #8]
	sub	r8, r5, #36
	cmn	ip, #108
	beq	.L13372
	cmp	ip, #0
	mov	r1, r6
	mov	r2, r7
	mov	r0, fp
	beq	.L13374
	ldr	r3, [r4, #-28]
	str	ip, [sp]
	bl	printk(PLT)
.L13374:
	ldr	r3, [r4, #80]
	mov	lr, #256
	mov	ip, #512
	mov	r0, r7
	mov	r1, r8
	cmp	r3, #0
	beq	.L13391
	ldrd	r2, [r5]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r5]
	str	ip, [r5, #4]
	ldr	r3, [r4, #20]
	sub	r3, r3, #1
	str	r3, [r4, #20]
	bl	gsdio_write(PLT)
	ldr	r2, [r4, #68]
	mov	r3, r4
	cmp	r2, #0
	beq	.L13392
	cmp	r0, #0
	bne	.L13378
	ldr	r2, [r4, #-20]
	cmp	r2, #0
	bne	.L13378
	ldr	r2, [r3, #-16]!
	str	r5, [r2, #4]
	strd	r2, [r5]
	ldr	r3, [r4, #16]
	str	r5, [r4, #-16]
	ldr	r5, [r4, #-8]
	add	r3, r3, #1
	cmp	r9, r5
	str	r3, [r4, #16]
	bne	.L13379
.L13372:
	mov	r0, r10
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsdio_start_rx(PLT)
.L13392:
	str	r2, [r4, #-20]
	ldr	r0, [sp, #12]
	mov	r1, r8
	bl	gsdio_free_req(PLT)
.L13390:
	mov	r0, r10
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq(PLT)
.L13378:
	ldr	r3, [r4, #-8]
	str	r5, [r3, #4]
	stmia	r5, {r3, r9}
	ldr	r3, [r4, #20]
	str	r5, [r4, #-8]
	add	r3, r3, #1
	str	r3, [r4, #20]
	b	.L13372
.L13391:
	ldr	r1, .L13393+8
	ldr	r0, .L13393+12
.LPIC3132:
	add	r1, pc, r1
	add	r1, r1, #3760
.LPIC3131:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r2, [r5, #4]
	mov	r3, r4
	ldr	r1, [r5]
	str	r2, [r1, #4]
	str	r1, [r2]
	ldr	r2, [r3, #-16]!
	str	r5, [r2, #4]
	strd	r2, [r5]
	ldrd	r2, [r4, #16]
	str	r5, [r4, #-16]
	add	r2, r2, #1
	sub	r3, r3, #1
	strd	r2, [r4, #16]
	b	.L13372
.L13394:
	.align	2
.L13393:
	.word	.LANCHOR3-(.LPIC3130+8)
	.word	.LC183-(.LPIC3129+8)
	.word	.LANCHOR3-(.LPIC3132+8)
	.word	.LC662-(.LPIC3131+8)
	.fnend
	.size	gsdio_rx_push, .-gsdio_rx_push
	.align	2
	.global	gsdio_read_pending
	.type	gsdio_read_pending, %function
gsdio_read_pending:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	beq	.L13400
	ldr	r3, [r0, #120]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L13395
.L13399:
	b	.L13399
.L13395:
	bx	lr
.L13400:
	ldr	r1, .L13401
	ldr	r0, .L13401+4
.LPIC3134:
	add	r1, pc, r1
	add	r1, r1, #3776
.LPIC3133:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L13402:
	.align	2
.L13401:
	.word	.LANCHOR3-(.LPIC3134+8)
	.word	.LC27-(.LPIC3133+8)
	.fnend
	.size	gsdio_read_pending, .-gsdio_read_pending
	.align	2
	.global	gsdio_tx_pull
	.type	gsdio_tx_pull, %function
gsdio_tx_pull:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #8
	strd	r8, [sp, #16]
	sub	r8, r0, #60
	str	lr, [sp, #24]
	ldr	r3, [r0, #36]
	.pad #12
	sub	sp, sp, #12
	cmp	r3, #0
	beq	.L13411
	sub	r5, r0, #56
	mov	r0, r5
	bl	_raw_spin_lock_irq(PLT)
	ldr	r6, [r4, #-8]
	cmp	r7, r6
	beq	.L13405
	ldr	r2, [r4, #48]
	ldr	r3, [r4, #36]
	cmp	r2, #0
	ldr	r9, [r3, #80]
	bne	.L13412
.L13405:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock_irq(PLT)
.L13411:
	ldr	r1, .L13414
	ldr	r0, .L13414+4
.LPIC3136:
	add	r1, pc, r1
	add	r1, r1, #3808
.LPIC3135:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	gsdio_read_pending(PLT)
.L13412:
	ldr	r2, [r6]
	mov	ip, #256
	mov	r1, #512
	ldr	r3, [r6, #4]
	mov	r0, r5
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r6]
	str	r1, [r6, #4]
	ldr	r3, [r4, #16]
	sub	r3, r3, #1
	str	r3, [r4, #16]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irq(PLT)
	ldr	r1, .L13414+8
	mvn	r3, #18
	mov	r2, r8
	ldr	r0, .L13414+12
	str	r3, [sp]
	ldr	r3, [r4, #-60]
.LPIC3138:
	add	r1, pc, r1
.LPIC3137:
	add	r0, pc, r0
	add	r1, r1, #3808
	bl	printk(PLT)
	ldr	r3, [r4, #36]
	cmp	r3, #0
	beq	.L13413
	ldr	r3, [r4, #-8]
	str	r6, [r3, #4]
	stmia	r6, {r3, r7}
	ldr	r3, [r4, #16]
	str	r6, [r4, #-8]
	add	r3, r3, #1
	str	r3, [r4, #16]
	b	.L13405
.L13413:
	mov	r0, r9
	sub	r1, r6, #36
	bl	gsdio_free_req(PLT)
	b	.L13405
.L13415:
	.align	2
.L13414:
	.word	.LANCHOR3-(.LPIC3136+8)
	.word	.LC663-(.LPIC3135+8)
	.word	.LANCHOR3-(.LPIC3138+8)
	.word	.LC664-(.LPIC3137+8)
	.fnend
	.size	gsdio_tx_pull, .-gsdio_tx_pull
	.align	2
	.global	gsdio_start_io
	.type	gsdio_start_io, %function
gsdio_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #4
	strd	r8, [sp, #16]
	mov	r0, r7
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #96]
	mov	r8, r0
	cmp	r3, #0
	beq	.L13422
	ldr	ip, .L13425
	add	r9, r4, #12
	mov	r2, #8
	ldr	r0, [r3, #84]
	mov	r1, r9
	mov	r3, #2048
.LPIC3146:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	str	ip, [sp]
	bl	gsdio_alloc_requests(PLT)
	subs	r10, r0, #0
	bne	.L13423
	ldr	ip, .L13425+4
	mov	r6, #8
	add	r1, r4, #52
	ldr	r0, [r4, #96]
	mov	r2, r6
	mov	r3, #2048
	str	r6, [r4, #44]
.LPIC3145:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	ldr	r0, [r0, #80]
	str	ip, [sp]
	bl	gsdio_alloc_requests(PLT)
	subs	r5, r0, #0
	bne	.L13424
	mov	r1, r8
	mov	r0, r7
	str	r6, [r4, #76]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
	bl	gsdio_start_rx(PLT)
	ldr	r3, .L13425+8
	add	r1, r4, #60
.LPIC3144:
	add	r3, pc, r3
	ldr	r0, [r3, #3416]
	bl	queue_work(PLT)
	mov	r0, r5
.L13418:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13422:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #18
	b	.L13418
.L13424:
	ldr	r3, [r4, #96]
	mov	r1, r9
	ldr	r0, [r3, #84]
	bl	gsdio_free_requests(PLT)
	mov	r0, r7
	mov	r1, r8
	str	r10, [r4, #44]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, .L13425+12
	ldr	r0, .L13425+16
.LPIC3143:
	add	r1, pc, r1
.LPIC3142:
	add	r0, pc, r0
	add	r1, r1, #3824
	bl	printk(PLT)
	mov	r0, r5
	b	.L13418
.L13423:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, .L13425+20
	ldr	r0, .L13425+24
.LPIC3141:
	add	r1, pc, r1
.LPIC3140:
	add	r0, pc, r0
	add	r1, r1, #3824
	bl	printk(PLT)
	mov	r0, r10
	b	.L13418
.L13426:
	.align	2
.L13425:
	.word	gsdio_read_complete(GOT_PREL)+(.-(.LPIC3146+8))
	.word	gsdio_write_complete(GOT_PREL)+(.-(.LPIC3145+8))
	.word	.LANCHOR2-(.LPIC3144+8)
	.word	.LANCHOR3-(.LPIC3143+8)
	.word	.LC666-(.LPIC3142+8)
	.word	.LANCHOR3-(.LPIC3141+8)
	.word	.LC665-(.LPIC3140+8)
	.fnend
	.size	gsdio_start_io, .-gsdio_start_io
	.align	2
	.global	gsdio_port_free
	.type	gsdio_port_free, %function
gsdio_port_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, #108
	ldr	r3, .L13431
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	mul	r1, r1, r0
.LPIC3147:
	add	r3, pc, r3
	add	r2, r3, r1
	ldr	r4, [r2, #120]
	add	r3, r2, #124
	cmp	r4, #0
	beq	.L13430
	mov	r0, r3
	bl	platform_driver_unregister(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
.L13430:
	ldr	r1, .L13431+4
	mov	r2, r0
	ldr	r0, .L13431+8
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC3150:
	add	r1, pc, r1
.LPIC3149:
	add	r0, pc, r0
	add	r1, r1, #3840
	b	printk(PLT)
.L13432:
	.align	2
.L13431:
	.word	.LANCHOR2-(.LPIC3147+8)
	.word	.LANCHOR3-(.LPIC3150+8)
	.word	.LC88-(.LPIC3149+8)
	.fnend
	.size	gsdio_port_free, .-gsdio_port_free
	.align	2
	.global	gsdio_ctrl_modem_status
	.type	gsdio_ctrl_modem_status, %function
gsdio_ctrl_modem_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ands	r3, r0, #128
	moveq	r2, #1
	streq	r3, [r1, #172]
	beq	.L13435
	mov	ip, #8
	mov	r2, #9
	mov	r3, ip
	str	ip, [r1, #172]
.L13435:
	tst	r0, #64
	movne	r3, r2
	strne	r2, [r1, #172]
	tst	r0, #256
	ldr	r0, [r1, #96]
	orrne	r3, r3, #2
	strne	r3, [r1, #172]
	cmp	r0, #0
	beq	.L13433
	ldr	r2, [r0, #128]
	cmp	r2, #0
	beq	.L13433
	mov	r1, r3
	bx	r2
.L13433:
	bx	lr
	.fnend
	.size	gsdio_ctrl_modem_status, .-gsdio_ctrl_modem_status
	.align	2
	.type	gsdio_ch_remove, %function
gsdio_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L13469
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC3151:
	add	r5, pc, r5
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r7, [r5, #92]
	cmp	r7, #0
	beq	.L13466
	ldr	r9, .L13469+4
	mov	r8, r0
	add	r5, r5, #96
	ldr	r3, .L13469+8
	mov	r6, #0
.LPIC3154:
	add	r9, pc, r9
.LPIC3153:
	add	r3, pc, r3
	str	r3, [sp, #4]
.L13457:
	ldr	r4, [r5, #24]
	mov	r2, #9
	ldr	r1, [r8]
	ldr	r3, [r4, #120]
	ldr	r0, [r3]
	bl	strncmp(PLT)
	subs	r3, r0, #0
	mov	r2, #1
	bne	.L13453
	ldr	r7, [r4, #96]
	mov	r1, r4
	add	fp, r4, #4
	str	r3, [r4, #108]
	str	r3, [r4, #112]
	str	r2, [r4, #116]
	cmp	r7, #0
	beq	.L13468
	bl	gsdio_ctrl_modem_status(PLT)
	ldr	r0, [r7, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L13455
	blx	r3
.L13455:
	ldr	r0, [r7, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L13456
	blx	r3
.L13456:
	add	r0, r4, #28
	bl	cancel_work_sync(PLT)
	add	r0, r4, #60
	bl	cancel_work_sync(PLT)
	mov	r0, fp
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r10, r0
	add	r1, r4, #12
	ldr	r0, [r7, #84]
	bl	gsdio_free_requests(PLT)
	ldr	r0, [r7, #84]
	add	r1, r4, #20
	bl	gsdio_free_requests(PLT)
	ldr	r0, [r7, #80]
	add	r1, r4, #52
	bl	gsdio_free_requests(PLT)
	mov	r3, #0
	mov	r1, r10
	mov	r0, fp
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r3, [r4, #76]
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r7, [r9, #92]
.L13453:
	add	r6, r6, #1
	add	r5, r5, #108
	cmp	r6, r7
	bcc	.L13457
.L13466:
	mov	r0, #0
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13468:
	ldr	r3, [sp, #4]
	ldr	r7, [r3, #92]
	b	.L13453
.L13470:
	.align	2
.L13469:
	.word	.LANCHOR2-(.LPIC3151+8)
	.word	.LANCHOR2-(.LPIC3154+8)
	.word	.LANCHOR2-(.LPIC3153+8)
	.fnend
	.size	gsdio_ch_remove, .-gsdio_ch_remove
	.align	2
	.global	gsdio_ch_notify
	.type	gsdio_ch_notify, %function
gsdio_ch_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #1
	beq	.L13472
	cmp	r1, #2
	beq	.L13474
	bx	lr
.L13472:
	ldr	r3, .L13475
	add	r1, r0, #60
.LPIC3156:
	add	r3, pc, r3
	ldr	r0, [r3, #3416]
	b	queue_work(PLT)
.L13474:
	ldr	r3, .L13475+4
	add	r1, r0, #28
.LPIC3155:
	add	r3, pc, r3
	ldr	r0, [r3, #3416]
	b	queue_work(PLT)
.L13476:
	.align	2
.L13475:
	.word	.LANCHOR2-(.LPIC3156+8)
	.word	.LANCHOR2-(.LPIC3155+8)
	.fnend
	.size	gsdio_ch_notify, .-gsdio_ch_notify
	.align	2
	.global	gsdio_port_alloc
	.type	gsdio_port_alloc, %function
gsdio_port_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r3, .L13483
	strd	r6, [sp, #8]
	ldr	r6, .L13483+4
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	mov	r9, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.LPIC3157:
	add	r6, pc, r6
	ldr	r3, [r6, r3]
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L13480
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L13482
.L13478:
	mov	r5, #0
	str	r8, [r4]
	add	r1, r4, #32
	mov	r3, #2560
	add	ip, r4, #12
	str	r5, [r4, #4]
	ldr	r0, [r7]	@ unaligned
	add	lr, r4, #20
	add	r2, r4, #52
	str	r0, [r4, #100]
	ldrh	r10, [r7, #4]	@ unaligned
	add	r0, r4, #64
	strh	r10, [r4, #104]	@ movhi
	ldrb	r7, [r7, #6]	@ zero_extendqisi2
	add	r10, r4, #84
	str	r1, [r4, #32]
	str	r1, [r4, #36]
	ldr	r1, .L13483+8
	str	ip, [r4, #12]
	strb	r7, [r4, #106]
	ldr	r7, .L13483+12
	str	ip, [r4, #16]
	ldr	ip, .L13483+16
	str	lr, [r4, #20]
	str	lr, [r4, #24]
	add	lr, r4, #128
	str	r3, [r4, #28]
	ldr	fp, [r6, r1]
.LPIC3160:
	add	r7, pc, r7
	str	r3, [r4, #60]
	mov	r1, r5
	str	r2, [r4, #52]
	str	r2, [r4, #56]
	mov	r2, r5
	str	fp, [r4, #40]
	ldr	fp, .L13483+20
	str	r0, [r4, #64]
	str	r0, [r4, #68]
	add	r0, r4, #140
	ldr	fp, [r6, fp]
	str	r3, [r4, #80]
	str	r10, [r4, #84]
	str	r10, [r4, #88]
	str	fp, [r4, #72]
	ldr	ip, [r6, ip]
	str	r3, [r4, #124]
	str	lr, [r4, #128]
	str	lr, [r4, #132]
	str	ip, [r4, #92]
	str	r7, [r4, #136]
	bl	init_timer_key(PLT)
	ldr	r1, .L13483+24
	mov	r3, #108
	add	ip, r4, #124
	ldr	r0, .L13483+28
	mul	r8, r3, r8
	ldr	r2, .L13483+32
	ldr	r3, .L13483+36
	ldr	lr, [r6, r1]
	str	ip, [r4, #160]
.LPIC3161:
	add	r0, pc, r0
	add	r6, r0, r8
.LPIC3163:
	add	r2, pc, r2
.LPIC3165:
	add	r3, pc, r3
	add	r0, r6, #124
	str	lr, [r4, #156]
	str	r4, [r6, #120]
	str	r9, [r4, #120]
	strd	r2, [r6, #124]
	ldr	r3, [r9]
	str	r5, [r6, #152]
	str	r3, [r6, #144]
	bl	platform_driver_register(PLT)
	mov	r0, r5
.L13479:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13480:
	mov	r4, #16
	b	.L13478
.L13482:
	ldr	r1, .L13483+40
	ldr	r0, .L13483+44
.LPIC3159:
	add	r1, pc, r1
.LPIC3158:
	add	r0, pc, r0
	add	r1, r1, #3856
	bl	printk(PLT)
	mvn	r0, #11
	b	.L13479
.L13484:
	.align	2
.L13483:
	.word	kmalloc_caches(GOT)
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC3157+8)
	.word	gsdio_rx_push(GOT)
	.word	gsdio_open_work-(.LPIC3160+8)
	.word	gsdio_ctrl_wq(GOT)
	.word	gsdio_tx_pull(GOT)
	.word	delayed_work_timer_fn(GOT)
	.word	.LANCHOR2-(.LPIC3161+8)
	.word	gsdio_ch_probe-(.LPIC3163+8)
	.word	gsdio_ch_remove-(.LPIC3165+8)
	.word	.LANCHOR3-(.LPIC3159+8)
	.word	.LC667-(.LPIC3158+8)
	.fnend
	.size	gsdio_port_alloc, .-gsdio_port_alloc
	.align	2
	.global	gsdio_connect
	.type	gsdio_connect, %function
gsdio_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13502
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC3169:
	add	r3, pc, r3
	ldr	r2, [r3, #92]
	cmp	r1, r2
	bcs	.L13497
	cmp	r0, #0
	mov	r4, r0
	beq	.L13498
	mov	r0, #108
	mla	r1, r0, r1, r3
	ldr	r5, [r1, #120]
	add	r6, r5, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L13502+4
	mov	r1, r0
	str	r4, [r5, #96]
	mov	r0, r6
.LPIC3180:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r3, [r4, #132]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L13499
	ldr	r3, [r4, #80]
	str	r5, [r3]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L13500
	ldr	r3, [r4, #84]
	str	r5, [r3]
	ldr	r3, [r5, #108]
	cmp	r3, #0
	bne	.L13501
.L13487:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13501:
	mov	r0, r5
	bl	gsdio_start_io(PLT)
	ldr	r3, [r4, #128]
	cmp	r3, #0
	beq	.L13487
	mov	r0, r4
	ldr	r1, [r5, #172]
	blx	r3
	b	.L13487
.L13500:
	ldr	r1, .L13502+8
	mov	r2, r6
	ldr	r0, .L13502+12
.LPIC3179:
	add	r1, pc, r1
	add	r1, r1, #3872
.LPIC3178:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	str	r3, [r5, #96]
	ldr	r2, [r4, #80]
	str	r3, [r2]
	b	.L13487
.L13499:
	ldr	r1, .L13502+16
	mov	r2, r6
	ldr	r0, .L13502+20
.LPIC3177:
	add	r1, pc, r1
	add	r1, r1, #3872
.LPIC3176:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mov	r3, #0
	str	r3, [r5, #96]
	b	.L13487
.L13498:
	ldr	r1, .L13502+24
	mvn	r6, #21
	ldr	r0, .L13502+28
.LPIC3173:
	add	r1, pc, r1
	add	r1, r1, #3872
.LPIC3172:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L13487
.L13497:
	ldr	r3, .L13502+32
	mov	r2, r1
	mvn	r6, #21
	ldr	r0, .L13502+36
.LPIC3171:
	add	r3, pc, r3
	add	r1, r3, #3872
.LPIC3170:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L13487
.L13503:
	.align	2
.L13502:
	.word	.LANCHOR2-(.LPIC3169+8)
	.word	gsdio_ctrl_notify_modem(GOT_PREL)+(.-(.LPIC3180+8))
	.word	.LANCHOR3-(.LPIC3179+8)
	.word	.LC668-(.LPIC3178+8)
	.word	.LANCHOR3-(.LPIC3177+8)
	.word	.LC668-(.LPIC3176+8)
	.word	.LANCHOR3-(.LPIC3173+8)
	.word	.LC89-(.LPIC3172+8)
	.word	.LANCHOR3-(.LPIC3171+8)
	.word	.LC88-(.LPIC3170+8)
	.fnend
	.size	gsdio_connect, .-gsdio_connect
	.align	2
	.global	gsdio_disconnect
	.type	gsdio_disconnect, %function
gsdio_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L13510
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3181:
	add	r4, pc, r4
	ldr	r3, [r4, #92]
	cmp	r1, r3
	bcs	.L13508
	cmp	r0, #0
	beq	.L13509
	mov	r3, #108
	mov	r5, r0
	ldr	r0, [r4, #3416]
	mov	r6, #0
	mla	r1, r3, r1, r4
	ldr	r4, [r1, #120]
	add	r7, r4, #4
	add	r1, r4, #80
	str	r6, [r4, #176]
	bl	queue_work(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r6, [r4, #96]
	mov	r0, r7
	str	r6, [r4, #184]
	str	r6, [r4, #180]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r5, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #84]
	str	r6, [r3]
	ldr	r0, [r5, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #80]
	mov	r0, r7
	str	r6, [r3]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	add	r1, r4, #12
	ldr	r0, [r5, #84]
	bl	gsdio_free_requests(PLT)
	add	r1, r4, #20
	ldr	r0, [r5, #84]
	bl	gsdio_free_requests(PLT)
	ldr	r0, [r5, #80]
	add	r1, r4, #52
	bl	gsdio_free_requests(PLT)
	str	r6, [r4, #44]
	mov	r0, r7
	mov	r1, r8
	str	r6, [r4, #48]
	str	r6, [r4, #76]
	str	r6, [r4, #8]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L13508:
	ldr	r3, .L13510+4
	mov	r2, r1
	ldr	r0, .L13510+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3183:
	add	r3, pc, r3
	ldr	r8, [sp, #16]
	add	r1, r3, #3888
	ldr	lr, [sp, #20]
.LPIC3182:
	add	r0, pc, r0
	add	r1, r1, #4
	add	sp, sp, #24
	b	printk(PLT)
.L13509:
	ldr	r1, .L13510+12
	ldr	r0, .L13510+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3185:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	add	r1, r1, #3888
	ldr	lr, [sp, #20]
.LPIC3184:
	add	r0, pc, r0
	add	r1, r1, #4
	add	sp, sp, #24
	b	printk(PLT)
.L13511:
	.align	2
.L13510:
	.word	.LANCHOR2-(.LPIC3181+8)
	.word	.LANCHOR3-(.LPIC3183+8)
	.word	.LC88-(.LPIC3182+8)
	.word	.LANCHOR3-(.LPIC3185+8)
	.word	.LC89-(.LPIC3184+8)
	.fnend
	.size	gsdio_disconnect, .-gsdio_disconnect
	.align	2
	.global	gsdio_setup
	.type	gsdio_setup, %function
gsdio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r3, r1, #1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	cmp	r3, #1
	strd	r8, [sp, #16]
	mov	r8, r1
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #16
	sub	sp, sp, #16
	bhi	.L13533
	ldr	r0, .L13536
	mov	r5, #0
	mov	lr, #37
	ldr	r6, .L13536+4
	mov	ip, #8
	mvn	r4, #127
	str	r5, [sp]
	mov	r3, r5
	mov	r1, #10
	mov	r2, #1
	strb	r5, [sp, #11]
.LPIC3190:
	add	r0, pc, r0
	strb	r5, [sp, #12]
	strb	r5, [sp, #14]
.LPIC3191:
	add	r6, pc, r6
	strb	r5, [sp, #15]
	strb	r4, [sp, #9]
	strb	lr, [sp, #10]
	strb	ip, [sp, #13]
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, r5
	str	r0, [r6, #3416]
	beq	.L13534
	ldr	r4, .L13536+8
	add	r0, r6, #96
	add	r9, sp, #9
	ldr	r10, .L13536+12
	ldr	r7, .L13536+16
.LPIC3197:
	add	r4, pc, r4
	add	r4, r4, #4048
.LPIC3196:
	add	r10, pc, r10
	add	r4, r4, #8
	mov	r1, r10
	mov	r2, r4
	bl	__mutex_init(PLT)
.LPIC3214:
	ldr	r7, [pc, r7]		@ tls_load_dot_plus_eight
	mov	r0, r5
	mov	r1, r9
	mov	r2, r7
	bl	gsdio_port_alloc(PLT)
	ldr	r3, [r6, #92]
	subs	r5, r0, #0
	add	r2, r3, #1
	str	r2, [r6, #92]
	bne	.L13518
	cmp	r8, #2
	bne	.L13519
	mov	r1, r10
	mov	r2, r4
	add	r0, r6, #204
	bl	__mutex_init(PLT)
	add	r2, r7, #12
	mov	r1, r9
	mov	r0, #1
	bl	gsdio_port_alloc(PLT)
	ldr	r3, [r6, #92]
	subs	r5, r0, #0
	add	r2, r3, #1
	str	r2, [r6, #92]
	bne	.L13518
.L13519:
	ldr	r0, .L13536+20
	mov	r1, #0
.LPIC3192:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	cmn	r0, #4096
	bhi	.L13535
	ldr	ip, .L13536+24
	mov	r2, r0
	mov	r1, #292
	ldr	r0, .L13536+28
	mov	r3, #0
.LPIC3212:
	add	ip, pc, ip
	add	ip, ip, #332
.LPIC3211:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	mov	r0, #0
.L13514:
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13535:
	mov	r0, #0
	b	.L13514
.L13518:
	ldr	r1, .L13536+32
	ldr	r6, .L13536+36
	ldr	r0, .L13536+40
.LPIC3208:
	add	r1, pc, r1
.LPIC3206:
	add	r6, pc, r6
	add	r1, r1, #3904
.LPIC3207:
	add	r0, pc, r0
	add	r1, r1, #8
	str	r3, [r6, #92]
	bl	printk(PLT)
	ldr	r3, [r6, #92]
	cmp	r3, #0
	movne	r4, #0
	beq	.L13521
.L13520:
	mov	r0, r4
	add	r4, r4, #1
	bl	gsdio_port_free(PLT)
	ldr	r3, [r6, #92]
	cmp	r4, r3
	bcc	.L13520
.L13521:
	ldr	r3, .L13536+44
.LPIC3210:
	add	r3, pc, r3
	ldr	r0, [r3, #3416]
	bl	destroy_workqueue(PLT)
	mov	r0, r5
	b	.L13514
.L13534:
	ldr	r1, .L13536+48
	ldr	r0, .L13536+52
.LPIC3194:
	add	r1, pc, r1
	add	r1, r1, #3904
.LPIC3193:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #11
	b	.L13514
.L13533:
	ldr	r1, .L13536+56
	mov	r2, r8
	mov	r3, #2
	ldr	r0, .L13536+60
.LPIC3189:
	add	r1, pc, r1
	add	r1, r1, #3904
.LPIC3188:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #21
	b	.L13514
.L13537:
	.align	2
.L13536:
	.word	.LC651-(.LPIC3190+8)
	.word	.LANCHOR2-(.LPIC3191+8)
	.word	.LANCHOR4-(.LPIC3197+8)
	.word	.LC672-(.LPIC3196+8)
	.word	sport_info(GOT_PREL)+(.-(.LPIC3214+8))
	.word	.LC670-(.LPIC3192+8)
	.word	.LANCHOR5-(.LPIC3212+8)
	.word	.LC135-(.LPIC3211+8)
	.word	.LANCHOR3-(.LPIC3208+8)
	.word	.LANCHOR2-(.LPIC3206+8)
	.word	.LC673-(.LPIC3207+8)
	.word	.LANCHOR2-(.LPIC3210+8)
	.word	.LANCHOR3-(.LPIC3194+8)
	.word	.LC671-(.LPIC3193+8)
	.word	.LANCHOR3-(.LPIC3189+8)
	.word	.LC669-(.LPIC3188+8)
	.fnend
	.size	gsdio_setup, .-gsdio_setup
	.align	2
	.global	gsmd_connect
	.type	gsmd_connect, %function
gsmd_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13549
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3215:
	add	r3, pc, r3
	ldr	r2, [r3, #312]
	cmp	r1, r2
	bcs	.L13545
	cmp	r0, #0
	mov	r4, r0
	beq	.L13546
	mov	r0, #108
	mov	r6, #0
	mla	r1, r0, r1, r3
	ldr	r5, [r1, #340]
	add	r7, r5, #4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L13549+4
	mov	r1, r0
	str	r4, [r5, #68]
	mov	r0, r7
.LPIC3221:
	add	r3, pc, r3
	str	r3, [r4, #132]
	str	r6, [r5, #164]
	str	r6, [r5, #168]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r7, r0, #0
	bne	.L13547
	ldr	r3, [r4, #80]
	str	r5, [r3]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r7, r0, #0
	bne	.L13548
	ldr	r3, .L13549+8
	ldr	r2, [r4, #84]
.LPIC3226:
	add	r3, pc, r3
	ldr	r4, [r3, #-512]
	str	r5, [r2]
	bl	msecs_to_jiffies(PLT)
	mov	r2, r0
	add	r1, r5, #76
	mov	r0, r4
	bl	queue_delayed_work(PLT)
.L13540:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13545:
	ldr	r3, .L13549+12
	mov	r2, r1
	mvn	r7, #21
	ldr	r0, .L13549+16
.LPIC3217:
	add	r3, pc, r3
	add	r1, r3, #3920
.LPIC3216:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L13540
.L13548:
	ldr	r1, .L13549+20
	ldr	r0, .L13549+24
	ldr	r2, [r4, #84]
.LPIC3225:
	add	r1, pc, r1
	add	r1, r1, #3920
.LPIC3224:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	str	r6, [r5, #68]
	ldr	r3, [r4, #80]
	str	r6, [r3]
	b	.L13540
.L13547:
	ldr	r1, .L13549+28
	ldr	r0, .L13549+32
	ldr	r2, [r4, #80]
.LPIC3223:
	add	r1, pc, r1
	add	r1, r1, #3920
.LPIC3222:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	str	r6, [r5, #68]
	b	.L13540
.L13546:
	ldr	r1, .L13549+36
	mvn	r7, #21
	ldr	r0, .L13549+40
.LPIC3219:
	add	r1, pc, r1
	add	r1, r1, #3920
.LPIC3218:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L13540
.L13550:
	.align	2
.L13549:
	.word	.LANCHOR2-(.LPIC3215+8)
	.word	gsmd_notify_modem-(.LPIC3221+8)
	.word	.LANCHOR4-(.LPIC3226+8)
	.word	.LANCHOR3-(.LPIC3217+8)
	.word	.LC674-(.LPIC3216+8)
	.word	.LANCHOR3-(.LPIC3225+8)
	.word	.LC190-(.LPIC3224+8)
	.word	.LANCHOR3-(.LPIC3223+8)
	.word	.LC189-(.LPIC3222+8)
	.word	.LANCHOR3-(.LPIC3219+8)
	.word	.LC89-(.LPIC3218+8)
	.fnend
	.size	gsmd_connect, .-gsmd_connect
	.align	2
	.global	gsmd_disconnect
	.type	gsmd_disconnect, %function
gsmd_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13574
.LPIC3227:
	add	r3, pc, r3
	ldr	r2, [r3, #312]
	cmp	r1, r2
	bcs	.L13570
	cmp	r0, #0
	beq	.L13571
	mov	r2, #108
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, #0
	str	lr, [sp, #32]
	mla	r1, r2, r1, r3
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r1, #340]
	add	r9, r4, #4
	add	r6, r4, #12
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r5, [r4, #68]
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r8, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r8, #84]
	str	r5, [r3]
	ldr	r0, [r8, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r8, #80]
	mov	r0, r9
	str	r5, [r3]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #12]
	str	r0, [sp, #4]
	ldr	r5, [r8, #84]
	cmp	r6, r3
	beq	.L13554
	mov	fp, #256
	mov	r7, #512
.L13555:
	ldr	r2, [r3, #4]
	mov	r10, r3
	ldr	r0, [r3]
	str	r2, [r0, #4]
	str	r0, [r2]
	str	fp, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r10, #-36]!
	bl	kfree(PLT)
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #12]
	cmp	r6, r3
	bne	.L13555
	ldr	r5, [r8, #84]
.L13554:
	ldr	r3, [r4, #20]
	add	r6, r4, #20
	cmp	r6, r3
	movne	fp, #256
	movne	r7, #512
	beq	.L13560
.L13559:
	ldr	r2, [r3, #4]
	mov	r10, r3
	ldr	r0, [r3]
	str	r2, [r0, #4]
	str	r0, [r2]
	str	fp, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r10, #-36]!
	bl	kfree(PLT)
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #20]
	cmp	r6, r3
	bne	.L13559
.L13560:
	ldr	r3, [r4, #44]
	add	r6, r4, #44
	ldr	r5, [r8, #80]
	cmp	r6, r3
	movne	r8, #256
	movne	r7, #512
	beq	.L13558
.L13563:
	ldr	r2, [r3, #4]
	mov	fp, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree(PLT)
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #44]
	cmp	r6, r3
	bne	.L13563
.L13558:
	mov	r5, #0
	mov	r0, r9
	ldr	r1, [sp, #4]
	str	r5, [r4, #8]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, [r4, #72]
	mov	r0, r5
	add	r1, r1, #8
	bl	_test_and_clear_bit(PLT)
	cmp	r0, r5
	bne	.L13572
	ldr	r3, [r4, #72]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L13551
.L13573:
	ldr	r3, .L13574+4
	add	r1, r4, #124
.LPIC3233:
	add	r3, pc, r3
	ldr	r0, [r3, #-512]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work(PLT)
.L13572:
	ldr	r3, [r4, #72]
	str	r5, [r4, #156]
	mov	r1, r5
	mvn	r2, #0
	ldr	r0, [r3]
	bl	smd_tiocmset(PLT)
	ldr	r3, [r4, #72]
	ldr	r3, [r3]
	cmp	r3, #0
	bne	.L13573
.L13551:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13571:
	ldr	r1, .L13574+8
	ldr	r0, .L13574+12
.LPIC3231:
	add	r1, pc, r1
	add	r1, r1, #3936
.LPIC3230:
	add	r0, pc, r0
	add	r1, r1, #4
	b	printk(PLT)
.L13570:
	ldr	r3, .L13574+16
	mov	r2, r1
	ldr	r0, .L13574+20
.LPIC3229:
	add	r3, pc, r3
	add	r1, r3, #3936
.LPIC3228:
	add	r0, pc, r0
	add	r1, r1, #4
	b	printk(PLT)
.L13575:
	.align	2
.L13574:
	.word	.LANCHOR2-(.LPIC3227+8)
	.word	.LANCHOR4-(.LPIC3233+8)
	.word	.LANCHOR3-(.LPIC3231+8)
	.word	.LC89-(.LPIC3230+8)
	.word	.LANCHOR3-(.LPIC3229+8)
	.word	.LC88-(.LPIC3228+8)
	.fnend
	.size	gsmd_disconnect, .-gsmd_disconnect
	.align	2
	.type	acm_set_alt, %function
acm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r0, #136]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L13635
	ldrb	r3, [r0, #137]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L13581
	ldr	r2, [r0, #80]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L13582
	ldrb	ip, [r0, #138]	@ zero_extendqisi2
	ldr	r2, [r0, #140]
	ldr	r3, .L13638
	mov	r1, ip, asl #4
	cmp	r2, #2
	sub	r1, r1, ip, asl #2
.LPIC3256:
	add	r3, pc, r3
	add	r3, r3, r1
	ldr	r1, [r3, #60]
	beq	.L13584
	cmp	r2, #3
	beq	.L13585
	cmp	r2, #1
	beq	.L13636
	sub	r2, r2, #1
	cmp	r2, #9
	addls	pc, pc, r2, asl #2
	b	.L13587
.L13589:
	b	.L13621
	b	.L13590
	b	.L13591
	b	.L13592
	b	.L13593
	b	.L13594
	b	.L13595
	b	.L13596
	b	.L13597
	b	.L13598
	.p2align 1
.L13621:
	ldr	r2, .L13638+4
.LPIC3234:
	add	r2, pc, r2
.L13588:
	ldr	r1, .L13638+8
	ldr	r0, .L13638+12
.LPIC3258:
	add	r1, pc, r1
	add	r1, r1, #3952
.LPIC3257:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r2, [r4, #80]
.L13582:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L13599
	ldr	r3, [r4, #84]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L13599
.L13600:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L13604
	ldr	r0, [r5]
	mov	r1, r4
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed(PLT)
	subs	r5, r0, #0
	bne	.L13604
	ldrb	r0, [r4, #138]	@ zero_extendqisi2
	ldr	r2, [r4, #140]
	ldr	r3, .L13638+16
	mov	r1, r0, asl #4
	cmp	r2, #2
	sub	r1, r1, r0, asl #2
.LPIC3259:
	add	r3, pc, r3
	add	r3, r3, r1
	ldr	r1, [r3, #60]
	beq	.L13606
	cmp	r2, #3
	beq	.L13607
	cmp	r2, #1
	beq	.L13637
	sub	r2, r2, #1
	cmp	r2, #9
	addls	pc, pc, r2, asl #2
	b	.L13609
.L13611:
	b	.L13622
	b	.L13612
	b	.L13613
	b	.L13614
	b	.L13615
	b	.L13616
	b	.L13617
	b	.L13618
	b	.L13619
	b	.L13620
	.p2align 1
.L13635:
	ldr	r2, [r0, #152]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L13578
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #152]
.L13578:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	subs	r5, r0, #0
	bne	.L13581
	ldr	r0, [r4, #152]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #152]
	str	r4, [r3]
.L13580:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13606:
	mov	r0, r4
	uxtb	r1, r1
	bl	gsdio_connect(PLT)
	b	.L13580
.L13637:
	mov	r0, r4
	uxtb	r1, r1
	bl	gserial_connect(PLT)
	b	.L13580
.L13636:
	bl	gserial_disconnect(PLT)
	ldr	r2, [r4, #80]
	b	.L13582
.L13599:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L13604
	ldr	r0, [r5]
	mov	r1, r4
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L13604
	ldr	r2, [r4, #80]
	b	.L13600
.L13607:
	mov	r0, r4
	uxtb	r1, r1
	bl	gsmd_connect(PLT)
	b	.L13580
.L13604:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L13580
.L13585:
	uxtb	r1, r1
	bl	gsmd_disconnect(PLT)
	ldr	r2, [r4, #80]
	b	.L13582
.L13584:
	uxtb	r1, r1
	bl	gsdio_disconnect(PLT)
	ldr	r2, [r4, #80]
	b	.L13582
.L13581:
	mvn	r5, #21
	b	.L13580
.L13622:
	ldr	r2, .L13638+20
.LPIC3245:
	add	r2, pc, r2
.L13610:
	ldr	r1, .L13638+24
	ldr	r0, .L13638+28
.LPIC3261:
	add	r1, pc, r1
	add	r1, r1, #3968
.LPIC3260:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L13580
.L13620:
	ldr	r2, .L13638+32
.LPIC3254:
	add	r2, pc, r2
	b	.L13610
.L13619:
	ldr	r2, .L13638+36
.LPIC3253:
	add	r2, pc, r2
	b	.L13610
.L13618:
	ldr	r2, .L13638+40
.LPIC3252:
	add	r2, pc, r2
	b	.L13610
.L13617:
	ldr	r2, .L13638+44
.LPIC3251:
	add	r2, pc, r2
	b	.L13610
.L13616:
	ldr	r2, .L13638+48
.LPIC3250:
	add	r2, pc, r2
	b	.L13610
.L13615:
	ldr	r2, .L13638+52
.LPIC3249:
	add	r2, pc, r2
	b	.L13610
.L13614:
	ldr	r2, .L13638+56
.LPIC3248:
	add	r2, pc, r2
	b	.L13610
.L13613:
	ldr	r2, .L13638+60
.LPIC3247:
	add	r2, pc, r2
	b	.L13610
.L13612:
	ldr	r2, .L13638+64
.LPIC3246:
	add	r2, pc, r2
	b	.L13610
.L13590:
	ldr	r2, .L13638+68
.LPIC3235:
	add	r2, pc, r2
	b	.L13588
.L13598:
	ldr	r2, .L13638+72
.LPIC3243:
	add	r2, pc, r2
	b	.L13588
.L13597:
	ldr	r2, .L13638+76
.LPIC3242:
	add	r2, pc, r2
	b	.L13588
.L13596:
	ldr	r2, .L13638+80
.LPIC3241:
	add	r2, pc, r2
	b	.L13588
.L13595:
	ldr	r2, .L13638+84
.LPIC3240:
	add	r2, pc, r2
	b	.L13588
.L13594:
	ldr	r2, .L13638+88
.LPIC3239:
	add	r2, pc, r2
	b	.L13588
.L13593:
	ldr	r2, .L13638+92
.LPIC3238:
	add	r2, pc, r2
	b	.L13588
.L13592:
	ldr	r2, .L13638+96
.LPIC3237:
	add	r2, pc, r2
	b	.L13588
.L13591:
	ldr	r2, .L13638+100
.LPIC3236:
	add	r2, pc, r2
	b	.L13588
.L13609:
	ldr	r2, .L13638+104
.LPIC3255:
	add	r2, pc, r2
	b	.L13610
.L13587:
	ldr	r2, .L13638+108
.LPIC3244:
	add	r2, pc, r2
	b	.L13588
.L13639:
	.align	2
.L13638:
	.word	.LANCHOR2-(.LPIC3256+8)
	.word	.LC0-(.LPIC3234+8)
	.word	.LANCHOR3-(.LPIC3258+8)
	.word	.LC675-(.LPIC3257+8)
	.word	.LANCHOR2-(.LPIC3259+8)
	.word	.LC0-(.LPIC3245+8)
	.word	.LANCHOR3-(.LPIC3261+8)
	.word	.LC676-(.LPIC3260+8)
	.word	.LC9-(.LPIC3254+8)
	.word	.LC8-(.LPIC3253+8)
	.word	.LC7-(.LPIC3252+8)
	.word	.LC6-(.LPIC3251+8)
	.word	.LC5-(.LPIC3250+8)
	.word	.LC4-(.LPIC3249+8)
	.word	.LC3-(.LPIC3248+8)
	.word	.LC2-(.LPIC3247+8)
	.word	.LC1-(.LPIC3246+8)
	.word	.LC1-(.LPIC3235+8)
	.word	.LC9-(.LPIC3243+8)
	.word	.LC8-(.LPIC3242+8)
	.word	.LC7-(.LPIC3241+8)
	.word	.LC6-(.LPIC3240+8)
	.word	.LC5-(.LPIC3239+8)
	.word	.LC4-(.LPIC3238+8)
	.word	.LC3-(.LPIC3237+8)
	.word	.LC2-(.LPIC3236+8)
	.word	.LC10-(.LPIC3255+8)
	.word	.LC10-(.LPIC3244+8)
	.fnend
	.size	acm_set_alt, .-acm_set_alt
	.align	2
	.type	acm_disable, %function
acm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r3, .L13662
	mov	r4, r0
	str	lr, [sp, #4]
	ldrb	ip, [r0, #138]	@ zero_extendqisi2
	ldr	r2, [r0, #140]
.LPIC3273:
	add	r3, pc, r3
	mov	r1, ip, asl #4
	cmp	r2, #2
	sub	r1, r1, ip, asl #2
	add	r3, r3, r1
	ldr	r1, [r3, #60]
	beq	.L13642
	cmp	r2, #3
	beq	.L13643
	cmp	r2, #1
	beq	.L13661
	sub	r2, r2, #1
	cmp	r2, #9
	addls	pc, pc, r2, asl #2
	b	.L13646
.L13648:
	b	.L13658
	b	.L13649
	b	.L13650
	b	.L13651
	b	.L13652
	b	.L13653
	b	.L13654
	b	.L13655
	b	.L13656
	b	.L13657
	.p2align 1
.L13661:
	bl	gserial_disconnect(PLT)
.L13645:
	ldr	r0, [r4, #152]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #152]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L13643:
	uxtb	r1, r1
	bl	gsmd_disconnect(PLT)
	b	.L13645
.L13642:
	uxtb	r1, r1
	bl	gsdio_disconnect(PLT)
	b	.L13645
.L13658:
	ldr	r2, .L13662+4
.LPIC3262:
	add	r2, pc, r2
.L13647:
	ldr	r1, .L13662+8
	ldr	r0, .L13662+12
.LPIC3275:
	add	r1, pc, r1
	add	r1, r1, #3952
.LPIC3274:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L13645
.L13649:
	ldr	r2, .L13662+16
.LPIC3263:
	add	r2, pc, r2
	b	.L13647
.L13650:
	ldr	r2, .L13662+20
.LPIC3264:
	add	r2, pc, r2
	b	.L13647
.L13651:
	ldr	r2, .L13662+24
.LPIC3265:
	add	r2, pc, r2
	b	.L13647
.L13652:
	ldr	r2, .L13662+28
.LPIC3266:
	add	r2, pc, r2
	b	.L13647
.L13653:
	ldr	r2, .L13662+32
.LPIC3267:
	add	r2, pc, r2
	b	.L13647
.L13654:
	ldr	r2, .L13662+36
.LPIC3268:
	add	r2, pc, r2
	b	.L13647
.L13655:
	ldr	r2, .L13662+40
.LPIC3269:
	add	r2, pc, r2
	b	.L13647
.L13656:
	ldr	r2, .L13662+44
.LPIC3270:
	add	r2, pc, r2
	b	.L13647
.L13657:
	ldr	r2, .L13662+48
.LPIC3271:
	add	r2, pc, r2
	b	.L13647
.L13646:
	ldr	r2, .L13662+52
.LPIC3272:
	add	r2, pc, r2
	b	.L13647
.L13663:
	.align	2
.L13662:
	.word	.LANCHOR2-(.LPIC3273+8)
	.word	.LC0-(.LPIC3262+8)
	.word	.LANCHOR3-(.LPIC3275+8)
	.word	.LC675-(.LPIC3274+8)
	.word	.LC1-(.LPIC3263+8)
	.word	.LC2-(.LPIC3264+8)
	.word	.LC3-(.LPIC3265+8)
	.word	.LC4-(.LPIC3266+8)
	.word	.LC5-(.LPIC3267+8)
	.word	.LC6-(.LPIC3268+8)
	.word	.LC7-(.LPIC3269+8)
	.word	.LC8-(.LPIC3270+8)
	.word	.LC9-(.LPIC3271+8)
	.word	.LC10-(.LPIC3272+8)
	.fnend
	.size	acm_disable, .-acm_disable
	.align	2
	.global	gsmd_setup
	.type	gsmd_setup, %function
gsmd_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r2, r1, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r3, r1
	strd	r6, [sp, #8]
	cmp	r2, #1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	str	r1, [sp, #12]
	bhi	.L13693
	ldr	r0, .L13700
	mov	r9, #0
	mov	r2, #1
	mov	r1, #10
	mov	r3, r9
	str	r9, [sp]
.LPIC3278:
	add	r0, pc, r0
	bl	__alloc_workqueue_key(PLT)
	ldr	r2, .L13700+4
	cmp	r0, r9
.LPIC3279:
	add	r2, pc, r2
	str	r0, [r2, #-512]
	beq	.L13694
	ldr	r3, .L13700+8
	add	r2, r2, #4048
	mov	r8, r9
	add	r2, r2, #8
	ldr	r10, .L13700+12
	str	r2, [sp, #24]
	ldr	r2, .L13700+16
.LPIC3306:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
.LPIC3283:
	add	r10, pc, r10
	add	r5, r10, #316
.LPIC3284:
	add	r2, pc, r2
	str	r3, [sp, #16]
	ldr	r3, .L13700+20
	str	r2, [sp, #20]
	ldr	r2, .L13700+24
.LPIC3290:
	add	r3, pc, r3
.LPIC3289:
	add	r2, pc, r2
	str	r3, [sp, #32]
	ldr	r3, .L13700+28
	str	r2, [sp, #28]
.LPIC3291:
	add	r3, pc, r3
	str	r3, [sp, #36]
	b	.L13672
.L13697:
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L13695
.L13670:
	ldr	r3, .L13700+32
	add	r2, r4, #44
	add	lr, r4, #56
	ldr	ip, [sp, #28]
	add	r0, r4, #20
	add	r1, r4, #32
	str	r2, [sp, #8]
	ldr	r2, [sp, #32]
	add	fp, r4, #12
	str	r8, [r4]
	add	r8, r8, #1
.LPIC3308:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r7, [r4, #28]
	str	ip, [r4, #40]
	add	ip, r4, #80
	str	r2, [r4, #64]
	ldr	r2, [sp, #36]
	str	r7, [r4, #52]
	add	r3, r9, r3
	str	r7, [r4, #76]
	add	r9, r9, #12
	str	r0, [r4, #20]
	str	r3, [r4, #72]
	ldr	r3, [sp, #8]
	str	r2, [r4, #88]
	mov	r2, r6
	str	r0, [r4, #24]
	add	r0, r4, #92
	str	r1, [r4, #32]
	str	r1, [r4, #36]
	mov	r1, r6
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	lr, [r4, #56]
	str	lr, [r4, #60]
	str	ip, [r4, #80]
	str	ip, [r4, #84]
	str	r6, [r4, #4]
	str	fp, [r4, #12]
	str	fp, [r4, #16]
	bl	init_timer_key(PLT)
	add	ip, r4, #76
	ldr	r3, .L13700+36
	str	r7, [r4, #124]
	ldr	r2, .L13700+40
	add	r1, r4, #128
	add	r0, r5, #28
	str	ip, [r4, #112]
	ldr	r7, .L13700+44
	add	r5, r5, #108
	ldr	ip, .L13700+48
	str	r1, [r4, #128]
.LPIC3307:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r1, [r4, #132]
.LPIC3292:
	add	r2, pc, r2
.LPIC3293:
	add	r7, pc, r7
.LPIC3294:
	add	ip, pc, ip
	str	r2, [r4, #136]
	str	r3, [r4, #108]
	str	r4, [r5, #-84]
	str	r7, [r5, #-80]
	str	ip, [r5, #-76]
	ldr	r3, [r4, #72]
	ldr	r3, [r3, #4]
	str	r6, [r5, #-52]
	str	r3, [r5, #-60]
	bl	platform_driver_register(PLT)
	ldr	r3, [sp, #12]
	cmp	r8, r3
	beq	.L13696
.L13672:
	mov	r0, r5
	ldr	r1, [sp, #20]
	mov	r6, #0
	ldr	r2, [sp, #24]
	mov	r7, #2560
	bl	__mutex_init(PLT)
	ldr	r2, [sp, #16]
	movw	r1, #32976
	ldr	r3, [r10, #312]
	ldr	r2, [r2, #8]
	add	r3, r3, #1
	str	r3, [r10, #312]
	cmp	r2, r6
	mov	r0, r2
	bne	.L13697
	mov	r4, #16
	b	.L13670
.L13696:
	ldr	r0, .L13700+52
	mov	r1, r6
.LPIC3280:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	cmn	r0, #4096
	bhi	.L13698
	ldr	ip, .L13700+56
	mov	r2, r0
	mov	r1, #292
	ldr	r0, .L13700+60
	mov	r3, r6
.LPIC3296:
	add	ip, pc, ip
	add	ip, ip, #436
.LPIC3295:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	mov	r0, r6
.L13684:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13695:
	ldr	r1, .L13700+64
	mov	r2, r8
	ldr	r3, [r10, #312]
	ldr	r0, .L13700+68
.LPIC3302:
	add	r1, pc, r1
	sub	r3, r3, #1
	add	r1, r1, #3984
.LPIC3301:
	add	r0, pc, r0
	add	r1, r1, #12
	str	r3, [r10, #312]
	bl	printk(PLT)
	ldr	r3, [r10, #312]
	cmp	r3, #0
	beq	.L13675
	ldr	r0, [r10, #340]
	cmp	r0, #0
	beq	.L13699
.L13676:
	cmp	r3, #1
	bls	.L13675
	ldr	r3, .L13700+72
.LPIC3297:
	add	r3, pc, r3
	ldr	r0, [r3, #448]
	cmp	r0, #0
	bne	.L13675
	bl	kfree(PLT)
.L13675:
	ldr	r3, .L13700+76
.LPIC3298:
	add	r3, pc, r3
	ldr	r0, [r3, #-512]
	bl	destroy_workqueue(PLT)
	mvn	r0, #11
	b	.L13684
.L13698:
	mov	r0, r6
	b	.L13684
.L13699:
	bl	kfree(PLT)
	ldr	r3, [r10, #312]
	b	.L13676
.L13694:
	ldr	r1, .L13700+80
	ldr	r0, .L13700+84
.LPIC3282:
	add	r1, pc, r1
	add	r1, r1, #3984
.LPIC3281:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #11
	b	.L13684
.L13693:
	ldr	r1, .L13700+88
	mov	r2, r3
	mov	r3, r0
	ldr	r0, .L13700+92
.LPIC3277:
	add	r1, pc, r1
	add	r1, r1, #3984
.LPIC3276:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #21
	b	.L13684
.L13701:
	.align	2
.L13700:
	.word	.LC678-(.LPIC3278+8)
	.word	.LANCHOR4-(.LPIC3279+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3306+8))
	.word	.LANCHOR2-(.LPIC3283+8)
	.word	.LC681-(.LPIC3284+8)
	.word	gsmd_tx_pull-(.LPIC3290+8)
	.word	gsmd_rx_push-(.LPIC3289+8)
	.word	gsmd_connect_work-(.LPIC3291+8)
	.word	smd_pi(GOT_PREL)+(.-(.LPIC3308+8))
	.word	delayed_work_timer_fn(GOT_PREL)+(.-(.LPIC3307+8))
	.word	gsmd_disconnect_work-(.LPIC3292+8)
	.word	gsmd_ch_probe-(.LPIC3293+8)
	.word	gsmd_ch_remove-(.LPIC3294+8)
	.word	.LC679-(.LPIC3280+8)
	.word	.LANCHOR5-(.LPIC3296+8)
	.word	.LC135-(.LPIC3295+8)
	.word	.LANCHOR3-(.LPIC3302+8)
	.word	.LC682-(.LPIC3301+8)
	.word	.LANCHOR2-(.LPIC3297+8)
	.word	.LANCHOR4-(.LPIC3298+8)
	.word	.LANCHOR3-(.LPIC3282+8)
	.word	.LC680-(.LPIC3281+8)
	.word	.LANCHOR3-(.LPIC3277+8)
	.word	.LC677-(.LPIC3276+8)
	.fnend
	.size	gsmd_setup, .-gsmd_setup
	.align	2
	.global	gsmd_cleanup
	.type	gsmd_cleanup, %function
gsmd_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gsmd_cleanup, .-gsmd_cleanup
	.align	2
	.global	gbam_data_recv_cb
	.type	gbam_data_recv_cb, %function
gbam_data_recv_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	bxeq	lr
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #8
	mov	r6, r1
	mov	r0, r7
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #12]
	mov	r8, r0
	cmp	r3, #0
	beq	.L13707
	ldr	r3, .L13713
	ldr	r2, [r4, #44]
.LPIC3309:
	add	r3, pc, r3
	ldr	r3, [r3, #2972]
	cmp	r2, r3
	bls	.L13706
	ldr	r3, .L13713+4
	ldr	r2, [r4, #244]
.LPIC3310:
	add	r3, pc, r3
	add	r5, r3, #4000
	add	r2, r2, #1
	add	r5, r5, #8
	mov	r0, r5
	str	r2, [r4, #244]
	bl	__printk_ratelimit(PLT)
	cmp	r0, #0
	bne	.L13712
.L13707:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r4, [sp]
	mov	r0, r6
	ldr	r8, [sp, #16]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_kfree_skb_any(PLT)
.L13706:
	ldr	r3, [r4, #40]
	add	r2, r4, #36
	mov	r0, r7
	mov	r1, r8
	strd	r2, [r6]
	str	r6, [r3]
	ldr	r3, [r4, #44]
	str	r6, [r4, #40]
	add	r3, r3, #1
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldr	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	gbam_write_data_tohost(PLT)
.L13712:
	ldr	r0, .L13713+8
	mov	r1, r5
	ldr	r2, [r4, #244]
.LPIC3311:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13707
.L13714:
	.align	2
.L13713:
	.word	.LANCHOR1-(.LPIC3309+8)
	.word	.LANCHOR3-(.LPIC3310+8)
	.word	.LC683-(.LPIC3311+8)
	.fnend
	.size	gbam_data_recv_cb, .-gbam_data_recv_cb
	.align	2
	.global	gbam_data_write_done
	.type	gbam_data_write_done, %function
gbam_data_write_done:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r0, r1
	add	r5, r4, #4
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	bl	dev_kfree_skb_any(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #240]
	mov	r1, r0
	mov	r0, r5
	sub	r3, r3, #1
	str	r3, [r4, #240]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L13718
	add	r1, r4, #80
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
.LPIC3313:
	add	r3, pc, r3
	ldr	r0, [r3, #-616]
	b	queue_work(PLT)
.L13719:
	.align	2
.L13718:
	.word	.LANCHOR4-(.LPIC3313+8)
	.fnend
	.size	gbam_data_write_done, .-gbam_data_write_done
	.align	2
	.type	gbam_notify, %function
gbam_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #0
	beq	.L13722
	cmp	r1, #1
	bne	.L13726
	mov	r1, r2
	b	gbam_data_write_done(PLT)
.L13726:
	bx	lr
.L13722:
	mov	r1, r2
	b	gbam_data_recv_cb(PLT)
	.fnend
	.size	gbam_notify, .-gbam_notify
	.align	2
	.global	gbam_disconnect
	.type	gbam_disconnect, %function
gbam_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #5
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r10, [sp, #24]
	mov	r10, r2
	mov	fp, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	beq	.L13753
	sub	r3, r2, #6
	cmp	r3, #1
	bls	.L13754
.L13730:
	cmp	r4, #0
	beq	.L13736
	ldr	r3, .L13758
.LPIC3328:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r5, [r3, fp, asl #2]
	str	r4, [r5, #16]
.L13731:
	ldr	r9, .L13758+4
	add	r7, r5, #4
	mov	r6, #0
	mov	r0, r7
	add	r8, r5, #8
	bl	_raw_spin_lock_irqsave(PLT)
	str	r0, [sp, #4]
	mov	r0, r8
.LPIC3324:
	add	r9, pc, r9
	bl	_raw_spin_lock(PLT)
	mov	r0, r8
	str	r6, [r5, #12]
	str	r6, [r9, #-620]
	bl	_raw_spin_unlock(PLT)
	ldr	r1, [sp, #4]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #76]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #76]
	bic	r2, r10, #2
	cmp	r2, #5
	str	r6, [r3]
	ldr	r3, [r4, #80]
	str	r6, [r3]
	beq	.L13755
	cmp	fp, #0
	cmpeq	r10, #6
	beq	.L13756
.L13727:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13754:
	ldr	r3, .L13758+8
.LPIC3317:
	add	r3, pc, r3
	ldr	r3, [r3, #4056]
	cmp	r1, r3
	blt	.L13730
	ldr	r1, .L13758+12
	mov	r2, fp
	ldr	r0, .L13758+16
.LPIC3319:
	add	r1, pc, r1
.LPIC3318:
	add	r0, pc, r0
.L13751:
	add	r1, r1, #4016
	add	r1, r1, #12
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk(PLT)
.L13753:
	ldr	r2, .L13758+20
.LPIC3314:
	add	r2, pc, r2
	ldr	r3, [r2, #2224]
	cmp	r1, r3
	bge	.L13757
	cmp	r0, #0
	beq	.L13736
	mov	r3, #84
	mla	r3, r3, fp, r2
	ldr	r5, [r3, #2228]
	str	r4, [r5, #16]
	mov	r0, r5
	bl	gbam_free_buffers(PLT)
	b	.L13731
.L13755:
	ldr	r0, [r9, #-616]
	add	r1, r5, #300
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work(PLT)
.L13756:
	mov	r0, r6
	bl	usb_bam_client_ready(PLT)
	cmp	r0, #0
	beq	.L13727
	ldr	r1, .L13758+24
	ldr	r0, .L13758+28
.LPIC3327:
	add	r1, pc, r1
.LPIC3326:
	add	r0, pc, r0
	b	.L13752
.L13736:
	ldr	r1, .L13758+32
	ldr	r0, .L13758+36
.LPIC3321:
	add	r1, pc, r1
.LPIC3320:
	add	r0, pc, r0
.L13752:
	add	r1, r1, #4016
	add	r1, r1, #12
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk(PLT)
.L13757:
	ldr	r1, .L13758+40
	mov	r2, fp
	ldr	r0, .L13758+44
.LPIC3316:
	add	r1, pc, r1
.LPIC3315:
	add	r0, pc, r0
	b	.L13751
.L13759:
	.align	2
.L13758:
	.word	bam2bam_ports(GOT_PREL)+(.-(.LPIC3328+8))
	.word	.LANCHOR4-(.LPIC3324+8)
	.word	.LANCHOR4-(.LPIC3317+8)
	.word	.LANCHOR3-(.LPIC3319+8)
	.word	.LC685-(.LPIC3318+8)
	.word	.LANCHOR2-(.LPIC3314+8)
	.word	.LANCHOR3-(.LPIC3327+8)
	.word	.LC687-(.LPIC3326+8)
	.word	.LANCHOR3-(.LPIC3321+8)
	.word	.LC686-(.LPIC3320+8)
	.word	.LANCHOR3-(.LPIC3316+8)
	.word	.LC684-(.LPIC3315+8)
	.fnend
	.size	gbam_disconnect, .-gbam_disconnect
	.align	2
	.global	gbam_connect
	.type	gbam_connect, %function
gbam_connect:
	.fnstart
	@ args = 4, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r2, #5
	mov	r5, r2
	strd	r10, [sp, #24]
	mov	r10, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldrb	fp, [sp, #48]	@ zero_extendqisi2
	str	r3, [sp, #4]
	beq	.L13784
	sub	r3, r2, #6
	cmp	r3, #1
	bls	.L13785
.L13764:
	cmp	r10, #0
	beq	.L13771
	ldr	r3, .L13791
.LPIC3344:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r4, [r3, r1, asl #2]
.L13765:
	ldr	r0, [r10, #76]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L13786
	ldr	r3, [r10, #76]
	str	r4, [r3]
	ldr	r0, [r10, #80]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L13787
	ldr	r3, [r10, #80]
	add	r7, r4, #4
	add	r8, r4, #8
	mov	r0, r7
	str	r4, [r3]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r9, r0
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	cmp	r5, #5
	str	r10, [r4, #12]
	beq	.L13788
	mov	r0, r8
	bl	_raw_spin_unlock(PLT)
	mov	r0, r7
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r5, #6
	beq	.L13789
	cmp	r5, #7
	bne	.L13769
	ldrb	r1, [sp, #4]	@ zero_extendqisi2
	add	r2, r4, #120
	add	r3, r4, #124
	str	r10, [r4, #16]
	strb	fp, [r4, #137]
	strd	r2, [r4, #140]
	strb	r1, [r4, #136]
.L13769:
	ldr	r3, .L13791+4
	str	r5, [r4, #132]
	add	r1, r4, #284
.LPIC3343:
	add	r3, pc, r3
	ldr	r0, [r3, #-616]
	bl	queue_work(PLT)
.L13780:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13789:
	ldrb	r3, [sp, #4]	@ zero_extendqisi2
	str	r10, [r4, #16]
	strb	fp, [r4, #129]
	strb	r3, [r4, #128]
	b	.L13769
.L13785:
	ldr	r3, .L13791+8
.LPIC3332:
	add	r3, pc, r3
	ldr	r3, [r3, #4056]
	cmp	r1, r3
	blt	.L13764
	ldr	r3, .L13791+12
	mov	r2, r1
	mvn	r6, #18
	ldr	r0, .L13791+16
.LPIC3334:
	add	r3, pc, r3
	add	r1, r3, #4032
.LPIC3333:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L13780
.L13784:
	ldr	r0, .L13791+20
.LPIC3329:
	add	r0, pc, r0
	ldr	r3, [r0, #2224]
	cmp	r1, r3
	bge	.L13790
	cmp	r10, #0
	beq	.L13771
	mov	r3, #84
	mla	r1, r3, r1, r0
	ldr	r4, [r1, #2228]
	b	.L13765
.L13788:
	mov	r0, r8
	str	r6, [r4, #264]
	str	r6, [r4, #260]
	str	r6, [r4, #240]
	str	r6, [r4, #244]
	str	r6, [r4, #248]
	str	r6, [r4, #268]
	str	r6, [r4, #272]
	str	r6, [r4, #276]
	str	r6, [r4, #280]
	bl	_raw_spin_unlock(PLT)
	mov	r0, r7
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L13769
.L13787:
	ldr	r1, .L13791+24
	ldr	r0, .L13791+28
	ldr	r2, [r10, #80]
.LPIC3342:
	add	r1, pc, r1
	add	r1, r1, #4032
.LPIC3341:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r3, [r10, #76]
	mov	r2, #0
	str	r2, [r3]
	b	.L13780
.L13786:
	ldr	r1, .L13791+32
	ldr	r0, .L13791+36
	ldr	r2, [r10, #76]
.LPIC3340:
	add	r1, pc, r1
	add	r1, r1, #4032
.LPIC3339:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L13780
.L13771:
	ldr	r1, .L13791+40
	mvn	r6, #18
	ldr	r0, .L13791+44
.LPIC3336:
	add	r1, pc, r1
	add	r1, r1, #4032
.LPIC3335:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L13780
.L13790:
	ldr	r3, .L13791+48
	mov	r2, r1
	mvn	r6, #18
	ldr	r0, .L13791+52
.LPIC3331:
	add	r3, pc, r3
	add	r1, r3, #4032
.LPIC3330:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L13780
.L13792:
	.align	2
.L13791:
	.word	bam2bam_ports(GOT_PREL)+(.-(.LPIC3344+8))
	.word	.LANCHOR4-(.LPIC3343+8)
	.word	.LANCHOR4-(.LPIC3332+8)
	.word	.LANCHOR3-(.LPIC3334+8)
	.word	.LC88-(.LPIC3333+8)
	.word	.LANCHOR2-(.LPIC3329+8)
	.word	.LANCHOR3-(.LPIC3342+8)
	.word	.LC190-(.LPIC3341+8)
	.word	.LANCHOR3-(.LPIC3340+8)
	.word	.LC189-(.LPIC3339+8)
	.word	.LANCHOR3-(.LPIC3336+8)
	.word	.LC686-(.LPIC3335+8)
	.word	.LANCHOR3-(.LPIC3331+8)
	.word	.LC88-(.LPIC3330+8)
	.fnend
	.size	gbam_connect, .-gbam_connect
	.align	2
	.global	gbam_setup
	.type	gbam_setup, %function
gbam_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L13841
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r3, r1
	strd	r6, [sp, #8]
	mov	r4, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
.LPIC3353:
	add	r2, pc, r2
	str	r1, [sp, #12]
	orrs	r1, r0, r3
	str	r2, [sp, #8]
	beq	.L13794
	cmp	r3, #3
	cmpls	r0, #1
	movhi	r3, #1
	movls	r3, #0
	bhi	.L13794
	ldr	r0, .L13841+4
	str	r3, [sp]
	mov	r1, #10
	mov	r2, #1
.LPIC3347:
	add	r0, pc, r0
	bl	__alloc_workqueue_key(PLT)
	ldr	r3, .L13841+8
	cmp	r0, #0
.LPIC3348:
	add	r3, pc, r3
	str	r0, [r3, #-616]
	beq	.L13797
	cmp	r4, #0
	beq	.L13803
	ldr	r4, .L13841+12
	ldr	r3, .L13841+16
.LPIC3351:
	add	r4, pc, r4
	ldr	r2, [r4, #2224]
	add	r2, r2, #1
	str	r2, [r4, #2224]
	ldr	r2, [sp, #8]
	ldr	r5, [r2, r3]
	ldr	r0, [r5, #36]
	cmp	r0, #0
	beq	.L13816
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	beq	.L13838
.L13801:
	ldr	r2, .L13841+20
	add	r8, r0, #52
	mov	ip, #2560
	ldr	r7, .L13841+24
	mov	r3, #0
	add	fp, r0, #288
	ldr	r6, .L13841+28
	str	r8, [r0, #52]
	add	r10, r0, #304
	ldr	r5, .L13841+32
	str	r8, [r0, #56]
	add	r9, r0, #28
	ldr	r4, .L13841+36
.LPIC3358:
	add	r2, pc, r2
	str	ip, [r0, #284]
	ldr	r8, .L13841+40
.LPIC3354:
	add	r7, pc, r7
	add	r2, r2, #2224
.LPIC3355:
	add	r6, pc, r6
	add	r2, r2, #4
	str	ip, [r0, #300]
.LPIC3356:
	add	r5, pc, r5
	mov	r1, r2
	str	r7, [r0, #296]
.LPIC3357:
	add	r4, pc, r4
	str	r6, [r0, #312]
	mov	r7, #8
	str	r5, [r0, #92]
	add	r6, r0, #100
	add	r5, r0, #84
	str	r4, [r0, #108]
.LPIC3359:
	add	r8, pc, r8
	add	r4, r0, #36
	str	ip, [r0, #80]
	ldr	lr, .L13841+44
	str	ip, [r0, #96]
	add	ip, r0, #60
	str	r3, [r0, #4]
	str	r3, [r0]
	str	r3, [r0, #8]
.LPIC3361:
	add	lr, pc, lr
	str	r3, [r0, #48]
	str	r3, [r0, #44]
	str	r3, [r0, #72]
	str	r3, [r0, #68]
	str	r0, [r0, #76]
	str	fp, [r0, #288]
	str	fp, [r0, #292]
	str	r10, [r0, #304]
	str	r10, [r0, #308]
	str	r9, [r0, #28]
	str	r9, [r0, #32]
	str	r5, [r0, #84]
	str	r5, [r0, #88]
	str	r6, [r0, #100]
	str	r6, [r0, #104]
	str	r4, [r0, #36]
	str	r4, [r0, #40]
	str	ip, [r0, #60]
	str	ip, [r0, #64]
	str	r7, [r0, #24]
	str	r0, [r1], #4
	mov	r0, r1
	str	r8, [r2, #4]
	str	r3, [r1, #28]
	ldr	r3, .L13841+48
	str	lr, [r1, #20]
.LPIC3360:
	add	r3, pc, r3
	str	r3, [r1, #4]
	bl	platform_driver_register(PLT)
.L13803:
	ldr	r3, [sp, #12]
	cmp	r3, #0
	beq	.L13800
	ldr	r3, .L13841+16
	mov	r4, #0
	ldr	r2, [sp, #8]
	ldr	r9, .L13841+52
	ldr	r8, .L13841+56
	ldr	r7, .L13841+60
	ldr	r5, [r2, r3]
	ldr	r3, .L13841+64
.LPIC3363:
	add	r9, pc, r9
	ldr	r6, .L13841+68
.LPIC3365:
	add	r8, pc, r8
.LPIC3366:
	add	r7, pc, r7
	str	r5, [sp, #20]
.LPIC3368:
	add	r3, pc, r3
.LPIC3367:
	add	r6, pc, r6
	str	r3, [sp, #16]
	b	.L13808
.L13840:
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	beq	.L13839
.L13806:
	mov	r3, #2560
	ldr	r2, .L13841+72
	mov	fp, #0
	ldr	r5, [sp, #16]
	add	r10, r0, #288
	add	lr, r0, #304
	str	r3, [r0, #284]
	add	ip, r0, #320
	add	r1, r0, #336
	str	r3, [r0, #300]
	str	r3, [r0, #316]
	str	r3, [r0, #332]
	ldr	r3, [sp, #8]
	str	r4, [r0]
	str	fp, [r0, #4]
	str	r8, [r0, #296]
	str	fp, [r0, #8]
	str	r7, [r0, #312]
	str	r6, [r0, #328]
	str	r5, [r0, #344]
	str	r0, [r0, #76]
	str	r10, [r0, #288]
	str	r10, [r0, #292]
	str	lr, [r0, #304]
	str	lr, [r0, #308]
	str	ip, [r0, #320]
	str	ip, [r0, #324]
	str	r1, [r0, #336]
	str	r1, [r0, #340]
	ldr	r3, [r3, r2]
	str	r0, [r3, r4, asl #2]
	ldr	r3, [sp, #12]
	add	r4, r4, #1
	cmp	r4, r3
	beq	.L13800
.L13808:
	ldr	r2, [sp, #20]
	movw	r1, #32976
	ldr	r3, [r9, #4056]
	ldr	r2, [r2, #36]
	add	r3, r3, #1
	str	r3, [r9, #4056]
	subs	r0, r2, #0
	bne	.L13840
	mov	r0, #16
	b	.L13806
.L13816:
	mov	r0, #16
	b	.L13801
.L13800:
	ldr	r0, .L13841+76
	mov	r1, #0
.LPIC3362:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	ldr	r2, [sp, #8]
	cmp	r0, #0
	ldr	r3, .L13841+80
	ldr	r4, [r2, r3]
	str	r0, [r4]
	beq	.L13804
	cmn	r0, #4096
	bhi	.L13804
	ldr	lr, [sp, #8]
	mov	r2, r0
	mov	r1, #292
	ldr	ip, .L13841+84
	mov	r3, #0
	ldr	r0, .L13841+88
	ldr	ip, [lr, ip]
.LPIC3369:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	cmp	r0, #0
	beq	.L13809
	cmn	r0, #4096
	bhi	.L13809
.L13804:
	mov	r0, #0
.L13833:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13838:
	ldr	r1, .L13841+92
	mov	r2, r0
	ldr	r3, [r4, #2224]
	ldr	r0, .L13841+96
.LPIC3379:
	add	r1, pc, r1
	sub	r3, r3, #1
	add	r1, r1, #4048
.LPIC3378:
	add	r0, pc, r0
	add	r1, r1, #12
	str	r3, [r4, #2224]
	bl	printk(PLT)
.L13810:
	ldr	r4, .L13841+100
.LPIC3370:
	add	r4, pc, r4
	ldr	r3, [r4, #2224]
	cmp	r3, #0
	ble	.L13815
	ldr	r0, [r4, #2228]
	cmp	r0, #0
	beq	.L13815
	bl	kfree(PLT)
	add	r0, r4, #2224
	add	r0, r0, #8
	bl	platform_driver_unregister(PLT)
.L13815:
	ldr	r5, .L13841+104
.LPIC3371:
	add	r5, pc, r5
	ldr	r3, [r5, #4056]
	cmp	r3, #0
	ble	.L13813
	ldr	r3, .L13841+72
	mov	r4, #0
	ldr	r2, [sp, #8]
	ldr	r6, [r2, r3]
.L13812:
	ldr	r0, [r6, r4, asl #2]
	add	r4, r4, #1
	bl	kfree(PLT)
	ldr	r3, [r5, #4056]
	cmp	r3, r4
	bgt	.L13812
.L13813:
	ldr	r3, .L13841+108
.LPIC3374:
	add	r3, pc, r3
	ldr	r0, [r3, #-616]
	bl	destroy_workqueue(PLT)
	mvn	r0, #11
	b	.L13833
.L13839:
	ldr	r1, .L13841+112
	mov	r2, r4
	ldr	r3, [r9, #4056]
	ldr	r0, .L13841+116
.LPIC3383:
	add	r1, pc, r1
	sub	r3, r3, #1
	add	r1, r1, #4048
	add	r1, r1, #12
.LPIC3382:
	add	r0, pc, r0
	str	r3, [r9, #4056]
	bl	printk(PLT)
	b	.L13810
.L13809:
	ldr	r0, [r4]
	bl	debugfs_remove(PLT)
	mov	r3, #0
	mov	r0, r3
	str	r3, [r4]
	b	.L13833
.L13797:
	ldr	r1, .L13841+120
	ldr	r0, .L13841+124
.LPIC3350:
	add	r1, pc, r1
	add	r1, r1, #4048
.LPIC3349:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #11
	b	.L13833
.L13794:
	ldr	r1, .L13841+128
	mov	r2, r4
	ldr	r0, .L13841+132
	ldr	r3, [sp, #12]
.LPIC3346:
	add	r1, pc, r1
	add	r1, r1, #4048
.LPIC3345:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #21
	b	.L13833
.L13842:
	.align	2
.L13841:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC3353+8)
	.word	.LC689-(.LPIC3347+8)
	.word	.LANCHOR4-(.LPIC3348+8)
	.word	.LANCHOR2-(.LPIC3351+8)
	.word	kmalloc_caches(GOT)
	.word	.LANCHOR2-(.LPIC3358+8)
	.word	gbam_connect_work-(.LPIC3354+8)
	.word	gbam_disconnect_work-(.LPIC3355+8)
	.word	gbam_data_write_tobam-(.LPIC3356+8)
	.word	gbam_write_data_tohost_w-(.LPIC3357+8)
	.word	gbam_data_ch_probe-(.LPIC3359+8)
	.word	.LC187-(.LPIC3361+8)
	.word	gbam_data_ch_remove-(.LPIC3360+8)
	.word	.LANCHOR4-(.LPIC3363+8)
	.word	gbam2bam_connect_work-(.LPIC3365+8)
	.word	gbam2bam_disconnect_work-(.LPIC3366+8)
	.word	gbam2bam_resume_work-(.LPIC3368+8)
	.word	gbam2bam_suspend_work-(.LPIC3367+8)
	.word	bam2bam_ports(GOT)
	.word	.LC691-(.LPIC3362+8)
	.word	gbam_dent(GOT)
	.word	gbam_stats_ops(GOT)
	.word	.LC135-(.LPIC3369+8)
	.word	.LANCHOR3-(.LPIC3379+8)
	.word	.LC682-(.LPIC3378+8)
	.word	.LANCHOR2-(.LPIC3370+8)
	.word	.LANCHOR4-(.LPIC3371+8)
	.word	.LANCHOR4-(.LPIC3374+8)
	.word	.LANCHOR3-(.LPIC3383+8)
	.word	.LC682-(.LPIC3382+8)
	.word	.LANCHOR3-(.LPIC3350+8)
	.word	.LC690-(.LPIC3349+8)
	.word	.LANCHOR3-(.LPIC3346+8)
	.word	.LC688-(.LPIC3345+8)
	.fnend
	.size	gbam_setup, .-gbam_setup
	.align	2
	.global	gbam_cleanup
	.type	gbam_cleanup, %function
gbam_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L13844
.LPIC3385:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3]
	b	debugfs_remove_recursive(PLT)
.L13845:
	.align	2
.L13844:
	.word	gbam_dent(GOT_PREL)+(.-(.LPIC3385+8))
	.fnend
	.size	gbam_cleanup, .-gbam_cleanup
	.align	2
	.type	rmnet_function_cleanup, %function
rmnet_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	ldr	r6, .L13853
	str	lr, [sp, #12]
.LPIC3386:
	add	r6, pc, r6
	ldr	r3, [r6, #4060]
	cmp	r3, #0
	beq	.L13849
	ldr	r4, .L13853+4
	mov	r5, #0
.LPIC3396:
	add	r4, pc, r4
	add	r4, r4, #2320
	add	r4, r4, #4
.L13848:
	ldr	r0, [r4, #20]
	add	r5, r5, #1
	add	r4, r4, #24
	bl	kfree(PLT)
	ldr	r3, [r6, #4060]
	cmp	r5, r3
	bcc	.L13848
.L13849:
	bl	gbam_cleanup(PLT)
	ldr	r3, .L13853+8
	mov	r2, #0
.LPIC3387:
	add	r3, pc, r3
	str	r2, [r3, #4060]
	str	r2, [r3, #4064]
	str	r2, [r3, #4068]
	str	r2, [r3, #4072]
	str	r2, [r3, #4076]
	str	r2, [r3, #4080]
	str	r2, [r3, #4084]
	str	r2, [r3, #4088]
	str	r2, [r3, #4092]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13854:
	.align	2
.L13853:
	.word	.LANCHOR4-(.LPIC3386+8)
	.word	.LANCHOR2-(.LPIC3396+8)
	.word	.LANCHOR4-(.LPIC3387+8)
	.fnend
	.size	rmnet_function_cleanup, .-rmnet_function_cleanup
	.align	2
	.global	gbam_suspend
	.type	gbam_suspend, %function
gbam_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	sub	r2, r2, #6
	cmp	r2, #1
	bls	.L13857
	bx	lr
.L13857:
	ldr	r3, .L13858
	ldr	r2, .L13858+4
.LPIC3400:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
.LPIC3398:
	add	r2, pc, r2
	ldr	r0, [r2, #-616]
	ldr	r1, [r3, r1, asl #2]
	add	r1, r1, #316
	b	queue_work(PLT)
.L13859:
	.align	2
.L13858:
	.word	bam2bam_ports(GOT_PREL)+(.-(.LPIC3400+8))
	.word	.LANCHOR4-(.LPIC3398+8)
	.fnend
	.size	gbam_suspend, .-gbam_suspend
	.align	2
	.type	frmnet_suspend, %function
frmnet_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	ldr	r3, .L13891
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #128]
.LPIC3412:
	add	r3, pc, r3
	ldrb	r1, [r4, #108]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
	ldr	ip, [r0, #8]
	mov	r2, r1, asl #5
	sub	r2, r2, r1, asl #3
	ldr	r1, [ip, #36]
	add	r3, r3, r2
	ldr	r8, [r3, #2324]
	cmp	r1, #0
	beq	.L13861
	blx	r1
.L13861:
	add	r9, r4, #124
	add	r5, r4, #136
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #136]
	mov	r10, r0
	cmp	r3, r5
	movne	r7, #256
	movne	r6, #512
	beq	.L13866
.L13865:
	ldr	r2, [r3, #4]
	mov	fp, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r7, [r3]
	str	r6, [r3, #4]
	ldr	r0, [fp, #-8]!
	bl	kfree(PLT)
	mov	r0, fp
	bl	kfree(PLT)
	ldr	r3, [r4, #136]
	cmp	r5, r3
	bne	.L13865
.L13866:
	mov	r3, #0
	mov	r0, r9
	mov	r1, r10
	str	r3, [r4, #144]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrb	r1, [r4, #108]	@ zero_extendqisi2
	sub	r0, r8, #5
	ldr	r3, .L13891+4
	cmp	r0, #5
	mov	r2, r1, asl #5
.LPIC3413:
	add	r3, pc, r3
	sub	r2, r2, r1, asl #3
	add	r3, r3, r2
	ldr	r1, [r3, #2332]
	bhi	.L13863
	mov	r3, #1
	mov	r3, r3, asl r0
	tst	r3, #57
	bne	.L13860
	tst	r3, #6
	bne	.L13890
.L13863:
	sub	r8, r8, #1
	cmp	r8, #9
	addls	pc, pc, r8, asl #2
	b	.L13868
.L13870:
	b	.L13880
	b	.L13871
	b	.L13872
	b	.L13873
	b	.L13874
	b	.L13875
	b	.L13876
	b	.L13877
	b	.L13878
	b	.L13879
	.p2align 1
.L13860:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13890:
	uxtb	r1, r1
	mov	r0, r4
	mov	r2, r8
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gbam_suspend(PLT)
.L13880:
	ldr	r2, .L13891+8
.LPIC3401:
	add	r2, pc, r2
.L13869:
	ldr	r1, .L13891+12
	ldr	r0, .L13891+16
.LPIC3415:
	add	r1, pc, r1
	add	r1, r1, #4064
.LPIC3414:
	add	r0, pc, r0
	add	r1, r1, #8
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk(PLT)
.L13872:
	ldr	r2, .L13891+20
.LPIC3403:
	add	r2, pc, r2
	b	.L13869
.L13873:
	ldr	r2, .L13891+24
.LPIC3404:
	add	r2, pc, r2
	b	.L13869
.L13871:
	ldr	r2, .L13891+28
.LPIC3402:
	add	r2, pc, r2
	b	.L13869
.L13878:
	ldr	r2, .L13891+32
.LPIC3409:
	add	r2, pc, r2
	b	.L13869
.L13879:
	ldr	r2, .L13891+36
.LPIC3410:
	add	r2, pc, r2
	b	.L13869
.L13874:
	ldr	r2, .L13891+40
.LPIC3405:
	add	r2, pc, r2
	b	.L13869
.L13875:
	ldr	r2, .L13891+44
.LPIC3406:
	add	r2, pc, r2
	b	.L13869
.L13876:
	ldr	r2, .L13891+48
.LPIC3407:
	add	r2, pc, r2
	b	.L13869
.L13877:
	ldr	r2, .L13891+52
.LPIC3408:
	add	r2, pc, r2
	b	.L13869
.L13868:
	ldr	r2, .L13891+56
.LPIC3411:
	add	r2, pc, r2
	b	.L13869
.L13892:
	.align	2
.L13891:
	.word	.LANCHOR2-(.LPIC3412+8)
	.word	.LANCHOR2-(.LPIC3413+8)
	.word	.LC0-(.LPIC3401+8)
	.word	.LANCHOR3-(.LPIC3415+8)
	.word	.LC676-(.LPIC3414+8)
	.word	.LC2-(.LPIC3403+8)
	.word	.LC3-(.LPIC3404+8)
	.word	.LC1-(.LPIC3402+8)
	.word	.LC8-(.LPIC3409+8)
	.word	.LC9-(.LPIC3410+8)
	.word	.LC4-(.LPIC3405+8)
	.word	.LC5-(.LPIC3406+8)
	.word	.LC6-(.LPIC3407+8)
	.word	.LC7-(.LPIC3408+8)
	.word	.LC10-(.LPIC3411+8)
	.fnend
	.size	frmnet_suspend, .-frmnet_suspend
	.align	2
	.global	gbam_resume
	.type	gbam_resume, %function
gbam_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	sub	r2, r2, #6
	cmp	r2, #1
	bls	.L13895
	bx	lr
.L13895:
	ldr	r3, .L13896
	ldr	r2, .L13896+4
.LPIC3418:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
.LPIC3416:
	add	r2, pc, r2
	ldr	r0, [r2, #-616]
	ldr	r1, [r3, r1, asl #2]
	add	r1, r1, #332
	b	queue_work(PLT)
.L13897:
	.align	2
.L13896:
	.word	bam2bam_ports(GOT_PREL)+(.-(.LPIC3418+8))
	.word	.LANCHOR4-(.LPIC3416+8)
	.fnend
	.size	gbam_resume, .-gbam_resume
	.align	2
	.type	frmnet_resume, %function
frmnet_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r1, [r0, #108]	@ zero_extendqisi2
	ldr	r3, .L13918
	mov	r2, r1, asl #5
.LPIC3430:
	add	r3, pc, r3
	sub	r2, r2, r1, asl #3
	add	r3, r3, r2
	ldr	r2, [r3, #2324]
	ldr	r1, [r3, #2332]
	sub	ip, r2, #5
	cmp	ip, #5
	bhi	.L13899
	mov	r3, #1
	mov	r3, r3, asl ip
	tst	r3, #57
	bne	.L13898
	tst	r3, #6
	bne	.L13917
.L13899:
	sub	r2, r2, #1
	cmp	r2, #9
	addls	pc, pc, r2, asl #2
	b	.L13901
.L13903:
	b	.L13913
	b	.L13904
	b	.L13905
	b	.L13906
	b	.L13907
	b	.L13908
	b	.L13909
	b	.L13910
	b	.L13911
	b	.L13912
	.p2align 1
.L13898:
	bx	lr
.L13917:
	uxtb	r1, r1
	b	gbam_resume(PLT)
.L13913:
	ldr	r2, .L13918+4
.LPIC3419:
	add	r2, pc, r2
.L13902:
	ldr	r1, .L13918+8
	ldr	r0, .L13918+12
.LPIC3433:
	add	r1, pc, r1
	add	r1, r1, #4080
.LPIC3432:
	add	r0, pc, r0
	add	r1, r1, #8
	b	printk(PLT)
.L13905:
	ldr	r2, .L13918+16
.LPIC3421:
	add	r2, pc, r2
	b	.L13902
.L13906:
	ldr	r2, .L13918+20
.LPIC3422:
	add	r2, pc, r2
	b	.L13902
.L13904:
	ldr	r2, .L13918+24
.LPIC3420:
	add	r2, pc, r2
	b	.L13902
.L13911:
	ldr	r2, .L13918+28
.LPIC3427:
	add	r2, pc, r2
	b	.L13902
.L13912:
	ldr	r2, .L13918+32
.LPIC3428:
	add	r2, pc, r2
	b	.L13902
.L13907:
	ldr	r2, .L13918+36
.LPIC3423:
	add	r2, pc, r2
	b	.L13902
.L13908:
	ldr	r2, .L13918+40
.LPIC3424:
	add	r2, pc, r2
	b	.L13902
.L13909:
	ldr	r2, .L13918+44
.LPIC3425:
	add	r2, pc, r2
	b	.L13902
.L13910:
	ldr	r2, .L13918+48
.LPIC3426:
	add	r2, pc, r2
	b	.L13902
.L13901:
	ldr	r2, .L13918+52
.LPIC3429:
	add	r2, pc, r2
	b	.L13902
.L13919:
	.align	2
.L13918:
	.word	.LANCHOR2-(.LPIC3430+8)
	.word	.LC0-(.LPIC3419+8)
	.word	.LANCHOR3-(.LPIC3433+8)
	.word	.LC676-(.LPIC3432+8)
	.word	.LC2-(.LPIC3421+8)
	.word	.LC3-(.LPIC3422+8)
	.word	.LC1-(.LPIC3420+8)
	.word	.LC8-(.LPIC3427+8)
	.word	.LC9-(.LPIC3428+8)
	.word	.LC4-(.LPIC3423+8)
	.word	.LC5-(.LPIC3424+8)
	.word	.LC6-(.LPIC3425+8)
	.word	.LC7-(.LPIC3426+8)
	.word	.LC10-(.LPIC3429+8)
	.fnend
	.size	frmnet_resume, .-frmnet_resume
	.align	2
	.global	gsmd_ctrl_connect
	.type	gsmd_ctrl_connect, %function
gsmd_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	uxtb	r2, r1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	cmp	r2, #5
	str	lr, [sp, #12]
	bhi	.L13921
	ldr	r3, .L13935
	mov	r4, r0
	mov	r0, #84
.LPIC3434:
	add	r3, pc, r3
	mla	r2, r0, r2, r3
	ldr	r2, [r2, #532]
	cmp	r2, #0
	beq	.L13921
	cmp	r4, #0
	beq	.L13934
	mla	r1, r0, r1, r3
	ldr	r5, [r1, #532]
	add	r6, r5, #108
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, .L13935+4
	mov	r1, r0
	str	r4, [r5, #104]
	ldr	r3, .L13935+8
	mov	r0, r6
.LPIC3438:
	add	r2, pc, r2
.LPIC3439:
	add	r3, pc, r3
	strd	r2, [r4, #88]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L13935+12
	add	r1, r5, #112
	mov	r2, #0
.LPIC3440:
	add	r3, pc, r3
	ldr	r0, [r3, #-648]
	bl	queue_delayed_work(PLT)
	mov	r0, #0
	b	.L13930
.L13921:
	ldr	r3, .L13935+16
	mov	r2, r1
	ldr	r0, .L13935+20
.LPIC3442:
	add	r3, pc, r3
.LPIC3441:
	add	r0, pc, r0
	sub	r1, r3, #4080
	bl	printk(PLT)
	mvn	r0, #18
.L13930:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13934:
	ldr	r1, .L13935+24
	ldr	r0, .L13935+28
.LPIC3436:
	add	r1, pc, r1
.LPIC3435:
	add	r0, pc, r0
	sub	r1, r1, #4080
	bl	printk(PLT)
	mvn	r0, #18
	b	.L13930
.L13936:
	.align	2
.L13935:
	.word	.LANCHOR2-(.LPIC3434+8)
	.word	grmnet_ctrl_smd_send_cpkt_tomodem-(.LPIC3438+8)
	.word	gsmd_ctrl_send_cbits_tomodem-(.LPIC3439+8)
	.word	.LANCHOR4-(.LPIC3440+8)
	.word	.LANCHOR8-(.LPIC3442+8)
	.word	.LC692-(.LPIC3441+8)
	.word	.LANCHOR8-(.LPIC3436+8)
	.word	.LC686-(.LPIC3435+8)
	.fnend
	.size	gsmd_ctrl_connect, .-gsmd_ctrl_connect
	.align	2
	.type	gps_set_alt, %function
gps_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #128]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0, #120]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L13938
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #128]
.L13938:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L13957
	ldr	r0, [r4, #128]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r9, r0, #0
	bne	.L13958
	ldr	r3, [r4, #128]
	mov	r0, r4
	mov	r8, r4
	str	r4, [r3]
	ldrb	r1, [r4, #104]	@ zero_extendqisi2
	bl	gsmd_ctrl_connect(PLT)
	mov	r3, #1
	mov	r9, r0
	str	r3, [r4, #112]
	ldr	r5, [r8, #136]!
	cmp	r5, r8
	beq	.L13940
	add	r6, r4, #124
	add	r7, r4, #144
	mvn	r10, #94
	b	.L13947
.L13956:
	bl	_raw_spin_unlock_irqrestore(PLT)
.L13944:
	ldr	r5, [r5]
	cmp	r5, r8
	beq	.L13940
.L13947:
	mov	r0, r6
	ldr	fp, [r4, #132]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #112]
	mov	r2, r0
	cmp	fp, #0
	cmpne	r3, #0
	moveq	r3, #1
	movne	r3, #0
	beq	.L13942
	ldr	r1, [fp]
	cmp	r1, #0
	beq	.L13942
#APP
@ 61 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	lr, [r7]
	add	lr, lr, #1
	strex	r1, lr, [r7]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	lr, #1
	mov	r0, r6
	mov	r1, r2
	bne	.L13956
	ldr	ip, [fp]
	mov	r1, r2
	mov	r0, r6
	strb	r3, [ip, #2]
	strb	r3, [ip, #3]
	strb	r10, [ip]
	strb	lr, [ip, #1]
	ldrh	r2, [r4, #108]
	strb	r3, [ip, #6]
	strb	r3, [ip, #7]
	strh	r2, [ip, #4]	@ unaligned
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #128]
	mov	r2, #32
	ldr	r1, [r4, #132]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L13944
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #136]
	mov	r1, r0
	cmp	r8, r3
	beq	.L13946
	str	r0, [sp, #4]
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r7]
	sub	r2, r2, #1
	strex	r0, r2, [r7]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	ldr	r0, [r3]
	mov	lr, #256
	mov	ip, #512
	ldr	r2, [r3, #4]
	mov	fp, r3
	str	r2, [r0, #4]
	str	r0, [r2]
	str	lr, [r3]
	str	ip, [r3, #4]
	ldr	r0, [fp, #-8]!
	bl	kfree(PLT)
	mov	r0, fp
	bl	kfree(PLT)
	ldr	r1, [sp, #4]
.L13946:
	mov	r0, r6
	b	.L13956
.L13942:
	mov	r1, r2
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r5, [r5]
	cmp	r5, r8
	bne	.L13947
.L13940:
	mov	r0, r9
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13957:
	ldr	r2, [r4, #128]
	mov	r0, #0
	mov	r9, r3
	ldr	r1, .L13959
	str	r0, [r2, #28]
	ldr	r0, [r5]
	ldr	r2, [r4, #128]
.LPIC3443:
	add	r1, pc, r1
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err(PLT)
	b	.L13940
.L13958:
	ldr	r1, .L13959+4
	mov	r3, r9
	ldr	r2, [r4, #128]
	ldr	r0, .L13959+8
.LPIC3445:
	add	r1, pc, r1
	sub	r1, r1, #4048
	ldr	r2, [r2, #4]
	sub	r1, r1, #12
.LPIC3444:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13940
.L13960:
	.align	2
.L13959:
	.word	.LC469-(.LPIC3443+8)
	.word	.LANCHOR8-(.LPIC3445+8)
	.word	.LC480-(.LPIC3444+8)
	.fnend
	.size	gps_set_alt, .-gps_set_alt
	.align	2
	.global	gsmd_ctrl_disconnect
	.type	gsmd_ctrl_disconnect, %function
gsmd_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #5
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bhi	.L13962
	ldr	r3, .L13982
	mov	r2, #84
.LPIC3446:
	add	r3, pc, r3
	mla	r3, r2, r1, r3
	ldr	r5, [r3, #532]
	cmp	r5, #0
	beq	.L13962
	cmp	r0, #0
	beq	.L13980
	add	r9, r5, #108
	mov	r4, r0
	mov	r0, r9
	add	r6, r5, #40
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r2, #0
	mov	r10, r0
	str	r2, [r5, #104]
	str	r2, [r4, #88]
	str	r2, [r4, #92]
	ldr	r3, [r5, #40]
	str	r2, [r5, #88]
	cmp	r3, r6
	movne	r8, #256
	movne	r7, #512
	beq	.L13968
.L13967:
	ldr	r2, [r3, #4]
	mov	r4, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r4, #-8]!
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r3, [r5, #40]
	cmp	r6, r3
	bne	.L13967
.L13968:
	mov	r0, r9
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	add	r1, r5, #8
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	bne	.L13981
.L13966:
	ldr	r3, .L13982+4
	add	r1, r5, #160
	mov	r2, #0
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
.LPIC3449:
	add	r3, pc, r3
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r0, [r3, #-648]
	b	queue_delayed_work(PLT)
.L13962:
	ldr	r3, .L13982+8
	mov	r2, r1
	ldr	r0, .L13982+12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3451:
	add	r3, pc, r3
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
.LPIC3450:
	add	r0, pc, r0
	sub	r1, r3, #4048
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L13981:
	ldr	r1, [r5, #88]
	ldr	r0, [r5]
	orr	r2, r1, #4
	mvn	r2, r2
	bl	smd_tiocmset(PLT)
	b	.L13966
.L13980:
	ldr	r1, .L13982+16
	ldr	r0, .L13982+20
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3448:
	add	r1, pc, r1
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
.LPIC3447:
	add	r0, pc, r0
	sub	r1, r1, #4048
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L13983:
	.align	2
.L13982:
	.word	.LANCHOR2-(.LPIC3446+8)
	.word	.LANCHOR4-(.LPIC3449+8)
	.word	.LANCHOR8-(.LPIC3451+8)
	.word	.LC692-(.LPIC3450+8)
	.word	.LANCHOR8-(.LPIC3448+8)
	.word	.LC686-(.LPIC3447+8)
	.fnend
	.size	gsmd_ctrl_disconnect, .-gsmd_ctrl_disconnect
	.align	2
	.type	gps_disable, %function
gps_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r5, #136
	strd	r8, [sp, #16]
	add	r9, r5, #124
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r0, #128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #128]
	mov	r3, #0
	mov	r0, r9
	str	r3, [r2]
	str	r3, [r5, #112]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #136]
	mov	r10, r0
	cmp	r3, r6
	movne	r8, #256
	movne	r7, #512
	beq	.L13987
.L13986:
	ldr	r2, [r3, #4]
	mov	r4, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r4, #-8]!
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r3, [r5, #136]
	cmp	r3, r6
	bne	.L13986
.L13987:
	mov	r3, #0
	mov	r0, r9
	mov	r1, r10
	str	r3, [r5, #144]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrb	r1, [r5, #104]	@ zero_extendqisi2
	ldrd	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gsmd_ctrl_disconnect(PLT)
	.fnend
	.size	gps_disable, .-gps_disable
	.align	2
	.global	gsmd_ctrl_setup
	.type	gsmd_ctrl_setup, %function
gsmd_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r0, #1
	strd	r8, [sp, #16]
	mov	r9, r0
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	str	r2, [sp, #36]
	bhi	.L14017
	sub	r3, r1, #1
	mov	r4, r1
	cmp	r3, #2
	bhi	.L14018
	ldr	r3, .L14022
.LPIC3478:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r3, [sp, #40]
	ldrb	r3, [r3]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L14019
.L13994:
	add	r2, r9, r9, asl #1
	ldr	r1, [sp, #40]
	add	r6, r3, #1
	add	r3, r2, r4
	mov	r9, r2
	cmp	r2, r3
	str	r2, [sp, #12]
	str	r3, [sp, #16]
	strb	r6, [r1]
	bcs	.L14001
	mov	r3, #84
	ldr	r6, .L14022+4
	mov	fp, r9
	ldr	r8, .L14022+8
	mul	r3, r3, r2
	ldr	r2, .L14022+12
	ldr	r10, .L14022+16
.LPIC3461:
	add	r6, pc, r6
.LPIC3466:
	add	r8, pc, r8
	add	r5, r6, #532
	str	r3, [sp, #44]
.LPIC3462:
	add	r2, pc, r2
	add	r5, r5, r3
.LPIC3477:
	ldr	r10, [pc, r10]		@ tls_load_dot_plus_eight
	str	r2, [sp, #20]
	ldr	r2, .L14022+20
.LPIC3463:
	add	r2, pc, r2
	str	r2, [sp, #24]
	ldr	r2, .L14022+24
.LPIC3464:
	add	r2, pc, r2
	str	r2, [sp, #28]
	sub	r2, r8, #4080
	sub	r3, r2, #8
	str	r3, [sp, #32]
	b	.L14000
.L14021:
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L14020
.L13998:
	ldr	r3, [sp, #20]
	add	lr, r4, #116
	add	r0, r4, #128
	str	fp, [r4, #100]
	mov	r1, r8
	mov	r2, r8
	str	r6, [r4, #112]
	add	r9, r4, #40
	str	lr, [r4, #116]
	str	r3, [r4, #124]
	str	lr, [r4, #120]
	str	r8, [r4, #108]
	bl	init_timer_key(PLT)
	ldr	r3, [sp, #24]
	add	lr, r4, #164
	add	r2, r4, #112
.LPIC3479:
	ldr	r7, [pc, r7]		@ tls_load_dot_plus_eight
	str	r6, [r4, #160]
	add	r0, r4, #176
	mov	r1, r8
	str	r2, [r4, #148]
	mov	r2, r8
	str	lr, [r4, #164]
	str	r3, [r4, #172]
	str	r7, [r4, #144]
	str	lr, [r4, #168]
	bl	init_timer_key(PLT)
	ldr	r3, [sp, #28]
	str	r7, [r4, #192]
	add	r2, r4, #160
	ldr	r7, [sp, #32]
	add	r0, r4, #12
	str	r4, [r4, #84]
	ldr	r1, .L14022+28
	str	r2, [r4, #196]
	add	lr, r3, fp, asl #2
	add	fp, fp, #1
	mov	r2, r7
	ldr	lr, [lr, #540]
.LPIC3465:
	add	r1, pc, r1
	str	lr, [r4, #4]
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L14022+32
	mov	r2, r7
	add	r0, r4, #24
	add	r7, r4, #56
.LPIC3467:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	str	r6, [r4, #52]
	ldr	r0, .L14022+36
	add	lr, r4, #72
	str	r6, [r4, #68]
	ldr	r1, .L14022+40
	ldr	r2, .L14022+44
	str	r9, [r4, #40]
	ldr	r6, .L14022+48
	str	r9, [r4, #44]
.LPIC3469:
	add	r0, pc, r0
	ldr	r3, [sp, #16]
	str	r7, [r4, #56]
.LPIC3470:
	add	r1, pc, r1
	str	r7, [r4, #60]
.LPIC3471:
	add	r2, pc, r2
	str	r0, [r4, #64]
.LPIC3472:
	add	r6, pc, r6
	str	r1, [r4, #80]
	str	lr, [r4, #72]
	cmp	fp, r3
	str	lr, [r4, #76]
	str	r4, [r5]
	stmib	r5, {r2, r6}
	ldr	r2, [r4, #4]
	add	r5, r5, #84
	str	r8, [r5, #-52]
	str	r2, [r5, #-60]
	beq	.L14001
.L14000:
	ldr	r2, [r10, #32]
	mov	r8, #0
	mov	r6, #2560
	ldr	r3, [sp, #12]
	movw	r1, #32976
	ldr	r7, .L14022+52
	cmp	r2, r8
	mov	r0, r2
	rsb	r9, r3, fp
	bne	.L14021
	mov	r4, #16
	b	.L13998
.L14001:
	ldr	r3, [sp, #36]
	cmp	r3, #0
	beq	.L14015
	ldrb	r2, [sp, #12]	@ zero_extendqisi2
	strb	r2, [r3]
.L14015:
	mov	r0, #0
.L14012:
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14020:
	ldr	r1, .L14022+56
	mov	r3, r9
	mov	r9, fp
	ldr	r0, .L14022+60
	mov	fp, r3
	mov	r2, r9
.LPIC3475:
	add	r1, pc, r1
	sub	r1, r1, #4016
.LPIC3474:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	cmp	fp, #0
	ble	.L14004
	ldr	r3, .L14022+64
	ldr	r2, [sp, #44]
.LPIC3476:
	add	r3, pc, r3
	add	r3, r3, r2
	add	r5, r3, #536
.L14003:
	ldr	r3, [r5, #-4]
	add	r4, r4, #1
	subs	r0, r3, #0
	beq	.L14002
	bl	kfree(PLT)
	mov	r0, r5
	bl	platform_driver_unregister(PLT)
.L14002:
	cmp	r4, fp
	add	r5, r5, #84
	bne	.L14003
.L14004:
	ldr	r2, [sp, #40]
	ldrb	r3, [r2]	@ zero_extendqisi2
	sub	r3, r3, #1
	uxtb	r3, r3
	cmp	r3, #0
	strb	r3, [r2]
	mvnne	r0, #11
	bne	.L14012
	ldr	r3, .L14022+68
.LPIC3473:
	add	r3, pc, r3
	ldr	r0, [r3, #-648]
	bl	destroy_workqueue(PLT)
	mvn	r0, #11
	b	.L14012
.L14019:
	ldr	r0, .L14022+72
	str	r3, [sp]
	mov	r1, #10
	mov	r2, #1
.LPIC3457:
	add	r0, pc, r0
	bl	__alloc_workqueue_key(PLT)
	ldr	r3, .L14022+76
	cmp	r0, #0
.LPIC3458:
	add	r3, pc, r3
	str	r0, [r3, #-648]
	beq	.L13995
	ldr	r3, [sp, #40]
	ldrb	r3, [r3]	@ zero_extendqisi2
	b	.L13994
.L14018:
	ldr	r1, .L14022+80
	mov	r2, r4
	ldr	r0, .L14022+84
.LPIC3455:
	add	r1, pc, r1
	sub	r1, r1, #4016
.LPIC3454:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #21
	b	.L14012
.L14017:
	ldr	r1, .L14022+88
	mov	r2, r0
	ldr	r0, .L14022+92
.LPIC3453:
	add	r1, pc, r1
	sub	r1, r1, #4016
.LPIC3452:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #21
	b	.L14012
.L13995:
	ldr	r1, .L14022+96
	ldr	r0, .L14022+100
.LPIC3460:
	add	r1, pc, r1
	sub	r1, r1, #4016
.LPIC3459:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #11
	b	.L14012
.L14023:
	.align	2
.L14022:
	.word	online_clients(GOT_PREL)+(.-(.LPIC3478+8))
	.word	.LANCHOR2-(.LPIC3461+8)
	.word	.LANCHOR9-(.LPIC3466+8)
	.word	grmnet_ctrl_smd_connect_w-(.LPIC3462+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3477+8))
	.word	grmnet_ctrl_smd_disconnect_w-(.LPIC3463+8)
	.word	.LANCHOR5-(.LPIC3464+8)
	.word	.LC697-(.LPIC3465+8)
	.word	.LC698-(.LPIC3467+8)
	.word	grmnet_ctrl_smd_read_w-(.LPIC3469+8)
	.word	grmnet_ctrl_smd_write_w-(.LPIC3470+8)
	.word	grmnet_ctrl_smd_ch_probe-(.LPIC3471+8)
	.word	grmnet_ctrl_smd_ch_remove-(.LPIC3472+8)
	.word	delayed_work_timer_fn(GOT_PREL)+(.-(.LPIC3479+8))
	.word	.LANCHOR8-(.LPIC3475+8)
	.word	.LC682-(.LPIC3474+8)
	.word	.LANCHOR2-(.LPIC3476+8)
	.word	.LANCHOR4-(.LPIC3473+8)
	.word	.LC695-(.LPIC3457+8)
	.word	.LANCHOR4-(.LPIC3458+8)
	.word	.LANCHOR8-(.LPIC3455+8)
	.word	.LC694-(.LPIC3454+8)
	.word	.LANCHOR8-(.LPIC3453+8)
	.word	.LC693-(.LPIC3452+8)
	.word	.LANCHOR8-(.LPIC3460+8)
	.word	.LC696-(.LPIC3459+8)
	.fnend
	.size	gsmd_ctrl_setup, .-gsmd_ctrl_setup
	.align	2
	.type	gps_function_bind_config, %function
gps_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14043
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
.LPIC3480:
	add	r3, pc, r3
	ldr	r2, [r3, #-4088]
	cmp	r2, #0
	bne	.L14025
	ldr	r2, .L14043+4
	mov	r1, #1
	str	r1, [r3, #-4088]
.LPIC3514:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	ldr	r0, [r2, #8]
	cmp	r0, #0
	beq	.L14033
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	beq	.L14037
.L14026:
	ldr	r3, .L14043+8
	mov	r1, #0
	add	r2, r0, #136
	mov	ip, #3
	str	r1, [r0, #124]
	strb	r1, [r0, #104]
.LPIC3487:
	add	r3, pc, r3
	str	r2, [r0, #136]
	str	r2, [r0, #140]
	str	r0, [r3, #12]
	str	ip, [r3, #8]
.L14025:
	ldr	r7, .L14043+12
	mov	r0, #1
	add	r2, sp, #7
	mov	r1, r0
	bl	gsmd_ctrl_setup(PLT)
	ldrb	r3, [sp, #7]	@ zero_extendqisi2
	cmp	r0, #0
.LPIC3489:
	add	r7, pc, r7
	ldr	r4, [r7, #12]
	ldrb	r2, [r4, #104]	@ zero_extendqisi2
	add	r3, r3, r2
	strb	r3, [r4, #104]
	bne	.L14038
	ldr	r5, .L14043+16
.LPIC3492:
	add	r5, pc, r5
	ldrb	r3, [r5, #3192]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L14039
.L14029:
	add	r5, r4, #124
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #24]
	mov	r7, r0
	mov	r0, #32
	ldr	r1, .L14043+20
	str	r3, [r4, #120]
.LPIC3497:
	add	r1, pc, r1
	bl	kasprintf(PLT)
	str	r0, [r4]
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L14040
	ldr	r3, .L14043+24
	mov	r0, r6
	mov	r1, r4
	ldr	ip, .L14043+28
	ldr	r2, .L14043+32
	ldr	r7, .L14043+36
.LPIC3500:
	add	r3, pc, r3
	ldr	r6, .L14043+40
	add	r3, r3, #3200
.LPIC3501:
	add	ip, pc, ip
	ldr	r5, .L14043+44
.LPIC3502:
	add	r2, pc, r2
	add	r3, r3, #8
	ldr	lr, .L14043+48
	str	ip, [r4, #24]
	ldr	ip, .L14043+52
.LPIC3503:
	add	r7, pc, r7
	str	r2, [r4, #28]
	ldr	r2, .L14043+56
.LPIC3504:
	add	r6, pc, r6
	str	r3, [r4, #4]
	ldr	r3, .L14043+60
.LPIC3505:
	add	r5, pc, r5
.LPIC3506:
	add	lr, pc, lr
	str	r7, [r4, #40]
.LPIC3507:
	add	ip, pc, ip
	str	r5, [r4, #44]
.LPIC3508:
	add	r2, pc, r2
	str	r6, [r4, #32]
.LPIC3509:
	add	r3, pc, r3
	str	lr, [r4, #48]
	str	ip, [r4, #84]
	strd	r2, [r4, #96]
	bl	usb_add_function(PLT)
	cmp	r0, #0
	moveq	r5, r0
	bne	.L14041
.L14035:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L14039:
	ldr	r0, [r6, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L14042
	ldr	r4, [r7, #12]
	strb	r0, [r5, #3192]
	b	.L14029
.L14033:
	mov	r0, #16
	b	.L14026
.L14040:
	ldr	r1, .L14043+64
	mvn	r5, #11
	ldr	r0, .L14043+68
.LPIC3499:
	add	r1, pc, r1
	sub	r1, r1, #3952
.LPIC3498:
	add	r0, pc, r0
	add	r1, r1, r5
	bl	printk(PLT)
.L14031:
	ldr	r1, .L14043+72
	ldr	r0, .L14043+76
.LPIC3513:
	add	r1, pc, r1
	sub	r1, r1, #3984
.LPIC3512:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L14035
.L14038:
	ldr	r1, .L14043+80
	mov	r5, r0
	ldr	r0, .L14043+84
.LPIC3491:
	add	r1, pc, r1
	sub	r1, r1, #3984
.LPIC3490:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L14035
.L14041:
	ldr	r1, .L14043+88
	mov	r2, r0
	mov	r5, r0
	ldr	r0, .L14043+92
.LPIC3511:
	add	r1, pc, r1
	sub	r1, r1, #3952
.LPIC3510:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	r0, [r4]
	bl	kfree(PLT)
	b	.L14031
.L14042:
	ldr	r1, .L14043+96
	mov	r2, r0
	mov	r5, r0
	ldr	r0, .L14043+100
.LPIC3494:
	add	r1, pc, r1
	sub	r1, r1, #3952
.LPIC3493:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L14031
.L14037:
	ldr	r4, .L14043+104
	mvn	r5, #11
	ldr	r0, .L14043+108
.LPIC3484:
	add	r4, pc, r4
	sub	r1, r4, #4000
.LPIC3483:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	ldr	r0, .L14043+112
	sub	r1, r4, #3984
	sub	r1, r1, #8
.LPIC3485:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14035
.L14044:
	.align	2
.L14043:
	.word	.LANCHOR9-(.LPIC3480+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3514+8))
	.word	.LANCHOR2-(.LPIC3487+8)
	.word	.LANCHOR2-(.LPIC3489+8)
	.word	.LANCHOR0-(.LPIC3492+8)
	.word	.LC703-(.LPIC3497+8)
	.word	.LANCHOR0-(.LPIC3500+8)
	.word	gps_bind-(.LPIC3501+8)
	.word	gps_unbind-(.LPIC3502+8)
	.word	gps_disable-(.LPIC3503+8)
	.word	gps_set_alt-(.LPIC3504+8)
	.word	gps_setup-(.LPIC3505+8)
	.word	gps_suspend-(.LPIC3506+8)
	.word	gps_send_cpkt_response-(.LPIC3507+8)
	.word	gps_disconnect-(.LPIC3508+8)
	.word	gps_connect-(.LPIC3509+8)
	.word	.LANCHOR8-(.LPIC3499+8)
	.word	.LC704-(.LPIC3498+8)
	.word	.LANCHOR8-(.LPIC3513+8)
	.word	.LC706-(.LPIC3512+8)
	.word	.LANCHOR8-(.LPIC3491+8)
	.word	.LC701-(.LPIC3490+8)
	.word	.LANCHOR8-(.LPIC3511+8)
	.word	.LC705-(.LPIC3510+8)
	.word	.LANCHOR8-(.LPIC3494+8)
	.word	.LC702-(.LPIC3493+8)
	.word	.LANCHOR8-(.LPIC3484+8)
	.word	.LC699-(.LPIC3483+8)
	.word	.LC700-(.LPIC3485+8)
	.fnend
	.size	gps_function_bind_config, .-gps_function_bind_config
	.align	2
	.global	gqti_ctrl_connect
	.type	gqti_ctrl_connect, %function
gqti_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L14052
	ldr	r3, .L14053
.LPIC3517:
	add	r3, pc, r3
	ldr	r4, [r3, #-508]
	add	r6, r4, #52
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, .L14053+4
	mov	r1, r0
	str	r5, [r4]
	ldr	r3, .L14053+8
	mov	r0, r6
.LPIC3518:
	add	r2, pc, r2
.LPIC3519:
	add	r3, pc, r3
	strd	r2, [r5, #88]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r3, #1
	add	r0, r4, #32
	mov	r2, r3
	mov	r1, #3
	str	r3, [r4, #8]
	mov	r3, #0
	bl	__wake_up(PLT)
	cmp	r4, #0
	beq	.L14050
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L14047
	ldr	r4, [r0, #100]
	cmp	r4, #0
	beq	.L14050
	blx	r4
	mov	r0, #0
.L14047:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14050:
	mov	r0, r4
	b	.L14047
.L14052:
	ldr	r1, .L14053+12
	ldr	r0, .L14053+16
.LPIC3516:
	add	r1, pc, r1
	sub	r1, r1, #3936
.LPIC3515:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #18
	b	.L14047
.L14054:
	.align	2
.L14053:
	.word	.LANCHOR4-(.LPIC3517+8)
	.word	grmnet_ctrl_qti_send_cpkt_tomodem-(.LPIC3518+8)
	.word	gqti_ctrl_notify_modem-(.LPIC3519+8)
	.word	.LANCHOR8-(.LPIC3516+8)
	.word	.LC686-(.LPIC3515+8)
	.fnend
	.size	gqti_ctrl_connect, .-gqti_ctrl_connect
	.align	2
	.global	gqti_ctrl_disconnect
	.type	gqti_ctrl_disconnect, %function
gqti_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14081
	cmp	r0, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
.LPIC3520:
	add	r3, pc, r3
	str	lr, [sp, #28]
	ldr	r5, [r3, #-508]
	beq	.L14078
	cmp	r5, #0
	mov	r7, r0
	beq	.L14057
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L14057
	ldr	r3, [r0, #96]
	cmp	r3, #0
	beq	.L14057
	blx	r3
.L14057:
	mov	r4, #0
	mov	r6, r5
	add	r9, r5, #52
	mov	r0, r9
	str	r4, [r5, #8]
	str	r4, [r5, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	str	r4, [r6], #44
	mov	r10, r0
	str	r4, [r7, #88]
	str	r4, [r7, #92]
	ldr	r3, [r5, #44]
	cmp	r6, r3
	beq	.L14058
	mov	r8, #256
	mov	r7, #512
.L14059:
	ldr	r2, [r3, #4]
	mov	r4, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r4, #-8]!
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r3, [r5, #44]
	cmp	r3, r6
	bne	.L14059
.L14058:
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldrb	r3, [r5, #4]	@ zero_extendqisi2
	mov	r4, r0
	cmp	r3, #0
	beq	.L14079
	ldr	r3, .L14081+4
.LPIC3526:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L14064
	movw	r1, #32800
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	beq	.L14080
.L14061:
	mov	r1, #16
	mov	r2, #0
	mov	r3, r0
	stmia	r0, {r1, r2}
.L14062:
	ldr	r2, [r5, #48]
	add	ip, r3, #8
	mov	r0, r9
	mov	r1, r4
	str	ip, [r5, #48]
	str	r6, [r3, #8]
	str	r2, [r3, #12]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	add	r0, r5, #32
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up(PLT)
.L14064:
	mov	r0, #16
	b	.L14061
.L14080:
	mvn	r3, #11
	b	.L14062
.L14078:
	ldr	r1, .L14081+8
	ldr	r0, .L14081+12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3522:
	add	r1, pc, r1
	ldrd	r8, [sp, #16]
	sub	r1, r1, #3920
	ldr	r10, [sp, #24]
.LPIC3521:
	add	r0, pc, r0
	ldr	lr, [sp, #28]
	sub	r1, r1, #8
	add	sp, sp, #32
	b	printk(PLT)
.L14079:
	ldr	r1, .L14081+16
	mov	r2, r5
	ldr	r0, .L14081+20
.LPIC3524:
	add	r1, pc, r1
	add	r1, r1, #2608
.LPIC3523:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldrd	r6, [sp, #8]
	mov	r0, r9
	mov	r1, r4
	ldrd	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L14082:
	.align	2
.L14081:
	.word	.LANCHOR4-(.LPIC3520+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3526+8))
	.word	.LANCHOR8-(.LPIC3522+8)
	.word	.LC686-(.LPIC3521+8)
	.word	.LANCHOR3-(.LPIC3524+8)
	.word	.LC340-(.LPIC3523+8)
	.fnend
	.size	gqti_ctrl_disconnect, .-gqti_ctrl_disconnect
	.align	2
	.global	ghsic_ctrl_connect
	.type	ghsic_ctrl_connect, %function
ghsic_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L14094
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	clz	r3, r0
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r3, r3, lsr #5
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3527:
	add	r2, pc, r2
	ldr	r0, [r2, #1036]
	cmp	r1, r0
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L14090
	mov	r3, #104
	mla	r1, r3, r1, r2
	ldr	r4, [r1, #1040]
	cmp	r4, #0
	beq	.L14091
	add	r7, r4, #4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #48]
	mov	r1, r0
	cmp	r3, #0
	beq	.L14092
	cmp	r3, #1
	beq	.L14093
.L14088:
	mov	r5, #0
	mov	r0, r7
	str	r6, [r4, #8]
	str	r5, [r4, #100]
	str	r5, [r4, #96]
	str	r5, [r4, #104]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #12]
	add	r1, r4, #16
	bl	queue_work(PLT)
	mov	r0, r5
.L14085:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14092:
	ldr	r3, .L14094+4
.LPIC3533:
	add	r3, pc, r3
	str	r3, [r6, #132]
	ldr	r3, [r4, #48]
	cmp	r3, #1
	bne	.L14088
.L14093:
	ldr	r2, .L14094+8
	ldr	r3, .L14094+12
	ldr	r0, [r6, #84]
.LPIC3534:
	add	r2, pc, r2
.LPIC3535:
	add	r3, pc, r3
	str	r0, [r4, #52]
	strd	r2, [r6, #88]
	b	.L14088
.L14090:
	ldr	r3, .L14094+16
	mov	r2, r1
	ldr	r0, .L14094+20
.LPIC3529:
	add	r3, pc, r3
.LPIC3528:
	add	r0, pc, r0
	sub	r1, r3, #3904
	bl	printk(PLT)
	mvn	r0, #18
	b	.L14085
.L14091:
	ldr	r1, .L14094+24
	ldr	r0, .L14094+28
.LPIC3532:
	add	r1, pc, r1
.LPIC3531:
	add	r0, pc, r0
	sub	r1, r1, #3904
	bl	printk(PLT)
	mvn	r0, #18
	b	.L14085
.L14095:
	.align	2
.L14094:
	.word	.LANCHOR2-(.LPIC3527+8)
	.word	ghsic_send_cbits_tomodem-(.LPIC3533+8)
	.word	ghsic_send_cpkt_tomodem-(.LPIC3534+8)
	.word	ghsic_send_cbits_tomodem-(.LPIC3535+8)
	.word	.LANCHOR8-(.LPIC3529+8)
	.word	.LC88-(.LPIC3528+8)
	.word	.LANCHOR8-(.LPIC3532+8)
	.word	.LC27-(.LPIC3531+8)
	.fnend
	.size	ghsic_ctrl_connect, .-ghsic_ctrl_connect
	.align	2
	.global	ghsic_ctrl_disconnect
	.type	ghsic_ctrl_disconnect, %function
ghsic_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14107
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #104
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3536:
	add	r3, pc, r3
	ldr	r2, [r3, #1036]
	mla	r3, ip, r1, r3
	cmp	r1, r2
	ldr	r4, [r3, #1040]
	bhi	.L14105
	cmp	r4, #0
	cmpne	r0, #0
	moveq	r8, #1
	movne	r8, #0
	beq	.L14106
	ldr	r7, [r4, #48]
	mov	r5, r0
	cmp	r7, #0
	beq	.L14099
	add	r6, r4, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r8, [r5, #88]
	str	r8, [r5, #92]
.L14101:
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #88]
	str	r3, [r4, #8]
	str	r3, [r4, #52]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	add	r1, r4, #32
	ldr	r0, [r4, #12]
	ldr	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work(PLT)
.L14099:
	add	r6, r4, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r7, [r5, #132]
	b	.L14101
.L14105:
	ldr	r3, .L14107+4
	mov	r2, r1
	ldr	r0, .L14107+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3539:
	add	r3, pc, r3
	ldr	r8, [sp, #16]
	sub	r1, r3, #3872
	ldr	lr, [sp, #20]
.LPIC3538:
	add	r0, pc, r0
	sub	r1, r1, #12
	add	sp, sp, #24
	b	printk(PLT)
.L14106:
	ldr	r1, .L14107+12
	ldr	r0, .L14107+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3541:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	sub	r1, r1, #3872
	ldr	lr, [sp, #20]
.LPIC3540:
	add	r0, pc, r0
	sub	r1, r1, #12
	add	sp, sp, #24
	b	printk(PLT)
.L14108:
	.align	2
.L14107:
	.word	.LANCHOR2-(.LPIC3536+8)
	.word	.LANCHOR8-(.LPIC3539+8)
	.word	.LC88-(.LPIC3538+8)
	.word	.LANCHOR8-(.LPIC3541+8)
	.word	.LC686-(.LPIC3540+8)
	.fnend
	.size	ghsic_ctrl_disconnect, .-ghsic_ctrl_disconnect
	.align	2
	.global	ghsic_ctrl_set_port_name
	.type	ghsic_ctrl_set_port_name, %function
ghsic_ctrl_set_port_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14116
.LPIC3542:
	add	r3, pc, r3
	ldr	r3, [r3, #-4084]
	cmp	r3, #3
	bhi	.L14114
	cmp	r0, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	beq	.L14115
	ldr	ip, .L14116+4
	mov	lr, #104
	mov	r1, r0
	mov	r2, #20
.LPIC3546:
	add	ip, pc, ip
	mla	r0, lr, r3, ip
	add	r0, r0, #1120
	add	r0, r0, #4
	bl	strlcpy(PLT)
.L14112:
	ldr	r4, .L14116+8
	mov	ip, #104
	mov	r2, #20
	ldr	r0, .L14116+12
	ldr	r1, .L14116+16
.LPIC3548:
	add	r4, pc, r4
	ldr	r3, [r4, #-4084]
.LPIC3547:
	add	r0, pc, r0
.LPIC3549:
	add	r1, pc, r1
	mla	r0, ip, r3, r0
	add	r0, r0, #1120
	add	r0, r0, #4
	bl	strlcat(PLT)
	ldr	r3, [r4, #-4084]
	add	r3, r3, #1
	str	r3, [r4, #-4084]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L14115:
	ldr	r0, .L14116+20
	mov	ip, #104
	mov	r2, #20
.LPIC3545:
	add	r0, pc, r0
	mla	r0, ip, r3, r0
	add	r0, r0, #1120
	add	r0, r0, #4
	bl	strlcpy(PLT)
	b	.L14112
.L14114:
	ldr	r1, .L14116+24
	mov	r2, r3
	ldr	r0, .L14116+28
.LPIC3544:
	add	r1, pc, r1
	sub	r1, r1, #3856
.LPIC3543:
	add	r0, pc, r0
	sub	r1, r1, #4
	b	printk(PLT)
.L14117:
	.align	2
.L14116:
	.word	.LANCHOR9-(.LPIC3542+8)
	.word	.LANCHOR2-(.LPIC3546+8)
	.word	.LANCHOR9-(.LPIC3548+8)
	.word	.LANCHOR2-(.LPIC3547+8)
	.word	.LC708-(.LPIC3549+8)
	.word	.LANCHOR2-(.LPIC3545+8)
	.word	.LANCHOR8-(.LPIC3544+8)
	.word	.LC707-(.LPIC3543+8)
	.fnend
	.size	ghsic_ctrl_set_port_name, .-ghsic_ctrl_set_port_name
	.align	2
	.global	ghsic_ctrl_setup
	.type	ghsic_ctrl_setup, %function
ghsic_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14157
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	clz	r10, r0
	mov	r10, r10, lsr #5
	str	lr, [sp, #32]
.LPIC3552:
	add	r3, pc, r3
	strd	r6, [sp, #8]
	.pad #44
	sub	sp, sp, #44
	ldr	r2, [r3, #1036]
	add	r8, r0, r2
	str	r2, [sp, #32]
	cmp	r8, #4
	orrgt	r10, r10, #1
	str	r2, [sp, #36]
	cmp	r10, #0
	bne	.L14119
	cmp	r2, r8
	movcs	r0, r2
	bcs	.L14151
	cmp	r1, #0
	mov	fp, r1
	mov	r2, #104
	beq	.L14122
	ldr	r1, .L14157+4
	str	r3, [sp, #8]
	ldr	r9, .L14157+8
.LPIC3558:
	add	r1, pc, r1
.LPIC3584:
	ldr	r9, [pc, r9]		@ tls_load_dot_plus_eight
	str	r1, [sp, #12]
	ldr	r1, [sp, #32]
	mla	r3, r2, r1, r3
	ldr	r2, .L14157+12
	mov	r6, r1
	add	r5, r3, #1120
	ldr	r3, .L14157+16
.LPIC3559:
	add	r2, pc, r2
	add	r5, r5, #4
	str	r2, [sp, #16]
	ldr	r2, .L14157+20
.LPIC3562:
	add	r3, pc, r3
	str	r3, [sp, #28]
	mov	r3, r1
.LPIC3560:
	add	r2, pc, r2
	str	r2, [sp, #20]
	ldr	r2, .L14157+24
.LPIC3561:
	add	r2, pc, r2
	str	r2, [sp, #24]
	b	.L14126
.L14155:
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L14129
.L14123:
	mov	r1, #10
	mov	r2, #1
	str	r7, [sp]
	mov	r3, r7
	mov	r0, r5
	bl	__alloc_workqueue_key(PLT)
	mov	lr, r0
	mov	r2, #2560
	cmp	lr, #0
	sub	r0, r5, #80
	add	r1, r4, #20
	add	r3, r4, #36
	str	lr, [r4, #12]
	beq	.L14125
	strd	r2, [r4, #32]
	str	r3, [r4, #40]
	ldr	r3, [sp, #16]
	str	r1, [r4, #20]
	str	r1, [r4, #24]
	ldr	r1, [sp, #12]
	str	r6, [r4]
	add	r6, r6, #1
	str	r3, [r4, #44]
	ldr	r3, [sp, #20]
	str	r5, [r4, #64]
	str	fp, [r4, #48]
	str	r7, [r4, #4]
	str	r3, [r4, #72]
	ldr	r3, [sp, #24]
	str	r2, [r4, #16]
	str	r1, [r4, #28]
	str	r4, [r4, #56]
	str	r3, [r5, #-80]
	ldr	r3, [sp, #28]
	str	r4, [r5, #-84]
	str	r5, [r5, #-60]
	add	r5, r5, #104
	str	r7, [r5, #-156]
	str	r3, [r5, #-180]
	bl	platform_driver_register(PLT)
	ldr	r3, .L14157+28
	cmp	r8, r6
.LPIC3563:
	add	r3, pc, r3
	bls	.L14137
	ldr	r3, [r3, #1036]
.L14126:
	ldr	r2, [r9, #28]
	mov	r7, #0
	add	r3, r3, #1
	ldr	r0, [sp, #8]
	movw	r1, #32976
	mov	r10, r5
	cmp	r2, r7
	str	r3, [r0, #1036]
	mov	r0, r2
	bne	.L14155
	mov	r4, #16
	b	.L14123
.L14125:
	ldr	r1, .L14157+32
	mov	r2, r10
	ldr	r0, .L14157+36
.LPIC3567:
	add	r1, pc, r1
	sub	r1, r1, #3808
.LPIC3566:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
.L14129:
	ldr	r4, .L14157+40
	mov	r2, r6
	ldr	r1, .L14157+44
	ldr	r0, .L14157+48
.LPIC3577:
	add	r4, pc, r4
	ldr	r3, [r4, #1036]
.LPIC3580:
	add	r1, pc, r1
	sub	r1, r1, #3824
.LPIC3579:
	add	r0, pc, r0
	sub	r1, r1, #8
	sub	r3, r3, #1
	str	r3, [r4, #1036]
	bl	printk(PLT)
	ldr	r2, [sp, #32]
	ldr	r3, [r4, #1036]
	cmp	r2, r3
	bcs	.L14133
	mov	r3, #104
	mov	r5, r4
	mla	r4, r3, r2, r4
	add	r4, r4, #1040
	add	r4, r4, #4
.L14132:
	ldr	r3, [sp, #36]
	ldr	r6, [r4, #-4]
	add	r3, r3, #1
	ldr	r0, [r6, #12]
	str	r3, [sp, #36]
	bl	destroy_workqueue(PLT)
	mov	r0, r6
	bl	kfree(PLT)
	cmp	r4, #0
	mov	r0, r4
	add	r4, r4, #104
	beq	.L14131
	bl	platform_driver_unregister(PLT)
.L14131:
	ldr	r3, [r5, #1036]
	ldr	r2, [sp, #36]
	cmp	r2, r3
	bcc	.L14132
.L14133:
	ldr	r3, .L14157+52
	mvn	r0, #11
	ldr	r2, [sp, #32]
.LPIC3576:
	add	r3, pc, r3
	str	r2, [r3, #1036]
.L14151:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14122:
	ldr	r1, .L14157+56
	mov	fp, r3
	ldr	r9, .L14157+60
.LPIC3568:
	add	r1, pc, r1
.LPIC3583:
	ldr	r9, [pc, r9]		@ tls_load_dot_plus_eight
	str	r1, [sp, #8]
	ldr	r1, [sp, #32]
	mla	r3, r2, r1, r3
	ldr	r2, .L14157+64
	mov	r6, r1
	add	r5, r3, #1120
	ldr	r3, .L14157+68
.LPIC3569:
	add	r2, pc, r2
	add	r5, r5, #4
	str	r2, [sp, #12]
	ldr	r2, .L14157+72
.LPIC3572:
	add	r3, pc, r3
	str	r3, [sp, #24]
	mov	r3, r1
.LPIC3570:
	add	r2, pc, r2
	str	r2, [sp, #16]
	ldr	r2, .L14157+76
.LPIC3571:
	add	r2, pc, r2
	str	r2, [sp, #20]
	b	.L14130
.L14156:
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L14129
.L14127:
	mov	r1, #10
	mov	r2, #1
	str	r7, [sp]
	mov	r3, r7
	mov	r0, r5
	bl	__alloc_workqueue_key(PLT)
	ldr	lr, .L14157+80
	mov	ip, r0
	mov	r2, #2560
	cmp	ip, #0
	sub	r0, r5, #80
	add	r1, r4, #20
	add	r3, r4, #36
	str	ip, [r4, #12]
.LPIC3573:
	add	lr, pc, lr
	beq	.L14125
	strd	r2, [r4, #32]
	str	r3, [r4, #40]
	ldr	r3, [sp, #12]
	str	r1, [r4, #20]
	str	r1, [r4, #24]
	ldr	r1, [sp, #8]
	str	r6, [r4]
	add	r6, r6, #1
	str	r3, [r4, #44]
	ldr	r3, [sp, #16]
	str	r5, [r4, #64]
	str	r7, [r4, #48]
	str	r7, [r4, #4]
	str	r3, [r4, #72]
	ldr	r3, [sp, #20]
	str	r2, [r4, #16]
	str	r1, [r4, #28]
	str	r4, [r4, #56]
	str	r3, [r4, #76]
	ldr	r3, [sp, #24]
	str	r4, [r5, #-84]
	str	lr, [r5, #-76]
	str	r5, [r5, #-60]
	add	r5, r5, #104
	str	r3, [r5, #-184]
	str	r7, [r5, #-156]
	bl	platform_driver_register(PLT)
	ldr	r3, .L14157+84
	cmp	r8, r6
.LPIC3574:
	add	r3, pc, r3
	bls	.L14137
	ldr	r3, [r3, #1036]
.L14130:
	ldr	r2, [r9, #28]
	mov	r7, #0
	add	r3, r3, #1
	movw	r1, #32976
	mov	r10, r5
	str	r3, [fp, #1036]
	cmp	r2, r7
	mov	r0, r2
	bne	.L14156
	mov	r4, #16
	b	.L14127
.L14137:
	ldr	r0, [sp, #32]
	b	.L14151
.L14119:
	ldr	r1, .L14157+88
	mov	r2, r0
	ldr	r0, .L14157+92
.LPIC3554:
	add	r1, pc, r1
	sub	r1, r1, #3824
.LPIC3553:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #21
	b	.L14151
.L14158:
	.align	2
.L14157:
	.word	.LANCHOR2-(.LPIC3552+8)
	.word	ghsic_ctrl_connect_w-(.LPIC3558+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3584+8))
	.word	gctrl_disconnect_w-(.LPIC3559+8)
	.word	ghsic_ctrl_remove-(.LPIC3562+8)
	.word	ghsic_ctrl_receive-(.LPIC3560+8)
	.word	ghsic_ctrl_probe-(.LPIC3561+8)
	.word	.LANCHOR2-(.LPIC3563+8)
	.word	.LANCHOR8-(.LPIC3567+8)
	.word	.LC709-(.LPIC3566+8)
	.word	.LANCHOR2-(.LPIC3577+8)
	.word	.LANCHOR8-(.LPIC3580+8)
	.word	.LC682-(.LPIC3579+8)
	.word	.LANCHOR2-(.LPIC3576+8)
	.word	ghsic_ctrl_connect_w-(.LPIC3568+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3583+8))
	.word	gctrl_disconnect_w-(.LPIC3569+8)
	.word	ghsic_ctrl_probe-(.LPIC3572+8)
	.word	ghsic_ctrl_receive-(.LPIC3570+8)
	.word	ghsic_ctrl_status-(.LPIC3571+8)
	.word	ghsic_ctrl_remove-(.LPIC3573+8)
	.word	.LANCHOR2-(.LPIC3574+8)
	.word	.LANCHOR8-(.LPIC3554+8)
	.word	.LC694-(.LPIC3553+8)
	.fnend
	.size	ghsic_ctrl_setup, .-ghsic_ctrl_setup
	.align	2
	.global	ghsic_data_disconnect
	.type	ghsic_data_disconnect, %function
ghsic_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14173
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	ip, #104
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
.LPIC3585:
	add	r3, pc, r3
	str	lr, [sp, #28]
	ldr	r2, [r3, #1456]
	mla	r3, ip, r1, r3
	cmp	r1, r2
	ldr	r4, [r3, #1460]
	bhi	.L14171
	cmp	r4, #0
	cmpne	r0, #0
	moveq	r5, #1
	movne	r5, #0
	beq	.L14172
	mov	r0, r4
	bl	ghsic_data_free_buffers(PLT)
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L14162
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #8]
	str	r5, [r3]
.L14162:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L14163
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r2, #0
	str	r2, [r3]
.L14163:
	mov	r5, #0
	add	r8, r4, #48
	mov	r0, r8
	add	r7, r4, #164
	str	r5, [r4, #4]
	add	r6, r4, #80
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r9, r0
	mov	r1, r7
	str	r5, [r4, #8]
	mov	r0, #2
	str	r5, [r4, #184]
	bl	_clear_bit(PLT)
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	mov	r1, r7
	str	r5, [r4, #12]
	mov	r0, #1
	bl	_clear_bit(PLT)
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	add	r1, r4, #104
	ldr	r0, [r4, #84]
	ldrd	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	queue_work(PLT)
.L14171:
	ldr	r3, .L14173+4
	mov	r2, r1
	ldr	r0, .L14173+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3588:
	add	r3, pc, r3
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
.LPIC3587:
	add	r0, pc, r0
	sub	r1, r3, #3792
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L14172:
	ldr	r1, .L14173+12
	ldr	r0, .L14173+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3590:
	add	r1, pc, r1
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
.LPIC3589:
	add	r0, pc, r0
	sub	r1, r1, #3792
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L14174:
	.align	2
.L14173:
	.word	.LANCHOR2-(.LPIC3585+8)
	.word	.LANCHOR8-(.LPIC3588+8)
	.word	.LC88-(.LPIC3587+8)
	.word	.LANCHOR8-(.LPIC3590+8)
	.word	.LC27-(.LPIC3589+8)
	.fnend
	.size	ghsic_data_disconnect, .-ghsic_data_disconnect
	.align	2
	.global	ghsic_data_connect
	.type	ghsic_data_connect, %function
ghsic_data_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14189
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #104
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3591:
	add	r3, pc, r3
	ldr	r2, [r3, #1456]
	mla	r3, ip, r1, r3
	cmp	r1, r2
	ldr	r4, [r3, #1460]
	bhi	.L14184
	cmp	r4, #0
	cmpne	r0, #0
	mov	r5, r0
	beq	.L14185
	ldr	r3, [r4, #16]
	add	r7, r4, #48
	add	r6, r4, #80
	mov	r0, r7
	cmp	r3, #0
	beq	.L14186
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #76]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #80]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L14189+4
.LPIC3599:
	add	r3, pc, r3
	ldr	r2, [r3, #2984]
	ldr	r3, [r3, #2988]
	str	r2, [r4, #20]
	str	r3, [r4, #52]
	ldr	r3, [r5, #76]
	str	r4, [r3]
	ldr	r3, [r5, #80]
	str	r4, [r3]
.L14180:
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L14187
	ldr	r0, [r4, #12]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L14188
	mov	r3, #1
	mov	r0, r7
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r5, [r4, #192]
	mov	r0, r7
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #216]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r5, [r4, #188]
	mov	r0, r6
	str	r5, [r4, #212]
	str	r5, [r4, #204]
	str	r5, [r4, #208]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #84]
	add	r1, r4, #88
	bl	queue_work(PLT)
	mov	r0, r5
.L14177:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14186:
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #80]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #84]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L14189+8
.LPIC3597:
	add	r3, pc, r3
	ldr	r2, [r3, #2976]
	ldr	r3, [r3, #2980]
	str	r2, [r4, #20]
	str	r3, [r4, #52]
	ldr	r3, [r5, #80]
	str	r4, [r3]
	ldr	r3, [r5, #84]
	str	r4, [r3]
	b	.L14180
.L14187:
	ldr	r1, .L14189+12
	ldr	r0, .L14189+16
	ldr	r2, [r4, #8]
.LPIC3602:
	add	r1, pc, r1
	sub	r1, r1, #3760
.LPIC3601:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r5
	b	.L14177
.L14188:
	ldr	r1, .L14189+20
	ldr	r0, .L14189+24
	ldr	r2, [r4, #12]
.LPIC3604:
	add	r1, pc, r1
	sub	r1, r1, #3760
.LPIC3603:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r5
	b	.L14177
.L14185:
	ldr	r1, .L14189+28
	ldr	r0, .L14189+32
.LPIC3596:
	add	r1, pc, r1
	sub	r1, r1, #3760
.LPIC3595:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #18
	b	.L14177
.L14184:
	ldr	r3, .L14189+36
	mov	r2, r1
	ldr	r0, .L14189+40
.LPIC3594:
	add	r3, pc, r3
	sub	r1, r3, #3760
.LPIC3593:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #18
	b	.L14177
.L14190:
	.align	2
.L14189:
	.word	.LANCHOR2-(.LPIC3591+8)
	.word	.LANCHOR1-(.LPIC3599+8)
	.word	.LANCHOR1-(.LPIC3597+8)
	.word	.LANCHOR8-(.LPIC3602+8)
	.word	.LC189-(.LPIC3601+8)
	.word	.LANCHOR8-(.LPIC3604+8)
	.word	.LC190-(.LPIC3603+8)
	.word	.LANCHOR8-(.LPIC3596+8)
	.word	.LC27-(.LPIC3595+8)
	.word	.LANCHOR8-(.LPIC3594+8)
	.word	.LC88-(.LPIC3593+8)
	.fnend
	.size	ghsic_data_connect, .-ghsic_data_connect
	.align	2
	.global	ghsic_data_set_port_name
	.type	ghsic_data_set_port_name, %function
ghsic_data_set_port_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14198
.LPIC3605:
	add	r3, pc, r3
	ldr	r3, [r3, #-4080]
	cmp	r3, #3
	bhi	.L14196
	cmp	r0, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	beq	.L14197
	ldr	ip, .L14198+4
	mov	lr, #104
	mov	r1, r0
	mov	r2, #20
.LPIC3609:
	add	ip, pc, ip
	mla	r0, lr, r3, ip
	add	r0, r0, #1536
	add	r0, r0, #8
	bl	strlcpy(PLT)
.L14194:
	ldr	r4, .L14198+8
	mov	ip, #104
	mov	r2, #20
	ldr	r0, .L14198+12
	ldr	r1, .L14198+16
.LPIC3611:
	add	r4, pc, r4
	ldr	r3, [r4, #-4080]
.LPIC3610:
	add	r0, pc, r0
.LPIC3612:
	add	r1, pc, r1
	mla	r0, ip, r3, r0
	add	r0, r0, #1536
	add	r0, r0, #8
	bl	strlcat(PLT)
	ldr	r3, [r4, #-4080]
	add	r3, r3, #1
	str	r3, [r4, #-4080]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L14197:
	ldr	r0, .L14198+20
	mov	ip, #104
	mov	r2, #20
.LPIC3608:
	add	r0, pc, r0
	mla	r0, ip, r3, r0
	add	r0, r0, #1536
	add	r0, r0, #8
	bl	strlcpy(PLT)
	b	.L14194
.L14196:
	ldr	r1, .L14198+24
	mov	r2, r3
	ldr	r0, .L14198+28
.LPIC3607:
	add	r1, pc, r1
	sub	r1, r1, #3744
.LPIC3606:
	add	r0, pc, r0
	sub	r1, r1, #4
	b	printk(PLT)
.L14199:
	.align	2
.L14198:
	.word	.LANCHOR9-(.LPIC3605+8)
	.word	.LANCHOR2-(.LPIC3609+8)
	.word	.LANCHOR9-(.LPIC3611+8)
	.word	.LANCHOR2-(.LPIC3610+8)
	.word	.LC710-(.LPIC3612+8)
	.word	.LANCHOR2-(.LPIC3608+8)
	.word	.LANCHOR8-(.LPIC3607+8)
	.word	.LC707-(.LPIC3606+8)
	.fnend
	.size	ghsic_data_set_port_name, .-ghsic_data_set_port_name
	.align	2
	.global	ghsic_data_setup
	.type	ghsic_data_setup, %function
ghsic_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 72
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	clz	ip, r0
	mov	ip, ip, lsr #5
	str	lr, [sp, #32]
	ldr	lr, .L14226
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	.pad #84
	sub	sp, sp, #84
.LPIC3615:
	add	lr, pc, lr
	ldr	r3, [lr, #1456]
	str	r1, [sp, #36]
	add	r2, r0, r3
	str	r3, [sp, #68]
	cmp	r2, #4
	orrgt	ip, ip, #1
	str	r3, [sp, #76]
	cmp	ip, #0
	str	r2, [sp, #32]
	bne	.L14201
	cmp	r3, r2
	movcs	r0, r3
	bcs	.L14220
	ldr	r3, .L14226+4
	mov	r0, #104
	str	lr, [sp, #44]
	ldr	r2, [sp, #68]
	mov	r1, r3
	ldr	r3, .L14226+8
.LPIC3640:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
.LPIC3623:
	add	r3, pc, r3
	str	r1, [sp, #40]
	str	r3, [sp, #48]
	mov	r3, r2
	mul	r2, r0, r2
	ldr	r0, .L14226+12
	mov	r8, r3
	str	r2, [sp, #72]
.LPIC3624:
	add	r0, pc, r0
	str	r0, [sp, #52]
	ldr	r0, .L14226+16
.LPIC3625:
	add	r0, pc, r0
	str	r0, [sp, #56]
	add	r0, lr, r2
	ldr	r2, .L14226+20
	add	fp, r0, #1536
	mov	r0, lr
	add	fp, fp, #8
	mov	r9, fp
.LPIC3626:
	add	r2, pc, r2
	str	r2, [sp, #60]
	ldr	r2, .L14226+24
.LPIC3627:
	add	r2, pc, r2
	str	r2, [sp, #64]
	mov	r2, r1
	b	.L14207
.L14225:
	bl	kmem_cache_alloc(PLT)
	subs	r10, r0, #0
	beq	.L14223
.L14204:
	mov	r1, #10
	mov	r2, #1
	str	fp, [sp]
	mov	r3, fp
	mov	r0, r9
	bl	__alloc_workqueue_key(PLT)
	ldr	r2, .L14226+28
	mov	r3, r0
	mov	r7, #2560
	sub	r0, r9, #80
	add	r6, r10, #92
	str	r3, [sp, #12]
	add	r5, r10, #108
	add	r4, r10, #140
	str	r3, [r10, #84]
	add	r3, r10, #64
	add	lr, r10, #124
.LPIC3628:
	add	r2, pc, r2
	add	ip, r10, #24
	str	r3, [sp, #16]
	ldr	r3, [sp, #12]
	add	r1, r10, #56
	str	r2, [sp, #20]
	ldr	r2, .L14226+32
	cmp	r3, #0
.LPIC3629:
	add	r2, pc, r2
	str	r2, [sp, #24]
	ldr	r2, .L14226+36
.LPIC3630:
	add	r2, pc, r2
	str	r2, [sp, #28]
	add	r2, r10, #32
	beq	.L14224
	ldr	r3, [sp, #48]
	str	fp, [r10, #80]
	str	r2, [r10, #32]
	str	fp, [r10, #48]
	str	r2, [r10, #36]
	str	r3, [r10, #100]
	ldr	r3, [sp, #52]
	str	r8, [r10]
	add	r8, r8, #1
	str	fp, [r10, #44]
	str	lr, [r10, #124]
	str	r3, [r10, #116]
	ldr	r3, [sp, #56]
	str	lr, [r10, #128]
	str	ip, [r10, #24]
	str	ip, [r10, #28]
	str	r3, [r10, #148]
	ldr	r3, [sp, #60]
	str	r1, [r10, #56]
	str	r1, [r10, #60]
	str	r7, [r10, #88]
	str	r3, [r10, #132]
	ldr	r3, [sp, #16]
	str	r6, [r10, #92]
	str	r6, [r10, #96]
	str	r7, [r10, #104]
	str	r5, [r10, #108]
	str	r5, [r10, #112]
	str	r7, [r10, #136]
	str	r4, [r10, #140]
	str	r4, [r10, #144]
	str	r7, [r10, #120]
	str	fp, [r10, #40]
	str	fp, [r10, #76]
	str	r3, [r10, #64]
	str	r3, [r10, #68]
	ldr	r3, [sp, #36]
	str	r9, [r10, #160]
	str	fp, [r10, #72]
	str	r10, [r10, #152]
	str	r3, [r10, #16]
	ldr	r3, [sp, #64]
	str	r3, [r10, #168]
	ldr	r3, [sp, #20]
	str	r3, [r10, #176]
	ldr	r3, [sp, #24]
	str	r10, [r9, #-84]
	str	r9, [r9, #-60]
	add	r9, r9, #104
	str	fp, [r9, #-156]
	str	r3, [r9, #-184]
	ldr	r3, [sp, #28]
	str	r3, [r9, #-180]
	bl	platform_driver_register(PLT)
	ldr	r2, [sp, #32]
	ldr	r3, .L14226+40
	cmp	r2, r8
.LPIC3631:
	add	r3, pc, r3
	bls	.L14212
	ldr	r3, [r3, #1456]
	ldr	r2, [sp, #40]
	ldr	r0, [sp, #44]
.L14207:
	ldr	r2, [r2, #32]
	mov	fp, #0
	add	r3, r3, #1
	movw	r1, #32976
	str	r3, [r0, #1456]
	cmp	r2, fp
	mov	r0, r2
	bne	.L14225
	mov	r10, #16
	b	.L14204
.L14201:
	ldr	r1, .L14226+44
	mov	r2, r0
	ldr	r0, .L14226+48
.LPIC3617:
	add	r1, pc, r1
	sub	r1, r1, #3712
.LPIC3616:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #21
.L14220:
	add	sp, sp, #84
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14212:
	ldr	r0, [sp, #68]
	b	.L14220
.L14223:
	mov	r9, r8
.L14205:
	ldr	r5, .L14226+52
	mov	r2, r9
	ldr	r1, .L14226+56
	ldr	r0, .L14226+60
.LPIC3634:
	add	r5, pc, r5
	ldr	r3, [r5, #1456]
.LPIC3637:
	add	r1, pc, r1
	sub	r1, r1, #3712
.LPIC3636:
	add	r0, pc, r0
	sub	r1, r1, #8
	sub	r3, r3, #1
	str	r3, [r5, #1456]
	bl	printk(PLT)
	ldr	r2, [sp, #68]
	ldr	r3, [r5, #1456]
	cmp	r2, r3
	bcs	.L14210
	ldr	r3, [sp, #72]
	add	r4, r5, r3
	add	r4, r4, #1456
	add	r4, r4, #8
.L14209:
	ldr	r3, [sp, #76]
	ldr	r6, [r4, #-4]
	add	r3, r3, #1
	ldr	r0, [r6, #84]
	str	r3, [sp, #76]
	bl	destroy_workqueue(PLT)
	mov	r0, r6
	bl	kfree(PLT)
	cmp	r4, #0
	mov	r0, r4
	add	r4, r4, #104
	beq	.L14208
	bl	platform_driver_unregister(PLT)
.L14208:
	ldr	r3, [r5, #1456]
	ldr	r2, [sp, #76]
	cmp	r2, r3
	bcc	.L14209
.L14210:
	ldr	r3, .L14226+64
	mvn	r0, #11
	ldr	r2, [sp, #68]
.LPIC3633:
	add	r3, pc, r3
	str	r2, [r3, #1456]
	b	.L14220
.L14224:
	ldr	r1, .L14226+68
	mov	fp, r9
	mov	r9, r8
	ldr	r0, .L14226+72
	mov	r2, fp
.LPIC3622:
	add	r1, pc, r1
	sub	r1, r1, #3696
.LPIC3621:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r10
	bl	kfree(PLT)
	b	.L14205
.L14227:
	.align	2
.L14226:
	.word	.LANCHOR2-(.LPIC3615+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3640+8))
	.word	ghsic_data_connect_w-(.LPIC3623+8)
	.word	ghsic_data_disconnect_w-(.LPIC3624+8)
	.word	ghsic_data_write_tohost-(.LPIC3625+8)
	.word	ghsic_data_write_tomdm-(.LPIC3626+8)
	.word	ghsic_data_receive-(.LPIC3627+8)
	.word	ghsic_data_unthrottle_tx-(.LPIC3628+8)
	.word	ghsic_data_probe-(.LPIC3629+8)
	.word	ghsic_data_remove-(.LPIC3630+8)
	.word	.LANCHOR2-(.LPIC3631+8)
	.word	.LANCHOR8-(.LPIC3617+8)
	.word	.LC694-(.LPIC3616+8)
	.word	.LANCHOR2-(.LPIC3634+8)
	.word	.LANCHOR8-(.LPIC3637+8)
	.word	.LC682-(.LPIC3636+8)
	.word	.LANCHOR2-(.LPIC3633+8)
	.word	.LANCHOR8-(.LPIC3622+8)
	.word	.LC709-(.LPIC3621+8)
	.fnend
	.size	ghsic_data_setup, .-ghsic_data_setup
	.align	2
	.global	ghsuart_ctrl_connect
	.type	ghsuart_ctrl_connect, %function
ghsuart_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L14238
	clz	r2, r0
	strd	r6, [sp, #8]
	mov	r2, r2, lsr #5
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3641:
	add	r4, pc, r4
	ldr	r5, [r4, #1876]
	cmp	r1, r5
	movls	r5, r2
	orrhi	r5, r2, #1
	cmp	r5, #0
	bne	.L14236
	mov	r3, #84
	mla	r1, r3, r1, r4
	ldr	r4, [r1, #1880]
	cmp	r4, #0
	beq	.L14237
	add	r7, r4, #8
	mov	r6, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, .L14238+4
	mov	r1, r0
	mov	r0, r7
	ldr	r3, .L14238+8
	ldr	ip, [r6, #84]
.LPIC3647:
	add	r2, pc, r2
.LPIC3648:
	add	r3, pc, r3
	str	ip, [r4, #68]
	strd	r2, [r6, #88]
	str	r6, [r4, #12]
	str	r5, [r4, #100]
	str	r5, [r4, #96]
	str	r5, [r4, #104]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #88]
	ubfx	r0, r0, #1, #1
	cmp	r0, #0
	beq	.L14230
	ldr	r0, [r4, #32]
	add	r1, r4, #36
	bl	queue_work(PLT)
	mov	r0, r5
.L14230:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14236:
	ldr	r3, .L14238+12
	mov	r2, r1
	ldr	r0, .L14238+16
.LPIC3643:
	add	r3, pc, r3
	sub	r1, r3, #3664
.LPIC3642:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #18
	b	.L14230
.L14237:
	ldr	r1, .L14238+20
	ldr	r0, .L14238+24
.LPIC3646:
	add	r1, pc, r1
	sub	r1, r1, #3664
.LPIC3645:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #18
	b	.L14230
.L14239:
	.align	2
.L14238:
	.word	.LANCHOR2-(.LPIC3641+8)
	.word	ghsuart_send_cpkt_tomodem-(.LPIC3647+8)
	.word	ghsuart_send_cbits_tomodem-(.LPIC3648+8)
	.word	.LANCHOR8-(.LPIC3643+8)
	.word	.LC88-(.LPIC3642+8)
	.word	.LANCHOR8-(.LPIC3646+8)
	.word	.LC27-(.LPIC3645+8)
	.fnend
	.size	ghsuart_ctrl_connect, .-ghsuart_ctrl_connect
	.align	2
	.global	ghsuart_ctrl_disconnect
	.type	ghsuart_ctrl_disconnect, %function
ghsuart_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14246
.LPIC3649:
	add	r3, pc, r3
	ldr	r2, [r3, #1876]
	cmp	r1, r2
	bhi	.L14244
	mov	ip, #84
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mla	r1, ip, r1, r3
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #1880]
	cmp	r4, #0
	cmpne	r0, #0
	moveq	r6, #1
	movne	r6, #0
	beq	.L14245
	add	r7, r4, #8
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r6, [r5, #88]
	mov	r0, r7
	str	r6, [r5, #92]
	str	r6, [r4, #92]
	str	r6, [r4, #12]
	str	r6, [r4, #68]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	add	r1, r4, #52
	ldr	r0, [r4, #32]
	ldr	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work(PLT)
.L14244:
	ldr	r3, .L14246+4
	mov	r2, r1
	ldr	r0, .L14246+8
.LPIC3651:
	add	r3, pc, r3
	sub	r1, r3, #3648
.LPIC3650:
	add	r0, pc, r0
	sub	r1, r1, #4
	b	printk(PLT)
.L14245:
	ldr	r1, .L14246+12
	ldr	r0, .L14246+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3654:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	sub	r1, r1, #3648
	ldr	lr, [sp, #20]
.LPIC3653:
	add	r0, pc, r0
	sub	r1, r1, #4
	add	sp, sp, #24
	b	printk(PLT)
.L14247:
	.align	2
.L14246:
	.word	.LANCHOR2-(.LPIC3649+8)
	.word	.LANCHOR8-(.LPIC3651+8)
	.word	.LC88-(.LPIC3650+8)
	.word	.LANCHOR8-(.LPIC3654+8)
	.word	.LC686-(.LPIC3653+8)
	.fnend
	.size	ghsuart_ctrl_disconnect, .-ghsuart_ctrl_disconnect
	.align	2
	.global	ghsuart_ctrl_setup
	.type	ghsuart_ctrl_setup, %function
ghsuart_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14275
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	clz	r8, r0
	mov	r8, r8, lsr #5
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
.LPIC3655:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	ldr	r2, [r3, #1876]
	str	r1, [sp, #20]
	add	r1, r0, r2
	str	r2, [sp, #36]
	cmp	r1, #2
	orrgt	r8, r8, #1
	str	r2, [sp, #40]
	cmp	r8, #0
	str	r1, [sp, #12]
	bne	.L14249
	cmp	r2, r1
	movcs	r6, r2
	bcs	.L14268
	ldr	r1, [sp, #36]
	mov	ip, #84
	str	r3, [sp, #16]
	ldr	r2, .L14275+4
	ldr	r9, .L14275+8
	ldr	r8, .L14275+12
	mla	r3, ip, r1, r3
	mov	r0, r1
	mov	r7, r1
	ldr	r1, .L14275+16
.LPIC3666:
	add	r2, pc, r2
	add	r2, r2, #3680
.LPIC3681:
	ldr	r9, [pc, r9]		@ tls_load_dot_plus_eight
	add	r3, r3, #1872
	add	r2, r2, #12
	add	r3, r3, #12
.LPIC3661:
	add	r8, pc, r8
.LPIC3665:
	add	r1, pc, r1
	str	r2, [sp, #28]
	mov	r5, r3
	str	r3, [sp, #44]
	str	r1, [sp, #24]
	ldr	r1, .L14275+20
.LPIC3667:
	add	r1, pc, r1
	str	r1, [sp, #32]
	b	.L14255
.L14274:
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L14272
.L14252:
	mov	r1, #10
	mov	r2, #1
	str	r6, [sp]
	mov	r3, r6
	mov	r0, r8
	bl	__alloc_workqueue_key(PLT)
	mov	r3, r0
	ldr	r1, [sp, #24]
	add	r0, r4, #20
	cmp	r3, #0
	ldr	r2, [sp, #28]
	str	r3, [r4, #32]
	beq	.L14273
	ldr	r3, [sp, #20]
	str	r7, [r4]
	mov	fp, #2560
	str	r6, [r4, #8]
	mov	r10, #42
	str	r6, [r4, #16]
	str	r3, [r4, #4]
	bl	__init_waitqueue_head(PLT)
	ldr	r3, [sp, #32]
	add	lr, r4, #40
	add	ip, r4, #56
	ldr	r0, .L14275+24
	str	r4, [r4, #72]
	ldr	r1, .L14275+28
	str	fp, [r4, #36]
	ldr	r2, .L14275+32
	str	fp, [r4, #52]
	str	r3, [r4, #48]
	ldr	r3, .L14275+36
.LPIC3668:
	add	r0, pc, r0
	str	lr, [r4, #40]
.LPIC3669:
	add	r1, pc, r1
	str	lr, [r4, #44]
.LPIC3670:
	add	r2, pc, r2
	str	r0, [r4, #64]
	mov	r0, r5
.LPIC3671:
	add	r3, pc, r3
	str	r1, [r4, #84]
	add	r5, r5, #84
	str	ip, [r4, #56]
	str	ip, [r4, #60]
	str	r10, [r4, #76]
	strd	r2, [r5, #-84]
	str	r4, [r5, #-88]
	str	r8, [r5, #-64]
	str	r6, [r5, #-56]
	bl	platform_driver_register(PLT)
	ldr	r3, .L14275+40
	cmp	r0, #0
.LPIC3673:
	add	r3, pc, r3
	blt	.L14261
	ldr	r2, [sp, #12]
	add	r7, r7, #1
	cmp	r2, r7
	bls	.L14262
	ldr	r0, [r3, #1876]
.L14255:
	ldr	r3, [r9, #28]
	mov	r6, #0
	add	r0, r0, #1
	ldr	r2, [sp, #16]
	movw	r1, #32976
	cmp	r3, r6
	str	r0, [r2, #1876]
	mov	r0, r3
	bne	.L14274
	mov	r4, #16
	b	.L14252
.L14261:
	mov	r6, r0
.L14253:
	ldr	r4, .L14275+44
	mov	r2, r7
	ldr	r1, .L14275+48
	ldr	r0, .L14275+52
.LPIC3676:
	add	r4, pc, r4
	ldr	r3, [r4, #1876]
.LPIC3679:
	add	r1, pc, r1
	sub	r1, r1, #3616
.LPIC3678:
	add	r0, pc, r0
	sub	r1, r1, #12
	sub	r3, r3, #1
	str	r3, [r4, #1876]
	bl	printk(PLT)
	ldr	r2, [sp, #36]
	ldr	r3, [r4, #1876]
	cmp	r2, r3
	bcs	.L14258
.L14265:
	ldr	r7, [sp, #44]
	ldr	r3, [sp, #40]
	ldr	r5, [r7, #-4]
	add	r3, r3, #1
	str	r3, [sp, #40]
	ldr	r0, [r5, #32]
	bl	destroy_workqueue(PLT)
	add	r3, r7, #84
	cmp	r7, #0
	mov	r0, r7
	str	r3, [sp, #44]
	beq	.L14256
	bl	platform_driver_unregister(PLT)
.L14256:
	mov	r0, r5
	bl	kfree(PLT)
	ldr	r2, [sp, #40]
	ldr	r3, [r4, #1876]
	cmp	r2, r3
	bcc	.L14265
.L14258:
	ldr	r3, .L14275+56
	ldr	r2, [sp, #36]
.LPIC3675:
	add	r3, pc, r3
	str	r2, [r3, #1876]
.L14268:
	mov	r0, r6
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14262:
	ldr	r6, [sp, #36]
	b	.L14268
.L14272:
	mvn	r6, #11
	b	.L14253
.L14273:
	ldr	r1, .L14275+60
	mov	r2, r8
	mvn	r6, #11
	ldr	r0, .L14275+64
.LPIC3663:
	add	r1, pc, r1
	sub	r1, r1, #3600
.LPIC3662:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	b	.L14253
.L14249:
	ldr	r1, .L14275+68
	mov	r2, r0
	mvn	r6, #21
	ldr	r0, .L14275+72
.LPIC3657:
	add	r1, pc, r1
	sub	r1, r1, #3616
.LPIC3656:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L14268
.L14276:
	.align	2
.L14275:
	.word	.LANCHOR2-(.LPIC3655+8)
	.word	.LANCHOR4-(.LPIC3666+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3681+8))
	.word	.LC711-(.LPIC3661+8)
	.word	.LC337-(.LPIC3665+8)
	.word	ghsuart_ctrl_connect_w-(.LPIC3667+8)
	.word	ghsuart_ctrl_disconnect_w-(.LPIC3668+8)
	.word	ghsuart_ctrl_receive-(.LPIC3669+8)
	.word	ghsuart_ctrl_probe-(.LPIC3670+8)
	.word	ghsuart_ctrl_remove-(.LPIC3671+8)
	.word	.LANCHOR2-(.LPIC3673+8)
	.word	.LANCHOR2-(.LPIC3676+8)
	.word	.LANCHOR8-(.LPIC3679+8)
	.word	.LC682-(.LPIC3678+8)
	.word	.LANCHOR2-(.LPIC3675+8)
	.word	.LANCHOR8-(.LPIC3663+8)
	.word	.LC709-(.LPIC3662+8)
	.word	.LANCHOR8-(.LPIC3657+8)
	.word	.LC694-(.LPIC3656+8)
	.fnend
	.size	ghsuart_ctrl_setup, .-ghsuart_ctrl_setup
	.align	2
	.global	event_string
	.type	event_string, %function
event_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #8
	addls	pc, pc, r0, asl #2
	b	.L14278
.L14280:
	b	.L14289
	b	.L14281
	b	.L14282
	b	.L14283
	b	.L14284
	b	.L14285
	b	.L14286
	b	.L14287
	b	.L14288
	.p2align 1
.L14289:
	ldr	r0, .L14290
.LPIC3682:
	add	r0, pc, r0
	bx	lr
.L14281:
	ldr	r0, .L14290+4
.LPIC3683:
	add	r0, pc, r0
	bx	lr
.L14282:
	ldr	r0, .L14290+8
.LPIC3684:
	add	r0, pc, r0
	bx	lr
.L14283:
	ldr	r0, .L14290+12
.LPIC3685:
	add	r0, pc, r0
	bx	lr
.L14284:
	ldr	r0, .L14290+16
.LPIC3686:
	add	r0, pc, r0
	bx	lr
.L14285:
	ldr	r0, .L14290+20
.LPIC3687:
	add	r0, pc, r0
	bx	lr
.L14286:
	ldr	r0, .L14290+24
.LPIC3690:
	add	r0, pc, r0
	bx	lr
.L14287:
	ldr	r0, .L14290+28
.LPIC3689:
	add	r0, pc, r0
	bx	lr
.L14288:
	ldr	r0, .L14290+32
.LPIC3688:
	add	r0, pc, r0
	bx	lr
.L14278:
	ldr	r0, .L14290+36
.LPIC3691:
	add	r0, pc, r0
	bx	lr
.L14291:
	.align	2
.L14290:
	.word	.LC712-(.LPIC3682+8)
	.word	.LC713-(.LPIC3683+8)
	.word	.LC714-(.LPIC3684+8)
	.word	.LC715-(.LPIC3685+8)
	.word	.LC716-(.LPIC3686+8)
	.word	.LC717-(.LPIC3687+8)
	.word	.LC720-(.LPIC3690+8)
	.word	.LC719-(.LPIC3689+8)
	.word	.LC718-(.LPIC3688+8)
	.word	.LC10-(.LPIC3691+8)
	.fnend
	.size	event_string, .-event_string
	.align	2
	.global	ghsuart_data_disconnect
	.type	ghsuart_data_disconnect, %function
ghsuart_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14308
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	ip, #84
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
.LPIC3692:
	add	r3, pc, r3
	str	lr, [sp, #28]
	ldr	r2, [r3, #2048]
	mla	r3, ip, r1, r3
	cmp	r1, r2
	ldr	r4, [r3, #2052]
	bhi	.L14305
	cmp	r4, #0
	cmpne	r0, #0
	moveq	r6, #1
	movne	r6, #0
	beq	.L14306
	mov	r5, r0
	mov	r0, r4
	bl	ghsuart_data_free_buffers(PLT)
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L14295
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #8]
	str	r6, [r3]
.L14295:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L14296
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r2, #0
	str	r2, [r3]
.L14296:
	ldr	r6, [r4, #16]
	mov	r3, #0
	str	r3, [r4, #4]
	cmp	r6, r3
	beq	.L14307
.L14297:
	add	r8, r4, #72
	mov	r5, #0
	mov	r0, r8
	add	r7, r4, #184
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r9, r0
	mov	r1, r7
	str	r5, [r4, #8]
	mov	r0, #2
	str	r5, [r4, #192]
	add	r6, r4, #104
	bl	_clear_bit(PLT)
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	mov	r1, r7
	str	r5, [r4, #12]
	mov	r0, #1
	bl	_clear_bit(PLT)
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	add	r1, r4, #128
	ldr	r0, [r4, #108]
	ldrd	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	queue_work(PLT)
.L14307:
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r6, [r5, #132]
	mov	r0, r7
	str	r6, [r4, #196]
	str	r6, [r4, #24]
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L14297
.L14306:
	ldr	r1, .L14308+4
	ldr	r0, .L14308+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3697:
	add	r1, pc, r1
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
.LPIC3696:
	add	r0, pc, r0
	sub	r1, r1, #3584
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L14305:
	ldr	r3, .L14308+12
	mov	r2, r1
	ldr	r0, .L14308+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3695:
	add	r3, pc, r3
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
.LPIC3694:
	add	r0, pc, r0
	sub	r1, r3, #3584
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L14309:
	.align	2
.L14308:
	.word	.LANCHOR2-(.LPIC3692+8)
	.word	.LANCHOR8-(.LPIC3697+8)
	.word	.LC27-(.LPIC3696+8)
	.word	.LANCHOR8-(.LPIC3695+8)
	.word	.LC88-(.LPIC3694+8)
	.fnend
	.size	ghsuart_data_disconnect, .-ghsuart_data_disconnect
	.align	2
	.type	frmnet_disable, %function
frmnet_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r5, #136
	strd	r8, [sp, #16]
	add	r9, r5, #124
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r0, #128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #128]
	mov	r3, #0
	mov	r0, r9
	str	r3, [r2]
	str	r3, [r5, #112]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #136]
	mov	r10, r0
	cmp	r3, r6
	movne	r8, #256
	movne	r7, #512
	beq	.L14320
.L14319:
	ldr	r2, [r3, #4]
	mov	r4, r3
	ldr	r1, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r4, #-8]!
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r3, [r5, #136]
	cmp	r3, r6
	bne	.L14319
.L14320:
	mov	r3, #0
	mov	r0, r9
	mov	r1, r10
	str	r3, [r5, #144]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrb	r3, [r5, #108]	@ zero_extendqisi2
	ldr	r1, .L14356
	mov	r2, r3, asl #3
	mov	r3, r3, asl #5
.LPIC3720:
	add	r1, pc, r1
	rsb	r0, r2, r3
	add	r1, r1, r0
	ldr	ip, [r1, #2328]
	ldr	r4, [r1, #2324]
	ldr	r1, [r1, #2336]
	sub	r0, ip, #3
	cmp	r0, #7
	addls	pc, pc, r0, asl #2
	b	.L14312
.L14314:
	b	.L14313
	b	.L14315
	b	.L14312
	b	.L14312
	b	.L14312
	b	.L14316
	b	.L14317
	b	.L14318
	.p2align 1
.L14315:
	mov	r0, r5
	bl	gqti_ctrl_disconnect(PLT)
	ldrb	r3, [r5, #108]	@ zero_extendqisi2
	mov	r2, r3, asl #3
	mov	r3, r3, asl #5
.L14318:
	ldr	r1, .L14356+4
	rsb	r3, r2, r3
	sub	r0, r4, #5
.LPIC3725:
	add	r1, pc, r1
	add	r3, r1, r3
	ldr	r1, [r3, #2332]
	cmp	r0, #5
	addls	pc, pc, r0, asl #2
	b	.L14333
.L14335:
	b	.L14334
	b	.L14334
	b	.L14334
	b	.L14336
	b	.L14337
	b	.L14310
	.p2align 1
.L14310:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14334:
	mov	r0, r5
	mov	r2, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	uxtb	r1, r1
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gbam_disconnect(PLT)
.L14336:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	ghsic_data_disconnect(PLT)
.L14337:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	ghsuart_data_disconnect(PLT)
.L14317:
	mov	r0, r5
	bl	ghsuart_ctrl_disconnect(PLT)
	ldrb	r3, [r5, #108]	@ zero_extendqisi2
	mov	r2, r3, asl #3
	mov	r3, r3, asl #5
	b	.L14318
.L14313:
	uxtb	r1, r1
	mov	r0, r5
	bl	gsmd_ctrl_disconnect(PLT)
	ldrb	r3, [r5, #108]	@ zero_extendqisi2
	mov	r2, r3, asl #3
	mov	r3, r3, asl #5
	b	.L14318
.L14316:
	mov	r0, r5
	bl	ghsic_ctrl_disconnect(PLT)
	ldrb	r3, [r5, #108]	@ zero_extendqisi2
	mov	r2, r3, asl #3
	mov	r3, r3, asl #5
	b	.L14318
.L14312:
	sub	ip, ip, #1
	cmp	ip, #9
	addls	pc, pc, ip, asl #2
	b	.L14321
.L14323:
	b	.L14351
	b	.L14324
	b	.L14325
	b	.L14326
	b	.L14327
	b	.L14328
	b	.L14329
	b	.L14330
	b	.L14331
	b	.L14332
	.p2align 1
.L14333:
	sub	r4, r4, #1
	cmp	r4, #9
	addls	pc, pc, r4, asl #2
	b	.L14339
.L14341:
	b	.L14352
	b	.L14342
	b	.L14343
	b	.L14344
	b	.L14345
	b	.L14346
	b	.L14347
	b	.L14348
	b	.L14349
	b	.L14350
	.p2align 1
.L14352:
	ldr	r2, .L14356+8
.LPIC3709:
	add	r2, pc, r2
.L14340:
	ldr	r1, .L14356+12
	ldr	r0, .L14356+16
.LPIC3727:
	add	r1, pc, r1
.LPIC3726:
	add	r0, pc, r0
.L14355:
	sub	r1, r1, #3552
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	sub	r1, r1, #8
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L14351:
	ldr	r2, .L14356+20
.LPIC3698:
	add	r2, pc, r2
.L14322:
	ldr	r1, .L14356+24
	ldr	r0, .L14356+28
.LPIC3724:
	add	r1, pc, r1
.LPIC3723:
	add	r0, pc, r0
	b	.L14355
.L14332:
	ldr	r2, .L14356+32
.LPIC3707:
	add	r2, pc, r2
	b	.L14322
.L14331:
	ldr	r2, .L14356+36
.LPIC3706:
	add	r2, pc, r2
	b	.L14322
.L14330:
	ldr	r2, .L14356+40
.LPIC3705:
	add	r2, pc, r2
	b	.L14322
.L14329:
	ldr	r2, .L14356+44
.LPIC3704:
	add	r2, pc, r2
	b	.L14322
.L14324:
	ldr	r2, .L14356+48
.LPIC3699:
	add	r2, pc, r2
	b	.L14322
.L14350:
	ldr	r2, .L14356+52
.LPIC3718:
	add	r2, pc, r2
	b	.L14340
.L14328:
	ldr	r2, .L14356+56
.LPIC3703:
	add	r2, pc, r2
	b	.L14322
.L14327:
	ldr	r2, .L14356+60
.LPIC3702:
	add	r2, pc, r2
	b	.L14322
.L14326:
	ldr	r2, .L14356+64
.LPIC3701:
	add	r2, pc, r2
	b	.L14322
.L14325:
	ldr	r2, .L14356+68
.LPIC3700:
	add	r2, pc, r2
	b	.L14322
.L14349:
	ldr	r2, .L14356+72
.LPIC3717:
	add	r2, pc, r2
	b	.L14340
.L14348:
	ldr	r2, .L14356+76
.LPIC3716:
	add	r2, pc, r2
	b	.L14340
.L14347:
	ldr	r2, .L14356+80
.LPIC3715:
	add	r2, pc, r2
	b	.L14340
.L14346:
	ldr	r2, .L14356+84
.LPIC3714:
	add	r2, pc, r2
	b	.L14340
.L14345:
	ldr	r2, .L14356+88
.LPIC3713:
	add	r2, pc, r2
	b	.L14340
.L14344:
	ldr	r2, .L14356+92
.LPIC3712:
	add	r2, pc, r2
	b	.L14340
.L14343:
	ldr	r2, .L14356+96
.LPIC3711:
	add	r2, pc, r2
	b	.L14340
.L14342:
	ldr	r2, .L14356+100
.LPIC3710:
	add	r2, pc, r2
	b	.L14340
.L14339:
	ldr	r2, .L14356+104
.LPIC3719:
	add	r2, pc, r2
	b	.L14340
.L14321:
	ldr	r2, .L14356+108
.LPIC3708:
	add	r2, pc, r2
	b	.L14322
.L14357:
	.align	2
.L14356:
	.word	.LANCHOR2-(.LPIC3720+8)
	.word	.LANCHOR2-(.LPIC3725+8)
	.word	.LC0-(.LPIC3709+8)
	.word	.LANCHOR8-(.LPIC3727+8)
	.word	.LC676-(.LPIC3726+8)
	.word	.LC0-(.LPIC3698+8)
	.word	.LANCHOR8-(.LPIC3724+8)
	.word	.LC676-(.LPIC3723+8)
	.word	.LC9-(.LPIC3707+8)
	.word	.LC8-(.LPIC3706+8)
	.word	.LC7-(.LPIC3705+8)
	.word	.LC6-(.LPIC3704+8)
	.word	.LC1-(.LPIC3699+8)
	.word	.LC9-(.LPIC3718+8)
	.word	.LC5-(.LPIC3703+8)
	.word	.LC4-(.LPIC3702+8)
	.word	.LC3-(.LPIC3701+8)
	.word	.LC2-(.LPIC3700+8)
	.word	.LC8-(.LPIC3717+8)
	.word	.LC7-(.LPIC3716+8)
	.word	.LC6-(.LPIC3715+8)
	.word	.LC5-(.LPIC3714+8)
	.word	.LC4-(.LPIC3713+8)
	.word	.LC3-(.LPIC3712+8)
	.word	.LC2-(.LPIC3711+8)
	.word	.LC1-(.LPIC3710+8)
	.word	.LC10-(.LPIC3719+8)
	.word	.LC10-(.LPIC3708+8)
	.fnend
	.size	frmnet_disable, .-frmnet_disable
	.align	2
	.type	gser_disable, %function
gser_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	ldr	r3, .L14385
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r0, [r0, #137]	@ zero_extendqisi2
	ldr	r2, [r4, #140]
.LPIC3739:
	add	r3, pc, r3
	mov	r1, r0, asl #4
	sub	r2, r2, #1
	sub	r1, r1, r0, asl #2
	add	r3, r3, r1
	ldr	r5, [r3, #24]
	cmp	r2, #8
	addls	pc, pc, r2, asl #2
	b	.L14359
.L14361:
	b	.L14360
	b	.L14362
	b	.L14363
	b	.L14359
	b	.L14359
	b	.L14359
	b	.L14359
	b	.L14364
	b	.L14365
	.p2align 1
.L14365:
	mov	r1, r5
	mov	r0, r4
	bl	ghsuart_data_disconnect(PLT)
.L14366:
	ldr	r0, [r4, #152]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L14379
	blx	r2
	ldr	r0, [r4, #152]
	ldr	r3, [r0, #8]
.L14379:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #152]
	mov	r3, #0
	str	r3, [r2]
	strb	r3, [r4, #138]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14360:
	mov	r0, r4
	bl	gserial_disconnect(PLT)
	b	.L14366
.L14362:
	uxtb	r1, r5
	mov	r0, r4
	bl	gsdio_disconnect(PLT)
	b	.L14366
.L14363:
	uxtb	r1, r5
	mov	r0, r4
	bl	gsmd_disconnect(PLT)
	b	.L14366
.L14364:
	mov	r0, r4
	mov	r1, r5
	bl	ghsic_ctrl_disconnect(PLT)
	mov	r0, r4
	mov	r1, r5
	bl	ghsic_data_disconnect(PLT)
	b	.L14366
.L14359:
	cmp	r2, #9
	addls	pc, pc, r2, asl #2
	b	.L14367
.L14369:
	b	.L14380
	b	.L14370
	b	.L14371
	b	.L14372
	b	.L14373
	b	.L14374
	b	.L14375
	b	.L14376
	b	.L14377
	b	.L14378
	.p2align 1
.L14380:
	ldr	r2, .L14385+4
.LPIC3728:
	add	r2, pc, r2
.L14368:
	ldr	r1, .L14385+8
	ldr	r0, .L14385+12
.LPIC3741:
	add	r1, pc, r1
	sub	r1, r1, #3536
.LPIC3740:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14366
.L14378:
	ldr	r2, .L14385+16
.LPIC3737:
	add	r2, pc, r2
	b	.L14368
.L14377:
	ldr	r2, .L14385+20
.LPIC3736:
	add	r2, pc, r2
	b	.L14368
.L14376:
	ldr	r2, .L14385+24
.LPIC3735:
	add	r2, pc, r2
	b	.L14368
.L14375:
	ldr	r2, .L14385+28
.LPIC3734:
	add	r2, pc, r2
	b	.L14368
.L14374:
	ldr	r2, .L14385+32
.LPIC3733:
	add	r2, pc, r2
	b	.L14368
.L14373:
	ldr	r2, .L14385+36
.LPIC3732:
	add	r2, pc, r2
	b	.L14368
.L14372:
	ldr	r2, .L14385+40
.LPIC3731:
	add	r2, pc, r2
	b	.L14368
.L14371:
	ldr	r2, .L14385+44
.LPIC3730:
	add	r2, pc, r2
	b	.L14368
.L14370:
	ldr	r2, .L14385+48
.LPIC3729:
	add	r2, pc, r2
	b	.L14368
.L14367:
	ldr	r2, .L14385+52
.LPIC3738:
	add	r2, pc, r2
	b	.L14368
.L14386:
	.align	2
.L14385:
	.word	.LANCHOR2-(.LPIC3739+8)
	.word	.LC0-(.LPIC3728+8)
	.word	.LANCHOR8-(.LPIC3741+8)
	.word	.LC675-(.LPIC3740+8)
	.word	.LC9-(.LPIC3737+8)
	.word	.LC8-(.LPIC3736+8)
	.word	.LC7-(.LPIC3735+8)
	.word	.LC6-(.LPIC3734+8)
	.word	.LC5-(.LPIC3733+8)
	.word	.LC4-(.LPIC3732+8)
	.word	.LC3-(.LPIC3731+8)
	.word	.LC2-(.LPIC3730+8)
	.word	.LC1-(.LPIC3729+8)
	.word	.LC10-(.LPIC3738+8)
	.fnend
	.size	gser_disable, .-gser_disable
	.align	2
	.global	ghsuart_data_connect
	.type	ghsuart_data_connect, %function
ghsuart_data_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14401
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #84
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3742:
	add	r3, pc, r3
	ldr	r2, [r3, #2048]
	mla	r3, ip, r1, r3
	cmp	r1, r2
	ldr	r4, [r3, #2052]
	bhi	.L14396
	cmp	r4, #0
	cmpne	r0, #0
	mov	r5, r0
	beq	.L14397
	ldr	r3, [r4, #16]
	add	r7, r4, #72
	add	r6, r4, #104
	mov	r0, r7
	cmp	r3, #0
	beq	.L14398
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #76]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #80]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L14401+4
.LPIC3751:
	add	r3, pc, r3
	ldr	r2, [r3, #3000]
	ldr	r3, [r3, #3004]
	str	r2, [r4, #44]
	str	r3, [r4, #76]
	ldr	r3, [r5, #76]
	str	r4, [r3]
	ldr	r3, [r5, #80]
	str	r4, [r3]
.L14392:
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L14399
	ldr	r0, [r4, #12]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L14400
	mov	r3, #1
	mov	r0, r7
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r5, [r4, #208]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r5, [r4, #204]
	mov	r0, r6
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #108]
	add	r1, r4, #112
	bl	queue_work(PLT)
	mov	r0, r5
.L14389:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14398:
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #80]
	mov	r1, r0
	mov	r0, r7
	add	r8, r4, #20
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #84]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L14401+8
	mov	r0, r8
.LPIC3748:
	add	r3, pc, r3
	ldr	r2, [r3, #2992]
	ldr	r3, [r3, #2996]
	str	r2, [r4, #44]
	str	r3, [r4, #76]
	ldr	r3, [r5, #80]
	str	r4, [r3]
	ldr	r3, [r5, #84]
	str	r4, [r3]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L14401+12
	mov	r1, r0
	mov	r0, r8
.LPIC3750:
	add	r3, pc, r3
	str	r3, [r5, #132]
	str	r5, [r4, #24]
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L14392
.L14399:
	ldr	r1, .L14401+16
	ldr	r0, .L14401+20
	ldr	r2, [r4, #8]
.LPIC3754:
	add	r1, pc, r1
	sub	r1, r1, #3504
.LPIC3753:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mov	r0, r5
	b	.L14389
.L14400:
	ldr	r1, .L14401+24
	ldr	r0, .L14401+28
	ldr	r2, [r4, #12]
.LPIC3756:
	add	r1, pc, r1
	sub	r1, r1, #3504
.LPIC3755:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r5
	b	.L14389
.L14397:
	ldr	r1, .L14401+32
	ldr	r0, .L14401+36
.LPIC3747:
	add	r1, pc, r1
	sub	r1, r1, #3504
.LPIC3746:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #18
	b	.L14389
.L14396:
	ldr	r3, .L14401+40
	mov	r2, r1
	ldr	r0, .L14401+44
.LPIC3745:
	add	r3, pc, r3
	sub	r1, r3, #3504
.LPIC3744:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #18
	b	.L14389
.L14402:
	.align	2
.L14401:
	.word	.LANCHOR2-(.LPIC3742+8)
	.word	.LANCHOR1-(.LPIC3751+8)
	.word	.LANCHOR1-(.LPIC3748+8)
	.word	ghsuart_send_controlbits_tomodem-(.LPIC3750+8)
	.word	.LANCHOR8-(.LPIC3754+8)
	.word	.LC189-(.LPIC3753+8)
	.word	.LANCHOR8-(.LPIC3756+8)
	.word	.LC190-(.LPIC3755+8)
	.word	.LANCHOR8-(.LPIC3747+8)
	.word	.LC27-(.LPIC3746+8)
	.word	.LANCHOR8-(.LPIC3745+8)
	.word	.LC88-(.LPIC3744+8)
	.fnend
	.size	ghsuart_data_connect, .-ghsuart_data_connect
	.align	2
	.type	gser_set_alt, %function
gser_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r0, #152]
	ldr	r2, [r4, #20]
	ldr	r3, [r0]
	ldr	r7, [r2, #24]
	cmp	r3, #0
	beq	.L14404
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #152]
.L14404:
	ldr	r6, [r0, #28]
	cmp	r6, #0
	beq	.L14471
.L14405:
	ldr	r3, [r0, #8]
	mov	r1, r6
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L14472
	ldr	r3, [r4, #152]
	str	r4, [r3]
	ldr	r2, [r4, #80]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L14409
	ldrb	r0, [r4, #137]	@ zero_extendqisi2
	ldr	r3, .L14475
	ldr	r2, [r4, #140]
	mov	r1, r0, asl #4
.LPIC3780:
	add	r3, pc, r3
	sub	r1, r1, r0, asl #2
	sub	r2, r2, #1
	add	r3, r3, r1
	ldr	r6, [r3, #24]
	cmp	r2, #8
	addls	pc, pc, r2, asl #2
	b	.L14410
.L14412:
	b	.L14411
	b	.L14413
	b	.L14414
	b	.L14410
	b	.L14410
	b	.L14410
	b	.L14410
	b	.L14415
	b	.L14416
	.p2align 1
.L14456:
	ldr	r2, .L14475+4
.LPIC3757:
	add	r2, pc, r2
.L14418:
	ldr	r1, .L14475+8
	ldr	r0, .L14475+12
.LPIC3782:
	add	r1, pc, r1
.LPIC3781:
	add	r0, pc, r0
	sub	r1, r1, #3536
	bl	printk(PLT)
	ldr	r2, [r4, #80]
.L14409:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L14429
	ldr	r3, [r4, #84]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L14429
.L14430:
	ldrb	r0, [r4, #137]	@ zero_extendqisi2
	ldr	r3, .L14475+16
	ldr	r2, [r4, #140]
	mov	r1, r0, asl #4
.LPIC3783:
	add	r3, pc, r3
	sub	r1, r1, r0, asl #2
	sub	r2, r2, #1
	add	r3, r3, r1
	ldr	r6, [r3, #24]
	cmp	r2, #8
	addls	pc, pc, r2, asl #2
	b	.L14433
.L14435:
	b	.L14434
	b	.L14436
	b	.L14437
	b	.L14433
	b	.L14433
	b	.L14433
	b	.L14433
	b	.L14438
	b	.L14439
	.p2align 1
.L14472:
	ldr	r0, [r7]
	mov	r3, r5
	ldr	r2, [r4, #152]
	ldr	r1, .L14475+20
	add	r0, r0, #32
	ldr	r2, [r2, #4]
.LPIC3779:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L14407:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14439:
	mov	r1, r6
	mov	r0, r4
	bl	ghsuart_data_connect(PLT)
	cmp	r0, #0
	bne	.L14473
.L14440:
	mov	r3, #1
	strb	r3, [r4, #138]
	b	.L14407
.L14434:
	uxtb	r1, r6
	mov	r0, r4
	bl	gserial_connect(PLT)
	b	.L14440
.L14436:
	uxtb	r1, r6
	mov	r0, r4
	bl	gsdio_connect(PLT)
	b	.L14440
.L14437:
	uxtb	r1, r6
	mov	r0, r4
	bl	gsmd_connect(PLT)
	b	.L14440
.L14438:
	mov	r0, r4
	mov	r1, r6
	bl	ghsic_ctrl_connect(PLT)
	cmp	r0, #0
	bne	.L14474
	mov	r0, r4
	mov	r1, r6
	bl	ghsic_data_connect(PLT)
	cmp	r0, #0
	beq	.L14440
	ldr	r1, .L14475+24
	mov	r2, r0
	ldr	r0, .L14475+28
.LPIC3787:
	add	r1, pc, r1
	sub	r1, r1, #3488
.LPIC3786:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	mov	r1, r6
	bl	ghsic_ctrl_disconnect(PLT)
	b	.L14440
.L14411:
	mov	r0, r4
	bl	gserial_disconnect(PLT)
	ldr	r2, [r4, #80]
	b	.L14409
.L14413:
	uxtb	r1, r6
	mov	r0, r4
	bl	gsdio_disconnect(PLT)
	ldr	r2, [r4, #80]
	b	.L14409
.L14414:
	uxtb	r1, r6
	mov	r0, r4
	bl	gsmd_disconnect(PLT)
	ldr	r2, [r4, #80]
	b	.L14409
.L14415:
	mov	r0, r4
	mov	r1, r6
	bl	ghsic_ctrl_disconnect(PLT)
	mov	r0, r4
	mov	r1, r6
	bl	ghsic_data_disconnect(PLT)
	ldr	r2, [r4, #80]
	b	.L14409
.L14416:
	mov	r1, r6
	mov	r0, r4
	bl	ghsuart_data_disconnect(PLT)
	ldr	r2, [r4, #80]
	b	.L14409
.L14433:
	cmp	r2, #9
	addls	pc, pc, r2, asl #2
	b	.L14444
.L14446:
	b	.L14457
	b	.L14447
	b	.L14448
	b	.L14449
	b	.L14450
	b	.L14451
	b	.L14452
	b	.L14453
	b	.L14454
	b	.L14455
	.p2align 1
.L14410:
	cmp	r2, #9
	addls	pc, pc, r2, asl #2
	b	.L14417
.L14419:
	b	.L14456
	b	.L14420
	b	.L14421
	b	.L14422
	b	.L14423
	b	.L14424
	b	.L14425
	b	.L14426
	b	.L14427
	b	.L14428
	.p2align 1
.L14429:
	ldr	r0, [r7]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L14432
	ldr	r0, [r7]
	mov	r1, r4
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	beq	.L14430
.L14432:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L14407
.L14471:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r7]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L14406
	ldr	r0, [r4, #152]
	ldr	r6, [r0, #28]
	b	.L14405
.L14457:
	ldr	r2, .L14475+32
.LPIC3768:
	add	r2, pc, r2
.L14445:
	ldr	r1, .L14475+36
	ldr	r0, .L14475+40
.LPIC3791:
	add	r1, pc, r1
	sub	r1, r1, #3488
.LPIC3790:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L14440
.L14455:
	ldr	r2, .L14475+44
.LPIC3777:
	add	r2, pc, r2
	b	.L14445
.L14454:
	ldr	r2, .L14475+48
.LPIC3776:
	add	r2, pc, r2
	b	.L14445
.L14453:
	ldr	r2, .L14475+52
.LPIC3775:
	add	r2, pc, r2
	b	.L14445
.L14452:
	ldr	r2, .L14475+56
.LPIC3774:
	add	r2, pc, r2
	b	.L14445
.L14451:
	ldr	r2, .L14475+60
.LPIC3773:
	add	r2, pc, r2
	b	.L14445
.L14450:
	ldr	r2, .L14475+64
.LPIC3772:
	add	r2, pc, r2
	b	.L14445
.L14449:
	ldr	r2, .L14475+68
.LPIC3771:
	add	r2, pc, r2
	b	.L14445
.L14448:
	ldr	r2, .L14475+72
.LPIC3770:
	add	r2, pc, r2
	b	.L14445
.L14447:
	ldr	r2, .L14475+76
.LPIC3769:
	add	r2, pc, r2
	b	.L14445
.L14420:
	ldr	r2, .L14475+80
.LPIC3758:
	add	r2, pc, r2
	b	.L14418
.L14424:
	ldr	r2, .L14475+84
.LPIC3762:
	add	r2, pc, r2
	b	.L14418
.L14423:
	ldr	r2, .L14475+88
.LPIC3761:
	add	r2, pc, r2
	b	.L14418
.L14422:
	ldr	r2, .L14475+92
.LPIC3760:
	add	r2, pc, r2
	b	.L14418
.L14421:
	ldr	r2, .L14475+96
.LPIC3759:
	add	r2, pc, r2
	b	.L14418
.L14428:
	ldr	r2, .L14475+100
.LPIC3766:
	add	r2, pc, r2
	b	.L14418
.L14427:
	ldr	r2, .L14475+104
.LPIC3765:
	add	r2, pc, r2
	b	.L14418
.L14426:
	ldr	r2, .L14475+108
.LPIC3764:
	add	r2, pc, r2
	b	.L14418
.L14425:
	ldr	r2, .L14475+112
.LPIC3763:
	add	r2, pc, r2
	b	.L14418
.L14444:
	ldr	r2, .L14475+116
.LPIC3778:
	add	r2, pc, r2
	b	.L14445
.L14417:
	ldr	r2, .L14475+120
.LPIC3767:
	add	r2, pc, r2
	b	.L14418
.L14406:
	ldr	r3, [r4, #152]
	mvn	r5, #21
	str	r6, [r3, #28]
	b	.L14407
.L14474:
	ldr	r1, .L14475+124
	mov	r2, r0
	ldr	r0, .L14475+128
.LPIC3785:
	add	r1, pc, r1
	sub	r1, r1, #3488
.LPIC3784:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L14440
.L14473:
	ldr	r1, .L14475+132
	mov	r2, r0
	ldr	r0, .L14475+136
.LPIC3789:
	add	r1, pc, r1
	sub	r1, r1, #3488
.LPIC3788:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L14440
.L14476:
	.align	2
.L14475:
	.word	.LANCHOR2-(.LPIC3780+8)
	.word	.LC0-(.LPIC3757+8)
	.word	.LANCHOR8-(.LPIC3782+8)
	.word	.LC675-(.LPIC3781+8)
	.word	.LANCHOR2-(.LPIC3783+8)
	.word	.LC467-(.LPIC3779+8)
	.word	.LANCHOR8-(.LPIC3787+8)
	.word	.LC722-(.LPIC3786+8)
	.word	.LC0-(.LPIC3768+8)
	.word	.LANCHOR8-(.LPIC3791+8)
	.word	.LC676-(.LPIC3790+8)
	.word	.LC9-(.LPIC3777+8)
	.word	.LC8-(.LPIC3776+8)
	.word	.LC7-(.LPIC3775+8)
	.word	.LC6-(.LPIC3774+8)
	.word	.LC5-(.LPIC3773+8)
	.word	.LC4-(.LPIC3772+8)
	.word	.LC3-(.LPIC3771+8)
	.word	.LC2-(.LPIC3770+8)
	.word	.LC1-(.LPIC3769+8)
	.word	.LC1-(.LPIC3758+8)
	.word	.LC5-(.LPIC3762+8)
	.word	.LC4-(.LPIC3761+8)
	.word	.LC3-(.LPIC3760+8)
	.word	.LC2-(.LPIC3759+8)
	.word	.LC9-(.LPIC3766+8)
	.word	.LC8-(.LPIC3765+8)
	.word	.LC7-(.LPIC3764+8)
	.word	.LC6-(.LPIC3763+8)
	.word	.LC10-(.LPIC3778+8)
	.word	.LC10-(.LPIC3767+8)
	.word	.LANCHOR8-(.LPIC3785+8)
	.word	.LC721-(.LPIC3784+8)
	.word	.LANCHOR8-(.LPIC3789+8)
	.word	.LC723-(.LPIC3788+8)
	.fnend
	.size	gser_set_alt, .-gser_set_alt
	.align	2
	.type	frmnet_set_alt, %function
frmnet_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #128]
	.pad #20
	sub	sp, sp, #20
	ldr	r5, [r0, #120]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L14478
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #128]
.L14478:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	subs	r8, r0, #0
	bne	.L14572
	ldr	r0, [r4, #128]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L14573
	ldr	r3, [r4, #128]
	str	r4, [r3]
	ldr	r2, [r4, #76]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L14482
	ldr	r3, [r4, #80]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L14482
.L14483:
	mov	r3, #1
	mov	r7, r4
	str	r3, [r4, #112]
	ldr	r5, [r7, #136]!
	cmp	r5, r7
	beq	.L14542
	add	r6, r4, #124
	mvn	r9, #94
	mov	r10, #256
	b	.L14538
.L14571:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
.L14534:
	ldr	r5, [r5]
	cmp	r5, r7
	beq	.L14542
.L14538:
	mov	r0, r6
	ldr	fp, [r4, #132]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #112]
	cmp	fp, #0
	cmpne	r2, #0
	moveq	r2, #1
	movne	r2, #0
	beq	.L14571
	ldr	r3, [fp]
	cmp	r3, #0
	beq	.L14571
	ldr	r3, [r4, #144]
	add	r3, r3, #1
	cmp	r3, #1
	str	r3, [r4, #144]
	bne	.L14571
	ldr	ip, [fp]
	mov	r1, r0
	mov	r0, r6
	strb	r2, [ip, #2]
	strb	r2, [ip, #3]
	strb	r9, [ip]
	strb	r3, [ip, #1]
	ldrh	r3, [r4, #104]
	strb	r2, [ip, #6]
	strb	r2, [ip, #7]
	strh	r3, [ip, #4]	@ unaligned
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #128]
	mov	r2, #32
	ldr	r1, [r4, #132]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L14534
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #136]
	mov	r1, r0
	cmp	r3, r7
	beq	.L14536
	ldr	r2, [r4, #144]
	cmp	r2, #0
	beq	.L14536
	sub	r2, r2, #1
	str	r0, [sp, #12]
	mov	ip, #512
	mov	fp, r3
	str	r2, [r4, #144]
	ldmia	r3, {r0, r2}
	str	r2, [r0, #4]
	str	r0, [r2]
	stmia	r3, {r10, ip}
	ldr	r0, [fp, #-8]!
	bl	kfree(PLT)
	mov	r0, fp
	bl	kfree(PLT)
	ldr	r1, [sp, #12]
.L14536:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r5, [r5]
	cmp	r5, r7
	bne	.L14538
.L14542:
	mov	r6, r8
.L14480:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14572:
	ldr	r2, [r4, #128]
	mov	r0, #0
	mov	r3, r8
	ldr	r1, .L14576
	mov	r6, r8
	str	r0, [r2, #28]
	ldr	r0, [r5]
	ldr	r2, [r4, #128]
.LPIC3814:
	add	r1, pc, r1
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err(PLT)
	b	.L14480
.L14482:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L14485
	ldr	r0, [r5]
	mov	r1, r4
	ldr	r2, [r4, #80]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L14485
	ldrb	r1, [r4, #108]	@ zero_extendqisi2
	ldr	r3, .L14576+4
	ldr	ip, [r4, #120]
	mov	r0, r1, asl #3
	mov	r2, r1, asl #5
.LPIC3817:
	add	r3, pc, r3
	rsb	r1, r0, r2
	ldr	r5, [ip]
	add	r3, r3, r1
	ldr	r6, [r3, #2328]
	ldr	r7, [r3, #2324]
	ldr	r1, [r3, #2336]
	sub	r3, r6, #3
	cmp	r3, #7
	addls	pc, pc, r3, asl #2
	b	.L14486
.L14488:
	b	.L14487
	b	.L14489
	b	.L14486
	b	.L14486
	b	.L14486
	b	.L14490
	b	.L14491
	b	.L14492
	.p2align 1
.L14491:
	mov	r0, r4
	bl	ghsuart_ctrl_connect(PLT)
	subs	r2, r0, #0
	bne	.L14496
.L14569:
	ldrb	r1, [r4, #108]	@ zero_extendqisi2
	mov	r0, r1, asl #3
	mov	r2, r1, asl #5
.L14492:
	ldr	r3, .L14576+8
	rsb	r2, r0, r2
	sub	r1, r7, #5
.LPIC3830:
	add	r3, pc, r3
	add	r3, r3, r2
	ldr	r9, [r3, #2332]
	cmp	r1, #5
	addls	pc, pc, r1, asl #2
	b	.L14509
.L14511:
	b	.L14540
	b	.L14512
	b	.L14513
	b	.L14514
	b	.L14515
	b	.L14483
	.p2align 1
.L14490:
	mov	r0, r4
	bl	ghsic_ctrl_connect(PLT)
	subs	r2, r0, #0
	beq	.L14569
	ldr	r1, .L14576+12
	mov	r8, r2
	ldr	r0, .L14576+16
.LPIC3825:
	add	r1, pc, r1
	sub	r1, r1, #3456
.LPIC3824:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L14483
.L14487:
	mov	r0, r4
	bl	gsmd_ctrl_connect(PLT)
	subs	r2, r0, #0
	beq	.L14569
	ldr	r1, .L14576+20
	mov	r8, r2
	ldr	r0, .L14576+24
.LPIC3821:
	add	r1, pc, r1
	sub	r1, r1, #3456
.LPIC3820:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L14483
.L14489:
	mov	r0, r4
	bl	gqti_ctrl_connect(PLT)
	subs	r2, r0, #0
	beq	.L14569
	ldr	r1, .L14576+28
	mov	r8, r2
	ldr	r0, .L14576+32
.LPIC3823:
	add	r1, pc, r1
	sub	r1, r1, #3456
.LPIC3822:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L14483
.L14540:
	mov	r5, #0
	mov	r3, r5
.L14510:
	uxtb	r9, r9
	str	r5, [sp]
	mov	r2, r7
	mov	r0, r4
	mov	r1, r9
	bl	gbam_connect(PLT)
	subs	r8, r0, #0
	beq	.L14483
	ldr	r1, .L14576+36
	mov	r2, r8
	ldr	r0, .L14576+40
.LPIC3834:
	add	r1, pc, r1
	sub	r1, r1, #3456
.LPIC3833:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	mov	r1, r9
	bl	gsmd_ctrl_disconnect(PLT)
	b	.L14483
.L14513:
	mov	r1, #2
	mov	r2, #0
	ldr	r0, [r5, #28]
	mov	r3, r9
	bl	usb_bam_get_connection_idx(PLT)
	mov	r7, r0
	mov	r3, r9
	ldr	r0, [r5, #28]
	mov	r1, #2
	mov	r2, #1
	bl	usb_bam_get_connection_idx(PLT)
	orrs	r3, r7, r0
	bmi	.L14574
	uxtb	r0, r0
	uxtb	r9, r9
	uxtb	r3, r7
	mov	r1, r9
	str	r0, [sp]
	mov	r2, #7
	mov	r0, r4
	bl	gbam_connect(PLT)
	subs	r5, r0, #0
	beq	.L14483
	ldr	r1, .L14576+44
	mov	r2, r5
	ldr	r0, .L14576+48
.LPIC3838:
	add	r1, pc, r1
	sub	r1, r1, #3456
.LPIC3837:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	cmp	r6, #4
	beq	.L14575
	mov	r1, r9
	mov	r0, r4
	mov	r8, r5
	bl	gsmd_ctrl_disconnect(PLT)
	b	.L14483
.L14512:
	mov	r1, #0
	mov	r3, r9
	ldr	r0, [r5, #28]
	mov	r2, r1
	bl	usb_bam_get_connection_idx(PLT)
	mov	r6, r0
	mov	r3, r9
	ldr	r0, [r5, #28]
	mov	r1, #0
	mov	r2, #1
	bl	usb_bam_get_connection_idx(PLT)
	orrs	r3, r6, r0
	bmi	.L14516
	uxtb	r3, r6
	uxtb	r5, r0
	b	.L14510
.L14515:
	mov	r0, r4
	mov	r1, r9
	bl	ghsuart_data_connect(PLT)
	subs	r8, r0, #0
	beq	.L14483
	ldr	r1, .L14576+52
	mov	r2, r8
	ldr	r0, .L14576+56
.LPIC3842:
	add	r1, pc, r1
	sub	r1, r1, #3456
.LPIC3841:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	mov	r1, r9
	bl	ghsuart_ctrl_disconnect(PLT)
	b	.L14483
.L14514:
	mov	r0, r4
	mov	r1, r9
	bl	ghsic_data_connect(PLT)
	subs	r8, r0, #0
	beq	.L14483
	ldr	r1, .L14576+60
	mov	r2, r8
	ldr	r0, .L14576+64
.LPIC3840:
	add	r1, pc, r1
	sub	r1, r1, #3456
.LPIC3839:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	mov	r1, r9
	bl	ghsic_ctrl_disconnect(PLT)
	b	.L14483
.L14486:
	sub	r6, r6, #1
	cmp	r6, #9
	addls	pc, pc, r6, asl #2
	b	.L14497
.L14499:
	b	.L14539
	b	.L14500
	b	.L14501
	b	.L14502
	b	.L14503
	b	.L14504
	b	.L14505
	b	.L14506
	b	.L14507
	b	.L14508
	.p2align 1
.L14539:
	ldr	r2, .L14576+68
.LPIC3792:
	add	r2, pc, r2
.L14498:
	ldr	r1, .L14576+72
	mvn	r8, #18
	ldr	r0, .L14576+76
.LPIC3829:
	add	r1, pc, r1
	sub	r1, r1, #3456
.LPIC3828:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L14483
.L14508:
	ldr	r2, .L14576+80
.LPIC3801:
	add	r2, pc, r2
	b	.L14498
.L14507:
	ldr	r2, .L14576+84
.LPIC3800:
	add	r2, pc, r2
	b	.L14498
.L14506:
	ldr	r2, .L14576+88
.LPIC3799:
	add	r2, pc, r2
	b	.L14498
.L14505:
	ldr	r2, .L14576+92
.LPIC3798:
	add	r2, pc, r2
	b	.L14498
.L14504:
	ldr	r2, .L14576+96
.LPIC3797:
	add	r2, pc, r2
	b	.L14498
.L14503:
	ldr	r2, .L14576+100
.LPIC3796:
	add	r2, pc, r2
	b	.L14498
.L14502:
	ldr	r2, .L14576+104
.LPIC3795:
	add	r2, pc, r2
	b	.L14498
.L14501:
	ldr	r2, .L14576+108
.LPIC3794:
	add	r2, pc, r2
	b	.L14498
.L14500:
	ldr	r2, .L14576+112
.LPIC3793:
	add	r2, pc, r2
	b	.L14498
.L14485:
	ldr	r2, [r4, #76]
	mov	r3, #0
	mvn	r6, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #80]
	str	r3, [r2, #28]
	b	.L14480
.L14509:
	sub	r7, r7, #1
	cmp	r7, #9
	addls	pc, pc, r7, asl #2
	b	.L14520
.L14522:
	b	.L14541
	b	.L14523
	b	.L14524
	b	.L14525
	b	.L14526
	b	.L14527
	b	.L14528
	b	.L14529
	b	.L14530
	b	.L14531
	.p2align 1
.L14531:
	ldr	r2, .L14576+116
.LPIC3812:
	add	r2, pc, r2
.L14521:
	ldr	r1, .L14576+120
	mvn	r8, #18
	ldr	r0, .L14576+124
.LPIC3844:
	add	r1, pc, r1
	sub	r1, r1, #3456
.LPIC3843:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L14483
.L14530:
	ldr	r2, .L14576+128
.LPIC3811:
	add	r2, pc, r2
	b	.L14521
.L14529:
	ldr	r2, .L14576+132
.LPIC3810:
	add	r2, pc, r2
	b	.L14521
.L14528:
	ldr	r2, .L14576+136
.LPIC3809:
	add	r2, pc, r2
	b	.L14521
.L14527:
	ldr	r2, .L14576+140
.LPIC3808:
	add	r2, pc, r2
	b	.L14521
.L14526:
	ldr	r2, .L14576+144
.LPIC3807:
	add	r2, pc, r2
	b	.L14521
.L14525:
	ldr	r2, .L14576+148
.LPIC3806:
	add	r2, pc, r2
	b	.L14521
.L14524:
	ldr	r2, .L14576+152
.LPIC3805:
	add	r2, pc, r2
	b	.L14521
.L14523:
	ldr	r2, .L14576+156
.LPIC3804:
	add	r2, pc, r2
	b	.L14521
.L14541:
	ldr	r2, .L14576+160
.LPIC3803:
	add	r2, pc, r2
	b	.L14521
.L14520:
	ldr	r2, .L14576+164
.LPIC3813:
	add	r2, pc, r2
	b	.L14521
.L14497:
	ldr	r2, .L14576+168
.LPIC3802:
	add	r2, pc, r2
	b	.L14498
.L14496:
	ldr	r1, .L14576+172
	mov	r8, r2
	ldr	r0, .L14576+176
.LPIC3827:
	add	r1, pc, r1
	sub	r1, r1, #3456
.LPIC3826:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L14483
.L14573:
	ldr	r1, .L14576+180
	mov	r3, r6
	ldr	r2, [r4, #128]
	ldr	r0, .L14576+184
.LPIC3816:
	add	r1, pc, r1
	sub	r1, r1, #3472
	ldr	r2, [r2, #4]
	sub	r1, r1, #4
.LPIC3815:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14480
.L14516:
	ldr	r1, .L14576+188
	ldr	r0, .L14576+192
.LPIC3832:
	add	r1, pc, r1
.LPIC3831:
	add	r0, pc, r0
.L14570:
	sub	r1, r1, #3456
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	uxtb	r1, r9
	bl	gsmd_ctrl_disconnect(PLT)
	b	.L14483
.L14575:
	mov	r0, r4
	mov	r8, r5
	bl	gqti_ctrl_disconnect(PLT)
	b	.L14483
.L14574:
	ldr	r1, .L14576+196
	ldr	r0, .L14576+200
.LPIC3836:
	add	r1, pc, r1
.LPIC3835:
	add	r0, pc, r0
	b	.L14570
.L14577:
	.align	2
.L14576:
	.word	.LC469-(.LPIC3814+8)
	.word	.LANCHOR2-(.LPIC3817+8)
	.word	.LANCHOR2-(.LPIC3830+8)
	.word	.LANCHOR8-(.LPIC3825+8)
	.word	.LC721-(.LPIC3824+8)
	.word	.LANCHOR8-(.LPIC3821+8)
	.word	.LC724-(.LPIC3820+8)
	.word	.LANCHOR8-(.LPIC3823+8)
	.word	.LC725-(.LPIC3822+8)
	.word	.LANCHOR8-(.LPIC3834+8)
	.word	.LC728-(.LPIC3833+8)
	.word	.LANCHOR8-(.LPIC3838+8)
	.word	.LC728-(.LPIC3837+8)
	.word	.LANCHOR8-(.LPIC3842+8)
	.word	.LC723-(.LPIC3841+8)
	.word	.LANCHOR8-(.LPIC3840+8)
	.word	.LC722-(.LPIC3839+8)
	.word	.LC0-(.LPIC3792+8)
	.word	.LANCHOR8-(.LPIC3829+8)
	.word	.LC676-(.LPIC3828+8)
	.word	.LC9-(.LPIC3801+8)
	.word	.LC8-(.LPIC3800+8)
	.word	.LC7-(.LPIC3799+8)
	.word	.LC6-(.LPIC3798+8)
	.word	.LC5-(.LPIC3797+8)
	.word	.LC4-(.LPIC3796+8)
	.word	.LC3-(.LPIC3795+8)
	.word	.LC2-(.LPIC3794+8)
	.word	.LC1-(.LPIC3793+8)
	.word	.LC9-(.LPIC3812+8)
	.word	.LANCHOR8-(.LPIC3844+8)
	.word	.LC676-(.LPIC3843+8)
	.word	.LC8-(.LPIC3811+8)
	.word	.LC7-(.LPIC3810+8)
	.word	.LC6-(.LPIC3809+8)
	.word	.LC5-(.LPIC3808+8)
	.word	.LC4-(.LPIC3807+8)
	.word	.LC3-(.LPIC3806+8)
	.word	.LC2-(.LPIC3805+8)
	.word	.LC1-(.LPIC3804+8)
	.word	.LC0-(.LPIC3803+8)
	.word	.LC10-(.LPIC3813+8)
	.word	.LC10-(.LPIC3802+8)
	.word	.LANCHOR8-(.LPIC3827+8)
	.word	.LC726-(.LPIC3826+8)
	.word	.LANCHOR8-(.LPIC3816+8)
	.word	.LC480-(.LPIC3815+8)
	.word	.LANCHOR8-(.LPIC3832+8)
	.word	.LC727-(.LPIC3831+8)
	.word	.LANCHOR8-(.LPIC3836+8)
	.word	.LC727-(.LPIC3835+8)
	.fnend
	.size	frmnet_set_alt, .-frmnet_set_alt
	.align	2
	.global	ghsuart_data_setup
	.type	ghsuart_data_setup, %function
ghsuart_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	clz	ip, r0
	mov	ip, ip, lsr #5
	str	lr, [sp, #32]
	ldr	lr, .L14606
	strd	r8, [sp, #16]
	mov	r9, r1
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	.pad #60
	sub	sp, sp, #60
.LPIC3845:
	add	lr, pc, lr
	ldr	r3, [lr, #2048]
	mov	r2, r3
	str	r3, [sp, #44]
	add	r3, r0, r3
	cmp	r3, #4
	movle	r1, ip
	orrgt	r1, ip, #1
	cmp	r1, #0
	str	r2, [sp, #48]
	bne	.L14579
	cmp	r2, r3
	movge	r0, r2
	bge	.L14601
	ldr	r1, [sp, #44]
	mov	r2, #84
	sub	r3, r3, #1
	ldr	r0, .L14606+4
	str	lr, [sp, #20]
	str	r3, [sp, #32]
	ldr	r3, .L14606+8
	ldr	r10, .L14606+12
	mov	r7, r1
	mla	r2, r2, r1, lr
	mov	ip, r1
	ldr	r1, .L14606+16
.LPIC3849:
	add	r0, pc, r0
.LPIC3855:
	add	r3, pc, r3
	add	r2, r2, #2048
	add	r3, r3, #3680
.LPIC3870:
	ldr	r10, [pc, r10]		@ tls_load_dot_plus_eight
	add	r3, r3, #12
.LPIC3854:
	add	r1, pc, r1
	str	r3, [sp, #28]
	str	r1, [sp, #24]
	add	r1, r0, #564
	ldr	r0, .L14606+20
.LPIC3856:
	add	r0, pc, r0
	str	r0, [sp, #36]
	mov	r0, r2
	add	r2, r1, r7, asl #2
	str	r2, [sp, #12]
	ldr	r2, .L14606+24
.LPIC3857:
	add	r2, pc, r2
	str	r2, [sp, #40]
	add	r2, r0, #8
	mov	r6, r2
	str	r2, [sp, #52]
	b	.L14586
.L14605:
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L14583
.L14582:
	ldr	r3, [sp, #12]
	mov	r1, #10
	mov	r2, #1
	ldr	r8, [r3], #4
	str	r5, [sp]
	str	r3, [sp, #12]
	mov	r0, r8
	mov	r3, r5
	bl	__alloc_workqueue_key(PLT)
	mov	r3, r0
	ldr	r1, [sp, #24]
	add	r0, r4, #32
	cmp	r3, #0
	ldr	r2, [sp, #28]
	str	r3, [r4, #108]
	beq	.L14604
	str	r5, [r4, #20]
	str	r7, [r4]
	str	r5, [r4, #104]
	str	r5, [r4, #28]
	str	r5, [r4, #72]
	bl	__init_waitqueue_head(PLT)
	cmp	r9, #0
	ldr	fp, [sp, #40]
	mov	lr, #2560
	moveq	r3, #11
	movne	r3, #10
	ldr	ip, .L14606+28
	ldr	r1, .L14606+32
	add	r0, r4, #116
	str	lr, [r4, #112]
	str	r3, [sp, #16]
	ldr	r3, [sp, #36]
	str	fp, [r4, #140]
	ldr	r2, .L14606+36
	ldr	fp, [sp, #16]
.LPIC3858:
	add	ip, pc, ip
	str	lr, [r4, #128]
.LPIC3859:
	add	r1, pc, r1
	str	lr, [r4, #160]
	str	r3, [r4, #124]
	ldr	r3, .L14606+40
	str	ip, [r4, #172]
	add	ip, r4, #132
.LPIC3860:
	add	r2, pc, r2
	str	r1, [r4, #156]
	add	r1, r4, #164
	str	fp, [r4, #180]
	add	fp, r4, #148
.LPIC3861:
	add	r3, pc, r3
	str	lr, [r4, #144]
	add	lr, r4, #48
	str	r0, [r4, #116]
	str	r0, [r4, #120]
	add	r0, r4, #80
	str	ip, [r4, #132]
	str	ip, [r4, #136]
	add	ip, r4, #56
	str	r1, [r4, #164]
	str	r1, [r4, #168]
	add	r1, r4, #88
	str	r5, [r4, #68]
	str	lr, [r4, #48]
	str	lr, [r4, #52]
	str	r0, [r4, #80]
	str	r0, [r4, #84]
	mov	r0, r6
	add	r6, r6, #84
	str	ip, [r4, #56]
	str	ip, [r4, #60]
	str	r5, [r4, #64]
	str	r5, [r4, #100]
	str	r5, [r4, #96]
	str	r9, [r4, #16]
	str	r4, [r4, #176]
	str	fp, [r4, #148]
	str	fp, [r4, #152]
	str	r1, [r4, #88]
	str	r1, [r4, #92]
	strd	r2, [r6, #-84]
	str	r4, [r6, #-88]
	str	r8, [r6, #-64]
	str	r5, [r6, #-56]
	bl	platform_driver_register(PLT)
	ldr	r2, [sp, #32]
	ldr	r3, .L14606+44
	cmp	r7, r2
	add	r7, r7, #1
.LPIC3862:
	add	r3, pc, r3
	beq	.L14592
	ldr	ip, [r3, #2048]
.L14586:
	ldr	r3, [r10, #32]
	mov	r5, #0
	add	ip, ip, #1
	ldr	r2, [sp, #20]
	movw	r1, #32976
	cmp	r3, r5
	mov	r0, r3
	str	ip, [r2, #2048]
	bne	.L14605
	mov	r4, #16
	b	.L14582
.L14579:
	ldr	r1, .L14606+48
	mov	r2, r0
	ldr	r0, .L14606+52
.LPIC3847:
	add	r1, pc, r1
.LPIC3846:
	add	r0, pc, r0
	sub	r1, r1, #3440
	bl	printk(PLT)
	mvn	r0, #21
.L14601:
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14592:
	ldr	r0, [sp, #44]
	b	.L14601
.L14604:
	ldr	r1, .L14606+56
	mov	r2, r8
	ldr	r0, .L14606+60
.LPIC3853:
	add	r1, pc, r1
	sub	r1, r1, #3408
.LPIC3852:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mov	r0, r4
	bl	kfree(PLT)
.L14583:
	ldr	r4, .L14606+64
	mov	r2, r7
	ldr	r1, .L14606+68
	ldr	r0, .L14606+72
.LPIC3865:
	add	r4, pc, r4
	ldr	r3, [r4, #2048]
.LPIC3868:
	add	r1, pc, r1
.LPIC3867:
	add	r0, pc, r0
	sub	r1, r1, #3440
	sub	r3, r3, #1
	str	r3, [r4, #2048]
	bl	printk(PLT)
	ldr	r2, [sp, #44]
	ldr	r3, [r4, #2048]
	cmp	r2, r3
	bcs	.L14589
.L14597:
	ldr	r6, [sp, #52]
	ldr	r3, [sp, #48]
	ldr	r5, [r6, #-4]
	add	r3, r3, #1
	str	r3, [sp, #48]
	ldr	r0, [r5, #108]
	bl	destroy_workqueue(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	add	r3, r6, #84
	cmp	r6, #0
	mov	r0, r6
	str	r3, [sp, #52]
	beq	.L14587
	bl	platform_driver_unregister(PLT)
.L14587:
	ldr	r3, [r4, #2048]
	ldr	r2, [sp, #48]
	cmp	r2, r3
	bcc	.L14597
.L14589:
	ldr	r3, .L14606+76
	mvn	r0, #11
	ldr	r2, [sp, #44]
.LPIC3864:
	add	r3, pc, r3
	str	r2, [r3, #2048]
	b	.L14601
.L14607:
	.align	2
.L14606:
	.word	.LANCHOR2-(.LPIC3845+8)
	.word	.LANCHOR5-(.LPIC3849+8)
	.word	.LANCHOR4-(.LPIC3855+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3870+8))
	.word	.LC337-(.LPIC3854+8)
	.word	ghsuart_data_connect_w-(.LPIC3856+8)
	.word	ghsuart_data_disconnect_w-(.LPIC3857+8)
	.word	ghsuart_data_write_tohost-(.LPIC3858+8)
	.word	ghsuart_data_write_tomdm-(.LPIC3859+8)
	.word	ghsuart_data_probe-(.LPIC3860+8)
	.word	ghsuart_data_remove-(.LPIC3861+8)
	.word	.LANCHOR2-(.LPIC3862+8)
	.word	.LANCHOR8-(.LPIC3847+8)
	.word	.LC694-(.LPIC3846+8)
	.word	.LANCHOR8-(.LPIC3853+8)
	.word	.LC709-(.LPIC3852+8)
	.word	.LANCHOR2-(.LPIC3865+8)
	.word	.LANCHOR8-(.LPIC3868+8)
	.word	.LC682-(.LPIC3867+8)
	.word	.LANCHOR2-(.LPIC3864+8)
	.fnend
	.size	ghsuart_data_setup, .-ghsuart_data_setup
	.align	2
	.type	rmnet_function_bind_config, %function
rmnet_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 152
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14794
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r10, [sp, #24]
	mov	r10, r1
	ldr	r1, .L14794+4
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
.LPIC4040:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #156
	sub	sp, sp, #156
.LPIC3872:
	add	r1, pc, r1
	mov	r2, r3
	str	r3, [sp, #12]
	ldr	r3, [r1, #-4076]
	ldr	r2, [r2]
	cmp	r3, #0
	str	r2, [sp, #148]
	beq	.L14609
.L14688:
	ldr	r3, .L14794+8
.LPIC3873:
	add	r3, pc, r3
	ldr	r3, [r3, #-4072]
	cmp	r3, #0
	ble	.L14681
	ldr	r3, .L14794+12
.LPIC3874:
	add	r3, pc, r3
	ldr	r2, [r3, #4060]
	cmp	r2, #0
	beq	.L14776
	ldr	r3, .L14794+16
	mov	r5, #0
	ldr	r8, .L14794+20
	ldr	r6, .L14794+24
	ldr	r7, .L14794+28
.LPIC4000:
	add	r3, pc, r3
	ldr	fp, .L14794+32
.LPIC3999:
	add	r8, pc, r8
	str	r3, [sp, #4]
	ldr	r3, .L14794+36
.LPIC3991:
	add	r6, pc, r6
	add	r6, r6, #2320
.LPIC3992:
	add	r7, pc, r7
.LPIC3996:
	add	fp, pc, fp
	add	r6, r6, #4
.LPIC4001:
	add	r3, pc, r3
	str	r3, [sp, #8]
	add	r3, r8, #3232
	str	r3, [sp]
	b	.L14674
.L14680:
	ldr	r2, .L14794+40
	add	r6, r6, #24
	mov	r3, r5
.LPIC3988:
	add	r2, pc, r2
	ldr	r2, [r2, #4060]
	cmp	r2, r5
	bls	.L14612
.L14674:
	ldrb	r3, [r7, #3216]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L14676
	ldr	r0, [r10, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L14777
	strb	r0, [r7, #3216]
.L14676:
	ldr	r4, [r6, #20]
	add	r8, r4, #124
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	lr, [r10, #24]
	mov	r9, r0
	mov	r1, fp
	mov	r2, r5
	mov	r0, #32
	str	lr, [r4, #120]
	bl	kasprintf(PLT)
	str	r0, [r4]
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L14778
	ldr	r3, [sp]
	mov	r0, r10
	mov	r1, r4
	ldr	lr, .L14794+44
	ldr	ip, .L14794+48
	ldr	r2, .L14794+52
	str	r3, [r4, #4]
	ldr	r3, [sp, #4]
.LPIC4002:
	add	lr, pc, lr
.LPIC4003:
	add	ip, pc, ip
.LPIC4004:
	add	r2, pc, r2
	str	lr, [r4, #40]
	ldr	lr, .L14794+56
	str	r3, [r4, #24]
	ldr	r3, [sp, #8]
	str	ip, [r4, #32]
	ldr	ip, .L14794+60
	str	r2, [r4, #44]
	ldr	r2, .L14794+64
.LPIC4006:
	add	lr, pc, lr
	str	r3, [r4, #28]
	ldr	r3, .L14794+68
.LPIC4007:
	add	ip, pc, ip
	str	lr, [r4, #52]
.LPIC4008:
	add	r2, pc, r2
	str	ip, [r4, #84]
.LPIC4005:
	add	r3, pc, r3
	str	r3, [r4, #48]
	ldr	r3, .L14794+72
.LPIC4009:
	add	r3, pc, r3
	strd	r2, [r4, #96]
	bl	usb_add_function(PLT)
	cmp	r0, #0
	bne	.L14779
	ldr	r3, .L14794+76
	add	r5, r5, #1
.LPIC4012:
	add	r3, pc, r3
	ldr	r3, [r3, #-4072]
	cmp	r3, r5
	bgt	.L14680
.L14681:
	mov	ip, #0
.L14611:
	ldr	r3, [sp, #12]
	mov	r0, ip
	ldr	r2, [sp, #148]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L14780
	add	sp, sp, #156
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14609:
	str	r3, [sp, #20]
	ldr	r3, .L14794+80
	mov	ip, #1
	ldr	r4, .L14794+84
	add	r2, sp, #48
	str	ip, [r1, #-4076]
	mov	r0, r2
	ldr	r8, .L14794+88
	str	r2, [sp]
	mov	r2, #50
	ldr	r7, .L14794+92
.LPIC3881:
	add	r3, pc, r3
.LPIC3876:
	add	r4, pc, r4
	str	r3, [sp, #4]
	ldr	r3, .L14794+96
	add	r1, r4, #3296
	add	r1, r1, #8
.LPIC3889:
	add	r7, pc, r7
.LPIC3878:
	add	r8, pc, r8
.LPIC3887:
	add	r3, pc, r3
	str	r3, [sp, #16]
	bl	strlcpy(PLT)
	ldr	r0, [sp]
	bl	strim(PLT)
	add	r3, sp, #98
	str	r0, [sp, #40]
	add	r1, r4, #3248
	mov	r0, r3
	mov	r2, #50
	str	r3, [sp]
	ldr	r3, .L14794+100
	add	r1, r1, #4
.LPIC4014:
	add	r3, pc, r3
	str	r3, [sp, #24]
	bl	strlcpy(PLT)
	ldr	r0, [sp]
	bl	strim(PLT)
	str	r0, [sp, #44]
	str	r10, [sp, #8]
	str	r7, [sp]
.L14614:
	add	r4, sp, #40
	b	.L14615
.L14644:
	mov	r1, r8
	mov	r0, r4
	bl	strsep(PLT)
	mov	fp, r0
	mov	r1, r8
	mov	r0, r4
	bl	strsep(PLT)
	cmp	r0, #0
	cmpne	fp, #0
	bne	.L14781
.L14615:
	ldr	r3, [sp, #40]
	cmp	r3, #0
	bne	.L14644
	ldr	r3, .L14794+104
	ldr	r10, [sp, #8]
.LPIC3948:
	add	r3, pc, r3
	ldr	r0, [r3, #4072]
	ldr	r1, [r3, #4076]
	cmp	r0, #0
	bne	.L14646
	cmp	r1, #0
	beq	.L14650
.L14646:
	bl	gbam_setup(PLT)
	subs	ip, r0, #0
	beq	.L14650
.L14649:
	ldr	r1, .L14794+108
	str	ip, [sp]
	ldr	r0, .L14794+112
.LPIC4025:
	add	r1, pc, r1
	sub	r1, r1, #3344
.LPIC4024:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	ip, [sp]
	b	.L14611
.L14650:
	ldr	r4, .L14794+116
.LPIC3951:
	add	r4, pc, r4
	ldr	r1, [r4, #4064]
	cmp	r1, #0
	bne	.L14782
.L14648:
	ldr	r4, .L14794+120
.LPIC3952:
	add	r4, pc, r4
	ldr	r0, [r4, #4084]
	cmp	r0, #0
	bne	.L14783
.L14652:
	ldr	r4, .L14794+124
.LPIC3957:
	add	r4, pc, r4
	ldr	r0, [r4, #4080]
	cmp	r0, #0
	bne	.L14784
.L14657:
	ldr	r4, .L14794+128
.LPIC3965:
	add	r4, pc, r4
	ldr	r0, [r4, #4092]
	cmp	r0, #0
	bne	.L14785
.L14662:
	ldr	r4, .L14794+132
.LPIC3973:
	add	r4, pc, r4
	ldr	r0, [r4, #4088]
	cmp	r0, #0
	beq	.L14688
	mov	r1, #1
	bl	ghsuart_ctrl_setup(PLT)
	subs	ip, r0, #0
	blt	.L14649
	ldr	r3, [r4, #4060]
	cmp	r3, #0
	beq	.L14688
	ldr	r2, .L14794+136
.LPIC3982:
	add	r2, pc, r2
	ldr	r1, [r2, #2328]
	cmp	r1, #9
	streq	ip, [r2, #2336]
	addeq	ip, ip, #1
	cmp	r3, #1
	bls	.L14688
	ldr	r2, .L14794+140
.LPIC3984:
	add	r2, pc, r2
	ldr	r1, [r2, #2352]
	cmp	r1, #9
	streq	ip, [r2, #2360]
	addeq	ip, ip, #1
	cmp	r3, #2
	beq	.L14688
	ldr	r3, .L14794+144
.LPIC3986:
	add	r3, pc, r3
	ldr	r2, [r3, #2376]
	cmp	r2, #9
	streq	ip, [r3, #2384]
	b	.L14688
.L14781:
	ldr	r2, [sp, #44]
	mov	r10, r0
	cmp	r2, #0
	beq	.L14616
	add	r0, sp, #44
	mov	r1, r8
	bl	strsep(PLT)
	str	r0, [sp, #20]
.L14616:
	ldr	r3, [sp, #4]
	ldr	r2, [r3, #4060]
	cmp	r2, #2
	bhi	.L14786
	ldr	r1, .L14794+148
.LPIC4041:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	ldr	r0, [r1, #8]
	cmp	r0, #0
	beq	.L14702
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	ip, r0, #0
	beq	.L14620
	ldr	r3, [sp, #4]
	ldr	r2, [r3, #4060]
.L14619:
	ldr	r3, [sp, #16]
	mov	r5, r2, asl #3
	mov	r7, r2, asl #5
	strb	r2, [ip, #108]
	ldr	r0, [sp]
	rsb	r4, r5, r7
	add	lr, ip, #136
	mov	r1, #0
	add	r4, r3, r4
	str	lr, [ip, #136]
	str	r1, [ip, #124]
	mov	r1, fp
	str	r2, [r4, #2340]
	mov	r2, #12
	str	ip, [r4, #2344]
	str	lr, [ip, #140]
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L14703
	ldr	r6, .L14794+152
	mov	r1, fp
	mov	r2, #12
.LPIC3890:
	add	r6, pc, r6
	mov	r0, r6
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r9, #2
	bne	.L14787
.L14621:
	ldr	r3, [sp, #24]
	rsb	ip, r5, r7
	mov	r1, r10
	ldr	r0, .L14794+156
	mov	r2, #12
	add	ip, r3, ip
.LPIC4015:
	add	r0, pc, r0
	add	r6, ip, #2320
	str	r9, [ip, #2328]
	add	r6, r6, #4
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L14788
.L14683:
	ldr	r0, .L14794+160
	mov	r2, #12
	mov	r1, r10
.LPIC3896:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #2
	bne	.L14789
.L14624:
	ldr	ip, .L14794+164
	rsb	r1, r5, r7
	sub	lr, r9, #3
.LPIC3900:
	add	ip, pc, ip
	add	r1, ip, r1
	str	r2, [r1, #2324]
	cmp	lr, #7
	addls	pc, pc, lr, asl #2
	b	.L14763
.L14627:
	b	.L14626
	b	.L14628
	b	.L14763
	b	.L14763
	b	.L14763
	b	.L14629
	b	.L14630
	b	.L14631
	.p2align 1
.L14702:
	mov	ip, #16
	b	.L14619
.L14782:
	mov	r0, #0
	add	r2, sp, #39
	bl	gsmd_ctrl_setup(PLT)
	subs	ip, r0, #0
	bne	.L14649
	ldr	r2, [r4, #4060]
	cmp	r2, #0
	beq	.L14648
	ldr	r1, .L14794+168
	ldrb	r3, [sp, #39]	@ zero_extendqisi2
.LPIC3954:
	add	r1, pc, r1
	ldr	r1, [r1, #2344]
	cmp	r1, #0
	beq	.L14653
	ldrb	r0, [r1, #108]	@ zero_extendqisi2
	add	r0, r3, r0
	strb	r0, [r1, #108]
.L14653:
	cmp	r2, #1
	bls	.L14648
	ldr	r1, .L14794+172
.LPIC3955:
	add	r1, pc, r1
	ldr	r1, [r1, #2368]
	cmp	r1, #0
	beq	.L14654
	ldrb	r0, [r1, #108]	@ zero_extendqisi2
	add	r0, r3, r0
	strb	r0, [r1, #108]
.L14654:
	cmp	r2, #2
	beq	.L14648
	ldr	r2, .L14794+176
.LPIC3956:
	add	r2, pc, r2
	ldr	r2, [r2, #2392]
	cmp	r2, #0
	beq	.L14648
	ldrb	r1, [r2, #108]	@ zero_extendqisi2
	add	r3, r3, r1
	strb	r3, [r2, #108]
	b	.L14648
.L14793:
	mov	r2, #1
	str	r2, [r4, #2324]
.L14628:
	ldr	r0, .L14794+180
	rsb	r1, r5, r7
	ldr	r2, .L14794+184
.LPIC3905:
	add	r0, pc, r0
	ldr	ip, [r0, #4068]
.LPIC3906:
	add	r2, pc, r2
	add	r1, r2, r1
	ldr	r2, [r1, #2324]
	add	lr, ip, #1
	str	ip, [r1, #2336]
	str	lr, [r0, #4068]
.L14631:
	sub	r1, r2, #5
	cmp	r1, #5
	addls	pc, pc, r1, asl #2
	b	.L14633
.L14635:
	b	.L14634
	b	.L14636
	b	.L14636
	b	.L14637
	b	.L14638
	b	.L14639
	.p2align 1
.L14636:
	ldr	r2, .L14794+188
	rsb	r5, r5, r7
	ldr	r3, .L14794+192
.LPIC3931:
	add	r2, pc, r2
	ldr	r1, [r2, #4076]
.LPIC3932:
	add	r3, pc, r3
	add	r3, r3, r5
	add	r0, r1, #1
	str	r1, [r3, #2332]
	str	r0, [r2, #4076]
.L14639:
	ldr	r0, .L14794+196
	ldr	r1, .L14794+200
.LPIC3942:
	add	r0, pc, r0
.LPIC3946:
	add	r1, pc, r1
	ldr	r2, [r0, #4060]
	ldr	r3, [r1, #-4072]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r0, #4060]
	str	r3, [r1, #-4072]
	b	.L14614
.L14703:
	mov	r9, #1
	b	.L14621
.L14788:
	mov	r3, r9
	mov	r2, #1
	mov	r9, r10
	str	r2, [r6]
.L14625:
	ldr	r1, .L14794+204
	mov	r2, r3
	ldr	r0, .L14794+208
.LPIC3918:
	add	r1, pc, r1
	sub	r1, r1, #3392
.LPIC3917:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
.L14640:
	ldr	r6, .L14794+212
.LPIC3919:
	add	r6, pc, r6
	ldr	r2, [r6, #4060]
	cmp	r2, #0
	beq	.L14643
	ldr	r4, .L14794+216
	mov	r5, #0
.LPIC3944:
	add	r4, pc, r4
	add	r4, r4, #2320
	add	r4, r4, #4
.L14642:
	ldr	r0, [r4, #20]
	add	r5, r5, #1
	add	r4, r4, #24
	bl	kfree(PLT)
	ldr	r3, [r6, #4060]
	cmp	r5, r3
	bcc	.L14642
.L14643:
	ldr	r2, .L14794+220
	mov	r1, #0
	mvn	ip, #18
.LPIC3920:
	add	r2, pc, r2
	str	r1, [r2, #4060]
	str	r1, [r2, #4064]
	str	r1, [r2, #4068]
	str	r1, [r2, #4072]
	str	r1, [r2, #4080]
	str	r1, [r2, #4084]
	str	r1, [r2, #4088]
	str	r1, [r2, #4092]
.L14618:
	ldr	r1, .L14794+224
	mov	r2, fp
	mov	r3, r9
	ldr	r0, .L14794+228
	str	ip, [sp]
.LPIC4023:
	add	r1, pc, r1
	sub	r1, r1, #3344
.LPIC4022:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	ip, [sp]
	b	.L14611
.L14787:
	ldr	r3, .L14794+232
	mov	r1, fp
	mov	r2, #12
.LPIC3891:
	add	r3, pc, r3
	mov	r0, r3
	str	r3, [sp, #28]
	bl	strncasecmp(PLT)
	cmp	r0, #0
	bne	.L14790
	mov	r9, #3
	ldr	r0, [sp]
	mov	r1, r10
	mov	r2, #12
	str	r9, [r4, #2328]
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L14791
	mov	r2, #12
	mov	r0, r6
	mov	r1, r10
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #2
	streq	r2, [r4, #2324]
	beq	.L14626
	ldr	r0, [sp, #28]
	mov	r1, r10
	mov	r2, #12
	bl	strncasecmp(PLT)
	cmp	r0, #0
	streq	r9, [r4, #2324]
	beq	.L14626
	ldr	r0, .L14794+236
	mov	r2, #12
	mov	r1, r10
.LPIC4037:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #4
	streq	r2, [r4, #2324]
	beq	.L14626
.L14698:
	ldr	r0, .L14794+240
	mov	r2, #12
	mov	r1, r10
.LPIC3899:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #5
	beq	.L14624
	mov	r0, r10
	bl	str_to_xport.part.61(PLT)
	mov	r2, r0
	b	.L14624
.L14789:
	ldr	r0, .L14794+244
	mov	r2, #12
	mov	r1, r10
.LPIC3897:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #3
	beq	.L14624
	ldr	r0, .L14794+248
	mov	r2, #12
	mov	r1, r10
.LPIC3898:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #4
	beq	.L14624
	b	.L14698
.L14783:
	mov	r1, #1
	bl	ghsic_data_setup(PLT)
	subs	ip, r0, #0
	blt	.L14649
	ldr	r3, [r4, #4060]
	cmp	r3, #0
	beq	.L14652
	ldr	r2, .L14794+252
.LPIC3959:
	add	r2, pc, r2
	ldr	r1, [r2, #2324]
	cmp	r1, #8
	streq	ip, [r2, #2332]
	addeq	ip, ip, #1
	cmp	r3, #1
	bls	.L14652
	ldr	r2, .L14794+256
.LPIC3961:
	add	r2, pc, r2
	ldr	r1, [r2, #2348]
	cmp	r1, #8
	streq	ip, [r2, #2356]
	addeq	ip, ip, #1
	cmp	r3, #2
	beq	.L14652
	ldr	r3, .L14794+260
.LPIC3963:
	add	r3, pc, r3
	ldr	r2, [r3, #2372]
	cmp	r2, #8
	streq	ip, [r3, #2380]
	b	.L14652
.L14784:
	mov	r1, #1
	bl	ghsic_ctrl_setup(PLT)
	subs	ip, r0, #0
	blt	.L14649
	ldr	r3, [r4, #4060]
	cmp	r3, #0
	beq	.L14657
	ldr	r2, .L14794+264
.LPIC3967:
	add	r2, pc, r2
	ldr	r1, [r2, #2328]
	cmp	r1, #8
	streq	ip, [r2, #2336]
	addeq	ip, ip, #1
	cmp	r3, #1
	bls	.L14657
	ldr	r2, .L14794+268
.LPIC3969:
	add	r2, pc, r2
	ldr	r1, [r2, #2352]
	cmp	r1, #8
	streq	ip, [r2, #2360]
	addeq	ip, ip, #1
	cmp	r3, #2
	beq	.L14657
	ldr	r3, .L14794+272
.LPIC3971:
	add	r3, pc, r3
	ldr	r2, [r3, #2376]
	cmp	r2, #8
	streq	ip, [r3, #2384]
	b	.L14657
.L14785:
	mov	r1, #1
	bl	ghsuart_data_setup(PLT)
	subs	ip, r0, #0
	blt	.L14649
	ldr	r3, [r4, #4060]
	cmp	r3, #0
	beq	.L14662
	ldr	r2, .L14794+276
.LPIC3975:
	add	r2, pc, r2
	ldr	r1, [r2, #2324]
	cmp	r1, #9
	streq	ip, [r2, #2332]
	addeq	ip, ip, #1
	cmp	r3, #1
	bls	.L14662
	ldr	r2, .L14794+280
.LPIC3977:
	add	r2, pc, r2
	ldr	r1, [r2, #2348]
	cmp	r1, #9
	streq	ip, [r2, #2356]
	addeq	ip, ip, #1
	cmp	r3, #2
	beq	.L14662
	ldr	r3, .L14794+284
.LPIC3979:
	add	r3, pc, r3
	ldr	r2, [r3, #2372]
	cmp	r2, #9
	streq	ip, [r3, #2380]
	b	.L14662
.L14630:
	ldr	r0, .L14794+288
	rsb	r1, r5, r7
	ldr	r2, .L14794+292
.LPIC3913:
	add	r0, pc, r0
	ldr	ip, [r0, #4088]
.LPIC3914:
	add	r2, pc, r2
	add	r1, r2, r1
	ldr	r2, [r1, #2324]
	add	lr, ip, #1
	str	ip, [r1, #2336]
	str	lr, [r0, #4088]
	b	.L14631
.L14629:
	ldr	r0, [sp, #20]
	mov	r1, fp
	bl	ghsic_ctrl_set_port_name(PLT)
	ldr	r0, .L14794+296
	rsb	r1, r5, r7
	ldr	r2, .L14794+300
.LPIC3909:
	add	r0, pc, r0
	ldr	ip, [r0, #4080]
.LPIC3910:
	add	r2, pc, r2
	add	r1, r2, r1
	ldr	r2, [r1, #2324]
	add	lr, ip, #1
	str	ip, [r1, #2336]
	str	lr, [r0, #4080]
	b	.L14631
.L14791:
	mov	r2, #1
	str	r2, [r4, #2324]
.L14626:
	ldr	r0, .L14794+304
	rsb	r1, r5, r7
	ldr	r2, .L14794+308
.LPIC3901:
	add	r0, pc, r0
	ldr	ip, [r0, #4064]
.LPIC3902:
	add	r2, pc, r2
	add	r1, r2, r1
	ldr	r2, [r1, #2324]
	add	lr, ip, #1
	str	ip, [r1, #2336]
	str	lr, [r0, #4064]
	b	.L14631
.L14638:
	ldr	r2, .L14794+312
	rsb	r5, r5, r7
	ldr	r3, .L14794+316
.LPIC3937:
	add	r2, pc, r2
	ldr	r1, [r2, #4092]
.LPIC3938:
	add	r3, pc, r3
	add	r3, r3, r5
	add	r0, r1, #1
	str	r1, [r3, #2332]
	str	r0, [r2, #4092]
	b	.L14639
.L14637:
	mov	r1, r10
	ldr	r0, [sp, #20]
	rsb	r5, r5, r7
	bl	ghsic_data_set_port_name(PLT)
	ldr	r2, .L14794+320
	ldr	r3, .L14794+324
.LPIC3934:
	add	r2, pc, r2
	ldr	r1, [r2, #4084]
.LPIC3935:
	add	r3, pc, r3
	add	r3, r3, r5
	add	r0, r1, #1
	str	r1, [r3, #2332]
	str	r0, [r2, #4084]
	b	.L14639
.L14634:
	ldr	r2, .L14794+328
	rsb	r5, r5, r7
	ldr	r3, .L14794+332
.LPIC3928:
	add	r2, pc, r2
	ldr	r1, [r2, #4072]
.LPIC3929:
	add	r3, pc, r3
	add	r3, r3, r5
	add	r0, r1, #1
	str	r1, [r3, #2332]
	str	r0, [r2, #4072]
	b	.L14639
.L14763:
	mov	r3, r9
	mov	r9, r10
	b	.L14625
.L14790:
	ldr	r9, .L14794+336
	mov	r1, fp
	mov	r2, #12
.LPIC3892:
	add	r9, pc, r9
	mov	r0, r9
	bl	strncasecmp(PLT)
	cmp	r0, #0
	bne	.L14792
	mov	r3, #4
	ldr	r0, [sp]
	mov	r1, r10
	mov	r2, #12
	str	r3, [r4, #2328]
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L14793
	mov	r2, #12
	mov	r0, r6
	mov	r1, r10
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #2
	streq	r2, [r4, #2324]
	beq	.L14628
	mov	r2, #12
	ldr	r0, [sp, #28]
	mov	r1, r10
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #3
	streq	r2, [r4, #2324]
	beq	.L14628
	mov	r0, r9
	mov	r1, r10
	mov	r2, #12
	mov	r9, #4
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #4
	streq	r3, [r4, #2324]
	beq	.L14628
	b	.L14698
.L14633:
	ldr	r1, .L14794+340
	mov	r9, r10
	ldr	r0, .L14794+344
.LPIC3941:
	add	r1, pc, r1
	sub	r1, r1, #3392
.LPIC3940:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L14640
.L14778:
	ldr	r1, .L14794+348
	mvn	ip, #11
	ldr	r0, .L14794+352
	str	ip, [sp]
.LPIC3998:
	add	r1, pc, r1
.LPIC3997:
	add	r0, pc, r0
	sub	r1, r1, #3376
	bl	printk(PLT)
	ldr	ip, [sp]
.L14675:
	ldr	r1, .L14794+356
	mov	r2, r5
	str	ip, [sp]
	ldr	r0, .L14794+360
.LPIC4027:
	add	r1, pc, r1
	sub	r1, r1, #3344
.LPIC4026:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	ip, [sp]
	b	.L14611
.L14776:
	mov	r3, r2
	mov	r5, r2
.L14612:
	ldr	r1, .L14794+364
	mvn	ip, #18
	ldr	r0, .L14794+368
	str	ip, [sp]
.LPIC3990:
	add	r1, pc, r1
.LPIC3989:
	add	r0, pc, r0
	sub	r1, r1, #3376
	bl	printk(PLT)
	ldr	ip, [sp]
	b	.L14675
.L14779:
	ldr	r1, .L14794+372
	mov	r2, r0
	str	r0, [sp]
	ldr	r0, .L14794+376
.LPIC4011:
	add	r1, pc, r1
	sub	r1, r1, #3376
.LPIC4010:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [r4]
	bl	kfree(PLT)
	ldr	ip, [sp]
	b	.L14675
.L14792:
	ldr	r0, .L14794+380
	mov	r1, fp
	mov	r2, #12
.LPIC3893:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r9, #5
	beq	.L14621
	mov	r0, fp
	bl	str_to_xport.part.61(PLT)
	mov	r9, r0
	mov	r2, #12
	ldr	r0, [sp]
	mov	r1, r10
	str	r9, [r4, #2328]
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #1
	bne	.L14683
	b	.L14624
.L14777:
	ldr	r1, .L14794+384
	mov	r2, r0
	str	r0, [sp]
	ldr	r0, .L14794+388
.LPIC3994:
	add	r1, pc, r1
.LPIC3993:
	add	r0, pc, r0
	sub	r1, r1, #3376
	bl	printk(PLT)
	ldr	ip, [sp]
	b	.L14675
.L14620:
	ldr	r1, .L14794+392
	mvn	ip, #11
	mov	r9, r10
	ldr	r0, .L14794+396
	str	ip, [sp]
.LPIC3886:
	add	r1, pc, r1
	sub	r1, r1, #3392
.LPIC3885:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	ldr	ip, [sp]
	b	.L14618
.L14786:
	ldr	r1, .L14794+400
	mvn	ip, #21
	mov	r2, #3
	ldr	r0, .L14794+404
	mov	r9, r10
	str	ip, [sp]
.LPIC3883:
	add	r1, pc, r1
	sub	r1, r1, #3392
.LPIC3882:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	ldr	ip, [sp]
	b	.L14618
.L14780:
	bl	__stack_chk_fail(PLT)
.L14795:
	.align	2
.L14794:
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC4040+8))
	.word	.LANCHOR9-(.LPIC3872+8)
	.word	.LANCHOR9-(.LPIC3873+8)
	.word	.LANCHOR4-(.LPIC3874+8)
	.word	frmnet_bind-(.LPIC4000+8)
	.word	.LANCHOR0-(.LPIC3999+8)
	.word	.LANCHOR2-(.LPIC3991+8)
	.word	.LANCHOR0-(.LPIC3992+8)
	.word	.LC733-(.LPIC3996+8)
	.word	frmnet_unbind-(.LPIC4001+8)
	.word	.LANCHOR4-(.LPIC3988+8)
	.word	frmnet_disable-(.LPIC4002+8)
	.word	frmnet_set_alt-(.LPIC4003+8)
	.word	frmnet_setup-(.LPIC4004+8)
	.word	frmnet_resume-(.LPIC4006+8)
	.word	frmnet_send_cpkt_response-(.LPIC4007+8)
	.word	frmnet_disconnect-(.LPIC4008+8)
	.word	frmnet_suspend-(.LPIC4005+8)
	.word	frmnet_connect-(.LPIC4009+8)
	.word	.LANCHOR9-(.LPIC4012+8)
	.word	.LANCHOR4-(.LPIC3881+8)
	.word	.LANCHOR2-(.LPIC3876+8)
	.word	.LC241-(.LPIC3878+8)
	.word	.LC0-(.LPIC3889+8)
	.word	.LANCHOR2-(.LPIC3887+8)
	.word	.LANCHOR2-(.LPIC4014+8)
	.word	.LANCHOR4-(.LPIC3948+8)
	.word	.LANCHOR8-(.LPIC4025+8)
	.word	.LC735-(.LPIC4024+8)
	.word	.LANCHOR4-(.LPIC3951+8)
	.word	.LANCHOR4-(.LPIC3952+8)
	.word	.LANCHOR4-(.LPIC3957+8)
	.word	.LANCHOR4-(.LPIC3965+8)
	.word	.LANCHOR4-(.LPIC3973+8)
	.word	.LANCHOR2-(.LPIC3982+8)
	.word	.LANCHOR2-(.LPIC3984+8)
	.word	.LANCHOR2-(.LPIC3986+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4041+8))
	.word	.LC1-(.LPIC3890+8)
	.word	.LC0-(.LPIC4015+8)
	.word	.LC1-(.LPIC3896+8)
	.word	.LANCHOR2-(.LPIC3900+8)
	.word	.LANCHOR2-(.LPIC3954+8)
	.word	.LANCHOR2-(.LPIC3955+8)
	.word	.LANCHOR2-(.LPIC3956+8)
	.word	.LANCHOR4-(.LPIC3905+8)
	.word	.LANCHOR2-(.LPIC3906+8)
	.word	.LANCHOR4-(.LPIC3931+8)
	.word	.LANCHOR2-(.LPIC3932+8)
	.word	.LANCHOR4-(.LPIC3942+8)
	.word	.LANCHOR9-(.LPIC3946+8)
	.word	.LANCHOR8-(.LPIC3918+8)
	.word	.LC731-(.LPIC3917+8)
	.word	.LANCHOR4-(.LPIC3919+8)
	.word	.LANCHOR2-(.LPIC3944+8)
	.word	.LANCHOR4-(.LPIC3920+8)
	.word	.LANCHOR8-(.LPIC4023+8)
	.word	.LC734-(.LPIC4022+8)
	.word	.LC2-(.LPIC3891+8)
	.word	.LC3-(.LPIC4037+8)
	.word	.LC4-(.LPIC3899+8)
	.word	.LC2-(.LPIC3897+8)
	.word	.LC3-(.LPIC3898+8)
	.word	.LANCHOR2-(.LPIC3959+8)
	.word	.LANCHOR2-(.LPIC3961+8)
	.word	.LANCHOR2-(.LPIC3963+8)
	.word	.LANCHOR2-(.LPIC3967+8)
	.word	.LANCHOR2-(.LPIC3969+8)
	.word	.LANCHOR2-(.LPIC3971+8)
	.word	.LANCHOR2-(.LPIC3975+8)
	.word	.LANCHOR2-(.LPIC3977+8)
	.word	.LANCHOR2-(.LPIC3979+8)
	.word	.LANCHOR4-(.LPIC3913+8)
	.word	.LANCHOR2-(.LPIC3914+8)
	.word	.LANCHOR4-(.LPIC3909+8)
	.word	.LANCHOR2-(.LPIC3910+8)
	.word	.LANCHOR4-(.LPIC3901+8)
	.word	.LANCHOR2-(.LPIC3902+8)
	.word	.LANCHOR4-(.LPIC3937+8)
	.word	.LANCHOR2-(.LPIC3938+8)
	.word	.LANCHOR4-(.LPIC3934+8)
	.word	.LANCHOR2-(.LPIC3935+8)
	.word	.LANCHOR4-(.LPIC3928+8)
	.word	.LANCHOR2-(.LPIC3929+8)
	.word	.LC3-(.LPIC3892+8)
	.word	.LANCHOR8-(.LPIC3941+8)
	.word	.LC731-(.LPIC3940+8)
	.word	.LANCHOR8-(.LPIC3998+8)
	.word	.LC704-(.LPIC3997+8)
	.word	.LANCHOR8-(.LPIC4027+8)
	.word	.LC736-(.LPIC4026+8)
	.word	.LANCHOR8-(.LPIC3990+8)
	.word	.LC732-(.LPIC3989+8)
	.word	.LANCHOR8-(.LPIC4011+8)
	.word	.LC705-(.LPIC4010+8)
	.word	.LC4-(.LPIC3893+8)
	.word	.LANCHOR8-(.LPIC3994+8)
	.word	.LC702-(.LPIC3993+8)
	.word	.LANCHOR8-(.LPIC3886+8)
	.word	.LC730-(.LPIC3885+8)
	.word	.LANCHOR8-(.LPIC3883+8)
	.word	.LC729-(.LPIC3882+8)
	.fnend
	.size	rmnet_function_bind_config, .-rmnet_function_bind_config
	.align	2
	.global	gser_bind_config
	.type	gser_bind_config, %function
gser_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L14814
	strd	r6, [sp, #8]
	ldr	r5, .L14814+4
	mov	r7, r0
	str	r8, [sp, #16]
	mov	r6, r1
	str	lr, [sp, #20]
.LPIC4042:
	add	r4, pc, r4
	ldrb	r3, [r4, #3240]	@ zero_extendqisi2
.LPIC4044:
	add	r5, pc, r5
	cmp	r3, #0
	beq	.L14809
.L14797:
	ldr	r3, .L14814+8
	ldr	r3, [r5, r3]
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L14804
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L14810
.L14799:
	ldr	r2, .L14814+12
	mov	r1, r6, asl #4
	mov	r0, #0
	ldr	r3, .L14814+16
	cmp	r6, #0
	strb	r6, [r4, #137]
	sub	r1, r1, r6, asl #2
	ldr	lr, .L14814+20
	str	r0, [r4, #148]
	ldr	ip, .L14814+24
.LPIC4051:
	add	r2, pc, r2
	ldr	r0, .L14814+28
	add	r2, r2, r1
	ldr	r1, .L14814+32
.LPIC4046:
	add	r3, pc, r3
	ldr	r8, [r2, #16]
	add	r3, r3, #3248
.LPIC4045:
	add	lr, pc, lr
	ldr	r2, .L14814+36
.LPIC4047:
	add	ip, pc, ip
	add	r3, r3, #8
.LPIC4048:
	add	r0, pc, r0
	str	lr, [r4]
.LPIC4049:
	add	r1, pc, r1
	str	ip, [r4, #24]
	str	r3, [r4, #4]
.LPIC4050:
	add	r2, pc, r2
	str	r8, [r4, #140]
	strd	r0, [r4, #28]
	str	r2, [r4, #40]
	beq	.L14811
	cmp	r6, #1
	beq	.L14812
	ldr	r3, .L14814+40
.LPIC4054:
	add	r3, pc, r3
	str	r3, [r4]
.L14801:
	ldr	ip, .L14814+44
	mov	r0, r7
	mov	r1, r4
	ldr	r2, .L14814+48
	ldr	r3, .L14814+52
	ldr	r7, .L14814+56
.LPIC4055:
	add	ip, pc, ip
	ldr	r6, .L14814+60
.LPIC4056:
	add	r2, pc, r2
	ldr	lr, .L14814+64
	str	ip, [r4, #44]
	ldr	ip, .L14814+68
	str	r2, [r4, #108]
	ldr	r8, [r5, r3]
	ldr	r2, .L14814+72
	ldr	r3, .L14814+76
.LPIC4057:
	add	ip, pc, ip
	str	r8, [r4, #100]
	ldr	r7, [r5, r7]
.LPIC4058:
	add	r2, pc, r2
.LPIC4059:
	add	r3, pc, r3
	str	r7, [r4, #104]
	ldr	r6, [r5, r6]
	str	r6, [r4, #120]
	ldr	lr, [r5, lr]
	str	ip, [r4, #128]
	strd	r2, [r4, #112]
	str	lr, [r4, #124]
	bl	usb_add_function(PLT)
	subs	r8, r0, #0
	moveq	r0, r8
	bne	.L14813
.L14798:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14811:
	ldr	r3, .L14814+80
.LPIC4052:
	add	r3, pc, r3
	str	r3, [r4]
	b	.L14801
.L14809:
	ldr	r0, [r0, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L14798
	strb	r0, [r4, #3240]
	b	.L14797
.L14804:
	mov	r4, #16
	b	.L14799
.L14813:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r8
	b	.L14798
.L14812:
	ldr	r3, .L14814+84
.LPIC4053:
	add	r3, pc, r3
	str	r3, [r4]
	b	.L14801
.L14810:
	mvn	r0, #11
	b	.L14798
.L14815:
	.align	2
.L14814:
	.word	.LANCHOR0-(.LPIC4042+8)
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC4044+8)
	.word	kmalloc_caches(GOT)
	.word	.LANCHOR2-(.LPIC4051+8)
	.word	.LANCHOR0-(.LPIC4046+8)
	.word	.LC737-(.LPIC4045+8)
	.word	gser_bind-(.LPIC4047+8)
	.word	gser_unbind-(.LPIC4048+8)
	.word	gser_set_alt-(.LPIC4049+8)
	.word	gser_disable-(.LPIC4050+8)
	.word	.LC740-(.LPIC4054+8)
	.word	gser_setup-(.LPIC4055+8)
	.word	gser_connect-(.LPIC4056+8)
	.word	gser_get_dtr(GOT)
	.word	gser_get_rts(GOT)
	.word	gser_send_carrier_detect(GOT)
	.word	gser_send_ring_indicator(GOT)
	.word	gser_send_modem_ctrl_bits-(.LPIC4057+8)
	.word	gser_disconnect-(.LPIC4058+8)
	.word	gser_send_break-(.LPIC4059+8)
	.word	.LC738-(.LPIC4052+8)
	.word	.LC739-(.LPIC4053+8)
	.fnend
	.size	gser_bind_config, .-gser_bind_config
	.align	2
	.type	serial_function_bind_config, %function
serial_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 96
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r3, .L14901
	mov	r4, r1
	strd	r6, [sp, #8]
	ldr	r7, .L14901+4
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC4061:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #100
	sub	sp, sp, #100
.LPIC4130:
	ldr	r7, [pc, r7]		@ tls_load_dot_plus_eight
	ldr	r8, [r3, #-4068]
	ldr	r2, [r7]
	cmp	r8, #0
	str	r2, [sp, #92]
	beq	.L14817
	mvn	r6, #0
.L14849:
	ldr	r3, .L14901+8
.LPIC4062:
	add	r3, pc, r3
	ldr	r3, [r3, #-4064]
	cmp	r3, #0
	ble	.L14819
	ldr	r8, .L14901+12
	mov	r5, #0
.LPIC4119:
	add	r8, pc, r8
.L14818:
	mov	r0, r4
	uxtb	r1, r5
	bl	gser_bind_config(PLT)
	cmp	r0, #0
	bne	.L14891
	ldr	r3, [r8, #-4064]
	add	r5, r5, #1
	cmp	r3, r5
	bgt	.L14818
	mov	r6, r0
.L14819:
	ldr	r2, [sp, #92]
	mov	r0, r6
	ldr	r3, [r7]
	cmp	r2, r3
	bne	.L14892
	add	sp, sp, #100
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14817:
	ldr	r1, .L14901+16
	add	r2, sp, #28
	mov	ip, #1
	mov	r0, r2
	ldr	r6, .L14901+20
	str	r2, [sp, #4]
	mov	r2, #32
	ldr	r10, .L14901+24
	str	ip, [r3, #-4068]
	ldr	r9, .L14901+28
.LPIC4064:
	add	r1, pc, r1
	sub	r1, r1, #576
.LPIC4066:
	add	r6, pc, r6
	bl	strlcpy(PLT)
	ldr	r0, [sp, #4]
.LPIC4068:
	add	r10, pc, r10
.LPIC4069:
	add	r9, pc, r9
	bl	strim(PLT)
	add	r3, sp, #60
	str	r0, [sp, #20]
	ldr	r1, .L14901+32
	mov	r0, r3
	mov	r2, #32
	str	r3, [sp, #4]
	ldr	r3, .L14901+36
.LPIC4065:
	add	r1, pc, r1
	add	r1, r1, #3216
.LPIC4120:
	add	r3, pc, r3
	add	r1, r1, #4
	str	r3, [sp, #8]
	ldr	r3, .L14901+40
.LPIC4076:
	add	r3, pc, r3
	str	r3, [sp, #12]
	bl	strlcpy(PLT)
	ldr	r0, [sp, #4]
	bl	strim(PLT)
	str	r0, [sp, #24]
.L14820:
	add	r5, sp, #20
	b	.L14821
.L14836:
	mov	r0, r5
	mov	r1, r6
	bl	strsep(PLT)
	cmp	r0, #0
	bne	.L14893
.L14821:
	ldr	r3, [sp, #20]
	cmp	r3, #0
	bne	.L14836
	ldr	r3, .L14901+44
.LPIC4095:
	add	r3, pc, r3
	ldr	r1, [r3, #-4060]
	cmp	r1, #0
	moveq	r6, r1
	bne	.L14894
.L14837:
	ldr	r3, .L14901+48
.LPIC4096:
	add	r3, pc, r3
	ldr	r1, [r3, #-4056]
	cmp	r1, #0
	bne	.L14895
.L14838:
	ldr	r3, .L14901+52
.LPIC4097:
	add	r3, pc, r3
	ldr	r1, [r3, #-4052]
	cmp	r1, #0
	bne	.L14896
.L14839:
	ldr	r5, .L14901+56
.LPIC4098:
	add	r5, pc, r5
	ldr	r0, [r5, #-4048]
	cmp	r0, #0
	bne	.L14897
.L14840:
	ldr	r5, .L14901+60
.LPIC4107:
	add	r5, pc, r5
	ldr	r0, [r5, #-4044]
	cmp	r0, #0
	bne	.L14847
.L14850:
	cmp	r6, #0
	beq	.L14849
.L14848:
	ldr	r1, .L14901+64
	ldr	r0, .L14901+68
.LPIC4116:
	add	r1, pc, r1
	sub	r1, r1, #3296
.LPIC4115:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L14819
.L14893:
	ldr	r3, [sp, #24]
	mov	fp, r0
	cmp	r3, #0
	beq	.L14822
	add	r0, sp, #24
	mov	r1, r6
	bl	strsep(PLT)
	mov	r8, r0
.L14822:
	ldr	r5, [r10, #-4064]
	cmp	r5, #2
	bgt	.L14823
	mov	r0, r9
	mov	r1, fp
	mov	r2, #12
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L14824
	ldr	r0, .L14901+72
	mov	r1, fp
	mov	r2, #12
.LPIC4070:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	bne	.L14898
	ldr	r3, .L14901+76
	mov	r2, r5, asl #2
	mov	r1, r5, asl #4
	rsb	ip, r2, r1
	mov	r0, #2
.LPIC4122:
	add	r3, pc, r3
	add	r3, r3, ip
	str	r5, [r3, #20]
	str	r0, [r3, #16]
.L14831:
	ldr	r0, .L14901+80
	rsb	r2, r2, r1
	ldr	r3, .L14901+84
.LPIC4079:
	add	r0, pc, r0
	ldr	ip, [r0, #-4056]
.LPIC4080:
	add	r3, pc, r3
	add	r3, r3, r2
	add	r2, ip, #1
	str	ip, [r3, #24]
	str	r2, [r0, #-4056]
.L14835:
	ldr	fp, .L14901+88
	add	r5, r5, #1
.LPIC4092:
	add	fp, pc, fp
	ldr	r3, [fp, #-4040]
	str	r5, [fp, #-4064]
	add	r3, r3, #1
	str	r3, [fp, #-4040]
	b	.L14820
.L14824:
	ldr	ip, [sp, #8]
	mov	r2, r5, asl #2
	mov	r1, r5, asl #4
	rsb	r3, r2, r1
	mov	r0, #1
	add	r3, ip, r3
	str	r5, [r3, #20]
	str	r0, [r3, #16]
.L14829:
	rsb	r2, r2, r1
	ldr	r1, [sp, #12]
	ldr	r3, .L14901+92
	ldr	r0, [r1, #-4060]
.LPIC4077:
	add	r3, pc, r3
	add	r3, r3, r2
	add	r2, r0, #1
	str	r0, [r3, #24]
	str	r2, [r1, #-4060]
	b	.L14835
.L14847:
	mov	r1, #0
	bl	ghsuart_data_setup(PLT)
	cmp	r0, #0
	blt	.L14861
	ldr	r3, [r5, #-4040]
	cmp	r3, #0
	beq	.L14850
	ldr	r2, .L14901+96
.LPIC4109:
	add	r2, pc, r2
	ldr	r1, [r2, #16]
	cmp	r1, #9
	streq	r0, [r2, #24]
	addeq	r0, r0, #1
	cmp	r3, #1
	bls	.L14850
	ldr	r2, .L14901+100
.LPIC4111:
	add	r2, pc, r2
	ldr	r1, [r2, #28]
	cmp	r1, #9
	streq	r0, [r2, #36]
	addeq	r0, r0, #1
	cmp	r3, #2
	beq	.L14850
	ldr	r3, .L14901+104
.LPIC4113:
	add	r3, pc, r3
	ldr	r2, [r3, #40]
	cmp	r2, #9
	streq	r0, [r3, #48]
	b	.L14850
.L14897:
	mov	r1, #0
	bl	ghsic_data_setup(PLT)
	cmp	r0, #0
	blt	.L14861
	ldr	r3, [r5, #-4040]
	cmp	r3, #0
	beq	.L14844
	ldr	r2, .L14901+108
.LPIC4101:
	add	r2, pc, r2
	ldr	r1, [r2, #16]
	cmp	r1, #8
	streq	r0, [r2, #24]
	addeq	r0, r0, #1
	cmp	r3, #1
	bls	.L14844
	ldr	r2, .L14901+112
.LPIC4103:
	add	r2, pc, r2
	ldr	r1, [r2, #28]
	cmp	r1, #8
	streq	r0, [r2, #36]
	addeq	r0, r0, #1
	cmp	r3, #2
	beq	.L14844
	ldr	r3, .L14901+116
.LPIC4105:
	add	r3, pc, r3
	ldr	r2, [r3, #40]
	cmp	r2, #8
	streq	r0, [r3, #48]
.L14844:
	ldr	r3, .L14901+120
	mov	r1, #0
.LPIC4100:
	add	r3, pc, r3
	ldr	r0, [r3, #-4048]
	bl	ghsic_ctrl_setup(PLT)
	subs	r6, r0, #0
	bge	.L14840
	b	.L14848
.L14896:
	ldr	r3, [r4, #24]
	ldr	r0, [r3]
	bl	gsmd_setup(PLT)
	mov	r6, r0
	b	.L14839
.L14895:
	ldr	r3, [r4, #24]
	ldr	r0, [r3]
	bl	gsdio_setup(PLT)
	mov	r6, r0
	b	.L14838
.L14894:
	ldr	r3, [r4, #24]
	ldr	r0, [r3]
	bl	gserial_setup(PLT)
	mov	r6, r0
	b	.L14837
.L14898:
	ldr	r0, .L14901+124
	mov	r1, fp
	mov	r2, #12
.LPIC4071:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L14826
	ldr	r0, .L14901+128
	mov	r1, fp
	mov	r2, #12
.LPIC4072:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	bne	.L14899
	mov	r3, #4
.L14827:
	ldr	r2, .L14901+132
	mov	r1, r5, asl #4
	sub	r1, r1, r5, asl #2
.LPIC4126:
	add	r2, pc, r2
	add	r2, r2, r1
	str	r3, [r2, #16]
	str	r5, [r2, #20]
.L14828:
	ldr	r1, .L14901+136
	mov	r2, r3
	ldr	r0, .L14901+140
.LPIC4091:
	add	r1, pc, r1
.LPIC4090:
	add	r0, pc, r0
	sub	r1, r1, #3328
	bl	printk(PLT)
.L14823:
	ldr	r1, .L14901+144
	mov	r2, fp
	mvn	r6, #18
	ldr	r0, .L14901+148
.LPIC4129:
	add	r1, pc, r1
	sub	r1, r1, #3296
.LPIC4128:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L14819
.L14826:
	ldr	r3, .L14901+152
	mov	r2, r5, asl #2
	mov	r1, r5, asl #4
	rsb	ip, r2, r1
	mov	r0, #3
.LPIC4124:
	add	r3, pc, r3
	add	r3, r3, ip
	str	r5, [r3, #20]
	str	r0, [r3, #16]
.L14832:
	ldr	r0, .L14901+156
	rsb	r2, r2, r1
	ldr	r3, .L14901+160
.LPIC4082:
	add	r0, pc, r0
	ldr	ip, [r0, #-4052]
.LPIC4083:
	add	r3, pc, r3
	add	r3, r3, r2
	add	r2, ip, #1
	str	ip, [r3, #24]
	str	r2, [r0, #-4052]
	b	.L14835
.L14861:
	mov	r6, r0
	b	.L14848
.L14891:
	ldr	r1, .L14901+164
	mov	r6, r0
	mov	r2, r5
	ldr	r0, .L14901+168
.LPIC4118:
	add	r1, pc, r1
	sub	r1, r1, #3296
.LPIC4117:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L14819
.L14899:
	ldr	r0, .L14901+172
	mov	r1, fp
	mov	r2, #12
.LPIC4073:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	bne	.L14900
	mov	r3, #5
	b	.L14827
.L14900:
	mov	r0, fp
	bl	str_to_xport.part.61(PLT)
	ldr	ip, .L14901+176
	mov	r2, r5, asl #2
	mov	r1, r5, asl #4
	rsb	lr, r2, r1
	mov	r3, r0
	sub	r0, r0, #1
.LPIC4074:
	add	ip, pc, ip
	add	ip, ip, lr
	str	r3, [ip, #16]
	str	r5, [ip, #20]
	cmp	r0, #8
	addls	pc, pc, r0, asl #2
	b	.L14828
.L14830:
	b	.L14829
	b	.L14831
	b	.L14832
	b	.L14828
	b	.L14828
	b	.L14828
	b	.L14828
	b	.L14833
	b	.L14834
	.p2align 1
.L14834:
	ldr	r2, .L14901+180
.LPIC4088:
	add	r2, pc, r2
	ldr	r3, [r2, #-4044]
	add	r3, r3, #1
	str	r3, [r2, #-4044]
	b	.L14835
.L14833:
	mov	r0, r8
	mov	r1, fp
	bl	ghsic_ctrl_set_port_name(PLT)
	mov	r0, r8
	mov	r1, fp
	bl	ghsic_data_set_port_name(PLT)
	ldr	r3, .L14901+184
.LPIC4085:
	add	r3, pc, r3
	ldr	r2, [r3, #-4048]
	ldr	r5, [r3, #-4064]
	add	r2, r2, #1
	str	r2, [r3, #-4048]
	b	.L14835
.L14892:
	bl	__stack_chk_fail(PLT)
.L14902:
	.align	2
.L14901:
	.word	.LANCHOR9-(.LPIC4061+8)
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC4130+8))
	.word	.LANCHOR9-(.LPIC4062+8)
	.word	.LANCHOR9-(.LPIC4119+8)
	.word	.LANCHOR4-(.LPIC4064+8)
	.word	.LC241-(.LPIC4066+8)
	.word	.LANCHOR9-(.LPIC4068+8)
	.word	.LC0-(.LPIC4069+8)
	.word	.LANCHOR2-(.LPIC4065+8)
	.word	.LANCHOR2-(.LPIC4120+8)
	.word	.LANCHOR9-(.LPIC4076+8)
	.word	.LANCHOR9-(.LPIC4095+8)
	.word	.LANCHOR9-(.LPIC4096+8)
	.word	.LANCHOR9-(.LPIC4097+8)
	.word	.LANCHOR9-(.LPIC4098+8)
	.word	.LANCHOR9-(.LPIC4107+8)
	.word	.LANCHOR8-(.LPIC4116+8)
	.word	.LC742-(.LPIC4115+8)
	.word	.LC1-(.LPIC4070+8)
	.word	.LANCHOR2-(.LPIC4122+8)
	.word	.LANCHOR9-(.LPIC4079+8)
	.word	.LANCHOR2-(.LPIC4080+8)
	.word	.LANCHOR9-(.LPIC4092+8)
	.word	.LANCHOR2-(.LPIC4077+8)
	.word	.LANCHOR2-(.LPIC4109+8)
	.word	.LANCHOR2-(.LPIC4111+8)
	.word	.LANCHOR2-(.LPIC4113+8)
	.word	.LANCHOR2-(.LPIC4101+8)
	.word	.LANCHOR2-(.LPIC4103+8)
	.word	.LANCHOR2-(.LPIC4105+8)
	.word	.LANCHOR9-(.LPIC4100+8)
	.word	.LC2-(.LPIC4071+8)
	.word	.LC3-(.LPIC4072+8)
	.word	.LANCHOR2-(.LPIC4126+8)
	.word	.LANCHOR8-(.LPIC4091+8)
	.word	.LC741-(.LPIC4090+8)
	.word	.LANCHOR8-(.LPIC4129+8)
	.word	.LC744-(.LPIC4128+8)
	.word	.LANCHOR2-(.LPIC4124+8)
	.word	.LANCHOR9-(.LPIC4082+8)
	.word	.LANCHOR2-(.LPIC4083+8)
	.word	.LANCHOR8-(.LPIC4118+8)
	.word	.LC743-(.LPIC4117+8)
	.word	.LC4-(.LPIC4073+8)
	.word	.LANCHOR2-(.LPIC4074+8)
	.word	.LANCHOR9-(.LPIC4088+8)
	.word	.LANCHOR9-(.LPIC4085+8)
	.fnend
	.size	serial_function_bind_config, .-serial_function_bind_config
	.align	2
	.global	acm_bind_config
	.type	acm_bind_config, %function
acm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	ldr	r7, .L14920
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC4131:
	add	r7, pc, r7
	ldrb	r3, [r7, #3264]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L14916
.L14904:
	ldr	r3, .L14920+4
.LPIC4151:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L14911
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L14917
.L14906:
	ldr	r3, .L14920+8
	mov	r0, r6, asl #4
	mov	ip, #0
	ldr	r1, .L14920+12
	strb	r6, [r4, #138]
	add	r2, r6, #1
	sub	r6, r0, r6, asl #2
	str	ip, [r4, #148]
	ldr	lr, .L14920+16
	ldr	ip, .L14920+20
	mov	r0, #208
.LPIC4139:
	add	r3, pc, r3
.LPIC4141:
	add	r1, pc, r1
	add	r3, r3, r6
	ldr	r6, .L14920+24
	ldr	r3, [r3, #52]
.LPIC4140:
	add	lr, pc, lr
	str	r1, [r4, #112]
	ldr	r1, .L14920+28
.LPIC4142:
	add	ip, pc, ip
	str	lr, [r4, #108]
.LPIC4143:
	add	r6, pc, r6
	str	ip, [r4, #116]
	str	r3, [r4, #140]
.LPIC4144:
	add	r1, pc, r1
	str	r6, [r4, #128]
	bl	kasprintf(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L14918
	ldr	r3, .L14920+32
	mov	r0, r5
	mov	r1, r4
	ldr	r6, .L14920+36
	ldr	r5, .L14920+40
	ldr	lr, .L14920+44
	ldr	ip, .L14920+48
.LPIC4145:
	add	r3, pc, r3
	ldr	r2, .L14920+52
	add	r3, r3, #3296
.LPIC4146:
	add	r6, pc, r6
.LPIC4147:
	add	r5, pc, r5
.LPIC4148:
	add	lr, pc, lr
	str	r6, [r4, #24]
.LPIC4149:
	add	ip, pc, ip
	str	r5, [r4, #28]
.LPIC4150:
	add	r2, pc, r2
	str	r3, [r4, #4]
	str	lr, [r4, #32]
	str	ip, [r4, #44]
	str	r2, [r4, #40]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L14919
.L14905:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14916:
	ldr	r0, [r0, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L14905
	ldr	r4, .L14920+56
	uxtb	r3, r0
	ldr	r0, [r5, #24]
	strb	r3, [r7, #3264]
.LPIC4133:
	add	r4, pc, r4
	strb	r3, [r4, #2844]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L14905
	uxtb	r3, r0
	ldr	r0, [r5, #24]
	strb	r3, [r7, #3272]
	strb	r3, [r4, #2864]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L14905
	uxtb	r0, r0
	strb	r0, [r7, #3280]
	strb	r0, [r4, #2835]
	b	.L14904
.L14911:
	mov	r4, #16
	b	.L14906
.L14919:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
	b	.L14905
.L14917:
	mvn	r0, #11
	b	.L14905
.L14918:
	mov	r0, r4
	bl	kfree(PLT)
	mvn	r0, #11
	b	.L14905
.L14921:
	.align	2
.L14920:
	.word	.LANCHOR0-(.LPIC4131+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4151+8))
	.word	.LANCHOR2-(.LPIC4139+8)
	.word	acm_disconnect-(.LPIC4141+8)
	.word	acm_connect-(.LPIC4140+8)
	.word	acm_send_break-(.LPIC4142+8)
	.word	acm_send_modem_ctrl_bits-(.LPIC4143+8)
	.word	.LC745-(.LPIC4144+8)
	.word	.LANCHOR0-(.LPIC4145+8)
	.word	acm_bind-(.LPIC4146+8)
	.word	acm_unbind-(.LPIC4147+8)
	.word	acm_set_alt-(.LPIC4148+8)
	.word	acm_setup-(.LPIC4149+8)
	.word	acm_disable-(.LPIC4150+8)
	.word	.LANCHOR1-(.LPIC4133+8)
	.fnend
	.size	acm_bind_config, .-acm_bind_config
	.align	2
	.type	acm_function_bind_config, %function
acm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r3, .L14981
	strd	r8, [sp, #16]
	ldr	r8, .L14981+4
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r10, [sp, #24]
.LPIC4153:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
.LPIC4198:
	ldr	r8, [pc, r8]		@ tls_load_dot_plus_eight
	ldr	r1, [r3, #-4036]
	ldr	r2, [r8]
	cmp	r1, #0
	str	r2, [sp, #44]
	beq	.L14923
	mvn	r5, #0
.L14943:
	ldr	r3, .L14981+8
.LPIC4154:
	add	r3, pc, r3
	ldr	r3, [r3, #-4032]
	cmp	r3, #0
	ble	.L14925
	ldr	r7, .L14981+12
	mov	r4, #0
.LPIC4187:
	add	r7, pc, r7
.L14924:
	mov	r0, r6
	uxtb	r1, r4
	bl	acm_bind_config(PLT)
	subs	r5, r0, #0
	bne	.L14972
	ldr	r3, [r7, #-4032]
	add	r4, r4, #1
	cmp	r3, r4
	bgt	.L14924
.L14925:
	ldr	r2, [sp, #44]
	mov	r0, r5
	ldr	r3, [r8]
	cmp	r2, r3
	bne	.L14973
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14923:
	mov	ip, #1
	ldr	r1, .L14981+16
	add	r4, sp, #12
	ldr	r7, .L14981+20
	mov	r2, #32
	mov	r0, r4
	str	ip, [r3, #-4036]
	ldr	r3, .L14981+24
	ldr	r10, .L14981+28
	ldr	r9, .L14981+32
.LPIC4156:
	add	r1, pc, r1
	ldr	fp, .L14981+36
	sub	r1, r1, #608
.LPIC4157:
	add	r7, pc, r7
.LPIC4194:
	add	r3, pc, r3
.LPIC4158:
	add	r10, pc, r10
	str	r3, [sp, #4]
.LPIC4159:
	add	r9, pc, r9
	bl	strlcpy(PLT)
.LPIC4166:
	add	fp, pc, fp
	mov	r0, r4
	bl	strim(PLT)
	str	r0, [sp, #8]
.L14926:
	add	r4, sp, #8
	b	.L14928
.L14939:
	mov	r0, r4
	mov	r1, r7
	bl	strsep(PLT)
	subs	r5, r0, #0
	bne	.L14927
	ldr	r0, [sp, #8]
.L14928:
	cmp	r0, #0
	bne	.L14939
	ldr	r3, .L14981+40
.LPIC4180:
	add	r3, pc, r3
	ldr	r1, [r3, #-4028]
	cmp	r1, #0
	moveq	r5, r0
	bne	.L14974
.L14940:
	ldr	r3, .L14981+44
.LPIC4181:
	add	r3, pc, r3
	ldr	r1, [r3, #-4024]
	cmp	r1, #0
	bne	.L14975
.L14941:
	ldr	r3, .L14981+48
.LPIC4182:
	add	r3, pc, r3
	ldr	r1, [r3, #-4020]
	cmp	r1, #0
	bne	.L14976
	cmp	r5, #0
	beq	.L14943
.L14978:
	ldr	r1, .L14981+52
	ldr	r0, .L14981+56
.LPIC4184:
	add	r1, pc, r1
	sub	r1, r1, #3264
.LPIC4183:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14925
.L14927:
	ldr	r4, [r10, #-4032]
	cmp	r4, #2
	bgt	.L14929
	mov	r0, r9
	mov	r1, r5
	mov	r2, #12
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L14930
	ldr	r0, .L14981+60
	mov	r1, r5
	mov	r2, #12
.LPIC4160:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	bne	.L14977
	ldr	r3, .L14981+64
	mov	r1, r4, asl #2
	mov	ip, r4, asl #4
	rsb	r0, r1, ip
	mov	r2, #2
.LPIC4188:
	add	r3, pc, r3
	add	r3, r3, r0
	str	r4, [r3, #56]
	str	r2, [r3, #52]
.L14935:
	ldr	r2, .L14981+68
	rsb	r1, r1, ip
	ldr	r3, .L14981+72
.LPIC4169:
	add	r2, pc, r2
	ldr	r0, [r2, #-4024]
.LPIC4170:
	add	r3, pc, r3
	add	r3, r3, r1
	add	r1, r0, #1
	str	r0, [r3, #60]
	str	r1, [r2, #-4024]
.L14938:
	ldr	r3, .L14981+76
	add	r4, r4, #1
	ldr	r0, [sp, #8]
.LPIC4177:
	add	r3, pc, r3
	ldr	r2, [r3, #-4016]
	str	r4, [r3, #-4032]
	add	r2, r2, #1
	str	r2, [r3, #-4016]
	b	.L14926
.L14976:
	ldr	r3, [r6, #24]
	ldr	r0, [r3]
	bl	gsmd_setup(PLT)
	mov	r5, r0
	cmp	r5, #0
	beq	.L14943
	b	.L14978
.L14930:
	ldr	r0, [sp, #4]
	mov	r1, r4, asl #2
	mov	ip, r4, asl #4
	rsb	r3, r1, ip
	mov	r2, #1
	add	r3, r0, r3
	str	r4, [r3, #56]
	str	r2, [r3, #52]
.L14937:
	ldr	r3, .L14981+80
	rsb	r1, r1, ip
	ldr	r2, [fp, #-4028]
.LPIC4167:
	add	r3, pc, r3
	add	r3, r3, r1
	add	r1, r2, #1
	str	r2, [r3, #60]
	str	r1, [fp, #-4028]
	b	.L14938
.L14975:
	ldr	r3, [r6, #24]
	ldr	r0, [r3]
	bl	gsdio_setup(PLT)
	mov	r5, r0
	b	.L14941
.L14974:
	ldr	r3, [r6, #24]
	ldr	r0, [r3]
	bl	gserial_setup(PLT)
	mov	r5, r0
	b	.L14940
.L14977:
	ldr	r0, .L14981+84
	mov	r1, r5
	mov	r2, #12
.LPIC4161:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L14932
	ldr	r0, .L14981+88
	mov	r1, r5
	mov	r2, #12
.LPIC4162:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	bne	.L14979
	mov	r2, #4
.L14933:
	ldr	r1, .L14981+92
	mov	r0, r4, asl #4
	sub	r0, r0, r4, asl #2
.LPIC4192:
	add	r1, pc, r1
	add	r1, r1, r0
	str	r2, [r1, #52]
	str	r4, [r1, #56]
.L14934:
	ldr	r1, .L14981+96
	ldr	r0, .L14981+100
.LPIC4176:
	add	r1, pc, r1
.LPIC4175:
	add	r0, pc, r0
	sub	r1, r1, #3280
	bl	printk(PLT)
.L14929:
	ldr	r1, .L14981+104
	mov	r2, r5
	mvn	r5, #18
	ldr	r0, .L14981+108
.LPIC4197:
	add	r1, pc, r1
	sub	r1, r1, #3264
.LPIC4196:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14925
.L14932:
	ldr	r3, .L14981+112
	mov	r1, r4, asl #2
	mov	ip, r4, asl #4
	rsb	r0, r1, ip
	mov	r2, #3
.LPIC4190:
	add	r3, pc, r3
	add	r3, r3, r0
	str	r4, [r3, #56]
	str	r2, [r3, #52]
.L14936:
	ldr	r2, .L14981+116
	rsb	r1, r1, ip
	ldr	r3, .L14981+120
.LPIC4172:
	add	r2, pc, r2
	ldr	r0, [r2, #-4020]
.LPIC4173:
	add	r3, pc, r3
	add	r3, r3, r1
	add	r1, r0, #1
	str	r0, [r3, #60]
	str	r1, [r2, #-4020]
	b	.L14938
.L14972:
	ldr	r1, .L14981+124
	mov	r2, r4
	ldr	r0, .L14981+128
.LPIC4186:
	add	r1, pc, r1
	sub	r1, r1, #3264
.LPIC4185:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14925
.L14979:
	ldr	r0, .L14981+132
	mov	r1, r5
	mov	r2, #12
.LPIC4163:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	bne	.L14980
	mov	r2, #5
	b	.L14933
.L14980:
	mov	r0, r5
	bl	str_to_xport.part.61(PLT)
	mov	r2, r0
	ldr	r0, .L14981+136
	mov	r1, r4, asl #2
	mov	ip, r4, asl #4
	cmp	r2, #2
	rsb	lr, r1, ip
.LPIC4164:
	add	r0, pc, r0
	add	r0, r0, lr
	str	r2, [r0, #52]
	str	r4, [r0, #56]
	beq	.L14935
	cmp	r2, #3
	beq	.L14936
	cmp	r2, #1
	bne	.L14934
	b	.L14937
.L14973:
	bl	__stack_chk_fail(PLT)
.L14982:
	.align	2
.L14981:
	.word	.LANCHOR9-(.LPIC4153+8)
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC4198+8))
	.word	.LANCHOR9-(.LPIC4154+8)
	.word	.LANCHOR9-(.LPIC4187+8)
	.word	.LANCHOR4-(.LPIC4156+8)
	.word	.LC241-(.LPIC4157+8)
	.word	.LANCHOR2-(.LPIC4194+8)
	.word	.LANCHOR9-(.LPIC4158+8)
	.word	.LC0-(.LPIC4159+8)
	.word	.LANCHOR9-(.LPIC4166+8)
	.word	.LANCHOR9-(.LPIC4180+8)
	.word	.LANCHOR9-(.LPIC4181+8)
	.word	.LANCHOR9-(.LPIC4182+8)
	.word	.LANCHOR8-(.LPIC4184+8)
	.word	.LC746-(.LPIC4183+8)
	.word	.LC1-(.LPIC4160+8)
	.word	.LANCHOR2-(.LPIC4188+8)
	.word	.LANCHOR9-(.LPIC4169+8)
	.word	.LANCHOR2-(.LPIC4170+8)
	.word	.LANCHOR9-(.LPIC4177+8)
	.word	.LANCHOR2-(.LPIC4167+8)
	.word	.LC2-(.LPIC4161+8)
	.word	.LC3-(.LPIC4162+8)
	.word	.LANCHOR2-(.LPIC4192+8)
	.word	.LANCHOR8-(.LPIC4176+8)
	.word	.LC741-(.LPIC4175+8)
	.word	.LANCHOR8-(.LPIC4197+8)
	.word	.LC748-(.LPIC4196+8)
	.word	.LANCHOR2-(.LPIC4190+8)
	.word	.LANCHOR9-(.LPIC4172+8)
	.word	.LANCHOR2-(.LPIC4173+8)
	.word	.LANCHOR8-(.LPIC4186+8)
	.word	.LC747-(.LPIC4185+8)
	.word	.LC4-(.LPIC4163+8)
	.word	.LANCHOR2-(.LPIC4164+8)
	.fnend
	.size	acm_function_bind_config, .-acm_function_bind_config
	.align	2
	.global	adb_req_put
	.type	adb_req_put, %function
adb_req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r4, r2
	str	r6, [sp, #8]
	add	r6, r0, #80
	mov	r0, r6
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #4]
	add	r2, r4, #36
	mov	r1, r0
	mov	r0, r6
	str	r2, [r5, #4]
	str	r5, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
	.fnend
	.size	adb_req_put, .-adb_req_put
	.align	2
	.type	adb_complete_in, %function
adb_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14991
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	str	lr, [sp, #4]
	ldr	r1, [r1, #44]
.LPIC4199:
	add	r3, pc, r3
	ldr	r4, [r3, #-644]
	cmp	r1, #0
	movne	r3, #1
	mov	r0, r4
	strne	r3, [r4, #96]
	add	r1, r4, #112
	bl	adb_req_put(PLT)
	ldr	lr, [sp, #4]
	add	r0, r4, #132
	mov	r1, #3
	ldr	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	add	sp, sp, #8
	b	__wake_up(PLT)
.L14992:
	.align	2
.L14991:
	.word	.LANCHOR4-(.LPIC4199+8)
	.fnend
	.size	adb_complete_in, .-adb_complete_in
	.align	2
	.type	adb_function_bind, %function
adb_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r10, [sp, #24]
	mov	r10, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldr	r3, [r0, #24]
	.pad #4
	sub	sp, sp, #4
	str	r3, [r1, #76]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L15020
	ldr	r5, .L15025
	ldr	r6, [r4, #76]
.LPIC4200:
	add	r5, pc, r5
	add	r1, r5, #3008
	strb	r0, [r5, #3010]
	add	r1, r1, #12
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L14995
	add	r1, r5, #3024
	str	r4, [r0]
	add	r1, r1, #8
	str	r0, [r4, #84]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	subs	r5, r0, #0
	beq	.L14995
	str	r4, [r5]
	mov	r1, #208
	str	r5, [r4, #88]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L14999
	ldr	r8, .L15025+4
.LPIC4215:
	ldr	r8, [pc, r8]		@ tls_load_dot_plus_eight
	ldr	r0, [r8, #48]
	cmp	r0, #0
	beq	.L14997
	mov	r1, #208
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L15023
.L14998:
	ldr	r3, .L15025+8
	mov	r5, #4
	mov	fp, #16
	ldr	r9, .L15025+12
.LPIC4212:
	add	r3, pc, r3
.LPIC4214:
	add	r9, pc, r9
	str	r3, [r6, #28]
	str	r6, [r4, #144]
.L15002:
	ldr	r7, [r4, #84]
	mov	r1, #208
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	mov	r1, #208
	beq	.L14999
	ldr	r3, [r8, #48]
	subs	r0, r3, #0
	beq	.L15000
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L15024
.L15001:
	str	r9, [r6, #28]
	mov	r2, r6
	mov	r0, r4
	add	r1, r4, #112
	bl	adb_req_put(PLT)
	subs	r5, r5, #1
	bne	.L15002
	ldr	r2, [r10, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L15022
	ldr	r3, .L15025+16
.LPIC4204:
	add	r3, pc, r3
	ldrb	r0, [r3, #3022]	@ zero_extendqisi2
	ldrb	r1, [r3, #3034]	@ zero_extendqisi2
	strb	r0, [r3, #3046]
	strb	r1, [r3, #3058]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L15022
	strb	r0, [r3, #3070]
	mov	r0, r5
	strb	r1, [r3, #3082]
.L15020:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15000:
	str	fp, [r6]
	b	.L15001
.L15022:
	mov	r0, r5
	b	.L15020
.L14997:
	mov	r3, #16
	str	r3, [r6]
	b	.L14998
.L15023:
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L14999:
	ldr	r0, .L15025+20
.LPIC4213:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #0
	b	.L15020
.L14995:
	mvn	r0, #18
	b	.L15020
.L15024:
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L14999
.L15026:
	.align	2
.L15025:
	.word	.LANCHOR1-(.LPIC4200+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4215+8))
	.word	adb_complete_out-(.LPIC4212+8)
	.word	adb_complete_in-(.LPIC4214+8)
	.word	.LANCHOR1-(.LPIC4204+8)
	.word	.LC749-(.LPIC4213+8)
	.fnend
	.size	adb_function_bind, .-adb_function_bind
	.align	2
	.global	adb_req_get
	.type	adb_req_get, %function
adb_req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r4, r0, #80
	mov	r5, r1
	mov	r0, r4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5]
	mov	r1, r0
	cmp	r3, r5
	beq	.L15029
	ldr	r2, [r3, #4]
	mov	lr, #256
	mov	ip, #512
	ldr	r0, [r3]
	sub	r5, r3, #36
	str	r2, [r0, #4]
	str	r0, [r2]
	str	lr, [r3]
	str	ip, [r3, #4]
.L15028:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15029:
	mov	r5, #0
	b	.L15028
	.fnend
	.size	adb_req_get, .-adb_req_get
	.align	2
	.type	adb_function_unbind, %function
adb_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r2, #0
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, #1
	str	r8, [sp, #16]
	mov	r3, r2
	add	r0, r6, #120
	str	lr, [sp, #20]
	str	r2, [r6, #92]
	mov	r2, r1
	str	r1, [r6, #96]
	mov	r1, #3
	bl	__wake_up(PLT)
	ldr	r4, [r6, #144]
	ldr	r5, [r6, #88]
	cmp	r4, #0
	beq	.L15032
	ldr	r0, [r4]
	bl	kfree(PLT)
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L15032:
	add	r7, r6, #112
	b	.L15033
.L15034:
	ldr	r4, [r6, #84]
	ldr	r0, [r5]
	bl	kfree(PLT)
	mov	r1, r5
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
.L15033:
	mov	r0, r6
	mov	r1, r7
	bl	adb_req_get(PLT)
	subs	r5, r0, #0
	bne	.L15034
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	adb_function_unbind, .-adb_function_unbind
	.align	2
	.type	adb_write, %function
adb_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15084
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC4216:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r3, [r3, #-644]
	str	r1, [sp]
	ldr	r4, [r0, #124]
	cmp	r3, #0
	beq	.L15060
	mov	r6, r2
	add	r7, r4, #104
#APP
@ 61 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r7]
	add	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L15076
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #15
.L15071:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15076:
	mov	r3, sp
	mov	fp, r6
	bic	r10, r3, #8128
	bic	r10, r10, #63
.L15059:
	cmp	r6, #0
	beq	.L15044
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L15055
	add	r5, r4, #112
.L15043:
	mov	r0, r4
	mov	r1, r5
	bl	adb_req_get(PLT)
	subs	r3, r0, #0
	beq	.L15077
.L15045:
	cmp	r6, #4096
	ldr	r2, [r10, #8]
	movcc	r8, r6
	movcs	r8, #4096
	ldr	ip, [sp]
#APP
@ 439 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/uaccess.h" 1
	adds r1, ip, r8; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	cmp	r2, #0
	ldr	r0, [r3]
	beq	.L15078
	mov	r1, r8
	str	r3, [sp]
	mvn	fp, #13
	bl	__memzero(PLT)
	ldr	r3, [sp]
.L15052:
	mov	r1, r5
	mov	r2, r3
	mov	r0, r4
	bl	adb_req_put(PLT)
.L15044:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L15079
.L15056:
#APP
@ 83 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, fp
	b	.L15071
.L15077:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L15080
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L15043
.L15055:
	ldr	r3, [r4, #96]
	mvn	fp, #4
	cmp	r3, #0
	beq	.L15056
.L15079:
	add	r0, r4, #120
	mov	r1, #3
	mov	r2, #1
	mov	r3, #0
	bl	__wake_up(PLT)
	b	.L15056
.L15080:
	ldr	r2, .L15084+4
	add	r8, sp, #12
	add	r9, r4, #132
	ldr	r1, [r10, #12]
	str	r3, [sp, #12]
	add	r3, sp, #24
	str	r3, [sp, #24]
.LPIC4218:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #28]
	str	r1, [sp, #16]
	str	r2, [sp, #20]
	b	.L15050
.L15081:
	bl	schedule(PLT)
.L15050:
	mov	r0, r9
	mov	r1, r8
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	mov	r0, r4
	mov	r1, r5
	bl	adb_req_get(PLT)
	subs	r3, r0, #0
	bne	.L15047
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L15048
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L15081
	mov	r0, r9
	mov	r1, r8
	mov	fp, #65024
	bl	finish_wait(PLT)
	movt	fp, 65535
	b	.L15044
.L15047:
	mov	r0, r9
	mov	r1, r8
	str	r3, [sp, #4]
	bl	finish_wait(PLT)
	ldr	r3, [sp, #4]
	b	.L15045
.L15048:
	mov	r0, r9
	mov	r1, r8
	bl	finish_wait(PLT)
	b	.L15059
.L15078:
	mov	r1, ip
	mov	r2, r8
	str	r3, [sp, #4]
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	ldr	r3, [sp, #4]
	bne	.L15082
	str	r8, [r3, #4]
	ldr	r0, [r4, #84]
	mov	r1, r3
	mov	r2, #32
	str	r3, [sp, #4]
	ldr	ip, [r0, #8]
	ldr	ip, [ip, #16]
	blx	ip
	cmp	r0, #0
	ldr	r3, [sp, #4]
	blt	.L15083
	ldr	r3, [sp]
	rsb	r6, r8, r6
	add	r3, r3, r8
	str	r3, [sp]
	b	.L15059
.L15060:
	mvn	r0, #18
	b	.L15071
.L15083:
	mov	r2, #1
	mvn	fp, #4
	str	r2, [r4, #96]
	b	.L15052
.L15082:
	mvn	fp, #13
	b	.L15052
.L15085:
	.align	2
.L15084:
	.word	.LANCHOR4-(.LPIC4216+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC4218+8))
	.fnend
	.size	adb_write, .-adb_write
	.align	2
	.global	rndis_signal_connect
	.type	rndis_signal_connect, %function
rndis_signal_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15093
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0, asl #6
	str	r6, [sp, #8]
	mov	r6, r0, asl #2
	mov	r1, #0
	str	lr, [sp, #12]
	rsb	r4, r6, r5
.LPIC4219:
	add	r3, pc, r3
	add	r2, r3, r4
	add	r3, r3, #3632
	add	r4, r3, r4
	str	r1, [r2, #3648]
	ldr	r3, [r4, #4]
	cmp	r3, r1
	beq	.L15089
	ldr	r2, .L15093+4
.LPIC4225:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	ldr	r0, [r2, #24]
	cmp	r0, r1
	beq	.L15090
	mov	r1, #32
	bl	kmem_cache_alloc(PLT)
	subs	r2, r0, #0
	beq	.L15091
	add	r1, r2, #20
.L15088:
	ldr	r3, .L15093+8
	rsb	r0, r6, r5
	mov	ip, #20
	mov	r5, #0
	str	r1, [r2, #8]
	mov	r1, #11
	str	ip, [r2, #12]
	movt	r1, 16385
	mov	r6, #7
	str	r5, [r2, #16]
.LPIC4222:
	add	r3, pc, r3
	add	lr, r3, r0
	ldr	r0, [lr, #3688]
	add	r3, lr, #3680
	add	r3, r3, #4
	str	r2, [lr, #3688]
	str	r3, [r2]
	str	r0, [r2, #4]
	str	r2, [r0]
	ldr	r3, [r2, #8]
	str	ip, [r3, #4]
	str	r5, [r3, #12]
	str	r5, [r3, #16]
	str	r6, [r3]
	str	r1, [r3, #8]
	ldr	r0, [r4, #48]
	ldr	r3, [r4, #44]
	blx	r3
	mov	r0, r5
.L15087:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15090:
	mov	r1, #36
	mov	r2, #16
	b	.L15088
.L15089:
	movw	r0, #65012
	movt	r0, 65535
	b	.L15087
.L15091:
	mvn	r0, #11
	b	.L15087
.L15094:
	.align	2
.L15093:
	.word	.LANCHOR4-(.LPIC4219+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4225+8))
	.word	.LANCHOR4-(.LPIC4222+8)
	.fnend
	.size	rndis_signal_connect, .-rndis_signal_connect
	.align	2
	.global	rndis_signal_disconnect
	.type	rndis_signal_disconnect, %function
rndis_signal_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15102
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0, asl #6
	str	r6, [sp, #8]
	mov	r6, r0, asl #2
	mov	r1, #1
	str	lr, [sp, #12]
	rsb	r4, r6, r5
.LPIC4226:
	add	r3, pc, r3
	add	r2, r3, r4
	add	r3, r3, #3632
	add	r4, r3, r4
	str	r1, [r2, #3648]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L15098
	ldr	r2, .L15102+4
.LPIC4232:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	ldr	r0, [r2, #24]
	cmp	r0, #0
	beq	.L15099
	mov	r1, #32
	bl	kmem_cache_alloc(PLT)
	subs	r2, r0, #0
	beq	.L15100
	add	r1, r2, #20
.L15097:
	ldr	r3, .L15102+8
	rsb	r0, r6, r5
	mov	ip, #20
	mov	r5, #0
	str	r1, [r2, #8]
	mov	r1, #12
	str	ip, [r2, #12]
	movt	r1, 16385
	mov	r6, #7
	str	r5, [r2, #16]
.LPIC4229:
	add	r3, pc, r3
	add	lr, r3, r0
	ldr	r0, [lr, #3688]
	add	r3, lr, #3680
	add	r3, r3, #4
	str	r2, [lr, #3688]
	str	r3, [r2]
	str	r0, [r2, #4]
	str	r2, [r0]
	ldr	r3, [r2, #8]
	str	ip, [r3, #4]
	str	r5, [r3, #12]
	str	r5, [r3, #16]
	str	r6, [r3]
	str	r1, [r3, #8]
	ldr	r0, [r4, #48]
	ldr	r3, [r4, #44]
	blx	r3
	mov	r0, r5
.L15096:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15099:
	mov	r1, #36
	mov	r2, #16
	b	.L15097
.L15098:
	movw	r0, #65012
	movt	r0, 65535
	b	.L15096
.L15100:
	mvn	r0, #11
	b	.L15096
.L15103:
	.align	2
.L15102:
	.word	.LANCHOR4-(.LPIC4226+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4232+8))
	.word	.LANCHOR4-(.LPIC4229+8)
	.fnend
	.size	rndis_signal_disconnect, .-rndis_signal_disconnect
	.align	2
	.global	rndis_set_host_mac
	.type	rndis_set_host_mac, %function
rndis_set_host_mac:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L15105
	mov	r2, r0, asl #2
	rsb	r0, r2, r0, asl #6
.LPIC4233:
	add	r3, pc, r3
	add	r3, r3, r0
	str	r1, [r3, #3652]
	bx	lr
.L15106:
	.align	2
.L15105:
	.word	.LANCHOR4-(.LPIC4233+8)
	.fnend
	.size	rndis_set_host_mac, .-rndis_set_host_mac
	.align	2
	.global	rndis_register
	.type	rndis_register, %function
rndis_register:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	beq	.L15109
	ldr	r3, .L15112
.LPIC4234:
	add	r3, pc, r3
	ldrb	r2, [r3, #3633]	@ zero_extendqisi2
	cmp	r2, #0
	mvnne	r0, #18
	beq	.L15111
.L15108:
	bx	lr
.L15111:
	mov	ip, #1
	str	r0, [r3, #3676]
	mov	r0, r2
	str	r1, [r3, #3680]
	strb	r2, [r3, #3669]
	strb	ip, [r3, #3633]
	strb	ip, [r3, #3668]
	bx	lr
.L15109:
	mvn	r0, #21
	b	.L15108
.L15113:
	.align	2
.L15112:
	.word	.LANCHOR4-(.LPIC4234+8)
	.fnend
	.size	rndis_register, .-rndis_register
	.align	2
	.global	rndis_deregister
	.type	rndis_deregister, %function
rndis_deregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	bgt	.L15114
	ldr	r3, .L15116
	mov	r2, r0, asl #6
	mov	r1, #0
	sub	r0, r2, r0, asl #2
.LPIC4240:
	add	r3, pc, r3
	add	r0, r3, r0
	strb	r1, [r0, #3633]
.L15114:
	bx	lr
.L15117:
	.align	2
.L15116:
	.word	.LANCHOR4-(.LPIC4240+8)
	.fnend
	.size	rndis_deregister, .-rndis_deregister
	.align	2
	.global	rndis_set_param_dev
	.type	rndis_set_param_dev, %function
rndis_set_param_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L15120
	cmp	r0, #0
	mov	r3, r0
	bne	.L15121
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r4, .L15124
	str	lr, [sp, #4]
	ldr	lr, .L15124+4
	ldr	ip, .L15124+8
.LPIC4245:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
.LPIC4244:
	ldr	lr, [pc, lr]		@ tls_load_dot_plus_eight
.LPIC4241:
	add	ip, pc, ip
	str	r3, [r4]
	str	r1, [ip, #3660]
	str	r2, [ip, #3656]
	str	r3, [lr]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L15121:
	mvn	r0, #0
	bx	lr
.L15120:
	mvn	r0, #21
	bx	lr
.L15125:
	.align	2
.L15124:
	.word	rndis_ul_max_xfer_size_rcvd(GOT_PREL)+(.-(.LPIC4245+8))
	.word	rndis_ul_max_pkt_per_xfer_rcvd(GOT_PREL)+(.-(.LPIC4244+8))
	.word	.LANCHOR4-(.LPIC4241+8)
	.fnend
	.size	rndis_set_param_dev, .-rndis_set_param_dev
	.align	2
	.global	rndis_set_param_vendor
	.type	rndis_set_param_vendor, %function
rndis_set_param_vendor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	adds	r0, r0, #0
	movne	r0, #1
	cmp	r2, #0
	orreq	r0, r0, #1
	cmp	r0, #0
	bne	.L15128
	ldr	r3, .L15129
.LPIC4246:
	add	r3, pc, r3
	str	r1, [r3, #3664]
	str	r2, [r3, #3672]
.L15127:
	bx	lr
.L15128:
	mvn	r0, #0
	b	.L15127
.L15130:
	.align	2
.L15129:
	.word	.LANCHOR4-(.LPIC4246+8)
	.fnend
	.size	rndis_set_param_vendor, .-rndis_set_param_vendor
	.align	2
	.global	rndis_set_param_medium
	.type	rndis_set_param_medium, %function
rndis_set_param_medium:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	bne	.L15133
	ldr	r3, .L15134
.LPIC4248:
	add	r3, pc, r3
	str	r1, [r3, #3640]
	str	r2, [r3, #3644]
.L15132:
	bx	lr
.L15133:
	mvn	r0, #0
	b	.L15132
.L15135:
	.align	2
.L15134:
	.word	.LANCHOR4-(.LPIC4248+8)
	.fnend
	.size	rndis_set_param_medium, .-rndis_set_param_medium
	.align	2
	.type	rndis_close, %function
rndis_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	mov	r2, r1
	ldrb	r0, [r0, #156]	@ zero_extendqisi2
	bl	rndis_set_param_medium(PLT)
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #156]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	rndis_signal_disconnect(PLT)
	.fnend
	.size	rndis_close, .-rndis_close
	.align	2
	.type	rndis_open, %function
rndis_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #20]
	ldrb	r0, [r0, #156]	@ zero_extendqisi2
	ldr	r3, [r3, #24]
	ldr	r3, [r3]
	ldr	r2, [r3, #20]
	cmp	r2, #4
	bls	.L15139
	ldr	r3, [r3, #16]
	cmp	r3, #5
	beq	.L15147
.L15141:
	cmp	r3, #3
	movne	r2, #97280
	moveq	r2, #4259840
.L15140:
	mov	r1, #0
	bl	rndis_set_param_medium(PLT)
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #156]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	rndis_signal_connect(PLT)
.L15139:
	cmp	r2, #2
	movls	r2, #97280
	bls	.L15140
	ldr	r3, [r3, #16]
	b	.L15141
.L15147:
	mov	r2, #8519680
	b	.L15140
	.fnend
	.size	rndis_open, .-rndis_open
	.align	2
	.type	rndis_qc_close, %function
rndis_qc_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	mov	r2, r1
	ldrb	r0, [r0, #136]	@ zero_extendqisi2
	bl	rndis_set_param_medium(PLT)
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #136]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	rndis_signal_disconnect(PLT)
	.fnend
	.size	rndis_qc_close, .-rndis_qc_close
	.align	2
	.type	rndis_qc_open, %function
rndis_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #20]
	ldrb	r0, [r0, #136]	@ zero_extendqisi2
	ldr	r3, [r3, #24]
	ldr	r3, [r3]
	ldr	r2, [r3, #20]
	cmp	r2, #4
	bls	.L15151
	ldr	r3, [r3, #16]
	cmp	r3, #5
	beq	.L15159
.L15153:
	cmp	r3, #3
	movne	r2, #97280
	moveq	r2, #4259840
.L15152:
	mov	r1, #0
	bl	rndis_set_param_medium(PLT)
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #136]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	rndis_signal_connect(PLT)
.L15151:
	cmp	r2, #2
	movls	r2, #97280
	bls	.L15152
	ldr	r3, [r3, #16]
	b	.L15153
.L15159:
	mov	r2, #8519680
	b	.L15152
	.fnend
	.size	rndis_qc_open, .-rndis_qc_open
	.align	2
	.global	rndis_set_max_pkt_xfer
	.type	rndis_set_max_pkt_xfer, %function
rndis_set_max_pkt_xfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L15161
	mov	r2, r0, asl #2
	rsb	r0, r2, r0, asl #6
.LPIC4250:
	add	r3, pc, r3
	add	r3, r3, r0
	strb	r1, [r3, #3668]
	bx	lr
.L15162:
	.align	2
.L15161:
	.word	.LANCHOR4-(.LPIC4250+8)
	.fnend
	.size	rndis_set_max_pkt_xfer, .-rndis_set_max_pkt_xfer
	.align	2
	.type	rndis_bind, %function
rndis_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r7, [r0, #24]
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L15164
	ldr	r5, .L15208
	uxtb	r4, r4
	mov	r0, r8
	mov	r1, r6
	strb	r4, [r6, #140]
.LPIC4251:
	add	r5, pc, r5
	strb	r4, [r5, #3094]
	strb	r4, [r5, #3102]
	strb	r4, [r5, #3115]
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L15164
	uxtb	r4, r4
	add	r1, r5, #3120
	add	r1, r1, #12
	strb	r4, [r6, #141]
	strb	r4, [r5, #3122]
	strb	r4, [r5, #3116]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L15166
	add	r1, r5, #3136
	str	r0, [r6, #80]
	add	r1, r1, #8
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L15166
	add	r1, r5, #3152
	str	r0, [r6, #84]
	add	r1, r1, #4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L15166
	str	r3, [r6, #160]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r4, r0
	str	r0, [r6, #164]
	beq	.L15169
	ldr	r3, .L15208+4
.LPIC4278:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L15168
	mov	r1, #208
	bl	kmem_cache_alloc(PLT)
.L15168:
	str	r0, [r4]
	ldr	r2, [r6, #164]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L15169
	mov	r1, #8
	ldr	r5, .L15208+8
	mov	r0, r6
	ldr	r3, .L15208+12
	str	r1, [r2, #4]
	ldr	lr, [r6, #164]
	ldr	ip, .L15208+16
.LPIC4261:
	add	r5, pc, r5
	ldrb	r4, [r5, #3146]	@ zero_extendqisi2
.LPIC4270:
	add	r3, pc, r3
	str	r6, [lr, #32]
	ldr	r9, [r6, #164]
	add	r1, r3, #3296
	ldrb	r8, [r5, #3134]	@ zero_extendqisi2
.LPIC4260:
	add	ip, pc, ip
	add	r2, r3, #3344
	ldrb	lr, [r5, #3158]	@ zero_extendqisi2
	add	r1, r1, #8
	add	r2, r2, #4
	add	r3, r3, #3392
	strb	r4, [r5, #3182]
	str	ip, [r9, #28]
	strb	r4, [r5, #3218]
	strb	r8, [r5, #3170]
	strb	r8, [r5, #3206]
	strb	lr, [r5, #3194]
	strb	lr, [r5, #3230]
	bl	usb_assign_descriptors(PLT)
	subs	r4, r0, #0
	beq	.L15206
.L15164:
	mov	r0, r6
	bl	usb_free_all_descriptors(PLT)
	ldr	r3, [r6, #164]
	cmp	r3, #0
	beq	.L15173
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r6, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L15173:
	ldr	r3, [r6, #160]
	ldr	r1, .L15208+20
	cmp	r3, #0
	movne	r2, #0
.LPIC4277:
	add	r1, pc, r1
	strne	r2, [r3]
	ldr	r3, [r6, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r6, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r4
	ldr	r2, [r6]
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r0, r4
.L15171:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15166:
	mvn	r4, #18
	b	.L15164
.L15169:
	mvn	r4, #11
	b	.L15164
.L15206:
	ldr	r2, .L15208+24
	mov	r1, r6
	ldr	r3, .L15208+28
	ldr	r0, .L15208+32
.LPIC4273:
	add	r2, pc, r2
.LPIC4274:
	add	r3, pc, r3
.LPIC4275:
	add	r0, pc, r0
	strd	r2, [r6, #128]
	bl	rndis_register(PLT)
	subs	r4, r0, #0
	blt	.L15164
	mov	r1, #0
	str	r4, [r6, #156]
	uxtb	r0, r4
	mov	r2, r1
	bl	rndis_set_param_medium(PLT)
	ldr	r0, [r6, #156]
	add	r1, r6, #142
	bl	rndis_set_host_mac(PLT)
	ldrb	r1, [r5, #3240]	@ zero_extendqisi2
	ldrb	r0, [r6, #156]	@ zero_extendqisi2
	bl	rndis_set_max_pkt_xfer(PLT)
	ldr	r2, [r6, #152]
	cmp	r2, #0
	beq	.L15172
	ldr	r1, [r6, #148]
	cmp	r1, #0
	bne	.L15207
.L15172:
	mov	r0, #0
	b	.L15171
.L15207:
	ldrb	r0, [r6, #156]	@ zero_extendqisi2
	bl	rndis_set_param_vendor(PLT)
	cmp	r0, #0
	bne	.L15164
	b	.L15172
.L15209:
	.align	2
.L15208:
	.word	.LANCHOR1-(.LPIC4251+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4278+8))
	.word	.LANCHOR1-(.LPIC4261+8)
	.word	.LANCHOR0-(.LPIC4270+8)
	.word	rndis_response_complete-(.LPIC4260+8)
	.word	.LC503-(.LPIC4277+8)
	.word	rndis_open-(.LPIC4273+8)
	.word	rndis_close-(.LPIC4274+8)
	.word	rndis_response_available-(.LPIC4275+8)
	.fnend
	.size	rndis_bind, .-rndis_bind
	.align	2
	.global	rndis_set_pkt_alignment_factor
	.type	rndis_set_pkt_alignment_factor, %function
rndis_set_pkt_alignment_factor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L15211
	mov	r2, r0, asl #2
	rsb	r0, r2, r0, asl #6
.LPIC4279:
	add	r3, pc, r3
	add	r3, r3, r0
	strb	r1, [r3, #3669]
	bx	lr
.L15212:
	.align	2
.L15211:
	.word	.LANCHOR4-(.LPIC4279+8)
	.fnend
	.size	rndis_set_pkt_alignment_factor, .-rndis_set_pkt_alignment_factor
	.align	2
	.type	rndis_qc_bind, %function
rndis_qc_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	str	r8, [sp, #16]
	mov	r8, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	ldr	r7, [r0, #24]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L15214
	ldr	r6, .L15273
	uxtb	r5, r5
	mov	r0, r8
	mov	r1, r4
	strb	r5, [r4, #112]
.LPIC4280:
	add	r6, pc, r6
	strb	r5, [r6, #3246]
	strb	r5, [r6, #3254]
	strb	r5, [r6, #3267]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L15214
	uxtb	r5, r5
	add	r1, r6, #3280
	add	r1, r1, #4
	strb	r5, [r4, #113]
	strb	r5, [r6, #3274]
	strb	r5, [r6, #3268]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L15216
	str	r0, [r4, #80]
	add	r1, r6, #3296
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L15216
	add	r1, r6, #3296
	str	r0, [r4, #84]
	add	r1, r1, #12
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L15216
	str	r3, [r4, #148]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4, #152]
	beq	.L15219
	ldr	r3, .L15273+4
.LPIC4310:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L15218
	mov	r1, #208
	bl	kmem_cache_alloc(PLT)
.L15218:
	str	r0, [r5]
	ldr	r2, [r4, #152]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L15219
	mov	r1, #8
	ldr	r6, .L15273+8
	ldr	r3, .L15273+12
	str	r1, [r2, #4]
	ldr	r2, [r4, #152]
.LPIC4290:
	add	r6, pc, r6
.LPIC4289:
	add	r3, pc, r3
	add	r0, r6, #3440
	str	r4, [r2, #32]
	ldr	r2, [r4, #152]
	add	r0, r0, r1
	str	r3, [r2, #28]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L15219
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L15272
.L15220:
	ldr	r2, .L15273+16
	mov	r1, r4
	ldr	r3, .L15273+20
	ldr	r0, .L15273+24
.LPIC4298:
	add	r2, pc, r2
.LPIC4299:
	add	r3, pc, r3
.LPIC4300:
	add	r0, pc, r0
	strd	r2, [r4, #104]
	bl	rndis_register(PLT)
	subs	r5, r0, #0
	blt	.L15214
	mov	r1, #0
	str	r5, [r4, #136]
	uxtb	r0, r5
	mov	r2, r1
	bl	rndis_set_param_medium(PLT)
	ldr	r0, [r4, #136]
	add	r1, r4, #114
	bl	rndis_set_host_mac(PLT)
	ldrb	r0, [r4, #136]	@ zero_extendqisi2
	ldr	r1, [r4, #120]
	ldr	r2, [r4, #132]
	bl	rndis_set_param_vendor(PLT)
	subs	r6, r0, #0
	bne	.L15214
	ldrb	r0, [r4, #136]	@ zero_extendqisi2
	ldrb	r1, [r4, #124]	@ zero_extendqisi2
	bl	rndis_set_max_pkt_xfer(PLT)
	ldrb	r0, [r4, #136]	@ zero_extendqisi2
	mov	r1, #2
	bl	rndis_set_pkt_alignment_factor(PLT)
.L15224:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15272:
	ldr	r5, .L15273+28
	add	r0, r6, #3488
	add	r0, r0, #4
.LPIC4291:
	add	r5, pc, r5
	ldrb	r1, [r5, #3286]	@ zero_extendqisi2
	ldrb	r2, [r5, #3298]	@ zero_extendqisi2
	ldrb	r3, [r5, #3310]	@ zero_extendqisi2
	strb	r1, [r5, #3322]
	strb	r2, [r5, #3334]
	strb	r3, [r5, #3346]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L15219
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L15220
	ldrb	r3, [r5, #3310]	@ zero_extendqisi2
	add	r0, r6, #3536
	ldrb	r1, [r5, #3286]	@ zero_extendqisi2
	ldrb	r2, [r5, #3298]	@ zero_extendqisi2
	strb	r3, [r5, #3382]
	strb	r1, [r5, #3358]
	strb	r2, [r5, #3370]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #16]
	ldreq	r3, [r8, #24]
	mvneq	r5, #11
	ldreq	r3, [r3]
	ldreq	r3, [r3, #20]
	bne	.L15220
.L15223:
	cmp	r3, #2
	bhi	.L15232
.L15226:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L15227
	bl	kfree(PLT)
.L15227:
	ldr	r3, [r4, #152]
	cmp	r3, #0
	beq	.L15228
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L15228:
	ldr	r3, [r4, #148]
	mov	r6, r5
	ldr	r1, .L15273+32
	ldr	r0, .L15273+36
	cmp	r3, #0
	movne	r2, #0
.LPIC4309:
	add	r1, pc, r1
	sub	r1, r1, #3232
.LPIC4308:
	add	r0, pc, r0
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	sub	r1, r1, #4
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	mov	r3, r5
	ldr	r2, [r4]
	bl	printk(PLT)
	b	.L15224
.L15219:
	mvn	r5, #11
.L15214:
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L15223
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L15232
	bl	kfree(PLT)
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L15223
.L15232:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L15226
	bl	kfree(PLT)
	b	.L15226
.L15216:
	mvn	r5, #18
	b	.L15214
.L15274:
	.align	2
.L15273:
	.word	.LANCHOR1-(.LPIC4280+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4310+8))
	.word	.LANCHOR0-(.LPIC4290+8)
	.word	rndis_qc_response_complete-(.LPIC4289+8)
	.word	rndis_qc_open-(.LPIC4298+8)
	.word	rndis_qc_close-(.LPIC4299+8)
	.word	rndis_qc_response_available-(.LPIC4300+8)
	.word	.LANCHOR1-(.LPIC4291+8)
	.word	.LANCHOR8-(.LPIC4309+8)
	.word	.LC490-(.LPIC4308+8)
	.fnend
	.size	rndis_qc_bind, .-rndis_qc_bind
	.align	2
	.global	rndis_add_hdr
	.type	rndis_add_hdr, %function
rndis_add_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L15275
	mov	r1, #44
	bl	skb_push(PLT)
	mov	r1, #44
	mov	r4, r0
	bl	__memzero(PLT)
	mov	r3, #0
	mov	r1, #1
	mov	r2, #36
	strb	r1, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r1, [r5, #80]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	strb	r3, [r4, #11]
	str	r1, [r4, #4]	@ unaligned
	strb	r2, [r4, #8]
	ldr	r3, [r5, #80]
	sub	r3, r3, #44
	str	r3, [r4, #12]	@ unaligned
.L15275:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_add_hdr, .-rndis_add_hdr
	.align	2
	.type	rndis_add_header, %function
rndis_add_header:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r3, [r0, #116]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15282
	ldr	r4, [r0, #136]
	cmp	r4, #0
	beq	.L15283
	mov	r0, r4
	mov	r1, #44
	bl	__memzero(PLT)
	mov	r3, #0
	mov	r2, #1
	mov	r1, #36
	mov	r0, r5
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	strb	r2, [r4]
	ldr	r2, [r5, #80]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	strb	r3, [r4, #11]
	add	r2, r2, #44
	strb	r1, [r4, #8]
	str	r2, [r4, #4]	@ unaligned
	ldr	r3, [r5, #80]
	str	r3, [r4, #12]	@ unaligned
.L15284:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15282:
	mov	r0, r1
	mov	r1, #44
	bl	skb_realloc_headroom(PLT)
	subs	r6, r0, #0
	beq	.L15285
	bl	rndis_add_hdr(PLT)
.L15285:
	mov	r0, r5
	bl	dev_kfree_skb_any(PLT)
	mov	r0, r6
	b	.L15284
.L15283:
	ldr	r0, .L15290
.LPIC4311:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	b	.L15284
.L15291:
	.align	2
.L15290:
	.word	.LC750-(.LPIC4311+8)
	.fnend
	.size	rndis_add_header, .-rndis_add_header
	.align	2
	.type	rndis_qc_add_header, %function
rndis_qc_add_header:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	mov	r1, #44
	mov	r0, r4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	skb_realloc_headroom(PLT)
	subs	r5, r0, #0
	beq	.L15293
	bl	rndis_add_hdr(PLT)
.L15293:
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_qc_add_header, .-rndis_qc_add_header
	.align	2
	.global	rndis_free_response
	.type	rndis_free_response, %function
rndis_free_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L15309
	mov	r2, r0, asl #2
	strd	r6, [sp, #8]
	rsb	r0, r2, r0, asl #6
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC4312:
	add	r5, pc, r5
	add	r3, r5, r0
	mov	r5, r3
	ldr	r3, [r3, #3684]
	add	r5, r5, #3680
	add	r5, r5, #4
	cmp	r3, r5
	ldr	r4, [r3]
	beq	.L15298
	mov	r6, r1
	mov	r8, #256
	mov	r7, #512
	b	.L15301
.L15303:
	mov	r4, r2
.L15301:
	cmp	r3, #0
	beq	.L15300
	ldr	r2, [r3, #8]
	cmp	r2, r6
	beq	.L15308
.L15300:
	cmp	r5, r4
	ldr	r2, [r4]
	mov	r3, r4
	bne	.L15303
.L15298:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15308:
	ldr	r2, [r3, #4]
	mov	r0, r3
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	bl	kfree(PLT)
	b	.L15300
.L15310:
	.align	2
.L15309:
	.word	.LANCHOR4-(.LPIC4312+8)
	.fnend
	.size	rndis_free_response, .-rndis_free_response
	.align	2
	.global	rndis_get_next_response
	.type	rndis_get_next_response, %function
rndis_get_next_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #0
	beq	.L15317
	ldr	r2, .L15323
	mov	r3, r0, asl #6
	sub	r0, r3, r0, asl #2
.LPIC4314:
	add	r2, pc, r2
	add	r3, r2, r0
	ldr	r0, [r3, #3684]
	add	r2, r3, #3680
	add	r2, r2, #4
	cmp	r0, r2
	ldr	r3, [r0]
	beq	.L15318
	ldr	ip, [r0, #16]
	cmp	ip, #0
	bne	.L15315
	b	.L15322
.L15316:
	ldr	ip, [r3, #16]
	cmp	ip, #0
	beq	.L15313
	mov	r3, r0
.L15315:
	cmp	r2, r3
	ldr	r0, [r3]
	bne	.L15316
.L15318:
	mov	r0, #0
.L15312:
	bx	lr
.L15322:
	mov	r3, r0
.L15313:
	ldr	r2, [r3, #12]
	mov	r0, #1
	str	r0, [r3, #16]
	str	r2, [r1]
	ldr	r0, [r3, #8]
	bx	lr
.L15317:
	mov	r0, r1
	b	.L15312
.L15324:
	.align	2
.L15323:
	.word	.LANCHOR4-(.LPIC4314+8)
	.fnend
	.size	rndis_get_next_response, .-rndis_get_next_response
	.align	2
	.type	rndis_setup, %function
rndis_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrb	r0, [r1]	@ zero_extendqisi2
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	ldrh	ip, [r1, #4]	@ unaligned
	ldr	r6, [r2, #24]
	ldrh	r8, [r1, #6]	@ unaligned
	orr	r3, r3, r0, asl #8
	ldrh	r2, [r1, #2]	@ unaligned
	cmp	r3, #8448
	ldr	r4, [r6, #4]
	beq	.L15327
	movw	r1, #41217
	cmp	r3, r1
	beq	.L15328
.L15330:
	mvn	r5, #94
.L15336:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15328:
	cmp	r2, #0
	bne	.L15330
	ldrb	r3, [r7, #140]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L15330
	ldr	r0, [r7, #156]
	add	r1, sp, #4
	bl	rndis_get_next_response(PLT)
	subs	r5, r0, #0
	beq	.L15330
	mov	r1, r5
	ldr	r2, [sp, #4]
	ldr	r0, [r4]
	bl	memcpy(PLT)
	ldr	r3, .L15339
	str	r7, [r4, #32]
	mov	r1, r5
.LPIC4317:
	add	r3, pc, r3
	str	r3, [r4, #28]
	ldr	r0, [r7, #156]
	bl	rndis_free_response(PLT)
	ldr	r5, [sp, #4]
	cmp	r5, #0
	blt	.L15336
	cmp	r5, r8
	movge	r7, #0
	movlt	r7, #1
	b	.L15329
.L15327:
	cmp	r2, #0
	bne	.L15330
	ldrb	r3, [r7, #140]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L15330
	ldr	r3, .L15339+4
	str	r7, [r4, #32]
	mov	r5, r8
	mov	r7, r2
.LPIC4316:
	add	r3, pc, r3
	str	r3, [r4, #28]
.L15329:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r5, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfi	r3, r7, #1, #1
	strb	r3, [r4, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L15336
	ldr	r0, [r6]
	mov	r2, r5
	ldr	r1, .L15339+8
	add	r0, r0, #32
.LPIC4318:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L15336
.L15340:
	.align	2
.L15339:
	.word	rndis_response_complete-(.LPIC4317+8)
	.word	rndis_command_complete-(.LPIC4316+8)
	.word	.LC751-(.LPIC4318+8)
	.fnend
	.size	rndis_setup, .-rndis_setup
	.align	2
	.global	rndis_uninit
	.type	rndis_uninit, %function
rndis_uninit:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxgt	lr
	ldr	r3, .L15347
	mov	r2, r0, asl #6
	mov	r1, #0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r0
	sub	r2, r2, r0, asl #2
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	add	r5, sp, #4
.LPIC4319:
	add	r3, pc, r3
	add	r3, r3, r2
	str	r1, [r3, #3636]
	b	.L15343
.L15344:
	bl	rndis_free_response(PLT)
.L15343:
	mov	r1, r5
	mov	r0, r4
	bl	rndis_get_next_response(PLT)
	subs	r1, r0, #0
	mov	r0, r4
	bne	.L15344
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L15348:
	.align	2
.L15347:
	.word	.LANCHOR4-(.LPIC4319+8)
	.fnend
	.size	rndis_uninit, .-rndis_uninit
	.align	2
	.type	rndis_qc_setup, %function
rndis_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrb	r0, [r1]	@ zero_extendqisi2
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	ldrh	ip, [r1, #4]	@ unaligned
	ldr	r6, [r2, #24]
	ldrh	r7, [r1, #6]	@ unaligned
	orr	r3, r3, r0, asl #8
	ldrh	r2, [r1, #2]	@ unaligned
	cmp	r3, #8448
	ldr	r4, [r6, #4]
	beq	.L15351
	movw	r1, #41217
	cmp	r3, r1
	beq	.L15352
.L15354:
	mvn	r8, #94
.L15360:
	mov	r0, r8
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15352:
	cmp	r2, #0
	bne	.L15354
	ldrb	r3, [r5, #112]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L15354
	ldr	r0, [r5, #136]
	add	r1, sp, #4
	bl	rndis_get_next_response(PLT)
	subs	r8, r0, #0
	beq	.L15354
	mov	r1, r8
	ldr	r2, [sp, #4]
	ldr	r0, [r4]
	bl	memcpy(PLT)
	ldr	r3, .L15363
	mov	r1, r8
.LPIC4321:
	add	r3, pc, r3
	str	r3, [r4, #28]
	ldr	r0, [r5, #136]
	bl	rndis_free_response(PLT)
	ldr	r8, [sp, #4]
	cmp	r8, #0
	blt	.L15360
	cmp	r8, r7
	movge	r0, #0
	movlt	r0, #1
	b	.L15353
.L15351:
	cmp	r2, #0
	bne	.L15354
	ldrb	r3, [r5, #112]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L15354
	ldr	r1, .L15363+4
	mov	r8, r7
	mov	r0, r2
.LPIC4320:
	add	r1, pc, r1
	str	r1, [r4, #28]
.L15353:
	ldrb	ip, [r4, #26]	@ zero_extendqisi2
	str	r8, [r4, #4]
	mov	r1, r4
	str	r5, [r4, #32]
	mov	r2, #32
	bfi	ip, r0, #1, #1
	strb	ip, [r4, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r8, r0, #0
	bge	.L15360
	ldr	r1, .L15363+8
	mov	r2, r8
	ldr	r0, .L15363+12
.LPIC4323:
	add	r1, pc, r1
	sub	r1, r1, #3216
.LPIC4322:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L15360
.L15364:
	.align	2
.L15363:
	.word	rndis_qc_response_complete-(.LPIC4321+8)
	.word	rndis_qc_command_complete-(.LPIC4320+8)
	.word	.LANCHOR8-(.LPIC4323+8)
	.word	.LC752-(.LPIC4322+8)
	.fnend
	.size	rndis_qc_setup, .-rndis_qc_setup
	.align	2
	.global	rndis_msg_parser
	.type	rndis_msg_parser, %function
rndis_msg_parser:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	ldr	r5, .L15442
	cmp	r1, #0
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
.LPIC4326:
	add	r5, pc, r5
	beq	.L15404
	ldrb	r3, [r1, #2]	@ zero_extendqisi2
	cmp	r0, #0
	ldrb	ip, [r1, #1]	@ zero_extendqisi2
	ldrb	r0, [r1]	@ zero_extendqisi2
	ldrb	r2, [r1, #3]	@ zero_extendqisi2
	mov	r3, r3, asl #16
	ldrb	lr, [r1, #4]	@ zero_extendqisi2
	ldrb	r4, [r1, #5]	@ zero_extendqisi2
	orr	r3, r3, ip, asl #8
	ldrb	r7, [r1, #7]	@ zero_extendqisi2
	ldrb	ip, [r1, #6]	@ zero_extendqisi2
	orr	r3, r3, r0
	orr	r2, r3, r2, asl #24
	bne	.L15377
	sub	r3, r2, #2
	mov	r6, r1
	cmp	r3, #6
	addls	pc, pc, r3, asl #2
	b	.L15369
.L15371:
	b	.L15370
	b	.L15372
	b	.L15373
	b	.L15374
	b	.L15415
	b	.L15369
	b	.L15376
	.p2align 1
.L15415:
	add	r4, sp, #4
	b	.L15375
.L15392:
	bl	rndis_free_response(PLT)
.L15375:
	mov	r1, r4
	mov	r0, #0
	bl	rndis_get_next_response(PLT)
	subs	r1, r0, #0
	mov	r0, #0
	bne	.L15392
	ldr	r3, .L15442+4
	ldr	r3, [r5, r3]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L15403
	mov	r1, #32
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	beq	.L15404
	add	r2, r0, #20
.L15393:
	ldr	r3, .L15442+8
	mov	r1, #16
	mov	r4, #0
	str	r2, [r0, #8]
	mov	lr, #1
	mov	r5, #-2147483642
	str	r1, [r0, #12]
	str	r4, [r0, #16]
.LPIC4364:
	add	r3, pc, r3
	ldr	ip, [r3, #3688]
	add	r2, r3, #3680
	add	r2, r2, #4
	str	r0, [r3, #3688]
	stmia	r0, {r2, ip}
	str	r0, [ip]
	ldr	r2, [r0, #8]
	stmib	r2, {r1, r4}
	str	r5, [r2]
	str	lr, [r2, #12]
	ldr	r0, [r3, #3680]
	ldr	r2, [r3, #3676]
	blx	r2
	mov	r0, r4
	b	.L15435
.L15376:
	ldr	r3, .L15442+4
	ldr	r3, [r5, r3]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L15405
	mov	r1, #32
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	beq	.L15404
	add	r2, r0, #20
.L15395:
	ldr	r3, .L15442+12
	mov	r1, #16
	mov	r4, #0
	str	r2, [r0, #8]
	mov	lr, #-2147483640
	str	r1, [r0, #12]
	str	r4, [r0, #16]
.LPIC4369:
	add	r3, pc, r3
	ldr	ip, [r3, #3688]
	add	r2, r3, #3680
	add	r2, r2, #4
	str	r0, [r3, #3688]
	stmia	r0, {r2, ip}
	str	r0, [ip]
	ldr	r2, [r0, #8]
	str	r1, [r2, #4]
	str	lr, [r2]
	ldr	r1, [r6, #8]
	str	r4, [r2, #12]
	str	r1, [r2, #8]
	ldr	r0, [r3, #3680]
	ldr	r2, [r3, #3676]
	blx	r2
	mov	r0, r4
.L15435:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L15370:
	ldr	r3, .L15442+16
	mov	r1, #1
.LPIC4324:
	add	r3, pc, r3
	ldr	r2, [r3, #3660]
	str	r1, [r3, #3636]
	cmp	r2, #0
	beq	.L15377
	ldr	r3, .L15442+4
	ldr	r3, [r5, r3]
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L15398
	mov	r1, #32
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	beq	.L15404
	add	r3, r0, #20
.L15378:
	ldr	r2, .L15442+20
	mov	r4, #0
	mov	ip, #52
	str	r3, [r0, #8]
	mov	r5, #-2147483646
	mov	r1, #1
	str	ip, [r0, #12]
	str	r4, [r0, #16]
.LPIC4327:
	add	r2, pc, r2
	ldr	lr, [r2, #3688]
	add	r3, r2, #3680
	add	r3, r3, #4
	str	r0, [r2, #3688]
	stmia	r0, {r3, lr}
	str	r0, [lr]
	ldr	r3, [r0, #8]
	stmia	r3, {r5, ip}
	ldr	r0, [r6, #8]
	str	r4, [r3, #12]
	str	r4, [r3, #20]
	str	r4, [r3, #28]
	str	r0, [r3, #8]
	str	r1, [r3, #16]
	str	r1, [r3, #24]
	ldrb	r0, [r2, #3668]	@ zero_extendqisi2
	ldr	r1, [r2, #3660]
	str	r0, [r3, #32]
	ldrb	r0, [r2, #3668]	@ zero_extendqisi2
	ldr	r1, [r1, #316]
	str	r4, [r3, #44]
	str	r4, [r3, #48]
	add	r1, r1, #80
	mul	r1, r0, r1
	str	r1, [r3, #36]
	ldrb	r1, [r2, #3669]	@ zero_extendqisi2
	str	r1, [r3, #40]
	ldr	r0, [r2, #3680]
	ldr	r3, [r2, #3676]
	blx	r3
	mov	r0, r4
	b	.L15435
.L15372:
	ldr	r5, .L15442+24
	mov	r4, #0
.LPIC4336:
	add	r5, pc, r5
	ldr	r0, [r5, #3660]
	str	r4, [r5, #3636]
	cmp	r0, r4
	beq	.L15435
	bl	netif_carrier_off(PLT)
	ldr	r3, [r5, #3660]
	ldr	r5, [r3, #576]
	cmp	r5, r4
	beq	.L15439
	mov	r0, r4
	add	r1, r5, #80
	bl	_set_bit(PLT)
	mov	r0, r4
	b	.L15435
.L15373:
	ldr	r3, .L15442+28
.LPIC4341:
	add	r3, pc, r3
	ldr	r3, [r3, #3660]
	cmp	r3, #0
	beq	.L15377
	ldr	r3, .L15442+4
	ldr	r3, [r5, r3]
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15400
	mov	r1, #32
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	beq	.L15404
	add	r2, r0, #20
.L15381:
	ldr	r3, .L15442+32
	mov	ip, #136
	mov	r5, #0
	str	r2, [r0, #8]
	mov	lr, #-2147483644
	mov	r1, r0
	str	ip, [r0, #12]
	str	r5, [r0, #16]
.LPIC4342:
	add	r3, pc, r3
	ldr	ip, [r3, #3688]
	add	r2, r3, #3680
	add	r2, r2, #4
	str	r0, [r3, #3688]
	stmia	r0, {r2, ip}
	str	r0, [ip]
	ldr	r4, [r0, #8]
	str	lr, [r4]
	ldr	r3, [r6, #8]
	str	r3, [r4, #8]
	ldr	r0, [r6, #12]
	bl	gen_ndis_query_resp.constprop.114(PLT)
	cmp	r0, #0
	beq	.L15382
	mov	r0, #187
	mov	r3, #24
	str	r5, [r4, #16]
	movt	r0, 49152
	str	r5, [r4, #20]
	str	r3, [r4, #4]
.L15382:
	ldr	r3, .L15442+36
	str	r0, [r4, #12]
.LPIC4345:
	add	r3, pc, r3
	ldr	r0, [r3, #3680]
	ldr	r2, [r3, #3676]
	blx	r2
	mov	r0, #0
	b	.L15435
.L15374:
	ldr	r3, .L15442+4
	ldr	r3, [r5, r3]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L15402
	mov	r1, #32
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	beq	.L15404
	add	r3, r0, #20
.L15383:
	ldr	r4, .L15442+40
	mov	r2, #16
	mov	r7, #0
	str	r3, [r0, #8]
	mov	lr, #-2147483643
	str	r2, [r0, #12]
	str	r7, [r0, #16]
.LPIC4347:
	add	r4, pc, r4
	ldr	r1, [r4, #3688]
	add	r3, r4, #3680
	add	r3, r3, #4
	str	r0, [r4, #3688]
	str	r3, [r0]
	str	r1, [r0, #4]
	str	r0, [r1]
	ldr	r5, [r0, #8]
	ldr	r3, [r6, #16]
	ldr	ip, [r6, #20]
	str	r2, [r5, #4]
	str	lr, [r5]
	ldr	r2, [r6, #8]
	str	r2, [r5, #8]
	ldr	r1, [r0, #8]
	ldr	r2, [r6, #12]
	cmp	r1, r7
	beq	.L15384
	movw	r1, #270
	movt	r1, 1
	cmp	r2, r1
	beq	.L15386
	movw	r1, #259
	movt	r1, 257
	cmp	r2, r1
	bne	.L15440
.L15387:
	mov	r3, #0
	str	r3, [r5, #12]
.L15397:
	ldr	r3, .L15442+44
.LPIC4362:
	add	r3, pc, r3
	ldr	r0, [r3, #3680]
	ldr	r2, [r3, #3676]
	blx	r2
	mov	r0, #0
	b	.L15435
.L15369:
	mov	ip, ip, asl #16
	ldr	r1, .L15442+48
	ldr	r0, .L15442+52
	orr	r7, ip, r7, asl #24
	orr	ip, r7, lr
.LPIC4375:
	add	r1, pc, r1
	orr	r4, ip, r4, asl #8
.LPIC4374:
	add	r0, pc, r0
	sub	r1, r1, #3184
	mov	r3, r4
	bl	printk(PLT)
	cmp	r4, #0
	beq	.L15377
	mov	r3, #0
.L15396:
	add	r3, r3, #16
	cmp	r3, r4
	bcc	.L15396
.L15377:
	movw	r0, #65012
	movt	r0, 65535
	b	.L15435
.L15440:
	ldr	r1, .L15442+56
	ldr	r0, .L15442+60
.LPIC4361:
	add	r1, pc, r1
	sub	r1, r1, #3200
.LPIC4360:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
.L15384:
	mov	r3, #187
	movt	r3, 49152
	str	r3, [r5, #12]
	b	.L15397
.L15386:
	add	ip, ip, #8
	ldr	r0, [r4, #3656]
	add	r1, r6, ip
	ldrb	r2, [r6, ip]	@ zero_extendqisi2
	ldrb	r3, [r1, #2]	@ zero_extendqisi2
	ldrb	r1, [r1, #1]	@ zero_extendqisi2
	mov	r3, r3, asl #16
	orr	r3, r3, r1, asl #8
	orr	r3, r3, r2
	strh	r3, [r0]	@ movhi
	ldr	r3, [r4, #3656]
	ldrh	r6, [r3]
	cmp	r6, #0
	beq	.L15388
	mov	r3, #2
	ldr	r0, [r4, #3660]
	str	r3, [r4, #3636]
	bl	netif_carrier_on(PLT)
	ldr	r3, [r4, #3660]
	ldr	r2, [r3, #116]
	tst	r2, #1
	beq	.L15387
	ldr	r4, [r3, #576]
	mov	r0, r7
	add	r1, r4, #80
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	beq	.L15387
	ldr	r0, [r4, #4]
	bl	__netif_schedule(PLT)
	b	.L15387
.L15402:
	mov	r3, #36
	mov	r0, #16
	b	.L15383
.L15405:
	mov	r2, #36
	mov	r0, #16
	b	.L15395
.L15403:
	mov	r2, #36
	mov	r0, #16
	b	.L15393
.L15400:
	mov	r2, #36
	mov	r0, #16
	b	.L15381
.L15398:
	mov	r3, #36
	mov	r0, #16
	b	.L15378
.L15388:
	mov	r3, #1
	ldr	r0, [r4, #3660]
	str	r3, [r4, #3636]
	bl	netif_carrier_off(PLT)
	ldr	r3, [r4, #3660]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L15441
	mov	r0, r6
	add	r1, r1, #80
	bl	_set_bit(PLT)
	b	.L15387
.L15404:
	mvn	r0, #11
	b	.L15435
.L15439:
	ldr	r0, .L15442+64
	movw	r1, #1847
.LPIC4339:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r0, .L15442+68
.LPIC4340:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r5
	b	.L15435
.L15441:
	ldr	r0, .L15442+72
	movw	r1, #1847
.LPIC4358:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r0, .L15442+76
.LPIC4359:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15387
.L15443:
	.align	2
.L15442:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC4326+8)
	.word	kmalloc_caches(GOT)
	.word	.LANCHOR4-(.LPIC4364+8)
	.word	.LANCHOR4-(.LPIC4369+8)
	.word	.LANCHOR4-(.LPIC4324+8)
	.word	.LANCHOR4-(.LPIC4327+8)
	.word	.LANCHOR4-(.LPIC4336+8)
	.word	.LANCHOR4-(.LPIC4341+8)
	.word	.LANCHOR4-(.LPIC4342+8)
	.word	.LANCHOR4-(.LPIC4345+8)
	.word	.LANCHOR4-(.LPIC4347+8)
	.word	.LANCHOR4-(.LPIC4362+8)
	.word	.LANCHOR8-(.LPIC4375+8)
	.word	.LC754-(.LPIC4374+8)
	.word	.LANCHOR8-(.LPIC4361+8)
	.word	.LC753-(.LPIC4360+8)
	.word	.LC82-(.LPIC4339+8)
	.word	.LC83-(.LPIC4340+8)
	.word	.LC82-(.LPIC4358+8)
	.word	.LC83-(.LPIC4359+8)
	.fnend
	.size	rndis_msg_parser, .-rndis_msg_parser
	.align	2
	.type	rndis_command_complete, %function
rndis_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r5, #20]
	cmp	r3, #0
	beq	.L15444
	ldr	r6, [r3, #24]
	cmp	r6, #0
	beq	.L15444
	mov	r4, r1
	ldrb	r0, [r5, #156]	@ zero_extendqisi2
	ldr	r1, [r1]
	bl	rndis_msg_parser(PLT)
	subs	r2, r0, #0
	blt	.L15453
.L15448:
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	beq	.L15454
.L15444:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15454:
	ldr	r2, .L15455
	ldr	r3, [r3, #20]
.LPIC4377:
	add	r2, pc, r2
	ldr	r2, [r2, #3392]
	cmp	r3, #2048
	movls	r3, #0
	movhi	r3, #1
	strb	r3, [r5, #116]
	cmp	r2, #1
	movls	r3, #0
	strlsb	r3, [r5, #116]
	b	.L15444
.L15453:
	ldr	r0, [r6]
	ldr	ip, [r4, #4]
	ldr	r1, .L15455+4
	ldr	r3, [r4, #48]
	add	r0, r0, #32
	str	ip, [sp]
.LPIC4376:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L15448
.L15456:
	.align	2
.L15455:
	.word	.LANCHOR1-(.LPIC4377+8)
	.word	.LC755-(.LPIC4376+8)
	.fnend
	.size	rndis_command_complete, .-rndis_command_complete
	.align	2
	.type	rndis_qc_command_complete, %function
rndis_qc_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r1
	str	lr, [sp, #8]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r1, [r1]
	ldrb	r0, [r5, #136]	@ zero_extendqisi2
	bl	rndis_msg_parser(PLT)
	cmp	r0, #0
	blt	.L15461
.L15458:
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	ldreq	r3, [r3, #20]
	streq	r3, [r5, #128]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L15461:
	ldr	r1, .L15462
	mov	r2, r0
	ldr	ip, [r4, #4]
	ldr	r0, .L15462+4
	ldr	r3, [r4, #48]
.LPIC4379:
	add	r1, pc, r1
	sub	r1, r1, #3152
	str	ip, [sp]
	sub	r1, r1, #12
.LPIC4378:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15458
.L15463:
	.align	2
.L15462:
	.word	.LANCHOR8-(.LPIC4379+8)
	.word	.LC756-(.LPIC4378+8)
	.fnend
	.size	rndis_qc_command_complete, .-rndis_qc_command_complete
	.align	2
	.global	rndis_init
	.type	rndis_init, %function
rndis_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r1, .L15466
.LPIC4380:
	add	r1, pc, r1
	ldrb	r2, [r1, #-4012]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L15465
	ldr	r3, .L15466+4
	mov	r0, #1
	strb	r0, [r1, #-4012]
.LPIC4381:
	add	r3, pc, r3
	add	r1, r3, #3680
	add	r1, r1, #4
	strb	r2, [r3, #3632]
	strb	r2, [r3, #3633]
	str	r2, [r3, #3636]
	str	r1, [r3, #3684]
	str	r1, [r3, #3688]
	str	r0, [r3, #3648]
.L15465:
	mov	r0, #0
	bx	lr
.L15467:
	.align	2
.L15466:
	.word	.LANCHOR9-(.LPIC4380+8)
	.word	.LANCHOR4-(.LPIC4381+8)
	.fnend
	.size	rndis_init, .-rndis_init
	.align	2
	.global	rndis_exit
	.type	rndis_exit, %function
rndis_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L15473
.LPIC4390:
	add	r3, pc, r3
	ldrb	r2, [r3, #-4012]	@ zero_extendqisi2
	cmp	r2, #0
	movne	r2, #0
	strneb	r2, [r3, #-4012]
	bx	lr
.L15474:
	.align	2
.L15473:
	.word	.LANCHOR9-(.LPIC4390+8)
	.fnend
	.size	rndis_exit, .-rndis_exit
	.align	2
	.global	rndis_bind_config_vendor
	.type	rndis_bind_config_vendor, %function
rndis_bind_config_vendor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L15480
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r3
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r8, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bl	rndis_init(PLT)
	cmp	r0, #0
	blt	.L15476
	ldr	r10, .L15493
.LPIC4392:
	add	r10, pc, r10
	ldrb	r3, [r10, #3592]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15490
.L15477:
	ldr	r3, .L15493+4
.LPIC4411:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15485
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L15491
.L15478:
	ldr	r3, .L15493+8
	mov	r0, r6
	mov	lr, #0
	ldr	r10, [r5]	@ unaligned
	mov	ip, #44
	mov	r1, r4
	ldr	r6, .L15493+12
	ldr	r2, .L15493+16
.LPIC4404:
	add	r3, pc, r3
	ldr	r9, .L15493+20
	str	r10, [r4, #142]	@ unaligned
	ldrh	r10, [r5, #4]	@ unaligned
	add	r5, r3, #3616
.LPIC4400:
	add	r6, pc, r6
	add	r5, r5, #8
	str	r8, [r4, #148]
.LPIC4401:
	add	r2, pc, r2
	str	r7, [r4, #152]
	ldr	r3, .L15493+24
	ldr	r8, [r2, #3240]
	strh	lr, [r4, #90]	@ movhi
	ldr	fp, [r2, #3392]
	str	r6, [r4, #120]
	str	r5, [r4, #4]
	ldr	r7, .L15493+28
	ldr	r6, .L15493+32
.LPIC4408:
	add	r3, pc, r3
	strh	r10, [r4, #146]	@ unaligned
	ldr	lr, .L15493+36
	str	r8, [r4, #108]
	ldr	r2, .L15493+40
	str	fp, [r4, #112]
	ldr	r5, .L15493+44
.LPIC4403:
	add	r7, pc, r7
	str	r3, [r4, #44]
.LPIC4410:
	ldr	r9, [pc, r9]		@ tls_load_dot_plus_eight
.LPIC4405:
	add	r6, pc, r6
	str	ip, [r4, #92]
.LPIC4406:
	add	lr, pc, lr
	str	r7, [r4]
.LPIC4407:
	add	r2, pc, r2
	str	r6, [r4, #24]
.LPIC4409:
	add	r5, pc, r5
	str	lr, [r4, #28]
	str	r9, [r4, #124]
	str	r5, [r4, #40]
	str	r2, [r4, #32]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L15492
.L15476:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15490:
	ldr	r0, [r6, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15476
	ldr	r9, .L15493+48
	uxtb	r4, r0
	ldr	r0, [r6, #24]
	strb	r4, [r10, #3592]
.LPIC4394:
	add	r9, pc, r9
	strb	r4, [r9, #3108]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15476
	uxtb	r3, r0
	ldr	r0, [r6, #24]
	strb	r3, [r10, #3600]
	strb	r3, [r9, #3128]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15476
	uxtb	r0, r0
	strb	r0, [r10, #3608]
	strb	r0, [r9, #3099]
	b	.L15477
.L15485:
	mov	r4, #16
	b	.L15478
.L15492:
	mov	r0, r4
	bl	kfree(PLT)
.L15479:
	bl	rndis_exit(PLT)
	mov	r0, r5
	b	.L15476
.L15491:
	mvn	r5, #11
	b	.L15479
.L15480:
	mvn	r0, #21
	bx	lr
.L15494:
	.align	2
.L15493:
	.word	.LANCHOR0-(.LPIC4392+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4411+8))
	.word	.LANCHOR0-(.LPIC4404+8)
	.word	rndis_add_header-(.LPIC4400+8)
	.word	.LANCHOR1-(.LPIC4401+8)
	.word	rndis_rm_hdr(GOT_PREL)+(.-(.LPIC4410+8))
	.word	rndis_setup-(.LPIC4408+8)
	.word	.LC757-(.LPIC4403+8)
	.word	rndis_bind-(.LPIC4405+8)
	.word	rndis_unbind-(.LPIC4406+8)
	.word	rndis_set_alt-(.LPIC4407+8)
	.word	rndis_disable-(.LPIC4409+8)
	.word	.LANCHOR1-(.LPIC4394+8)
	.fnend
	.size	rndis_bind_config_vendor, .-rndis_bind_config_vendor
	.align	2
	.global	rndis_bind_config
	.type	rndis_bind_config, %function
rndis_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r2, #0
	mov	r3, r2
	b	rndis_bind_config_vendor(PLT)
	.fnend
	.size	rndis_bind_config, .-rndis_bind_config
	.align	2
	.type	rndis_unbind, %function
rndis_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r0, [r1, #156]
	bl	rndis_deregister(PLT)
	bl	rndis_exit(PLT)
	mov	r0, r4
	bl	usb_free_all_descriptors(PLT)
	ldr	r3, [r4, #164]
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
	.fnend
	.size	rndis_unbind, .-rndis_unbind
	.align	2
	.global	ecm_ipa_init
	.type	ecm_ipa_init, %function
ecm_ipa_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_ipa_init, .-ecm_ipa_init
	.align	2
	.global	ecm_qc_get_ipa_rx_cb
	.type	ecm_qc_get_ipa_rx_cb, %function
ecm_qc_get_ipa_rx_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L15500
.LPIC4412:
	add	r3, pc, r3
	ldr	r0, [r3, #-4008]
	bx	lr
.L15501:
	.align	2
.L15500:
	.word	.LANCHOR9-(.LPIC4412+8)
	.fnend
	.size	ecm_qc_get_ipa_rx_cb, .-ecm_qc_get_ipa_rx_cb
	.align	2
	.global	ecm_qc_get_ipa_tx_cb
	.type	ecm_qc_get_ipa_tx_cb, %function
ecm_qc_get_ipa_tx_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L15503
.LPIC4413:
	add	r3, pc, r3
	ldr	r0, [r3, #-4004]
	bx	lr
.L15504:
	.align	2
.L15503:
	.word	.LANCHOR9-(.LPIC4413+8)
	.fnend
	.size	ecm_qc_get_ipa_tx_cb, .-ecm_qc_get_ipa_tx_cb
	.align	2
	.global	ecm_qc_get_ipa_priv
	.type	ecm_qc_get_ipa_priv, %function
ecm_qc_get_ipa_priv:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L15506
.LPIC4414:
	add	r3, pc, r3
	ldr	r0, [r3, #-3988]
	bx	lr
.L15507:
	.align	2
.L15506:
	.word	.LANCHOR9-(.LPIC4414+8)
	.fnend
	.size	ecm_qc_get_ipa_priv, .-ecm_qc_get_ipa_priv
	.align	2
	.type	bam2bam_data_connect_work, %function
bam2bam_data_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #-108]
	cmp	r3, #7
	beq	.L15552
	bl	usb_bam_reset_complete(PLT)
	ldrb	r0, [r4, #-116]	@ zero_extendqisi2
	sub	r1, r4, #124
	bl	usb_bam_connect(PLT)
	cmp	r0, #0
	bne	.L15553
	ldrb	r0, [r4, #-115]	@ zero_extendqisi2
	sub	r1, r4, #120
	bl	usb_bam_connect(PLT)
	cmp	r0, #0
	bne	.L15554
.L15515:
	ldr	r3, [r4, #-164]
	cmp	r3, #0
	beq	.L15555
	ldr	r0, [r3, #12]
	cmp	r0, #0
	beq	.L15556
	ldr	r3, [r0, #8]
	mov	r1, #208
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #-132]
	beq	.L15508
	sub	r5, r4, #168
	ldr	r3, .L15565
	mov	r6, #0
	mov	r1, #208
	str	r5, [r0, #32]
	ldr	r2, [r4, #-132]
.LPIC4435:
	add	r3, pc, r3
	str	r3, [r2, #28]
	ldr	r3, [r4, #-132]
	str	r6, [r3, #4]
	ldr	r2, [r4, #-132]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r3, [r4, #-124]
	ldr	r2, [r4, #-132]
	bic	r3, r3, #65536
	bic	r3, r3, #96
	orr	r3, r3, #65536
	orr	r3, r3, #32
	str	r3, [r2, #52]
	ldr	r3, [r4, #-164]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, r6
	str	r0, [r4, #-128]
	beq	.L15508
	ldr	r3, .L15565+4
	str	r5, [r0, #32]
	ldr	r2, [r4, #-128]
.LPIC4436:
	add	r3, pc, r3
	str	r3, [r2, #28]
	ldr	r3, [r4, #-128]
	str	r6, [r3, #4]
	ldr	r2, [r4, #-128]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r3, [r4, #-120]
	ldr	r2, [r4, #-128]
	bic	r3, r3, #65536
	bic	r3, r3, #96
	orr	r3, r3, #65536
	orr	r3, r3, #32
	str	r3, [r2, #52]
	ldr	r3, [r4, #-164]
	cmp	r3, r6
	beq	.L15523
	ldr	r0, [r3, #12]
	mov	r2, #32
	ldr	r1, [r4, #-132]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L15557
.L15524:
	ldr	r3, [r4, #-164]
	cmp	r3, #0
	beq	.L15523
	ldr	r0, [r3, #8]
	mov	r2, #32
	ldr	r1, [r4, #-128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L15558
.L15523:
	ldr	r3, [r4, #-108]
	cmp	r3, #7
	beq	.L15508
	ldr	r0, .L15565+8
	mov	r1, r5
.LPIC4441:
	add	r0, pc, r0
	bl	usb_bam_register_peer_reset_cb(PLT)
	mov	r0, #1
	bl	usb_bam_client_ready(PLT)
	cmp	r0, #0
	bne	.L15559
.L15508:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15552:
	ldr	r3, [r0, #-112]
	cmp	r3, #1
	beq	.L15560
	cmp	r3, #0
	mov	r2, #5
	mov	r3, #0
	str	r2, [r0, #-80]
	str	r3, [r0, #-92]
	beq	.L15561
.L15511:
	sub	r5, r4, #104
	mov	r0, r5
	bl	usb_bam_connect_ipa(PLT)
	cmp	r0, #0
	bne	.L15562
	ldr	r3, [r4, #-112]
	mov	r1, #17
	mov	r2, #1
	str	r1, [r4, #-80]
	str	r2, [r4, #-92]
	cmp	r3, #0
	beq	.L15563
.L15513:
	mov	r0, r5
	bl	usb_bam_connect_ipa(PLT)
	cmp	r0, #0
	bne	.L15564
	ldr	r3, [r4, #-112]
	cmp	r3, #1
	bne	.L15515
	ldr	r1, .L15565+12
	ldr	r0, .L15565+16
.LPIC4425:
	add	r1, pc, r1
.LPIC4424:
	add	r0, pc, r0
.L15548:
	sub	r1, r1, #3136
	mov	r2, r1
.L15551:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk(PLT)
.L15561:
	bl	ecm_qc_get_ipa_rx_cb(PLT)
	str	r0, [r4, #-12]
	bl	ecm_qc_get_ipa_priv(PLT)
	str	r0, [r4, #-16]
	b	.L15511
.L15563:
	bl	ecm_qc_get_ipa_tx_cb(PLT)
	str	r0, [r4, #-12]
	bl	ecm_qc_get_ipa_priv(PLT)
	str	r0, [r4, #-16]
	b	.L15513
.L15559:
	ldr	r1, .L15565+20
	mov	r3, r0
	ldr	r0, .L15565+24
.LPIC4443:
	add	r1, pc, r1
.LPIC4442:
	add	r0, pc, r0
.L15549:
	sub	r1, r1, #3136
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	mov	r2, r1
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk(PLT)
.L15555:
	ldr	r1, .L15565+28
	ldr	r0, .L15565+32
.LPIC4432:
	add	r1, pc, r1
.LPIC4431:
	add	r0, pc, r0
.L15550:
	ldrd	r4, [sp]
	sub	r1, r1, #3136
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk(PLT)
.L15556:
	ldr	r1, .L15565+36
	ldr	r0, .L15565+40
.LPIC4434:
	add	r1, pc, r1
.LPIC4433:
	add	r0, pc, r0
	b	.L15550
.L15564:
	ldr	r1, .L15565+44
	mov	r3, r0
	ldr	r0, .L15565+48
.LPIC4422:
	add	r1, pc, r1
.LPIC4421:
	add	r0, pc, r0
	b	.L15549
.L15562:
	ldr	r1, .L15565+52
	mov	r3, r0
	ldr	r0, .L15565+56
.LPIC4419:
	add	r1, pc, r1
.LPIC4418:
	add	r0, pc, r0
	b	.L15549
.L15560:
	ldr	r1, .L15565+60
	ldr	r0, .L15565+64
.LPIC4416:
	add	r1, pc, r1
.LPIC4415:
	add	r0, pc, r0
	b	.L15548
.L15557:
	ldr	r1, .L15565+68
	mov	r2, r0
	ldr	r0, .L15565+72
.LPIC4438:
	add	r1, pc, r1
	add	r1, r1, #2416
.LPIC4437:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L15524
.L15558:
	ldr	r1, .L15565+76
	mov	r2, r0
	ldr	r0, .L15565+80
.LPIC4440:
	add	r1, pc, r1
	add	r1, r1, #2448
.LPIC4439:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15523
.L15553:
	ldr	r1, .L15565+84
	mov	r2, r0
	ldr	r0, .L15565+88
.LPIC4428:
	add	r1, pc, r1
.LPIC4427:
	add	r0, pc, r0
	sub	r1, r1, #3136
	b	.L15551
.L15554:
	ldr	r1, .L15565+92
	mov	r2, r0
	ldr	r0, .L15565+96
.LPIC4430:
	add	r1, pc, r1
.LPIC4429:
	add	r0, pc, r0
	sub	r1, r1, #3136
	b	.L15551
.L15566:
	.align	2
.L15565:
	.word	bam_data_endless_rx_complete-(.LPIC4435+8)
	.word	bam_data_endless_tx_complete-(.LPIC4436+8)
	.word	bam_data_peer_reset_cb-(.LPIC4441+8)
	.word	.LANCHOR8-(.LPIC4425+8)
	.word	.LC760-(.LPIC4424+8)
	.word	.LANCHOR8-(.LPIC4443+8)
	.word	.LC763-(.LPIC4442+8)
	.word	.LANCHOR8-(.LPIC4432+8)
	.word	.LC761-(.LPIC4431+8)
	.word	.LANCHOR8-(.LPIC4434+8)
	.word	.LC762-(.LPIC4433+8)
	.word	.LANCHOR8-(.LPIC4422+8)
	.word	.LC759-(.LPIC4421+8)
	.word	.LANCHOR8-(.LPIC4419+8)
	.word	.LC759-(.LPIC4418+8)
	.word	.LANCHOR8-(.LPIC4416+8)
	.word	.LC758-(.LPIC4415+8)
	.word	.LANCHOR3-(.LPIC4438+8)
	.word	.LC191-(.LPIC4437+8)
	.word	.LANCHOR3-(.LPIC4440+8)
	.word	.LC191-(.LPIC4439+8)
	.word	.LANCHOR8-(.LPIC4428+8)
	.word	.LC370-(.LPIC4427+8)
	.word	.LANCHOR8-(.LPIC4430+8)
	.word	.LC371-(.LPIC4429+8)
	.fnend
	.size	bam2bam_data_connect_work, .-bam2bam_data_connect_work
	.align	2
	.global	fmbim_free_req
	.type	fmbim_free_req, %function
fmbim_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	fmbim_free_req, .-fmbim_free_req
	.align	2
	.global	mbim_configure_params
	.type	mbim_configure_params, %function
mbim_configure_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L15572
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L15572+4
	str	lr, [sp, #4]
.LPIC4446:
	add	r1, pc, r1
	sub	r1, r1, #3104
.LPIC4445:
	add	r0, pc, r0
	sub	r1, r1, #4
	mov	r2, r1
	bl	printk(PLT)
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #0
	ldr	pc, [sp], #4
.L15573:
	.align	2
.L15572:
	.word	.LANCHOR8-(.LPIC4446+8)
	.word	.LC764-(.LPIC4445+8)
	.fnend
	.size	mbim_configure_params, .-mbim_configure_params
	.align	2
	.global	bam_data_disconnect
	.type	bam_data_disconnect, %function
bam_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15594
.LPIC4448:
	add	r3, pc, r3
	ldr	r3, [r3, #-3980]
	cmp	r1, r3
	bge	.L15590
	cmp	r0, #0
	beq	.L15591
	ldr	r3, .L15594+4
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC4458:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r4, [r3, r1, asl #2]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L15577
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L15577
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L15577
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r4, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r4, #4]
.L15577:
	ldr	r3, [r4, #60]
	cmp	r3, #7
	beq	.L15592
	mov	r0, #0
	bl	usb_bam_client_ready(PLT)
	cmp	r0, #0
	bne	.L15593
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L15592:
	ldr	r3, .L15594+8
	add	r1, r4, #184
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
.LPIC4454:
	add	r3, pc, r3
	ldr	r0, [r3, #-3976]
	b	queue_work(PLT)
.L15590:
	ldr	r3, .L15594+12
	mov	r2, r1
	ldr	r0, .L15594+16
.LPIC4450:
	add	r3, pc, r3
	sub	r1, r3, #3072
.LPIC4449:
	add	r0, pc, r0
	sub	r1, r1, #12
	b	printk(PLT)
.L15591:
	ldr	r1, .L15594+20
	ldr	r0, .L15594+24
.LPIC4452:
	add	r1, pc, r1
	sub	r1, r1, #3072
.LPIC4451:
	add	r0, pc, r0
	sub	r1, r1, #12
	b	printk(PLT)
.L15593:
	ldr	r1, .L15594+28
	ldr	r0, .L15594+32
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC4456:
	add	r1, pc, r1
	sub	r1, r1, #3072
.LPIC4455:
	add	r0, pc, r0
	sub	r1, r1, #12
	mov	r2, r1
	b	printk(PLT)
.L15595:
	.align	2
.L15594:
	.word	.LANCHOR9-(.LPIC4448+8)
	.word	bam2bam_data_ports(GOT_PREL)+(.-(.LPIC4458+8))
	.word	.LANCHOR9-(.LPIC4454+8)
	.word	.LANCHOR8-(.LPIC4450+8)
	.word	.LC685-(.LPIC4449+8)
	.word	.LANCHOR8-(.LPIC4452+8)
	.word	.LC765-(.LPIC4451+8)
	.word	.LANCHOR8-(.LPIC4456+8)
	.word	.LC766-(.LPIC4455+8)
	.fnend
	.size	bam_data_disconnect, .-bam_data_disconnect
	.align	2
	.type	mbim_disable, %function
mbim_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L15628
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	ldr	r0, .L15628+4
	strd	r8, [sp, #16]
	add	r8, r7, #196
	mov	r5, r7
	str	lr, [sp, #32]
.LPIC4460:
	add	r1, pc, r1
	strd	r10, [sp, #24]
	.pad #4
	sub	sp, sp, #4
	sub	r1, r1, #3056
.LPIC4459:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mov	r3, #0
	mov	r0, r8
	str	r3, [r7, #80]
	strb	r3, [r7, #156]
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r5, #200]!
	cmp	r3, r5
	ldr	r4, [r3]
	movne	r9, #256
	movne	r6, #512
	bne	.L15601
	b	.L15602
.L15609:
	mov	r4, r2
.L15601:
	ldr	r2, [r3, #4]
	subs	r10, r3, #8
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r9, [r3]
	str	r6, [r3, #4]
	beq	.L15600
	ldr	r0, [r3, #-8]
	bl	kfree(PLT)
	mov	r0, r10
	bl	kfree(PLT)
.L15600:
	cmp	r4, r5
	ldr	r2, [r4]
	mov	r3, r4
	bne	.L15609
.L15602:
	mov	r6, r7
	ldr	r3, [r6, #208]!
	cmp	r3, r6
	ldr	r4, [r3]
	movne	r10, #256
	movne	r9, #512
	bne	.L15606
	b	.L15599
.L15611:
	mov	r4, r2
.L15606:
	ldr	r2, [r3, #4]
	subs	fp, r3, #8
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	beq	.L15605
	ldr	r0, [r3, #-8]
	bl	kfree(PLT)
	mov	r0, fp
	bl	kfree(PLT)
.L15605:
	cmp	r4, r6
	ldr	r2, [r4]
	mov	r3, r4
	bne	.L15611
.L15599:
	mov	r0, r8
	bl	_raw_spin_unlock(PLT)
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	ldr	r3, .L15628+8
.LPIC4466:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L15626
	movw	r1, #32800
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	beq	.L15627
.L15603:
	mov	r1, #16
	mov	r2, #0
	mov	r3, r0
	stmia	r0, {r1, r2}
.L15607:
	ldr	r2, [r7, #204]
	add	r1, r3, #8
	mov	r0, r8
	str	r1, [r7, #204]
	str	r5, [r3, #8]
	str	r2, [r3, #12]
	str	r1, [r2]
	bl	_raw_spin_unlock(PLT)
	add	r0, r7, #100
	mov	r1, #3
	mov	r2, #1
	mov	r3, #0
	bl	__wake_up(PLT)
	ldr	r1, .L15628+12
	mov	r2, r7
	ldr	r0, .L15628+16
	ldrb	r3, [r7, #128]	@ zero_extendqisi2
.LPIC4463:
	add	r1, pc, r1
	sub	r1, r1, #3040
.LPIC4462:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	add	r0, r7, #132
	ldrb	r1, [r7, #128]	@ zero_extendqisi2
	bl	bam_data_disconnect(PLT)
	ldr	r0, [r7, #148]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L15608
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r7, #148]
	mov	r2, #0
	str	r2, [r3]
.L15608:
	ldr	r1, .L15628+20
	mov	r3, #0
	ldr	r0, .L15628+24
	str	r3, [r7, #160]
.LPIC4465:
	add	r1, pc, r1
	sub	r1, r1, #3056
.LPIC4464:
	add	r0, pc, r0
	sub	r1, r1, #8
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk(PLT)
.L15626:
	mov	r0, #16
	b	.L15603
.L15627:
	mvn	r3, #11
	b	.L15607
.L15629:
	.align	2
.L15628:
	.word	.LANCHOR8-(.LPIC4460+8)
	.word	.LC767-(.LPIC4459+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4466+8))
	.word	.LANCHOR8-(.LPIC4463+8)
	.word	.LC768-(.LPIC4462+8)
	.word	.LANCHOR8-(.LPIC4465+8)
	.word	.LC769-(.LPIC4464+8)
	.fnend
	.size	mbim_disable, .-mbim_disable
	.align	2
	.global	bam_data_connect
	.type	bam_data_connect, %function
bam_data_connect:
	.fnstart
	@ args = 8, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L15643
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	ldrb	r7, [sp, #32]	@ zero_extendqisi2
	strd	r8, [sp, #16]
	mov	r8, r3
	str	lr, [sp, #28]
	mov	lr, r1
.LPIC4467:
	add	ip, pc, ip
	str	r10, [sp, #24]
	ldr	r3, [ip, #-3980]
	cmp	r1, r3
	bge	.L15638
	cmp	r0, #0
	mov	r5, r0
	beq	.L15639
	ldr	r0, [r0, #8]
	mov	r6, r2
	ldr	r3, .L15643+4
	ldr	r2, [r0, #8]
.LPIC4478:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r1, [r0, #28]
	ldr	r2, [r2]
	ldr	r4, [r3, lr, asl #2]
	blx	r2
	subs	r9, r0, #0
	bne	.L15640
	ldr	r3, [r5, #8]
	str	r4, [r3]
	ldr	r0, [r5, #12]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r9, r0, #0
	bne	.L15641
	ldr	r3, [r5, #12]
	cmp	r6, #7
	str	r4, [r3]
	ldr	r3, [sp, #36]
	str	r5, [r4, #4]
	strb	r8, [r4, #52]
	strb	r7, [r4, #53]
	str	r6, [r4, #60]
	str	r3, [r4, #56]
	beq	.L15642
.L15636:
	ldr	r3, .L15643+8
	add	r1, r4, #168
.LPIC4477:
	add	r3, pc, r3
	ldr	r0, [r3, #-3976]
	bl	queue_work(PLT)
.L15632:
	mov	r0, r9
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15642:
	add	r2, r4, #44
	add	r3, r4, #48
	strb	r8, [r4, #64]
	strb	r7, [r4, #65]
	strd	r2, [r4, #68]
	b	.L15636
.L15641:
	ldr	r1, .L15643+12
	ldr	r0, .L15643+16
	ldr	r2, [r5, #12]
.LPIC4476:
	add	r1, pc, r1
	sub	r1, r1, #3024
.LPIC4475:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	ldr	r3, [r5, #8]
	mov	r2, #0
	str	r2, [r3]
	b	.L15632
.L15640:
	ldr	r1, .L15643+20
	ldr	r0, .L15643+24
	ldr	r2, [r5, #8]
.LPIC4474:
	add	r1, pc, r1
	sub	r1, r1, #3024
.LPIC4473:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L15632
.L15639:
	ldr	r1, .L15643+28
	mvn	r9, #18
	ldr	r0, .L15643+32
.LPIC4471:
	add	r1, pc, r1
	sub	r1, r1, #3024
.LPIC4470:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L15632
.L15638:
	ldr	r1, .L15643+36
	mov	r2, lr
	mvn	r9, #18
	ldr	r0, .L15643+40
.LPIC4469:
	add	r1, pc, r1
	sub	r1, r1, #3024
.LPIC4468:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L15632
.L15644:
	.align	2
.L15643:
	.word	.LANCHOR9-(.LPIC4467+8)
	.word	bam2bam_data_ports(GOT_PREL)+(.-(.LPIC4478+8))
	.word	.LANCHOR9-(.LPIC4477+8)
	.word	.LANCHOR8-(.LPIC4476+8)
	.word	.LC190-(.LPIC4475+8)
	.word	.LANCHOR8-(.LPIC4474+8)
	.word	.LC189-(.LPIC4473+8)
	.word	.LANCHOR8-(.LPIC4471+8)
	.word	.LC765-(.LPIC4470+8)
	.word	.LANCHOR8-(.LPIC4469+8)
	.word	.LC88-(.LPIC4468+8)
	.fnend
	.size	bam_data_connect, .-bam_data_connect
	.align	2
	.type	mbim_set_alt, %function
mbim_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r5, [r0, #188]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldr	r7, [r0, #76]
	cmp	r5, r1
	beq	.L15668
	ldrb	r3, [r0, #189]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L15647
	ldr	r5, .L15675
	ldr	r0, .L15675+4
.LPIC4488:
	add	r5, pc, r5
	sub	r5, r5, #3008
.LPIC4487:
	add	r0, pc, r0
	mov	r1, r5
	bl	printk(PLT)
	cmp	r6, #1
	bhi	.L15647
	ldr	r3, [r4, #140]
	ldr	r3, [r3]
	cmp	r3, #0
	bne	.L15669
.L15653:
	cmp	r6, #1
	beq	.L15670
.L15654:
	add	r5, r4, #196
	strb	r6, [r4, #190]
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	mov	r3, #3
	mov	r0, r5
	strb	r3, [r4, #156]
	bl	_raw_spin_unlock(PLT)
.L15652:
	ldr	r1, .L15675+8
	mov	r5, #1
	mov	r6, #0
	ldr	r0, .L15675+12
	str	r5, [r4, #80]
.LPIC4513:
	add	r1, pc, r1
	sub	r1, r1, #3008
.LPIC4512:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r2, r5
	add	r0, r4, #100
	mov	r1, #3
	mov	r3, r6
	bl	__wake_up(PLT)
	mov	r2, r5
	add	r0, r4, #112
	mov	r1, #3
	mov	r3, r6
	bl	__wake_up(PLT)
.L15650:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15670:
	ldr	r9, .L15675+16
	ldr	r0, .L15675+20
.LPIC4493:
	add	r9, pc, r9
	sub	r5, r9, #3008
.LPIC4492:
	add	r0, pc, r0
	mov	r1, r5
	bl	printk(PLT)
	ldr	r3, [r4, #140]
	ldr	r8, [r3, #28]
	cmp	r8, #0
	bne	.L15655
	ldr	r0, .L15675+24
	mov	r1, r5
.LPIC4494:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [r7]
	mov	r1, r4
	ldr	r2, [r4, #140]
	bl	config_ep_by_speed(PLT)
	subs	r10, r0, #0
	bne	.L15671
	ldr	r3, [r4, #140]
	mov	r1, r5
	ldr	r0, .L15675+28
	ldr	r2, [r3, #28]
.LPIC4498:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [r7]
	mov	r1, r4
	ldr	r2, [r4, #144]
	bl	config_ep_by_speed(PLT)
	subs	r7, r0, #0
	beq	.L15657
	ldr	r2, [r4, #144]
	mov	r1, r5
	mov	r3, r7
	ldr	r0, .L15675+32
	mov	r6, r7
	str	r10, [r2, #28]
	ldr	r2, [r4, #144]
.LPIC4500:
	add	r0, pc, r0
	ldr	r2, [r2, #4]
	bl	printk(PLT)
	b	.L15650
.L15647:
	ldr	r1, .L15675+36
	mvn	r6, #21
	ldr	r0, .L15675+40
.LPIC4515:
	add	r1, pc, r1
	sub	r1, r1, #3008
.LPIC4514:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15650
.L15671:
	ldr	r2, [r4, #140]
	mov	r1, r5
	mov	r3, r10
	ldr	r0, .L15675+44
	mov	r6, r10
	str	r8, [r2, #28]
	ldr	r2, [r4, #140]
.LPIC4496:
	add	r0, pc, r0
	ldr	r2, [r2, #4]
	bl	printk(PLT)
	b	.L15650
.L15668:
	ldr	r8, .L15675+48
	ldr	r0, .L15675+52
.LPIC4480:
	add	r8, pc, r8
	sub	r8, r8, #3008
.LPIC4479:
	add	r0, pc, r0
	mov	r1, r8
	bl	printk(PLT)
	cmp	r6, #0
	bne	.L15647
	ldr	r3, [r4, #148]
	ldr	r3, [r3]
	cmp	r3, #0
	bne	.L15672
.L15648:
	ldr	r0, [r7]
	mov	r1, r4
	ldr	r2, [r4, #148]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L15673
	ldr	r0, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	ldreq	r3, [r4, #148]
	streq	r4, [r3]
	beq	.L15652
	ldr	r1, .L15675+56
	mov	r3, r6
	ldr	r2, [r4, #148]
	ldr	r0, .L15675+60
.LPIC4486:
	add	r1, pc, r1
	ldr	r2, [r2, #4]
	sub	r1, r1, #3008
.LPIC4485:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15650
.L15669:
	ldr	r0, .L15675+64
	mov	r1, r5
.LPIC4489:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, .L15675+68
	mov	r1, #16384
	mov	r2, #0
	str	r1, [r4, #216]
	str	r2, [r4, #80]
.LPIC4491:
	add	r3, pc, r3
	add	r3, r3, #508
	str	r3, [r4, #192]
	b	.L15653
.L15657:
	ldr	r3, [r4, #144]
	mov	r1, r5
	sub	r9, r9, #2992
	ldr	r0, .L15675+72
	ldr	r2, [r3, #28]
.LPIC4502:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	lr, [r4, #76]
	mov	r1, r9
	mov	r2, r4
	ldr	ip, [r4, #124]
	ldr	r0, .L15675+76
	ldrb	r3, [r4, #128]	@ zero_extendqisi2
	ldr	r8, [lr]
	cmp	ip, #7
	moveq	r5, #2
	movne	r5, #0
.LPIC4504:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r2, r7
	mov	r1, r5
	ldrb	r3, [r4, #128]	@ zero_extendqisi2
	ldr	r0, [r8, #28]
	bl	usb_bam_get_connection_idx(PLT)
	mov	r7, r0
	mov	r1, r5
	ldrb	r3, [r4, #128]	@ zero_extendqisi2
	mov	r2, r6
	ldr	r0, [r8, #28]
	bl	usb_bam_get_connection_idx(PLT)
	uxtb	ip, r0
	ldrb	r1, [r4, #128]	@ zero_extendqisi2
	uxtb	r3, r7
	str	r6, [sp, #4]
	ldr	r2, [r4, #124]
	add	r0, r4, #132
	str	ip, [sp]
	bl	bam_data_connect(PLT)
	subs	r2, r0, #0
	mov	r1, r9
	bne	.L15674
	ldr	r0, .L15675+80
.LPIC4508:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15654
.L15655:
	ldr	r0, .L15675+84
	mov	r1, r5
.LPIC4510:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15654
.L15674:
	ldr	r0, .L15675+88
.LPIC4506:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15654
.L15673:
	ldr	r2, [r4, #148]
	mov	ip, #0
	mov	r6, r3
	ldr	r1, .L15675+92
	ldr	r0, .L15675+96
	str	ip, [r2, #28]
	ldr	r2, [r4, #148]
.LPIC4484:
	add	r1, pc, r1
	sub	r1, r1, #3008
.LPIC4483:
	add	r0, pc, r0
	ldr	r2, [r2, #4]
	bl	printk(PLT)
	b	.L15650
.L15672:
	ldr	r0, .L15675+100
	mov	r1, r8
	mov	r2, r5
.LPIC4481:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15648
.L15676:
	.align	2
.L15675:
	.word	.LANCHOR8-(.LPIC4488+8)
	.word	.LC773-(.LPIC4487+8)
	.word	.LANCHOR8-(.LPIC4513+8)
	.word	.LC785-(.LPIC4512+8)
	.word	.LANCHOR8-(.LPIC4493+8)
	.word	.LC775-(.LPIC4492+8)
	.word	.LC776-(.LPIC4494+8)
	.word	.LC778-(.LPIC4498+8)
	.word	.LC779-(.LPIC4500+8)
	.word	.LANCHOR8-(.LPIC4515+8)
	.word	.LC786-(.LPIC4514+8)
	.word	.LC777-(.LPIC4496+8)
	.word	.LANCHOR8-(.LPIC4480+8)
	.word	.LC770-(.LPIC4479+8)
	.word	.LANCHOR8-(.LPIC4486+8)
	.word	.LC480-(.LPIC4485+8)
	.word	.LC774-(.LPIC4489+8)
	.word	.LANCHOR1-(.LPIC4491+8)
	.word	.LC780-(.LPIC4502+8)
	.word	.LC781-(.LPIC4504+8)
	.word	.LC783-(.LPIC4508+8)
	.word	.LC784-(.LPIC4510+8)
	.word	.LC782-(.LPIC4506+8)
	.word	.LANCHOR8-(.LPIC4484+8)
	.word	.LC772-(.LPIC4483+8)
	.word	.LC771-(.LPIC4481+8)
	.fnend
	.size	mbim_set_alt, .-mbim_set_alt
	.align	2
	.global	bam_data_destroy
	.type	bam_data_destroy, %function
bam_data_destroy:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L15683
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC4519:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
	ldr	r0, [r4, r0, asl #2]
	bl	kfree(PLT)
	ldr	r3, .L15683+4
	mov	r2, #0
	str	r2, [r4, r5, asl #2]
.LPIC4517:
	add	r3, pc, r3
	ldr	r0, [r3, #-3976]
	cmp	r0, r2
	beq	.L15678
	bl	destroy_workqueue(PLT)
.L15678:
	ldr	r3, .L15683+8
	mov	r2, #0
	mov	r0, r2
.LPIC4518:
	add	r3, pc, r3
	str	r2, [r3, #-3976]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15684:
	.align	2
.L15683:
	.word	bam2bam_data_ports(GOT_PREL)+(.-(.LPIC4519+8))
	.word	.LANCHOR9-(.LPIC4517+8)
	.word	.LANCHOR9-(.LPIC4518+8)
	.fnend
	.size	bam_data_destroy, .-bam_data_destroy
	.align	2
	.type	ecm_qc_unbind, %function
ecm_qc_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	mov	r0, #0
	str	r6, [sp, #8]
	mov	r4, r1
	str	lr, [sp, #12]
	bl	bam_data_destroy(PLT)
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L15689
.L15686:
	cmp	r3, #2
	bls	.L15687
	ldr	r0, [r4, #12]
	bl	kfree(PLT)
.L15687:
	ldr	r0, [r4, #8]
	bl	kfree(PLT)
	ldr	r3, [r4, #140]
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, .L15690
	mov	r2, #0
	mov	r0, r4
.LPIC4520:
	add	r3, pc, r3
	str	r2, [r3, #3644]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree(PLT)
.L15689:
	ldr	r0, [r4, #16]
	bl	kfree(PLT)
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L15686
.L15691:
	.align	2
.L15690:
	.word	.LANCHOR0-(.LPIC4520+8)
	.fnend
	.size	ecm_qc_unbind, .-ecm_qc_unbind
	.align	2
	.type	mbim_unbind, %function
mbim_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r0, [r1, #128]	@ zero_extendqisi2
	bl	bam_data_destroy(PLT)
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L15696
.L15693:
	cmp	r3, #2
	bls	.L15694
	ldr	r0, [r4, #12]
	bl	kfree(PLT)
.L15694:
	ldr	r0, [r4, #8]
	bl	kfree(PLT)
	ldr	r3, [r4, #152]
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, .L15697
	mov	r2, #0
.LPIC4521:
	add	r3, pc, r3
	strb	r2, [r3, #182]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15696:
	ldr	r0, [r4, #16]
	bl	kfree(PLT)
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L15693
.L15698:
	.align	2
.L15697:
	.word	.LANCHOR1-(.LPIC4521+8)
	.fnend
	.size	mbim_unbind, .-mbim_unbind
	.align	2
	.type	rndis_qc_unbind, %function
rndis_qc_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	mov	r5, r0
	mov	r0, #0
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	bl	bam_data_destroy(PLT)
	ldr	r0, [r4, #136]
	bl	rndis_deregister(PLT)
	bl	rndis_exit(PLT)
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L15700
	ldr	r0, [r4, #12]
	bl	kfree(PLT)
.L15700:
	ldr	r0, [r4, #8]
	bl	kfree(PLT)
	ldr	r3, [r4, #152]
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	kfree(PLT)
	.fnend
	.size	rndis_qc_unbind, .-rndis_qc_unbind
	.align	2
	.global	bam_data_setup
	.type	bam_data_setup, %function
bam_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L15719
	cmp	r0, #1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
.LPIC4531:
	add	r5, pc, r5
	.pad #12
	sub	sp, sp, #12
	bne	.L15715
	ldr	r6, .L15719+4
.LPIC4524:
	add	r6, pc, r6
	ldr	r3, [r6, #-3976]
	cmp	r3, #0
	movne	r0, #0
	beq	.L15716
.L15712:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15716:
	mov	r2, r0
	ldr	r0, .L15719+8
	str	r3, [sp]
	mov	r1, #10
.LPIC4525:
	add	r0, pc, r0
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, #0
	str	r0, [r6, #-3976]
	beq	.L15717
	ldr	r2, [r6, #-3980]
	ldr	r3, .L15719+12
	add	r2, r2, #1
	str	r2, [r6, #-3980]
	ldr	r3, [r5, r3]
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L15711
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L15718
.L15706:
	ldr	fp, .L15719+16
	mov	r3, #2560
	mov	r9, #0
	ldr	r10, .L15719+20
	add	r8, r4, #172
	add	r7, r4, #188
	ldr	ip, .L15719+24
	add	r6, r4, #204
	add	lr, r4, #220
	ldr	r1, .L15719+28
	str	r9, [r4]
	mov	r0, r9
	ldr	r2, .L15719+32
.LPIC4532:
	add	fp, pc, fp
	str	r4, [r4, #16]
.LPIC4533:
	add	r10, pc, r10
	str	r3, [r4, #168]
.LPIC4534:
	add	ip, pc, ip
	str	fp, [r4, #180]
.LPIC4535:
	add	r1, pc, r1
	str	r10, [r4, #196]
	str	ip, [r4, #212]
	str	r1, [r4, #228]
	str	r3, [r4, #184]
	str	r3, [r4, #200]
	str	r3, [r4, #216]
	str	r8, [r4, #172]
	str	r8, [r4, #176]
	str	r7, [r4, #188]
	str	r7, [r4, #192]
	str	r6, [r4, #204]
	str	r6, [r4, #208]
	str	lr, [r4, #220]
	str	lr, [r4, #224]
	ldr	r3, [r5, r2]
	str	r4, [r3]
	b	.L15712
.L15711:
	mov	r4, #16
	b	.L15706
.L15718:
	ldr	r1, .L15719+36
	mov	r2, r4
	ldr	r3, [r6, #-3980]
	ldr	r0, .L15719+40
.LPIC4540:
	add	r1, pc, r1
	sub	r3, r3, #1
	sub	r1, r1, #2960
.LPIC4539:
	add	r0, pc, r0
	sub	r1, r1, #12
	str	r3, [r6, #-3980]
	bl	printk(PLT)
	ldr	r3, [r6, #-3980]
	cmp	r3, #0
	ble	.L15709
	ldr	r3, .L15719+32
	ldr	r5, [r5, r3]
	ldr	r0, [r5]
	bl	kfree(PLT)
	str	r4, [r5]
.L15709:
	ldr	r3, .L15719+44
.LPIC4536:
	add	r3, pc, r3
	ldr	r0, [r3, #-3976]
	bl	destroy_workqueue(PLT)
	mvn	r0, #11
	b	.L15712
.L15715:
	ldr	r1, .L15719+48
	mov	r2, r0
	ldr	r0, .L15719+52
.LPIC4523:
	add	r1, pc, r1
	sub	r1, r1, #2960
.LPIC4522:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #21
	b	.L15712
.L15717:
	ldr	r1, .L15719+56
	ldr	r0, .L15719+60
.LPIC4528:
	add	r1, pc, r1
	sub	r1, r1, #2960
.LPIC4527:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #11
	b	.L15712
.L15720:
	.align	2
.L15719:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC4531+8)
	.word	.LANCHOR9-(.LPIC4524+8)
	.word	.LC787-(.LPIC4525+8)
	.word	kmalloc_caches(GOT)
	.word	bam2bam_data_connect_work-(.LPIC4532+8)
	.word	bam2bam_data_disconnect_work-(.LPIC4533+8)
	.word	bam2bam_data_suspend_work-(.LPIC4534+8)
	.word	bam2bam_data_resume_work-(.LPIC4535+8)
	.word	bam2bam_data_ports(GOT)
	.word	.LANCHOR8-(.LPIC4540+8)
	.word	.LC789-(.LPIC4539+8)
	.word	.LANCHOR9-(.LPIC4536+8)
	.word	.LANCHOR8-(.LPIC4523+8)
	.word	.LC694-(.LPIC4522+8)
	.word	.LANCHOR8-(.LPIC4528+8)
	.word	.LC788-(.LPIC4527+8)
	.fnend
	.size	bam_data_setup, .-bam_data_setup
	.align	2
	.global	mbim_bind_config
	.type	mbim_bind_config, %function
mbim_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	ldr	r0, .L15757
	strd	r6, [sp, #8]
	ldr	r7, .L15757+4
	mov	r4, r1
	strd	r8, [sp, #16]
	mov	r6, r2
	mov	r2, r1
	str	r10, [sp, #24]
.LPIC4542:
	add	r0, pc, r0
	str	lr, [sp, #28]
.LPIC4543:
	add	r7, pc, r7
	sub	r9, r7, #2944
	sub	r9, r9, #12
	mov	r1, r9
	bl	printk(PLT)
	ldr	r3, .L15757+8
.LPIC4544:
	add	r3, pc, r3
	ldr	r8, [r3, #-504]
	cmp	r4, r8
	bcs	.L15752
	ldr	r0, .L15757+12
	sub	r7, r7, #2928
	mov	r2, r8
	sub	r7, r7, #8
	mov	r1, r7
.LPIC4547:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r8
	bl	bam_data_setup(PLT)
	subs	r4, r0, #0
	bne	.L15753
	ldr	r4, .L15757+16
	mov	r1, r7
	mov	r2, r8
	ldr	r0, .L15757+20
.LPIC4555:
	add	r4, pc, r4
.LPIC4553:
	add	r0, pc, r0
	bl	printk(PLT)
	ldrb	r3, [r4, #3664]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15754
.L15725:
	ldr	r3, .L15757+24
.LPIC4561:
	add	r3, pc, r3
	ldr	r4, [r3, #-500]
	cmp	r4, #0
	beq	.L15755
	ldr	r3, .L15757+28
	mov	r0, #0
	mov	lr, #16384
	ldr	r7, .L15757+32
	mov	r1, r6
	mov	r2, #12
	ldr	r9, .L15757+36
	ldr	r8, .L15757+40
	ldr	ip, [r5, #24]
.LPIC4566:
	add	r3, pc, r3
	str	r0, [r4, #80]
	ldr	r0, .L15757+44
.LPIC4564:
	add	r7, pc, r7
	add	r3, r3, #3680
.LPIC4565:
	add	r9, pc, r9
	add	r3, r3, #8
	str	lr, [r4, #216]
.LPIC4567:
	add	r8, pc, r8
	add	r10, r7, #508
	ldr	lr, .L15757+48
	str	ip, [r4, #76]
	ldr	ip, .L15757+52
.LPIC4569:
	add	r0, pc, r0
	str	r3, [r4, #4]
	ldr	r3, .L15757+56
	str	r10, [r4, #192]
	ldr	r10, .L15757+60
	str	r9, [r4]
	ldr	r9, .L15757+64
.LPIC4568:
	add	lr, pc, lr
	str	r8, [r4, #24]
	ldr	r8, .L15757+68
.LPIC4570:
	add	ip, pc, ip
	str	r0, [r4, #32]
	ldr	r0, .L15757+72
.LPIC4571:
	add	r3, pc, r3
.LPIC4572:
	add	r10, pc, r10
	str	lr, [r4, #28]
.LPIC4573:
	add	r9, pc, r9
	str	ip, [r4, #36]
.LPIC4574:
	add	r8, pc, r8
	str	r3, [r4, #44]
.LPIC4575:
	add	r0, pc, r0
	str	r10, [r4, #40]
	str	r9, [r4, #48]
	str	r8, [r4, #52]
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L15727
	ldr	r0, .L15757+76
	mov	r1, r6
	mov	r2, #12
.LPIC4576:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	bne	.L15756
.L15727:
	mov	r3, #6
	str	r3, [r4, #124]
.L15729:
	add	r2, r4, #200
	add	r3, r4, #208
	mov	r1, r4
	mov	r0, r5
	strd	r2, [r4, #204]
	str	r2, [r4, #200]
	str	r3, [r4, #212]
	bl	usb_add_function(PLT)
	ldr	r1, .L15757+80
	mov	r4, r0
	ldr	r0, .L15757+84
	mov	r2, r4
.LPIC4583:
	add	r1, pc, r1
	sub	r1, r1, #2944
.LPIC4582:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mov	r0, r4
.L15750:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15753:
	ldr	r0, .L15757+88
	mov	r1, r7
	mov	r2, r4
.LPIC4549:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L15757+92
	mov	r1, r9
.LPIC4551:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	b	.L15750
.L15754:
	ldr	r0, [r5, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15750
	ldr	r7, .L15757+96
	uxtb	r3, r0
	ldr	r0, [r5, #24]
	strb	r3, [r4, #3664]
.LPIC4557:
	add	r7, pc, r7
	strb	r3, [r7, #1160]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15750
	uxtb	r0, r0
	strb	r0, [r4, #3672]
	strb	r0, [r7, #1180]
	strb	r0, [r7, #1192]
	b	.L15725
.L15756:
	ldr	r0, .L15757+100
	mov	r1, r6
	mov	r2, #12
.LPIC4577:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L15727
	ldr	r0, .L15757+104
	mov	r1, r6
	mov	r2, #12
.LPIC4578:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L15727
	ldr	r0, .L15757+108
	mov	r1, r6
	mov	r2, #12
.LPIC4579:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L15727
	ldr	r0, .L15757+112
	mov	r1, r6
	mov	r2, #12
.LPIC4580:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L15727
	ldr	r0, .L15757+116
	mov	r1, r6
	mov	r2, #12
.LPIC4581:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	bne	.L15727
	mov	r3, #8192
	mov	r0, #7
	mov	r1, #16
	mov	r2, #1
	str	r0, [r4, #124]
	strh	r1, [r7, #154]	@ movhi
	str	r3, [r7, #132]
	str	r3, [r7, #144]
	strh	r2, [r7, #136]	@ movhi
	b	.L15729
.L15755:
	ldr	r1, .L15757+120
	ldr	r0, .L15757+124
.LPIC4563:
	add	r1, pc, r1
	sub	r1, r1, #2944
.LPIC4562:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #11
	b	.L15750
.L15752:
	ldr	r0, .L15757+128
	mov	r1, r9
	mov	r2, r4
	mov	r3, r8
.LPIC4545:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #18
	b	.L15750
.L15758:
	.align	2
.L15757:
	.word	.LC790-(.LPIC4542+8)
	.word	.LANCHOR8-(.LPIC4543+8)
	.word	.LANCHOR4-(.LPIC4544+8)
	.word	.LC792-(.LPIC4547+8)
	.word	.LANCHOR0-(.LPIC4555+8)
	.word	.LC298-(.LPIC4553+8)
	.word	.LANCHOR4-(.LPIC4561+8)
	.word	.LANCHOR0-(.LPIC4566+8)
	.word	.LANCHOR1-(.LPIC4564+8)
	.word	.LC796-(.LPIC4565+8)
	.word	mbim_bind-(.LPIC4567+8)
	.word	mbim_set_alt-(.LPIC4569+8)
	.word	mbim_unbind-(.LPIC4568+8)
	.word	mbim_get_alt-(.LPIC4570+8)
	.word	mbim_setup-(.LPIC4571+8)
	.word	mbim_disable-(.LPIC4572+8)
	.word	mbim_suspend-(.LPIC4573+8)
	.word	mbim_resume-(.LPIC4574+8)
	.word	.LC0-(.LPIC4575+8)
	.word	.LC1-(.LPIC4576+8)
	.word	.LANCHOR8-(.LPIC4583+8)
	.word	.LC797-(.LPIC4582+8)
	.word	.LC793-(.LPIC4549+8)
	.word	.LC794-(.LPIC4551+8)
	.word	.LANCHOR1-(.LPIC4557+8)
	.word	.LC2-(.LPIC4577+8)
	.word	.LC3-(.LPIC4578+8)
	.word	.LC4-(.LPIC4579+8)
	.word	.LC5-(.LPIC4580+8)
	.word	.LC6-(.LPIC4581+8)
	.word	.LANCHOR8-(.LPIC4563+8)
	.word	.LC795-(.LPIC4562+8)
	.word	.LC791-(.LPIC4545+8)
	.fnend
	.size	mbim_bind_config, .-mbim_bind_config
	.align	2
	.type	mbim_function_bind_config, %function
mbim_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L15761
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
.LPIC4588:
	add	r0, pc, r0
	add	r0, r0, #3344
	add	r0, r0, #12
	bl	strim(PLT)
	mov	r2, r0
	ldr	lr, [sp, #4]
	mov	r0, r4
	mov	r1, #0
	ldr	r4, [sp]
	add	sp, sp, #8
	b	mbim_bind_config(PLT)
.L15762:
	.align	2
.L15761:
	.word	.LANCHOR2-(.LPIC4588+8)
	.fnend
	.size	mbim_function_bind_config, .-mbim_function_bind_config
	.align	2
	.global	bam_data_suspend
	.type	bam_data_suspend, %function
bam_data_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, .L15764
	ldr	r3, .L15764+4
.LPIC4591:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
.LPIC4589:
	add	r3, pc, r3
	ldr	r1, [r2, r0, asl #2]
	ldr	r0, [r3, #-3976]
	add	r1, r1, #200
	b	queue_work(PLT)
.L15765:
	.align	2
.L15764:
	.word	bam2bam_data_ports(GOT_PREL)+(.-(.LPIC4591+8))
	.word	.LANCHOR9-(.LPIC4589+8)
	.fnend
	.size	bam_data_suspend, .-bam_data_suspend
	.align	2
	.type	ecm_qc_suspend, %function
ecm_qc_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	b	bam_data_suspend(PLT)
	.fnend
	.size	ecm_qc_suspend, .-ecm_qc_suspend
	.align	2
	.type	mbim_suspend, %function
mbim_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L15769
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L15769+4
	str	lr, [sp, #4]
.LPIC4593:
	add	r1, pc, r1
	sub	r1, r1, #2912
.LPIC4592:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	ldr	r4, [sp]
	mov	r0, #0
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	bam_data_suspend(PLT)
.L15770:
	.align	2
.L15769:
	.word	.LANCHOR8-(.LPIC4593+8)
	.word	.LC798-(.LPIC4592+8)
	.fnend
	.size	mbim_suspend, .-mbim_suspend
	.align	2
	.type	rndis_qc_suspend, %function
rndis_qc_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	b	bam_data_suspend(PLT)
	.fnend
	.size	rndis_qc_suspend, .-rndis_qc_suspend
	.align	2
	.global	bam_data_resume
	.type	bam_data_resume, %function
bam_data_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, .L15773
	ldr	r3, .L15773+4
.LPIC4596:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
.LPIC4594:
	add	r3, pc, r3
	ldr	r1, [r2, r0, asl #2]
	ldr	r0, [r3, #-3976]
	add	r1, r1, #216
	b	queue_work(PLT)
.L15774:
	.align	2
.L15773:
	.word	bam2bam_data_ports(GOT_PREL)+(.-(.LPIC4596+8))
	.word	.LANCHOR9-(.LPIC4594+8)
	.fnend
	.size	bam_data_resume, .-bam_data_resume
	.align	2
	.type	ecm_qc_resume, %function
ecm_qc_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	b	bam_data_resume(PLT)
	.fnend
	.size	ecm_qc_resume, .-ecm_qc_resume
	.align	2
	.type	mbim_resume, %function
mbim_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L15778
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L15778+4
	str	lr, [sp, #4]
.LPIC4598:
	add	r1, pc, r1
	sub	r1, r1, #2896
.LPIC4597:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	ldr	r4, [sp]
	mov	r0, #0
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	bam_data_resume(PLT)
.L15779:
	.align	2
.L15778:
	.word	.LANCHOR8-(.LPIC4598+8)
	.word	.LC799-(.LPIC4597+8)
	.fnend
	.size	mbim_resume, .-mbim_resume
	.align	2
	.type	rndis_qc_resume, %function
rndis_qc_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	b	bam_data_resume(PLT)
	.fnend
	.size	rndis_qc_resume, .-rndis_qc_resume
	.align	2
	.global	ecm_bind_config
	.type	ecm_bind_config, %function
ecm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r0
	ldr	r0, .L15799
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r8, [r5, #24]
	.pad #28
	sub	sp, sp, #28
.LPIC4599:
	add	r0, pc, r0
	ldr	r3, [r8]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L15796
.L15786:
	mvn	r0, #21
.L15782:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L15796:
	ldr	r0, .L15799+4
	mov	r1, r4
.LPIC4600:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r6, #0
	cmpne	r0, #0
	beq	.L15786
	ldr	r7, .L15799+8
.LPIC4601:
	add	r7, pc, r7
	ldrb	r3, [r7, #792]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15797
.L15783:
	ldr	r3, .L15799+12
.LPIC4622:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15791
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L15798
.L15784:
	ldrb	r2, [r6, #3]	@ zero_extendqisi2
	add	r7, r4, #142
	mov	r1, #14
	ldrb	r3, [r6]	@ zero_extendqisi2
	mov	r0, r7
	ldrb	r8, [r6, #2]	@ zero_extendqisi2
	ldrb	lr, [r6, #4]	@ zero_extendqisi2
	ldrb	ip, [r6, #5]	@ zero_extendqisi2
	ldrb	r9, [r6, #1]	@ zero_extendqisi2
	str	r2, [sp, #8]
	ldr	r2, .L15799+16
	str	r8, [sp, #4]
	mov	r8, #15
	str	lr, [sp, #12]
	ldr	r6, .L15799+20
	str	ip, [sp, #16]
	str	r9, [sp]
.LPIC4611:
	add	r2, pc, r2
	bl	snprintf(PLT)
	ldr	r3, .L15799+24
.LPIC4612:
	add	r6, pc, r6
	mov	r0, r5
	add	r2, r6, #3696
	ldr	lr, .L15799+28
	mov	r1, r4
	str	r7, [r6, #804]
	ldr	ip, .L15799+32
	str	r2, [r4, #4]
	ldr	r7, .L15799+36
.LPIC4615:
	add	r3, pc, r3
	ldr	r2, .L15799+40
	strh	r8, [r4, #90]	@ movhi
	ldr	r5, .L15799+44
.LPIC4613:
	add	lr, pc, lr
	str	r3, [r4, #24]
	ldr	r3, .L15799+48
.LPIC4616:
	add	ip, pc, ip
.LPIC4618:
	add	r7, pc, r7
	str	lr, [r4]
.LPIC4617:
	add	r2, pc, r2
	str	ip, [r4, #28]
.LPIC4619:
	add	r5, pc, r5
	str	r7, [r4, #36]
.LPIC4620:
	add	r3, pc, r3
	str	r2, [r4, #32]
	str	r5, [r4, #44]
	str	r3, [r4, #40]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	beq	.L15782
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #804]
	bl	kfree(PLT)
	mov	r0, r5
	b	.L15782
.L15797:
	mov	r0, r8
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15782
	ldr	r4, .L15799+52
	uxtb	r3, r0
	ldr	r0, [r5, #24]
	strb	r3, [r7, #792]
.LPIC4603:
	add	r4, pc, r4
	strb	r3, [r4, #1332]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15782
	uxtb	r3, r0
	ldr	r0, [r5, #24]
	strb	r3, [r7, #808]
	strb	r3, [r4, #1364]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15782
	uxtb	r3, r0
	ldr	r0, [r5, #24]
	strb	r3, [r7, #800]
	strb	r3, [r4, #3399]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15782
	uxtb	r0, r0
	strb	r0, [r7, #816]
	strb	r0, [r4, #1323]
	b	.L15783
.L15791:
	mov	r4, #16
	b	.L15784
.L15798:
	mvn	r0, #11
	b	.L15782
.L15800:
	.align	2
.L15799:
	.word	.LC261-(.LPIC4599+8)
	.word	.LC407-(.LPIC4600+8)
	.word	.LANCHOR0-(.LPIC4601+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4622+8))
	.word	.LC800-(.LPIC4611+8)
	.word	.LANCHOR0-(.LPIC4612+8)
	.word	ecm_bind-(.LPIC4615+8)
	.word	.LC801-(.LPIC4613+8)
	.word	ecm_unbind-(.LPIC4616+8)
	.word	ecm_get_alt-(.LPIC4618+8)
	.word	ecm_set_alt-(.LPIC4617+8)
	.word	ecm_setup-(.LPIC4619+8)
	.word	ecm_disable-(.LPIC4620+8)
	.word	.LANCHOR1-(.LPIC4603+8)
	.fnend
	.size	ecm_bind_config, .-ecm_bind_config
	.align	2
	.global	rndis_qc_bind_config_vendor
	.type	rndis_qc_bind_config_vendor, %function
rndis_qc_bind_config_vendor:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldrb	r9, [sp, #40]	@ zero_extendqisi2
	beq	.L15809
	mov	r8, r3
	mov	r7, r2
	mov	r6, r0
	mov	r5, r1
	bl	rndis_init(PLT)
	cmp	r0, #0
	blt	.L15818
	mov	r0, #1
	bl	bam_data_setup(PLT)
	subs	r4, r0, #0
	bne	.L15822
	ldr	r10, .L15826
.LPIC4644:
	add	r10, pc, r10
	ldrb	r3, [r10, #3704]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15823
.L15808:
	ldr	r3, .L15826+4
.LPIC4647:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15814
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L15824
.L15804:
	ldr	r3, .L15826+8
	mov	r0, r6
	cmp	r9, #0
	ldr	r10, [r5]	@ unaligned
	moveq	r9, #15
	mov	r2, #0
	ldr	lr, .L15826+12
	mov	ip, #44
	mov	r1, r4
	ldr	r6, .L15826+16
.LPIC4636:
	add	r3, pc, r3
	str	r10, [r4, #114]	@ unaligned
	ldr	r10, .L15826+20
	ldrh	fp, [r5, #4]	@ unaligned
	add	r5, r3, #3728
	str	r7, [r4, #120]
	ldr	r3, .L15826+24
	add	r5, r5, #8
	str	r8, [r4, #132]
.LPIC4646:
	ldr	lr, [pc, lr]		@ tls_load_dot_plus_eight
	strb	r9, [r4, #124]
.LPIC4635:
	add	r10, pc, r10
	str	r5, [r4, #4]
	ldr	r8, .L15826+28
	strh	fp, [r4, #118]	@ unaligned
	ldr	r7, .L15826+32
.LPIC4634:
	add	r3, pc, r3
	str	r10, [r4]
	ldr	fp, .L15826+36
	str	lr, [r4, #100]
	ldr	r10, .L15826+40
	str	r3, [r4, #96]
	ldr	lr, .L15826+44
.LPIC4637:
	add	r8, pc, r8
	ldr	r3, .L15826+48
.LPIC4640:
	add	r7, pc, r7
	strh	r2, [r4, #90]	@ movhi
	ldr	r5, .L15826+52
.LPIC4639:
	add	fp, pc, fp
	str	r8, [r4, #24]
.LPIC4645:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
.LPIC4638:
	add	r10, pc, r10
	str	r7, [r4, #44]
.LPIC4641:
	add	lr, pc, lr
	str	fp, [r4, #32]
.LPIC4642:
	add	r3, pc, r3
	str	r10, [r4, #28]
.LPIC4643:
	add	r5, pc, r5
	str	lr, [r4, #40]
	str	r3, [r4, #48]
	str	r5, [r4, #52]
	str	ip, [r4, #92]
	str	r4, [r6]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L15825
.L15818:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15823:
	ldr	r0, [r6, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15818
	ldr	r4, .L15826+56
	uxtb	r3, r0
	ldr	r0, [r6, #24]
	strb	r3, [r10, #3704]
.LPIC4628:
	add	r4, pc, r4
	strb	r3, [r4, #3260]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15818
	uxtb	r3, r0
	ldr	r0, [r6, #24]
	strb	r3, [r10, #3712]
	strb	r3, [r4, #3280]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15818
	uxtb	r0, r0
	strb	r0, [r10, #3720]
	strb	r0, [r4, #3251]
	b	.L15808
.L15814:
	mov	r4, #16
	b	.L15804
.L15825:
	mov	r0, r4
	bl	kfree(PLT)
.L15805:
	bl	rndis_exit(PLT)
	mov	r0, r5
	b	.L15818
.L15824:
	mvn	r5, #11
	b	.L15805
.L15809:
	mvn	r0, #21
	b	.L15818
.L15822:
	ldr	r5, .L15826+60
	mov	r2, r4
	ldr	r0, .L15826+64
.LPIC4624:
	add	r5, pc, r5
	sub	r1, r5, #2880
.LPIC4623:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	r0, .L15826+68
	sub	r1, r5, #2864
	sub	r1, r1, #8
.LPIC4625:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	b	.L15818
.L15827:
	.align	2
.L15826:
	.word	.LANCHOR0-(.LPIC4644+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4647+8))
	.word	.LANCHOR0-(.LPIC4636+8)
	.word	rndis_qc_rm_hdr(GOT_PREL)+(.-(.LPIC4646+8))
	.word	_rndis_qc(GOT_PREL)+(.-(.LPIC4645+8))
	.word	.LC757-(.LPIC4635+8)
	.word	rndis_qc_add_header-(.LPIC4634+8)
	.word	rndis_qc_bind-(.LPIC4637+8)
	.word	rndis_qc_setup-(.LPIC4640+8)
	.word	rndis_qc_set_alt-(.LPIC4639+8)
	.word	rndis_qc_unbind-(.LPIC4638+8)
	.word	rndis_qc_disable-(.LPIC4641+8)
	.word	rndis_qc_suspend-(.LPIC4642+8)
	.word	rndis_qc_resume-(.LPIC4643+8)
	.word	.LANCHOR1-(.LPIC4628+8)
	.word	.LANCHOR8-(.LPIC4624+8)
	.word	.LC793-(.LPIC4623+8)
	.word	.LC794-(.LPIC4625+8)
	.fnend
	.size	rndis_qc_bind_config_vendor, .-rndis_qc_bind_config_vendor
	.align	2
	.global	rndis_qc_bind_config
	.type	rndis_qc_bind_config, %function
rndis_qc_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	mov	ip, #1
	.pad #12
	sub	sp, sp, #12
	mov	r2, #0
	mov	r3, r2
	str	ip, [sp]
	bl	rndis_qc_bind_config_vendor(PLT)
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_qc_bind_config, .-rndis_qc_bind_config
	.align	2
	.global	gether_setup_name
	.type	gether_setup_name, %function
gether_setup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	ldr	r9, .L15849
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
.LPIC4648:
	add	r9, pc, r9
	ldr	r5, [r9, #-3972]
	cmp	r5, #0
	mvnne	r0, #15
	bne	.L15831
	mov	r7, r1
	mov	r1, #1
	str	r2, [sp, #4]
	mov	r8, r0
	mov	r2, r1
	mov	r0, #132
	bl	alloc_etherdev_mqs(PLT)
	subs	r4, r0, #0
	beq	.L15838
	add	r6, r4, #1216
	mov	ip, #2560
	str	r5, [r4, #1216]
	add	lr, r6, #52
	add	r2, r6, #92
	ldr	r3, [sp, #4]
	add	r1, r6, #108
	add	fp, r6, #20
	str	r5, [r4, #1232]
	str	lr, [r4, #1268]
	add	r10, r6, #28
	str	lr, [r4, #1272]
	ldr	lr, .L15849+4
	str	r2, [r4, #1308]
	str	r2, [r4, #1312]
	ldr	r2, .L15849+8
	str	r1, [r4, #1324]
.LPIC4649:
	add	lr, pc, lr
	str	r1, [r4, #1328]
	mov	r1, #16
	str	ip, [r4, #1304]
	str	lr, [r4, #1316]
	ldr	lr, .L15849+12
.LPIC4651:
	add	r2, pc, r2
	str	ip, [r4, #1320]
	str	r5, [r4, #1276]
	str	r4, [r4, #1224]
.LPIC4650:
	add	lr, pc, lr
	str	r5, [r4, #1280]
	str	fp, [r4, #1236]
	str	lr, [r4, #1332]
	str	fp, [r4, #1240]
	str	r10, [r4, #1244]
	str	r10, [r4, #1248]
	bl	snprintf(PLT)
	ldr	r0, [r9, #-3968]
	add	r9, r8, #32
	ldr	r1, [r4, #444]
	bl	get_ether_addr(PLT)
	cmp	r0, #0
	bne	.L15846
.L15833:
	ldr	r3, .L15849+16
	add	r5, r6, #125
	mov	r1, r5
.LPIC4655:
	add	r3, pc, r3
	ldr	r0, [r3, #-3964]
	bl	get_ether_addr(PLT)
	cmp	r0, #0
	bne	.L15847
	cmp	r7, #0
	beq	.L15835
.L15848:
	ldr	r3, [r5]	@ unaligned
	str	r3, [r7]	@ unaligned
	ldrh	r3, [r5, #4]	@ unaligned
	strh	r3, [r7, #4]	@ unaligned
.L15835:
	ldr	r3, .L15849+20
	str	r8, [r4, #1228]
	mov	r0, r4
	ldr	r2, .L15849+24
	str	r9, [r4, #688]
.LPIC4658:
	add	r3, pc, r3
.LPIC4660:
	add	r2, pc, r2
	add	r1, r3, #316
	add	r2, r2, #3744
	add	r3, r3, #452
	str	r1, [r4, #288]
	str	r3, [r4, #292]
	str	r2, [r4, #736]
	bl	register_netdev(PLT)
	subs	r7, r0, #0
	bge	.L15836
	mov	r0, r4
	bl	free_netdev(PLT)
	mov	r0, r7
.L15831:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15847:
	ldr	r1, .L15849+28
	mov	r0, r9
	ldr	r2, .L15849+32
.LPIC4656:
	add	r1, pc, r1
.LPIC4657:
	add	r2, pc, r2
	bl	dev_warn(PLT)
	cmp	r7, #0
	bne	.L15848
	b	.L15835
.L15846:
	ldr	r1, .L15849+36
	mov	r0, r9
	ldr	r2, .L15849+40
.LPIC4653:
	add	r1, pc, r1
.LPIC4654:
	add	r2, pc, r2
	bl	dev_warn(PLT)
	b	.L15833
.L15838:
	mvn	r0, #11
	b	.L15831
.L15836:
	ldr	r0, .L15849+44
	ldr	r1, [r4, #1224]
	ldr	r2, [r4, #444]
.LPIC4661:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L15849+48
	mov	r2, r5
	ldr	r1, [r4, #1224]
.LPIC4662:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, .L15849+52
	mov	r0, r4
.LPIC4663:
	add	r3, pc, r3
	str	r6, [r3, #-3972]
	bl	netif_carrier_off(PLT)
	mov	r0, r7
	b	.L15831
.L15850:
	.align	2
.L15849:
	.word	.LANCHOR9-(.LPIC4648+8)
	.word	eth_work-(.LPIC4649+8)
	.word	.LC802-(.LPIC4651+8)
	.word	process_rx_w-(.LPIC4650+8)
	.word	.LANCHOR9-(.LPIC4655+8)
	.word	.LANCHOR6-(.LPIC4658+8)
	.word	.LANCHOR0-(.LPIC4660+8)
	.word	.LC803-(.LPIC4656+8)
	.word	.LC805-(.LPIC4657+8)
	.word	.LC803-(.LPIC4653+8)
	.word	.LC804-(.LPIC4654+8)
	.word	.LC806-(.LPIC4661+8)
	.word	.LC807-(.LPIC4662+8)
	.word	.LANCHOR9-(.LPIC4663+8)
	.fnend
	.size	gether_setup_name, .-gether_setup_name
	.align	2
	.global	gether_setup
	.type	gether_setup, %function
gether_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, .L15852
.LPIC4664:
	add	r2, pc, r2
	b	gether_setup_name(PLT)
.L15853:
	.align	2
.L15852:
	.word	.LC808-(.LPIC4664+8)
	.fnend
	.size	gether_setup, .-gether_setup
	.align	2
	.type	rndis_function_bind_config, %function
rndis_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #4]
	.pad #24
	sub	sp, sp, #24
	cmp	r4, #0
	beq	.L15865
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	mov	r5, r1
	ldrb	r3, [r4]	@ zero_extendqisi2
	ldr	r1, .L15868
	ldr	r0, .L15868+4
	str	r2, [sp]
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
.LPIC4669:
	add	r1, pc, r1
	sub	r1, r1, #2832
.LPIC4668:
	add	r0, pc, r0
	str	r2, [sp, #4]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	sub	r1, r1, #12
	mov	r2, r1
	str	ip, [sp, #8]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	str	ip, [sp, #16]
	bl	printk(PLT)
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	ldr	r3, [r5, #24]
	bne	.L15866
	ldr	r2, .L15868+8
	mov	r1, r4
	ldr	r0, [r3]
.LPIC4672:
	add	r2, pc, r2
	bl	gether_setup_name(PLT)
	mov	r6, r0
.L15858:
	cmp	r6, #0
	bne	.L15867
	ldrb	r3, [r4, #269]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15860
	ldr	r3, .L15868+12
	mvn	r0, #31
	mov	r1, #1
	mov	r2, #3
.LPIC4676:
	add	r3, pc, r3
	strb	r0, [r3, #3096]
	strb	r0, [r3, #3105]
	strb	r1, [r3, #3097]
	strb	r1, [r3, #3106]
	strb	r2, [r3, #3098]
	strb	r2, [r3, #3107]
.L15860:
	ldr	r2, [r4, #8]
	mov	r0, r5
	mov	r1, r4
	add	r3, r4, #13
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rndis_bind_config_vendor(PLT)
.L15866:
	ldr	r2, .L15868+16
	mov	r1, #0
	ldr	r0, [r3]
.LPIC4671:
	add	r2, pc, r2
	bl	gether_setup_name(PLT)
	mov	r6, r0
	b	.L15858
.L15865:
	ldr	r1, .L15868+20
	ldr	r0, .L15868+24
.LPIC4666:
	add	r1, pc, r1
	sub	r1, r1, #2832
.LPIC4665:
	add	r0, pc, r0
	sub	r1, r1, #12
	mov	r2, r1
	bl	printk(PLT)
	mvn	r0, #0
.L15856:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15867:
	ldr	r1, .L15868+28
	ldr	r0, .L15868+32
.LPIC4674:
	add	r1, pc, r1
	sub	r1, r1, #2832
.LPIC4673:
	add	r0, pc, r0
	sub	r1, r1, #12
	mov	r2, r1
	bl	printk(PLT)
	mov	r0, r6
	b	.L15856
.L15869:
	.align	2
.L15868:
	.word	.LANCHOR8-(.LPIC4669+8)
	.word	.LC810-(.LPIC4668+8)
	.word	.LC757-(.LPIC4672+8)
	.word	.LANCHOR1-(.LPIC4676+8)
	.word	.LC757-(.LPIC4671+8)
	.word	.LANCHOR8-(.LPIC4666+8)
	.word	.LC809-(.LPIC4665+8)
	.word	.LANCHOR8-(.LPIC4674+8)
	.word	.LC811-(.LPIC4673+8)
	.fnend
	.size	rndis_function_bind_config, .-rndis_function_bind_config
	.align	2
	.global	gether_cleanup
	.type	gether_cleanup, %function
gether_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r4, .L15876
	str	lr, [sp, #4]
.LPIC4682:
	add	r4, pc, r4
	ldr	r3, [r4, #-3972]
	cmp	r3, #0
	beq	.L15870
	ldr	r0, [r3, #8]
	bl	unregister_netdev(PLT)
	ldr	r0, [r4, #-3972]
	add	r0, r0, #88
	bl	flush_work(PLT)
	ldr	r3, [r4, #-3972]
	ldr	r0, [r3, #8]
	bl	free_netdev(PLT)
	mov	r3, #0
	str	r3, [r4, #-3972]
.L15870:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L15877:
	.align	2
.L15876:
	.word	.LANCHOR9-(.LPIC4682+8)
	.fnend
	.size	gether_cleanup, .-gether_cleanup
	.align	2
	.type	ncm_function_unbind_config, %function
ncm_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	gether_cleanup(PLT)
	.fnend
	.size	ncm_function_unbind_config, .-ncm_function_unbind_config
	.align	2
	.type	ecm_function_unbind_config, %function
ecm_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	gether_cleanup(PLT)
	.fnend
	.size	ecm_function_unbind_config, .-ecm_function_unbind_config
	.align	2
	.type	ecm_function_bind_config, %function
ecm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r4, [r0, #4]
	.pad #28
	sub	sp, sp, #28
	cmp	r4, #0
	beq	.L15886
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	mov	r7, r1
	ldrb	r3, [r4]	@ zero_extendqisi2
	ldr	r5, .L15889
	ldr	r0, .L15889+4
	str	r2, [sp]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
.LPIC4690:
	add	r5, pc, r5
	sub	r5, r5, #2816
.LPIC4689:
	add	r0, pc, r0
	str	ip, [sp, #4]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	mov	r1, r5
	mov	r2, r5
	str	ip, [sp, #8]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	str	ip, [sp, #16]
	bl	printk(PLT)
	ldr	r3, [r7, #24]
	mov	r1, r4
	ldr	r2, .L15889+8
	ldr	r0, [r3]
.LPIC4692:
	add	r2, pc, r2
	bl	gether_setup_name(PLT)
	subs	r6, r0, #0
	bne	.L15887
	mov	r0, r7
	mov	r1, r4
	bl	ecm_bind_config(PLT)
	subs	r6, r0, #0
	moveq	r0, r6
	bne	.L15888
.L15882:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L15886:
	ldr	r1, .L15889+12
	ldr	r0, .L15889+16
.LPIC4687:
	add	r1, pc, r1
	sub	r1, r1, #2816
.LPIC4686:
	add	r0, pc, r0
	mov	r2, r1
	bl	printk(PLT)
	mvn	r0, #21
	b	.L15882
.L15888:
	ldr	r0, .L15889+20
	mov	r1, r5
	mov	r2, r5
.LPIC4696:
	add	r0, pc, r0
	bl	printk(PLT)
	bl	gether_cleanup(PLT)
	mov	r0, r6
	b	.L15882
.L15887:
	ldr	r0, .L15889+24
	mov	r1, r5
	mov	r2, r5
.LPIC4693:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r6
	b	.L15882
.L15890:
	.align	2
.L15889:
	.word	.LANCHOR8-(.LPIC4690+8)
	.word	.LC810-(.LPIC4689+8)
	.word	.LC813-(.LPIC4692+8)
	.word	.LANCHOR8-(.LPIC4687+8)
	.word	.LC812-(.LPIC4686+8)
	.word	.LC814-(.LPIC4696+8)
	.word	.LC811-(.LPIC4693+8)
	.fnend
	.size	ecm_function_bind_config, .-ecm_function_bind_config
	.align	2
	.type	rndis_function_unbind_config, %function
rndis_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	gether_cleanup(PLT)
	.fnend
	.size	rndis_function_unbind_config, .-rndis_function_unbind_config
	.align	2
	.global	gether_connect
	.type	gether_connect, %function
gether_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15925
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC4699:
	add	r3, pc, r3
	ldr	r6, [r3, #-3972]
	cmp	r6, #0
	beq	.L15906
	ldr	r3, .L15925+4
	mov	r4, r0
.LPIC4704:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L15894
	movw	r1, #32800
	bl	kmem_cache_alloc(PLT)
	cmp	r0, #0
	str	r0, [r4, #136]
	beq	.L15922
.L15895:
	ldr	r3, [r4, #80]
	str	r6, [r3]
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	beq	.L15923
.L15897:
	ldr	r0, [r4, #136]
	bl	kfree(PLT)
.L15896:
	mov	r0, r5
.L15912:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15923:
	ldr	r3, [r4, #84]
	str	r6, [r3]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L15898
	ldr	r3, [r6, #12]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bhi	.L15924
.L15908:
	mov	r7, #2
.L15899:
	add	r8, r6, #16
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	add	r0, r6, #20
	ldr	r1, [r4, #80]
	mov	r2, r7
	bl	prealloc(PLT)
	subs	r5, r0, #0
	blt	.L15900
	mov	r2, r7
	ldr	r1, [r4, #84]
	add	r0, r6, #28
	bl	prealloc(PLT)
	mov	r5, r0
	mov	r0, r8
	bl	_raw_spin_unlock(PLT)
	cmp	r5, #0
	bne	.L15901
	ldrb	r3, [r4, #88]	@ zero_extendqisi2
	mov	r0, r6
	strb	r3, [r6, #124]
	ldr	r3, [r4, #92]
	str	r3, [r6, #68]
	ldr	r3, [r4, #124]
	str	r3, [r6, #84]
	ldr	r3, [r4, #120]
	str	r3, [r6, #80]
	ldr	r3, [r4, #108]
	str	r3, [r6, #72]
	ldr	r3, [r4, #112]
	str	r3, [r6, #76]
	bl	_raw_spin_lock(PLT)
	str	r5, [r6, #44]
	str	r5, [r6, #40]
	str	r5, [r6, #48]
	str	r4, [r6, #4]
	str	r6, [r4, #76]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #116]
	tst	r3, #1
	beq	.L15902
	ldr	r3, [r4, #128]
	cmp	r3, #0
	beq	.L15903
.L15920:
	mov	r0, r4
	blx	r3
.L15903:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r6, #8]
	bl	netif_carrier_on(PLT)
	ldr	r0, [r6, #8]
	ldr	r3, [r0, #116]
	tst	r3, #1
	beq	.L15912
	mov	r0, r6
	mov	r1, #32
	bl	rx_fill(PLT)
	ldr	r2, [r6, #8]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r6, #36]
	ldr	r4, [r2, #576]
	add	r1, r4, #80
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	beq	.L15921
	ldr	r0, [r4, #4]
	bl	__netif_schedule(PLT)
	ldr	r0, [r6, #8]
	b	.L15912
.L15900:
	mov	r0, r8
	bl	_raw_spin_unlock(PLT)
.L15901:
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L15898:
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	cmp	r5, #0
	blt	.L15897
.L15921:
	ldr	r0, [r6, #8]
	b	.L15912
.L15894:
	mov	r3, #16
	str	r3, [r4, #136]
	b	.L15895
.L15924:
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L15908
	ldr	r3, .L15925+8
.LPIC4703:
	add	r3, pc, r3
	ldr	r7, [r3, #348]
	mov	r7, r7, asl #1
	b	.L15899
.L15906:
	mvn	r0, #21
	b	.L15912
.L15902:
	ldr	r3, [r4, #132]
	cmp	r3, #0
	bne	.L15920
	b	.L15903
.L15922:
	ldr	r1, .L15925+12
	mvn	r5, #11
	ldr	r0, .L15925+16
.LPIC4702:
	add	r1, pc, r1
	sub	r1, r1, #2784
.LPIC4701:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L15896
.L15926:
	.align	2
.L15925:
	.word	.LANCHOR9-(.LPIC4699+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4704+8))
	.word	.LANCHOR1-(.LPIC4703+8)
	.word	.LANCHOR8-(.LPIC4702+8)
	.word	.LC815-(.LPIC4701+8)
	.fnend
	.size	gether_connect, .-gether_connect
	.align	2
	.global	gether_disconnect
	.type	gether_disconnect, %function
gether_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #76]
	.pad #4
	sub	sp, sp, #4
	cmp	r4, #0
	beq	.L15927
	ldr	r3, [r4, #8]
	mov	r5, r0
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L15948
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit(PLT)
.L15930:
	ldr	r0, [r4, #8]
	add	r6, r4, #16
	add	r8, r4, #20
	bl	netif_carrier_off(PLT)
	ldr	r0, [r5, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	fp, [r4, #20]
	cmp	r8, fp
	movne	r10, #256
	movne	r9, #512
	bne	.L15935
	b	.L15936
.L15934:
	ldr	r0, [r5, #80]
	mov	r1, r7
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	fp, [r4, #20]
	cmp	fp, r8
	beq	.L15936
.L15935:
	ldr	r2, [fp, #4]
	mov	r0, r6
	sub	r7, fp, #36
	ldr	r1, [fp]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [fp]
	str	r9, [fp, #4]
	bl	_raw_spin_unlock(PLT)
	ldrb	r2, [r5, #116]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L15934
	ldr	r0, [fp, #-36]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [fp, #-36]
	b	.L15934
.L15936:
	mov	r7, #0
	ldr	r0, [r5, #136]
	add	r8, r4, #28
	bl	kfree(PLT)
	str	r7, [r5, #136]
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r5, #80]
	str	r7, [r3]
	ldr	r3, [r5, #80]
	str	r7, [r3, #28]
	ldr	r0, [r5, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r7, [r4, #28]
	cmp	r8, r7
	movne	r10, #256
	movne	r9, #512
	beq	.L15933
.L15939:
	ldr	r2, [r7]
	mov	r0, r6
	ldr	r3, [r7, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r7]
	str	r9, [r7, #4]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r5, #84]
	sub	r1, r7, #36
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r7, [r4, #28]
	cmp	r7, r8
	bne	.L15939
.L15933:
	mov	r0, r6
	add	r7, r4, #64
	bl	_raw_spin_unlock(PLT)
	mov	r0, r7
	add	r6, r4, #52
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #52]
	cmp	r3, r6
	cmpne	r3, #0
	movne	r8, #0
	beq	.L15938
.L15940:
	ldr	r2, [r4, #60]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #60]
	ldmia	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #52]
	cmp	r3, r6
	cmpne	r3, #0
	bne	.L15940
.L15938:
	mov	r0, r7
	mov	r6, #0
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r5, #84]
	mov	r0, r4
	str	r6, [r3]
	ldr	r3, [r5, #84]
	str	r6, [r3, #28]
	str	r6, [r4, #68]
	str	r6, [r4, #84]
	str	r6, [r4, #80]
	bl	_raw_spin_lock(PLT)
	mov	r0, r4
	str	r6, [r4, #4]
	str	r6, [r5, #76]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock(PLT)
.L15948:
	ldr	r0, .L15949
	movw	r1, #1847
.LPIC4705:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r0, .L15949+4
.LPIC4706:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15930
.L15927:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15950:
	.align	2
.L15949:
	.word	.LC82-(.LPIC4705+8)
	.word	.LC83-(.LPIC4706+8)
	.fnend
	.size	gether_disconnect, .-gether_disconnect
	.align	2
	.type	rndis_disable, %function
rndis_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #160]
	ldr	r3, [r3]
	cmp	r3, #0
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #156]
	bl	rndis_uninit(PLT)
	mov	r0, r4
	bl	gether_disconnect(PLT)
	ldr	r0, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #160]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_disable, .-rndis_disable
	.align	2
	.type	rndis_set_alt, %function
rndis_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r0, #140]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L15981
	ldrb	r3, [r0, #141]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L15964
	ldr	r2, [r0, #80]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L15965
	bl	gether_disconnect(PLT)
	ldr	r2, [r4, #80]
.L15965:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L15966
	ldr	r3, [r4, #84]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L15966
.L15967:
	mov	r5, #0
	mov	r0, r4
	strb	r5, [r4, #88]
	strh	r5, [r4, #90]	@ movhi
	bl	gether_connect(PLT)
	cmn	r0, #4096
	bhi	.L15963
	mov	r1, r0
	add	r2, r4, #90
	ldrb	r0, [r4, #156]	@ zero_extendqisi2
	bl	rndis_set_param_dev(PLT)
	mov	r0, r5
.L15963:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15981:
	ldr	r2, [r0, #160]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L15960
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #160]
.L15960:
	ldr	r1, [r2, #28]
	cmp	r1, #0
	beq	.L15982
.L15961:
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #160]
	mov	r0, #0
	str	r4, [r3]
	b	.L15963
.L15966:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15969
	ldr	r0, [r5]
	mov	r1, r4
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	beq	.L15967
.L15969:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L15963
.L15964:
	mvn	r0, #21
	b	.L15963
.L15982:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15964
	ldr	r2, [r4, #160]
	ldr	r1, [r2, #28]
	b	.L15961
	.fnend
	.size	rndis_set_alt, .-rndis_set_alt
	.align	2
	.type	ecm_disable, %function
ecm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #80]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L15984
	bl	gether_disconnect(PLT)
.L15984:
	ldr	r0, [r4, #156]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L15983
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #156]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #156]
	str	r3, [r2, #28]
.L15983:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_disable, .-ecm_disable
	.align	2
	.type	ecm_set_alt, %function
ecm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r5, r2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	ip, [r0, #140]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	ip, r1
	ldr	r6, [r3, #24]
	beq	.L16018
	ldrb	r3, [r0, #141]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r1, r3
	bne	.L15999
	ldr	r2, [r0, #80]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L16000
	bl	gether_disconnect(PLT)
	ldr	r2, [r4, #80]
.L16000:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L16001
	ldr	r3, [r4, #84]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L16001
.L16002:
	cmp	r5, #1
	beq	.L16019
.L16005:
	ldr	r6, [r4, #160]
	mov	r3, #1
	strb	r3, [r4, #164]
	cmp	r6, #0
	beq	.L16007
	ldr	r3, [r6]
	mov	r5, #0
	mov	lr, #8
	mov	ip, #2
	mvn	r0, #94
	mov	r1, r6
	mov	r2, #32
	strb	r5, [r3, #1]
	ldrb	r7, [r4, #165]	@ zero_extendqisi2
	strb	r5, [r3, #6]
	strb	r5, [r3, #7]
	strh	r7, [r3, #2]	@ unaligned
	str	lr, [r6, #4]
	strb	ip, [r4, #164]
	strb	r0, [r3]
	ldrb	r0, [r4, #140]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #156]
	str	r5, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, r5
	blt	.L16020
.L16007:
	mov	r0, #0
.L15996:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16018:
	cmp	r2, #0
	bne	.L15999
	ldr	r2, [r0, #156]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L15997
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #156]
.L15997:
	ldr	r1, [r2, #28]
	cmp	r1, #0
	beq	.L16021
.L15998:
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #156]
	mov	r0, #0
	str	r4, [r3]
	b	.L15996
.L16019:
	ldr	r3, [r6]
	ldr	r0, .L16022
	ldr	r1, [r3, #28]
.LPIC4707:
	add	r0, pc, r0
	bl	strcmp(PLT)
	adds	r2, r0, #0
	mov	r3, #15
	movne	r2, #1
	mov	r0, r4
	strh	r3, [r4, #90]	@ movhi
	strb	r2, [r4, #88]
	bl	gether_connect(PLT)
	cmn	r0, #4096
	bls	.L16005
	b	.L15996
.L16001:
	ldr	r0, [r6]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L16004
	ldr	r0, [r6]
	mov	r1, r4
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	beq	.L16002
.L16004:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L15996
.L16020:
	mov	r0, r5
	str	r6, [r4, #160]
	b	.L15996
.L15999:
	mvn	r0, #21
	b	.L15996
.L16021:
	ldr	r0, [r6]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15999
	ldr	r2, [r4, #156]
	ldr	r1, [r2, #28]
	b	.L15998
.L16023:
	.align	2
.L16022:
	.word	.LC411-(.LPIC4707+8)
	.fnend
	.size	ecm_set_alt, .-ecm_set_alt
	.align	2
	.type	ncm_disable, %function
ncm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #80]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L16025
	bl	gether_disconnect(PLT)
.L16025:
	ldr	r0, [r4, #156]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L16024
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #156]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #156]
	str	r3, [r2, #28]
.L16024:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_disable, .-ncm_disable
	.align	2
	.type	ncm_set_alt, %function
ncm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	ip, [r0, #140]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	ip, r1
	ldr	r7, [r3, #24]
	beq	.L16063
	ldrb	r5, [r0, #141]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r1, r5
	movne	r5, #1
	moveq	r5, #0
	bne	.L16040
	ldr	r3, [r0, #80]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L16041
	bl	gether_disconnect(PLT)
	ldr	r3, .L16066
	mov	r1, #15
	strb	r5, [r4, #172]
	str	r5, [r4, #92]
	mov	r2, #2048
	strh	r1, [r4, #90]	@ movhi
.LPIC4708:
	add	r3, pc, r3
	add	r1, r3, #28
	str	r1, [r4, #168]
	ldr	r3, [r3, #16]
	str	r2, [r4, #104]
	str	r3, [r4, #100]
.L16041:
	cmp	r6, #1
	beq	.L16064
.L16042:
	add	r6, r4, #176
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r5, [r4, #160]
	mov	r2, #2
	ldr	r3, [r4, #20]
	strb	r2, [r4, #164]
	cmp	r5, #0
	ldr	r1, [r3, #24]
	beq	.L16048
	ldr	r3, [r5]
	mov	r2, #0
	mov	r0, #8
	mov	lr, #42
	mov	ip, #16
	strb	lr, [r3, #1]
	strb	r0, [r3, #6]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	r2, [r3, #7]
	ldr	r0, [r5]
	str	ip, [r5, #4]
	ldr	r2, [r1]
	ldr	r1, [r2, #20]
	cmp	r1, #2
	movls	r2, #28672
	movtls	r2, 148
	bls	.L16049
	ldr	ip, [r2, #16]
	mov	r1, #28672
	mov	r2, #0
	movt	r1, 148
	movt	r2, 6500
	cmp	ip, #3
	movne	r2, r1
.L16049:
	mov	ip, #1
	mvn	r1, #94
	str	r2, [r0, #8]
	str	r2, [r0, #12]
	mov	r2, #0
	mov	r0, r6
	strb	ip, [r4, #164]
	strb	r1, [r3]
	ldrb	r1, [r4, #140]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	str	r2, [r4, #160]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4, #156]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	cmp	r7, #0
	strlt	r5, [r4, #160]
.L16048:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	mov	r0, #0
.L16037:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16064:
	ldr	r2, [r4, #80]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L16043
	ldr	r3, [r4, #84]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L16043
.L16044:
	ldr	r3, [r7]
	ldr	r0, .L16066+4
	ldr	r1, [r3, #28]
.LPIC4710:
	add	r0, pc, r0
	bl	strcmp(PLT)
	adds	r2, r0, #0
	mov	r3, #15
	movne	r2, #1
	mov	r0, r4
	strh	r3, [r4, #90]	@ movhi
	strb	r2, [r4, #88]
	bl	gether_connect(PLT)
	cmn	r0, #4096
	bls	.L16042
	b	.L16037
.L16063:
	cmp	r2, #0
	bne	.L16040
	ldr	r2, [r0, #156]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L16038
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #156]
.L16038:
	ldr	r1, [r2, #28]
	cmp	r1, #0
	beq	.L16065
.L16039:
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #156]
	mov	r0, #0
	str	r4, [r3]
	b	.L16037
.L16040:
	mvn	r0, #21
	b	.L16037
.L16043:
	ldr	r0, [r7]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L16046
	ldr	r0, [r7]
	mov	r1, r4
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	beq	.L16044
.L16046:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L16037
.L16065:
	ldr	r0, [r7]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L16040
	ldr	r2, [r4, #156]
	ldr	r1, [r2, #28]
	b	.L16039
.L16067:
	.align	2
.L16066:
	.word	.LANCHOR1-(.LPIC4708+8)
	.word	.LC411-(.LPIC4710+8)
	.fnend
	.size	ncm_set_alt, .-ncm_set_alt
	.align	2
	.global	gether_qc_get_macs
	.type	gether_qc_get_macs, %function
gether_qc_get_macs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L16070
	mov	r5, r1
	str	r6, [sp, #8]
	mov	r1, r0
	str	lr, [sp, #12]
.LPIC4711:
	add	r4, pc, r4
	ldr	r0, [r4, #-3960]
	bl	get_qc_ether_addr(PLT)
	ldr	r6, [sp, #8]
	mov	r1, r5
	ldr	r0, [r4, #-3956]
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	get_qc_ether_addr(PLT)
.L16071:
	.align	2
.L16070:
	.word	.LANCHOR9-(.LPIC4711+8)
	.fnend
	.size	gether_qc_get_macs, .-gether_qc_get_macs
	.align	2
	.global	ecm_qc_bind_config
	.type	ecm_qc_bind_config, %function
ecm_qc_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	ldr	r0, .L16114
	strd	r8, [sp, #16]
	mov	r7, r2
	str	lr, [sp, #24]
	ldr	r3, [r6, #24]
	.pad #28
	sub	sp, sp, #28
.LPIC4713:
	add	r0, pc, r0
	ldr	r3, [r3]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L16083
	ldr	r0, .L16114+4
	mov	r1, r4
.LPIC4714:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r5, #0
	cmpne	r0, #0
	beq	.L16083
	mov	r0, #1
	bl	bam_data_setup(PLT)
	subs	r4, r0, #0
	bne	.L16106
	ldr	r8, .L16114+8
.LPIC4754:
	add	r8, pc, r8
	ldrb	r3, [r8, #3632]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L16107
.L16081:
	ldr	r3, .L16114+12
.LPIC4765:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L16087
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L16108
.L16076:
	ldr	r0, .L16114+16
	mov	r1, r7
	mov	r2, #12
.LPIC4726:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L16089
	ldr	r0, .L16114+20
	mov	r1, r7
	mov	r2, #12
.LPIC4727:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #2
	bne	.L16109
.L16077:
	str	r3, [r4, #116]
	ldrb	r2, [r5, #2]	@ zero_extendqisi2
	add	r8, r4, #120
	ldrb	r3, [r5]	@ zero_extendqisi2
	mov	r0, r8
	mov	r1, #14
	ldrb	r9, [r5, #1]	@ zero_extendqisi2
	ldrb	r7, [r5, #3]	@ zero_extendqisi2
	ldrb	lr, [r5, #4]	@ zero_extendqisi2
	ldrb	ip, [r5, #5]	@ zero_extendqisi2
	str	r2, [sp, #4]
	ldr	r2, .L16114+24
	str	r9, [sp]
	str	r7, [sp, #8]
	str	lr, [sp, #12]
	str	ip, [sp, #16]
.LPIC4764:
	add	r2, pc, r2
	bl	snprintf(PLT)
.L16082:
	mov	r3, #15
	ldr	r7, .L16114+28
	mov	r0, r6
	ldr	lr, .L16114+32
	mov	r1, r4
	strh	r3, [r4, #90]	@ movhi
	ldr	ip, .L16114+36
	ldr	r3, .L16114+40
.LPIC4736:
	add	r7, pc, r7
	ldr	r6, .L16114+44
	add	r2, r7, #3760
.LPIC4737:
	add	lr, pc, lr
	ldr	r5, .L16114+48
.LPIC4739:
	add	ip, pc, ip
	add	r2, r2, #8
	str	r8, [r7, #3644]
.LPIC4740:
	add	r3, pc, r3
	str	lr, [r4]
	ldr	lr, .L16114+52
	str	ip, [r4, #24]
	ldr	ip, .L16114+56
.LPIC4741:
	add	r6, pc, r6
	str	r2, [r4, #4]
	ldr	r2, .L16114+60
.LPIC4742:
	add	r5, pc, r5
	str	r3, [r4, #28]
	ldr	r3, .L16114+64
.LPIC4743:
	add	lr, pc, lr
	str	r5, [r4, #36]
.LPIC4744:
	add	ip, pc, ip
	str	r6, [r4, #32]
.LPIC4745:
	add	r2, pc, r2
	str	lr, [r4, #44]
.LPIC4746:
	add	r3, pc, r3
	str	ip, [r4, #40]
	strd	r2, [r4, #48]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	bne	.L16110
	ldr	r3, [r4, #116]
	cmp	r3, #7
	beq	.L16111
.L16102:
	mov	r0, r5
	b	.L16100
.L16083:
	mvn	r0, #21
.L16100:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L16107:
	ldr	r0, [r6, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L16100
	ldr	r4, .L16114+68
	uxtb	r3, r0
	ldr	r0, [r6, #24]
	strb	r3, [r8, #3632]
.LPIC4720:
	add	r4, pc, r4
	strb	r3, [r4, #1000]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L16100
	uxtb	r3, r0
	ldr	r0, [r6, #24]
	strb	r3, [r8, #3648]
	strb	r3, [r4, #1032]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L16100
	uxtb	r0, r0
	strb	r0, [r8, #3640]
	strb	r0, [r4, #3415]
	b	.L16081
.L16089:
	mov	r3, #1
	b	.L16077
.L16087:
	mov	r4, #16
	b	.L16076
.L16109:
	ldr	r0, .L16114+72
	mov	r1, r7
	mov	r2, #12
.LPIC4728:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #3
	beq	.L16077
	ldr	r0, .L16114+76
	mov	r1, r7
	mov	r2, #12
.LPIC4729:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #4
	beq	.L16077
	ldr	r0, .L16114+80
	mov	r1, r7
	mov	r2, #12
.LPIC4730:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #5
	beq	.L16077
	ldr	r0, .L16114+84
	mov	r1, r7
	mov	r2, #12
.LPIC4731:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #6
	beq	.L16077
	ldr	r0, .L16114+88
	mov	r1, r7
	mov	r2, #12
.LPIC4732:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	bne	.L16112
	ldr	r5, .L16114+92
	mov	r3, #7
	add	r8, r4, #120
	str	r3, [r4, #116]
.LPIC4755:
	add	r5, pc, r5
	sub	r1, r5, #4000
	add	r0, r1, #6
	bl	gether_qc_get_macs(PLT)
	ldrb	r3, [r5, #-3999]	@ zero_extendqisi2
	mov	r0, r8
	mov	r1, #14
	ldrb	r2, [r5, #-3997]	@ zero_extendqisi2
	ldrb	r7, [r5, #-3998]	@ zero_extendqisi2
	ldrb	lr, [r5, #-3996]	@ zero_extendqisi2
	ldrb	ip, [r5, #-3995]	@ zero_extendqisi2
	str	r3, [sp]
	ldrb	r3, [r5, #-4000]	@ zero_extendqisi2
	str	r2, [sp, #8]
	ldr	r2, .L16114+96
	str	r7, [sp, #4]
	str	lr, [sp, #12]
	str	ip, [sp, #16]
.LPIC4757:
	add	r2, pc, r2
	bl	snprintf(PLT)
	b	.L16082
.L16111:
	ldr	r0, .L16114+100
.LPIC4750:
	add	r0, pc, r0
	sub	r0, r0, #4000
	sub	r0, r0, #8
	bl	ecm_ipa_init(PLT)
	subs	r6, r0, #0
	bne	.L16113
.L16103:
	mov	r0, r6
	b	.L16100
.L16108:
	mvn	r0, #11
	b	.L16100
.L16112:
	ldr	r0, .L16114+104
	mov	r1, r7
	mov	r2, #12
.LPIC4733:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #8
	beq	.L16077
	ldr	r0, .L16114+108
	mov	r1, r7
	mov	r2, #12
.LPIC4734:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #9
	beq	.L16077
	ldr	r0, .L16114+112
	mov	r1, r7
	mov	r2, #12
.LPIC4735:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #10
	movne	r3, #0
	b	.L16077
.L16110:
	ldr	r1, .L16114+116
	ldr	r0, .L16114+120
.LPIC4748:
	add	r1, pc, r1
	sub	r1, r1, #2752
.LPIC4747:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r3, #0
	mov	r0, r4
	str	r3, [r7, #3644]
	bl	kfree(PLT)
	b	.L16102
.L16106:
	ldr	r5, .L16114+124
	mov	r2, r4
	ldr	r0, .L16114+128
.LPIC4716:
	add	r5, pc, r5
	sub	r1, r5, #2768
.LPIC4715:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, .L16114+132
	sub	r1, r5, #2752
.LPIC4717:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	b	.L16100
.L16113:
	ldr	r1, .L16114+136
	ldr	r0, .L16114+140
.LPIC4752:
	add	r1, pc, r1
	sub	r1, r1, #2752
.LPIC4751:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	str	r5, [r7, #3644]
	bl	kfree(PLT)
	b	.L16103
.L16115:
	.align	2
.L16114:
	.word	.LC261-(.LPIC4713+8)
	.word	.LC407-(.LPIC4714+8)
	.word	.LANCHOR0-(.LPIC4754+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4765+8))
	.word	.LC0-(.LPIC4726+8)
	.word	.LC1-(.LPIC4727+8)
	.word	.LC800-(.LPIC4764+8)
	.word	.LANCHOR0-(.LPIC4736+8)
	.word	.LC801-(.LPIC4737+8)
	.word	ecm_qc_bind-(.LPIC4739+8)
	.word	ecm_qc_unbind-(.LPIC4740+8)
	.word	ecm_qc_set_alt-(.LPIC4741+8)
	.word	ecm_qc_get_alt-(.LPIC4742+8)
	.word	ecm_qc_setup-(.LPIC4743+8)
	.word	ecm_qc_disable-(.LPIC4744+8)
	.word	ecm_qc_suspend-(.LPIC4745+8)
	.word	ecm_qc_resume-(.LPIC4746+8)
	.word	.LANCHOR1-(.LPIC4720+8)
	.word	.LC2-(.LPIC4728+8)
	.word	.LC3-(.LPIC4729+8)
	.word	.LC4-(.LPIC4730+8)
	.word	.LC5-(.LPIC4731+8)
	.word	.LC6-(.LPIC4732+8)
	.word	.LANCHOR9-(.LPIC4755+8)
	.word	.LC800-(.LPIC4757+8)
	.word	.LANCHOR9-(.LPIC4750+8)
	.word	.LC7-(.LPIC4733+8)
	.word	.LC8-(.LPIC4734+8)
	.word	.LC294-(.LPIC4735+8)
	.word	.LANCHOR8-(.LPIC4748+8)
	.word	.LC816-(.LPIC4747+8)
	.word	.LANCHOR8-(.LPIC4716+8)
	.word	.LC793-(.LPIC4715+8)
	.word	.LC794-(.LPIC4717+8)
	.word	.LANCHOR8-(.LPIC4752+8)
	.word	.LC817-(.LPIC4751+8)
	.fnend
	.size	ecm_qc_bind_config, .-ecm_qc_bind_config
	.align	2
	.global	gether_qc_setup_name
	.type	gether_qc_setup_name, %function
gether_qc_setup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	str	r8, [sp, #16]
	mov	r8, r1
	mov	r1, #1
	strd	r6, [sp, #8]
	mov	r2, r1
	mov	r6, r0
	mov	r0, #28
	str	lr, [sp, #20]
	bl	alloc_etherdev_mqs(PLT)
	subs	r4, r0, #0
	beq	.L16123
	ldr	r2, .L16133
	mov	ip, #0
	mov	r3, r5
	mov	r1, #16
	str	r4, [r4, #1224]
	add	r7, r6, #32
	str	ip, [r4, #1216]
.LPIC4766:
	add	r2, pc, r2
	bl	snprintf(PLT)
	ldr	r3, .L16133+4
	ldr	r1, [r4, #444]
.LPIC4767:
	add	r3, pc, r3
	ldr	r0, [r3, #-3960]
	bl	get_qc_ether_addr(PLT)
	cmp	r0, #0
	bne	.L16131
.L16119:
	ldr	r3, .L16133+8
	add	r5, r4, #1232
	add	r5, r5, #5
	mov	r1, r5
.LPIC4770:
	add	r3, pc, r3
	ldr	r0, [r3, #-3956]
	bl	get_qc_ether_addr(PLT)
	cmp	r0, #0
	bne	.L16132
.L16120:
	cmp	r8, #0
	beq	.L16121
	ldr	r3, [r5]	@ unaligned
	str	r3, [r8]	@ unaligned
	ldrh	r3, [r5, #4]	@ unaligned
	strh	r3, [r8, #4]	@ unaligned
.L16121:
	ldr	r3, .L16133+12
	mov	r0, r4
.LPIC4773:
	add	r3, pc, r3
	add	r2, r3, #616
	add	r3, r3, #752
	str	r2, [r4, #288]
	str	r3, [r4, #292]
	bl	netif_carrier_off(PLT)
	ldr	r3, .L16133+16
	str	r6, [r4, #1228]
	mov	r0, r4
	str	r7, [r4, #688]
.LPIC4775:
	add	r3, pc, r3
	add	r3, r3, #3776
	str	r3, [r4, #736]
	bl	register_netdev(PLT)
	subs	r6, r0, #0
	bge	.L16122
	mov	r0, r4
	bl	free_netdev(PLT)
	mov	r0, r6
.L16117:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16131:
	ldr	r1, .L16133+20
	mov	r0, r7
	ldr	r2, .L16133+24
.LPIC4768:
	add	r1, pc, r1
.LPIC4769:
	add	r2, pc, r2
	bl	dev_warn(PLT)
	b	.L16119
.L16132:
	ldr	r1, .L16133+28
	mov	r0, r7
	ldr	r2, .L16133+32
.LPIC4771:
	add	r1, pc, r1
.LPIC4772:
	add	r2, pc, r2
	bl	dev_warn(PLT)
	b	.L16120
.L16123:
	mvn	r0, #11
	b	.L16117
.L16122:
	ldr	r0, .L16133+36
	ldr	r1, [r4, #1224]
	ldr	r2, [r4, #444]
.LPIC4776:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L16133+40
	mov	r2, r5
	ldr	r1, [r4, #1224]
.LPIC4777:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r6
	b	.L16117
.L16134:
	.align	2
.L16133:
	.word	.LC802-(.LPIC4766+8)
	.word	.LANCHOR9-(.LPIC4767+8)
	.word	.LANCHOR9-(.LPIC4770+8)
	.word	.LANCHOR6-(.LPIC4773+8)
	.word	.LANCHOR0-(.LPIC4775+8)
	.word	.LC803-(.LPIC4768+8)
	.word	.LC804-(.LPIC4769+8)
	.word	.LC803-(.LPIC4771+8)
	.word	.LC805-(.LPIC4772+8)
	.word	.LC806-(.LPIC4776+8)
	.word	.LC807-(.LPIC4777+8)
	.fnend
	.size	gether_qc_setup_name, .-gether_qc_setup_name
	.align	2
	.global	gether_qc_setup
	.type	gether_qc_setup, %function
gether_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, .L16136
.LPIC4778:
	add	r2, pc, r2
	b	gether_qc_setup_name(PLT)
.L16137:
	.align	2
.L16136:
	.word	.LC808-(.LPIC4778+8)
	.fnend
	.size	gether_qc_setup, .-gether_qc_setup
	.align	2
	.type	rndis_qc_function_bind_config, %function
rndis_qc_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r4, [r0, #4]
	.pad #28
	sub	sp, sp, #28
	cmp	r4, #0
	beq	.L16147
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	mov	r7, r1
	ldrb	r3, [r4]	@ zero_extendqisi2
	ldr	r5, .L16150
	ldr	r0, .L16150+4
	str	r2, [sp]
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
.LPIC4783:
	add	r5, pc, r5
	sub	r5, r5, #2720
.LPIC4782:
	add	r0, pc, r0
	str	r2, [sp, #4]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	sub	r5, r5, #12
	mov	r1, r5
	mov	r2, r5
	str	ip, [sp, #8]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	str	ip, [sp, #16]
	bl	printk(PLT)
	ldr	r3, [r7, #24]
	mov	r1, r4
	ldr	r2, .L16150+8
	ldr	r0, [r3]
.LPIC4785:
	add	r2, pc, r2
	bl	gether_qc_setup_name(PLT)
	subs	r6, r0, #0
	bne	.L16148
	ldrb	r3, [r4, #269]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L16149
.L16142:
	ldrb	ip, [r4, #12]	@ zero_extendqisi2
	mov	r0, r7
	mov	r1, r4
	ldr	r2, [r4, #8]
	add	r3, r4, #13
	str	ip, [sp]
	bl	rndis_qc_bind_config_vendor(PLT)
.L16140:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L16149:
	ldr	r3, .L16150+12
	mvn	r0, #31
	mov	r1, #1
	mov	r2, #3
.LPIC4789:
	add	r3, pc, r3
	strb	r0, [r3, #3248]
	strb	r0, [r3, #3257]
	strb	r1, [r3, #3249]
	strb	r1, [r3, #3258]
	strb	r2, [r3, #3250]
	strb	r2, [r3, #3259]
	b	.L16142
.L16147:
	ldr	r1, .L16150+16
	ldr	r0, .L16150+20
.LPIC4780:
	add	r1, pc, r1
	sub	r1, r1, #2720
.LPIC4779:
	add	r0, pc, r0
	sub	r1, r1, #12
	mov	r2, r1
	bl	printk(PLT)
	mvn	r0, #21
	b	.L16140
.L16148:
	ldr	r0, .L16150+24
	mov	r1, r5
	mov	r2, r5
.LPIC4786:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r6
	b	.L16140
.L16151:
	.align	2
.L16150:
	.word	.LANCHOR8-(.LPIC4783+8)
	.word	.LC810-(.LPIC4782+8)
	.word	.LC757-(.LPIC4785+8)
	.word	.LANCHOR1-(.LPIC4789+8)
	.word	.LANCHOR8-(.LPIC4780+8)
	.word	.LC809-(.LPIC4779+8)
	.word	.LC811-(.LPIC4786+8)
	.fnend
	.size	rndis_qc_function_bind_config, .-rndis_qc_function_bind_config
	.align	2
	.type	ecm_qc_function_bind_config, %function
ecm_qc_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #4]
	.pad #24
	sub	sp, sp, #24
	cmp	r4, #0
	beq	.L16162
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	mov	r7, r1
	ldrb	r3, [r4]	@ zero_extendqisi2
	ldr	r5, .L16164
	ldr	r0, .L16164+4
	str	r2, [sp]
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
.LPIC4799:
	add	r5, pc, r5
	sub	r5, r5, #2688
.LPIC4798:
	add	r0, pc, r0
	str	r2, [sp, #4]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	sub	r5, r5, #12
	mov	r1, r5
	mov	r2, r5
	str	ip, [sp, #8]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	str	ip, [sp, #16]
	bl	printk(PLT)
	ldr	r0, .L16164+8
.LPIC4801:
	add	r0, pc, r0
	add	r0, r0, #3168
	bl	strim(PLT)
	mov	r6, r0
	ldr	r0, .L16164+12
	mov	r1, r6
.LPIC4802:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L16156
	ldr	r3, [r7, #24]
	mov	r1, r4
	ldr	r2, .L16164+16
	ldr	r0, [r3]
.LPIC4803:
	add	r2, pc, r2
	bl	gether_qc_setup_name(PLT)
	subs	r8, r0, #0
	bne	.L16163
.L16156:
	mov	r0, r7
	mov	r1, r4
	mov	r2, r6
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	ecm_qc_bind_config(PLT)
.L16163:
	ldr	r0, .L16164+20
	mov	r1, r5
	mov	r2, r5
.LPIC4804:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r8
.L16154:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16162:
	ldr	r1, .L16164+24
	ldr	r0, .L16164+28
.LPIC4796:
	add	r1, pc, r1
	sub	r1, r1, #2688
.LPIC4795:
	add	r0, pc, r0
	sub	r1, r1, #12
	mov	r2, r1
	bl	printk(PLT)
	mvn	r0, #21
	b	.L16154
.L16165:
	.align	2
.L16164:
	.word	.LANCHOR8-(.LPIC4799+8)
	.word	.LC810-(.LPIC4798+8)
	.word	.LANCHOR2-(.LPIC4801+8)
	.word	.LC6-(.LPIC4802+8)
	.word	.LC813-(.LPIC4803+8)
	.word	.LC811-(.LPIC4804+8)
	.word	.LANCHOR8-(.LPIC4796+8)
	.word	.LC812-(.LPIC4795+8)
	.fnend
	.size	ecm_qc_function_bind_config, .-ecm_qc_function_bind_config
	.align	2
	.global	gether_qc_cleanup_name
	.type	gether_qc_cleanup_name, %function
gether_qc_cleanup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16169
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r0
	str	lr, [sp, #4]
.LPIC4809:
	ldr	r0, [pc, r3]		@ tls_load_dot_plus_eight
	bl	dev_get_by_name(PLT)
	subs	r4, r0, #0
	beq	.L16166
#APP
@ 17 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	ldr	r2, .L16169+4
	mov	r3, sp
	bic	r1, r3, #8128
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
.LPIC4808:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	ldr	r1, [r2, r1, asl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
#APP
@ 142 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	bl	unregister_netdev(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	free_netdev(PLT)
.L16166:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L16170:
	.align	2
.L16169:
	.word	init_net(GOT_PREL)+(.-(.LPIC4809+8))
	.word	__per_cpu_offset(GOT_PREL)+(.-(.LPIC4808+8))
	.fnend
	.size	gether_qc_cleanup_name, .-gether_qc_cleanup_name
	.align	2
	.type	rndis_qc_function_unbind_config, %function
rndis_qc_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, .L16172
.LPIC4810:
	add	r0, pc, r0
	b	gether_qc_cleanup_name(PLT)
.L16173:
	.align	2
.L16172:
	.word	.LC818-(.LPIC4810+8)
	.fnend
	.size	rndis_qc_function_unbind_config, .-rndis_qc_function_unbind_config
	.align	2
	.type	ecm_qc_function_unbind_config, %function
ecm_qc_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L16178
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC4811:
	add	r0, pc, r0
	add	r0, r0, #3168
	bl	strim(PLT)
	mov	r1, r0
	ldr	r0, .L16178+4
.LPIC4812:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L16177
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L16177:
	ldr	r0, .L16178+8
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC4813:
	add	r0, pc, r0
	b	gether_qc_cleanup_name(PLT)
.L16179:
	.align	2
.L16178:
	.word	.LANCHOR2-(.LPIC4811+8)
	.word	.LC6-(.LPIC4812+8)
	.word	.LC819-(.LPIC4813+8)
	.fnend
	.size	ecm_qc_function_unbind_config, .-ecm_qc_function_unbind_config
	.align	2
	.global	gether_qc_connect_name
	.type	gether_qc_connect_name, %function
gether_qc_connect_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16207
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC4816:
	ldr	r0, [pc, r3]		@ tls_load_dot_plus_eight
	bl	dev_get_by_name(PLT)
	subs	r4, r0, #0
	beq	.L16183
#APP
@ 17 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	ldr	r2, .L16207+4
	mov	r3, sp
	bic	r1, r3, #8128
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
.LPIC4815:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	ldr	r1, [r2, r1, asl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
#APP
@ 142 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	adds	r7, r4, #1216
	beq	.L16183
	ldrb	r3, [r5, #88]	@ zero_extendqisi2
	mov	r0, r7
	strb	r3, [r4, #1236]
	ldr	r3, [r5, #92]
	str	r3, [r4, #1232]
	bl	_raw_spin_lock(PLT)
	str	r5, [r4, #1220]
	str	r7, [r5, #76]
	ldr	r3, [r4, #1224]
	ldr	r3, [r3, #116]
	tst	r3, #1
	bne	.L16204
	ldr	r3, [r5, #108]
	cmp	r3, #0
	beq	.L16185
.L16202:
	mov	r0, r5
	blx	r3
.L16185:
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	cmp	r6, #0
	ldr	r0, [r4, #1224]
	bne	.L16205
.L16182:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16204:
	ldr	r3, [r5, #104]
	cmp	r3, #0
	bne	.L16202
	b	.L16185
.L16183:
	mvn	r0, #21
	b	.L16182
.L16205:
	bl	netif_carrier_on(PLT)
	ldr	r0, [r4, #1224]
	ldr	r3, [r0, #116]
	tst	r3, #1
	beq	.L16182
	ldr	r5, [r0, #576]
	mov	r0, #0
	add	r1, r5, #80
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	bne	.L16206
.L16203:
	ldr	r0, [r4, #1224]
	b	.L16182
.L16206:
	ldr	r0, [r5, #4]
	bl	__netif_schedule(PLT)
	b	.L16203
.L16208:
	.align	2
.L16207:
	.word	init_net(GOT_PREL)+(.-(.LPIC4816+8))
	.word	__per_cpu_offset(GOT_PREL)+(.-(.LPIC4815+8))
	.fnend
	.size	gether_qc_connect_name, .-gether_qc_connect_name
	.align	2
	.global	gether_qc_disconnect_name
	.type	gether_qc_disconnect_name, %function
gether_qc_disconnect_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16220
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC4821:
	ldr	r0, [pc, r3]		@ tls_load_dot_plus_eight
	bl	dev_get_by_name(PLT)
	subs	r4, r0, #0
	beq	.L16209
#APP
@ 17 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	ldr	r2, .L16220+4
	mov	r3, sp
	bic	r1, r3, #8128
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
.LPIC4820:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	ldr	r1, [r2, r1, asl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
#APP
@ 142 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	adds	r6, r4, #1216
	beq	.L16209
	ldr	r3, [r4, #1224]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L16219
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit(PLT)
.L16214:
	ldr	r0, [r4, #1224]
	bl	netif_carrier_off(PLT)
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #1220]
	str	r3, [r5, #76]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock(PLT)
.L16209:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16219:
	ldr	r0, .L16220+8
	movw	r1, #1847
.LPIC4818:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r0, .L16220+12
.LPIC4819:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L16214
.L16221:
	.align	2
.L16220:
	.word	init_net(GOT_PREL)+(.-(.LPIC4821+8))
	.word	__per_cpu_offset(GOT_PREL)+(.-(.LPIC4820+8))
	.word	.LC82-(.LPIC4818+8)
	.word	.LC83-(.LPIC4819+8)
	.fnend
	.size	gether_qc_disconnect_name, .-gether_qc_disconnect_name
	.align	2
	.type	ecm_qc_disable, %function
ecm_qc_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #80]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L16224
	add	r0, r0, #148
	mov	r1, #0
	bl	bam_data_disconnect(PLT)
	ldr	r3, [r4, #116]
	cmp	r3, #7
	beq	.L16224
	ldr	r1, .L16234
	mov	r0, r4
.LPIC4822:
	add	r1, pc, r1
	bl	gether_qc_disconnect_name(PLT)
.L16224:
	ldr	r0, [r4, #136]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L16222
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #136]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #136]
	str	r3, [r2, #28]
.L16222:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L16235:
	.align	2
.L16234:
	.word	.LC819-(.LPIC4822+8)
	.fnend
	.size	ecm_qc_disable, .-ecm_qc_disable
	.align	2
	.type	ecm_qc_set_alt, %function
ecm_qc_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	mov	r5, r2
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldrb	r0, [r0, #112]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r4, #20]
	cmp	r0, r1
	ldr	r6, [r3, #24]
	beq	.L16274
	ldrb	r3, [r4, #113]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r1, r3
	movne	r1, #1
	moveq	r1, #0
	bne	.L16273
	ldr	r2, [r4, #80]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L16243
	add	r0, r4, #148
	bl	bam_data_disconnect(PLT)
	ldr	r3, [r4, #116]
	cmp	r3, #7
	beq	.L16272
	ldr	r1, .L16278
	mov	r0, r4
.LPIC4823:
	add	r1, pc, r1
	bl	gether_qc_disconnect_name(PLT)
.L16272:
	ldr	r2, [r4, #80]
.L16243:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L16245
	ldr	r3, [r4, #84]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L16245
.L16246:
	cmp	r5, #1
	beq	.L16275
.L16249:
	ldr	r6, [r4, #140]
.L16258:
	mov	r3, #1
	cmp	r6, #0
	strb	r3, [r4, #144]
	beq	.L16257
	ldr	r3, [r6]
	mov	r5, #0
	mov	lr, #8
	mov	ip, #2
	mvn	r0, #94
	mov	r1, r6
	mov	r2, #32
	strb	r5, [r3, #1]
	ldrb	r7, [r4, #145]	@ zero_extendqisi2
	strb	r5, [r3, #6]
	strb	r5, [r3, #7]
	strh	r7, [r3, #2]	@ unaligned
	str	lr, [r6, #4]
	strb	ip, [r4, #144]
	strb	r0, [r3]
	ldrb	r0, [r4, #112]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #136]
	str	r5, [r4, #140]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, r5
	movlt	r0, r5
	strlt	r6, [r4, #140]
	blt	.L16270
.L16257:
	mov	r0, #0
.L16270:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L16275:
	ldr	r3, [r6]
	ldr	r0, .L16278+4
	ldr	r1, [r3, #28]
.LPIC4824:
	add	r0, pc, r0
	bl	strcmp(PLT)
	ldr	r3, [r4, #116]
	adds	r0, r0, #0
	mov	r2, #15
	movne	r0, #1
	strh	r2, [r4, #90]	@ movhi
	strb	r0, [r4, #88]
	cmp	r3, #7
	beq	.L16250
	ldr	r1, .L16278+8
	mov	r2, r5
	mov	r0, r4
.LPIC4825:
	add	r1, pc, r1
	bl	gether_qc_connect_name(PLT)
	cmn	r0, #4096
	bhi	.L16270
	ldr	r3, [r4, #20]
	ldr	r2, [r4, #116]
	ldr	r3, [r3, #24]
	cmp	r2, #7
	moveq	r6, #2
	movne	r6, #0
	ldr	r5, [r3]
.L16252:
	ldr	ip, [r4, #80]
	mov	r2, #0
	str	r3, [r4, #148]
	ldr	r0, [r4, #84]
	mov	r3, r2
	str	r4, [r4, #152]
	mov	r1, r6
	str	ip, [r4, #156]
	str	r0, [r4, #160]
	ldr	r0, [r5, #28]
	bl	usb_bam_get_connection_idx(PLT)
	mov	r7, r0
	mov	r1, r6
	ldr	r0, [r5, #28]
	mov	r2, #1
	mov	r3, #0
	bl	usb_bam_get_connection_idx(PLT)
	uxtb	r0, r0
	mov	r1, #0
	ldr	r2, [r4, #116]
	uxtb	r3, r7
	strd	r0, [sp]
	add	r0, r4, #148
	bl	bam_data_connect(PLT)
	subs	r3, r0, #0
	bne	.L16276
	ldr	r6, [r4, #140]
	mov	r2, #1
	strb	r2, [r4, #145]
	strb	r2, [r4, #144]
	cmp	r6, #0
	beq	.L16258
	ldr	r5, [r6]
	mov	lr, #8
	mov	ip, #2
	mvn	r0, #94
	mov	r1, r6
	mov	r2, #32
	strb	r3, [r5, #1]
	ldrb	r7, [r4, #145]	@ zero_extendqisi2
	strb	r3, [r5, #6]
	strb	r3, [r5, #7]
	strh	r7, [r5, #2]	@ unaligned
	str	lr, [r6, #4]
	strb	ip, [r4, #144]
	strb	r0, [r5]
	ldrb	r0, [r4, #112]	@ zero_extendqisi2
	strh	r0, [r5, #4]	@ unaligned
	ldr	r0, [r4, #136]
	str	r3, [r4, #140]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r6, [r4, #140]
	bge	.L16249
	b	.L16258
.L16274:
	cmp	r2, #0
	bne	.L16273
	ldr	r2, [r4, #136]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L16240
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #136]
.L16240:
	ldr	r1, [r2, #28]
	cmp	r1, #0
	beq	.L16277
.L16241:
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #136]
	mov	r0, #0
	str	r4, [r3]
	b	.L16270
.L16245:
	ldr	r0, [r6]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L16248
	ldr	r0, [r6]
	mov	r1, r4
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	beq	.L16246
.L16248:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L16270
.L16250:
	ldr	r3, [r4, #20]
	mov	r6, #2
	ldr	r3, [r3, #24]
	ldr	r5, [r3]
	b	.L16252
.L16276:
	ldr	r1, .L16278+12
	mov	r2, r3
	ldr	r0, .L16278+16
.LPIC4827:
	add	r1, pc, r1
.LPIC4826:
	add	r0, pc, r0
	sub	r1, r1, #2672
	bl	printk(PLT)
.L16273:
	mvn	r0, #21
	b	.L16270
.L16277:
	ldr	r0, [r6]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L16273
	ldr	r2, [r4, #136]
	ldr	r1, [r2, #28]
	b	.L16241
.L16279:
	.align	2
.L16278:
	.word	.LC819-(.LPIC4823+8)
	.word	.LC411-(.LPIC4824+8)
	.word	.LC819-(.LPIC4825+8)
	.word	.LANCHOR8-(.LPIC4827+8)
	.word	.LC820-(.LPIC4826+8)
	.fnend
	.size	ecm_qc_set_alt, .-ecm_qc_set_alt
	.align	2
	.type	rndis_qc_disable, %function
rndis_qc_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #148]
	ldr	r3, [r3]
	cmp	r3, #0
	bxeq	lr
	ldr	r1, .L16287
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	ldr	r0, .L16287+4
	str	lr, [sp, #4]
.LPIC4829:
	add	r1, pc, r1
	sub	r1, r1, #2640
.LPIC4828:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	r0, [r4, #136]
	bl	rndis_uninit(PLT)
	add	r0, r4, #160
	mov	r1, #0
	bl	bam_data_disconnect(PLT)
	ldr	r1, .L16287+8
	mov	r0, r4
.LPIC4830:
	add	r1, pc, r1
	bl	gether_qc_disconnect_name(PLT)
	ldr	r0, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #148]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L16288:
	.align	2
.L16287:
	.word	.LANCHOR8-(.LPIC4829+8)
	.word	.LC821-(.LPIC4828+8)
	.word	.LC818-(.LPIC4830+8)
	.fnend
	.size	rndis_qc_disable, .-rndis_qc_disable
	.align	2
	.type	rndis_qc_set_alt, %function
rndis_qc_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldrb	r2, [r0, #112]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L16314
	ldrb	r3, [r0, #113]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L16313
	ldr	r0, [r0, #80]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L16296
	add	r0, r4, #160
	mov	r1, #0
	bl	bam_data_disconnect(PLT)
	ldr	r1, .L16317
	mov	r0, r4
.LPIC4831:
	add	r1, pc, r1
	bl	gether_qc_disconnect_name(PLT)
	ldr	r0, [r4, #80]
.L16296:
	ldr	r3, [r0, #28]
	cmp	r3, #0
	beq	.L16297
	ldr	ip, [r4, #84]
	ldr	r3, [ip, #28]
	cmp	r3, #0
	beq	.L16297
.L16298:
	ldr	lr, [r4, #20]
	mov	r5, #0
	mov	r1, r5
	mov	r2, r5
	strb	r5, [r4, #88]
	mov	r3, r5
	strh	r5, [r4, #90]	@ movhi
	ldr	lr, [lr, #24]
	ldr	r6, [lr]
	str	lr, [r4, #160]
	str	ip, [r4, #172]
	str	r4, [r4, #164]
	str	r0, [r4, #168]
	ldr	r0, [r6, #28]
	bl	usb_bam_get_connection_idx(PLT)
	mov	r7, r0
	mov	r1, r5
	ldr	r0, [r6, #28]
	mov	r3, r5
	mov	r2, #1
	bl	usb_bam_get_connection_idx(PLT)
	uxtb	r2, r0
	mov	r0, #2
	mov	r1, r5
	str	r0, [sp, #4]
	uxtb	r3, r7
	add	r0, r4, #160
	str	r2, [sp]
	mov	r2, #6
	bl	bam_data_connect(PLT)
	subs	r5, r0, #0
	bne	.L16315
	ldr	r1, .L16317+4
	ldr	r0, .L16317+8
.LPIC4835:
	add	r1, pc, r1
	sub	r1, r1, #2624
.LPIC4834:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	ldr	r1, .L16317+12
	mov	r0, r4
	mov	r2, r5
.LPIC4836:
	add	r1, pc, r1
	bl	gether_qc_connect_name(PLT)
	cmn	r0, #4096
	bhi	.L16294
	mov	r1, r0
	add	r2, r4, #90
	ldrb	r0, [r4, #136]	@ zero_extendqisi2
	bl	rndis_set_param_dev(PLT)
	mov	r0, r5
.L16294:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L16315:
	ldr	r1, .L16317+16
	mov	r2, r5
	ldr	r0, .L16317+20
.LPIC4833:
	add	r1, pc, r1
	sub	r1, r1, #2624
.LPIC4832:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
.L16313:
	mvn	r0, #21
	b	.L16294
.L16314:
	ldr	r2, [r0, #148]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L16291
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #148]
.L16291:
	ldr	r1, [r2, #28]
	cmp	r1, #0
	beq	.L16316
.L16292:
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #148]
	mov	r0, #0
	str	r4, [r3]
	b	.L16294
.L16297:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L16300
	ldr	r0, [r5]
	mov	r1, r4
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L16300
	ldr	r0, [r4, #80]
	ldr	ip, [r4, #84]
	b	.L16298
.L16316:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L16313
	ldr	r2, [r4, #148]
	ldr	r1, [r2, #28]
	b	.L16292
.L16300:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L16294
.L16318:
	.align	2
.L16317:
	.word	.LC818-(.LPIC4831+8)
	.word	.LANCHOR8-(.LPIC4835+8)
	.word	.LC822-(.LPIC4834+8)
	.word	.LC818-(.LPIC4836+8)
	.word	.LANCHOR8-(.LPIC4833+8)
	.word	.LC820-(.LPIC4832+8)
	.fnend
	.size	rndis_qc_set_alt, .-rndis_qc_set_alt
	.align	2
	.global	pcm_buffer_size
	.type	pcm_buffer_size, %function
pcm_buffer_size:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #380]
	bx	lr
	.fnend
	.size	pcm_buffer_size, .-pcm_buffer_size
	.align	2
	.global	pcm_period_size
	.type	pcm_period_size, %function
pcm_period_size:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #332]
	bx	lr
	.fnend
	.size	pcm_period_size, .-pcm_period_size
	.align	2
	.type	gaudio_open_streams, %function
gaudio_open_streams:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16372
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC4837:
	add	r3, pc, r3
	ldr	r4, [r3, #-3952]
	cmp	r4, #0
	beq	.L16361
	ldr	r6, .L16372+4
	mov	r3, #2
	mov	r1, #3
	mov	r2, #8000
	ldr	r7, [r4, #116]
	str	r1, [r4, #120]
	str	r3, [r4, #124]
.LPIC4867:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	str	r3, [r4, #128]
	str	r2, [r4, #132]
	ldr	r0, [r6, #40]
	cmp	r0, #0
	beq	.L16346
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r5, r0, #0
	beq	.L16362
.L16324:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any(PLT)
	ldr	r1, [r4, #120]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.103(PLT)
	ldr	r1, [r4, #124]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.104(PLT)
	ldr	r1, [r4, #128]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.105(PLT)
	ldr	r1, [r4, #132]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.106(PLT)
	mov	r0, r7
	movw	r1, #16707
	mov	r2, #0
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	blt	.L16363
.L16326:
	movw	r1, #16657
	mov	r0, r7
	movt	r1, 49756
	mov	r2, r5
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	blt	.L16364
	mov	r0, r7
	movw	r1, #16704
	mov	r2, #0
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	blt	.L16365
.L16328:
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L16348
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r2, #1
	bne	.L16329
.L16330:
	str	r3, [r4, #120]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L16350
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r2, #1
	bne	.L16331
.L16332:
	str	r3, [r4, #124]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #128]
	ldr	r3, [r5, #296]
	str	r3, [r4, #132]
	bl	kfree(PLT)
	ldr	r3, .L16372+8
	mov	lr, #3
	mov	ip, #2
	ldr	r0, [r6, #40]
	mov	r1, #1
	mov	r2, #8000
.LPIC4848:
	add	r3, pc, r3
	ldr	r5, [r3, #-3952]
	cmp	r0, #0
	ldr	r7, [r5, #144]
	ldr	r8, [r7, #164]
	str	lr, [r5, #148]
	str	ip, [r5, #152]
	str	r1, [r5, #156]
	str	r2, [r5, #160]
	beq	.L16352
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L16366
.L16333:
	mov	r0, r4
	bl	_snd_pcm_hw_params_any(PLT)
	ldr	r1, [r5, #148]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.103(PLT)
	ldr	r1, [r5, #152]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.104(PLT)
	ldr	r1, [r5, #156]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.105(PLT)
	ldr	r1, [r5, #160]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.106(PLT)
	mov	r0, r7
	movw	r1, #16707
	mov	r2, #0
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	blt	.L16367
.L16335:
	movw	r1, #16657
	mov	r0, r7
	movt	r1, 49756
	mov	r2, r4
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	blt	.L16368
	mov	r0, r7
	movw	r1, #16704
	mov	r2, #0
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	blt	.L16369
.L16337:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L16353
	ldr	r3, [r4, #8]
	cmp	r3, #0
	movne	r2, #1
	bne	.L16338
.L16339:
	str	r3, [r5, #148]
	ldr	r3, [r4, #36]
	cmp	r3, #0
	bne	.L16355
	ldr	r3, [r4, #40]
	cmp	r3, #0
	movne	r2, #1
	bne	.L16340
.L16341:
	str	r3, [r5, #152]
	ldr	r3, [r4, #284]
	str	r3, [r5, #156]
	ldr	r3, [r4, #296]
	str	r3, [r5, #160]
	ldr	r0, [r8, #52]
	bl	snd_pcm_format_physical_width(PLT)
	str	r0, [r8, #88]
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r0, [r6, #28]
	cmp	r0, #0
	beq	.L16357
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r5, r0, #0
	beq	.L16370
.L16342:
	mov	r0, r4
	bl	pcm_buffer_size(PLT)
	mov	r0, r4
	bl	pcm_period_size(PLT)
	mov	r2, r0, lsr #1
	mov	r3, #0
	mov	ip, #1
	mvn	lr, #-2147483648
	movw	r1, #16659
	str	r3, [r5]
	str	r2, [r5, #12]
	mov	r0, r7
	movt	r1, 49256
	str	r2, [r5, #16]
	mov	r2, r5
	str	r3, [r5, #32]
	str	r3, [r5, #28]
	str	ip, [r5, #4]
	str	ip, [r5, #20]
	str	lr, [r5, #24]
	bl	snd_pcm_kernel_ioctl(PLT)
	subs	r6, r0, #0
	blt	.L16371
	mov	r0, r5
	bl	kfree(PLT)
	cmp	r6, #0
	bne	.L16344
	ldr	r1, .L16372+12
	ldr	r0, .L16372+16
.LPIC4864:
	add	r1, pc, r1
.LPIC4863:
	add	r0, pc, r0
	sub	r1, r1, #2608
	bl	printk(PLT)
.L16358:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16366:
	ldr	r1, .L16372+20
	mvn	r6, #11
	ldr	r0, .L16372+24
.LPIC4850:
	add	r1, pc, r1
	sub	r1, r1, #2560
.LPIC4849:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
.L16344:
	ldr	r1, .L16372+28
	mov	r2, r6
	ldr	r0, .L16372+32
.LPIC4862:
	add	r1, pc, r1
	sub	r1, r1, #2608
.LPIC4861:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L16358
.L16352:
	mov	r4, #16
	b	.L16333
.L16346:
	mov	r5, #16
	b	.L16324
.L16357:
	mov	r5, #16
	b	.L16342
.L16355:
	mov	r2, #0
.L16340:
	rsb	r1, r3, #0
	and	r3, r3, r1
#APP
@ 268 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2, asl #5
	b	.L16341
.L16353:
	mov	r2, #0
.L16338:
	rsb	r1, r3, #0
	and	r3, r3, r1
#APP
@ 268 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2, asl #5
	b	.L16339
.L16348:
	mov	r2, #0
.L16329:
	rsb	r1, r3, #0
	and	r3, r3, r1
#APP
@ 268 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2, asl #5
	b	.L16330
.L16350:
	mov	r2, #0
.L16331:
	rsb	r1, r3, #0
	and	r3, r3, r1
#APP
@ 268 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2, asl #5
	b	.L16332
.L16362:
	mvn	r6, #11
.L16325:
	ldr	r1, .L16372+36
	mov	r2, r6
	ldr	r0, .L16372+40
.LPIC4866:
	add	r1, pc, r1
	sub	r1, r1, #2608
.LPIC4865:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L16358
.L16368:
	ldr	r1, .L16372+44
	mov	r2, r0
	mov	r6, r0
	ldr	r0, .L16372+48
.LPIC4854:
	add	r1, pc, r1
	sub	r1, r1, #2560
.LPIC4853:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	b	.L16344
.L16367:
	ldr	r1, .L16372+52
	mov	r2, r0
	ldr	r0, .L16372+56
.LPIC4852:
	add	r1, pc, r1
	sub	r1, r1, #2560
.LPIC4851:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L16335
.L16369:
	ldr	r1, .L16372+60
	mov	r2, r0
	ldr	r0, .L16372+64
.LPIC4856:
	add	r1, pc, r1
	sub	r1, r1, #2560
.LPIC4855:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L16337
.L16363:
	ldr	r1, .L16372+68
	mov	r2, r0
	ldr	r0, .L16372+72
.LPIC4843:
	add	r1, pc, r1
	sub	r1, r1, #2576
.LPIC4842:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L16326
.L16361:
	ldr	r1, .L16372+76
	mvn	r6, #18
	ldr	r0, .L16372+80
.LPIC4839:
	add	r1, pc, r1
	sub	r1, r1, #2608
.LPIC4838:
	add	r0, pc, r0
	mov	r2, r1
	bl	printk(PLT)
	b	.L16358
.L16371:
	ldr	r1, .L16372+84
	mov	r2, r6
	ldr	r0, .L16372+88
.LPIC4860:
	add	r1, pc, r1
	sub	r1, r1, #2560
.LPIC4859:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	b	.L16344
.L16370:
	ldr	r1, .L16372+92
	mvn	r6, #11
	ldr	r0, .L16372+96
.LPIC4858:
	add	r1, pc, r1
	sub	r1, r1, #2560
.LPIC4857:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L16344
.L16365:
	ldr	r1, .L16372+100
	mov	r2, r0
	ldr	r0, .L16372+104
.LPIC4847:
	add	r1, pc, r1
	sub	r1, r1, #2576
.LPIC4846:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L16328
.L16364:
	ldr	r1, .L16372+108
	mov	r2, r0
	mov	r6, r0
	ldr	r0, .L16372+112
.LPIC4845:
	add	r1, pc, r1
	sub	r1, r1, #2576
.LPIC4844:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	b	.L16325
.L16373:
	.align	2
.L16372:
	.word	.LANCHOR9-(.LPIC4837+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4867+8))
	.word	.LANCHOR9-(.LPIC4848+8)
	.word	.LANCHOR8-(.LPIC4864+8)
	.word	.LC832-(.LPIC4863+8)
	.word	.LANCHOR8-(.LPIC4850+8)
	.word	.LC827-(.LPIC4849+8)
	.word	.LANCHOR8-(.LPIC4862+8)
	.word	.LC831-(.LPIC4861+8)
	.word	.LANCHOR8-(.LPIC4866+8)
	.word	.LC833-(.LPIC4865+8)
	.word	.LANCHOR8-(.LPIC4854+8)
	.word	.LC825-(.LPIC4853+8)
	.word	.LANCHOR8-(.LPIC4852+8)
	.word	.LC824-(.LPIC4851+8)
	.word	.LANCHOR8-(.LPIC4856+8)
	.word	.LC828-(.LPIC4855+8)
	.word	.LANCHOR8-(.LPIC4843+8)
	.word	.LC824-(.LPIC4842+8)
	.word	.LANCHOR8-(.LPIC4839+8)
	.word	.LC823-(.LPIC4838+8)
	.word	.LANCHOR8-(.LPIC4860+8)
	.word	.LC830-(.LPIC4859+8)
	.word	.LANCHOR8-(.LPIC4858+8)
	.word	.LC829-(.LPIC4857+8)
	.word	.LANCHOR8-(.LPIC4847+8)
	.word	.LC826-(.LPIC4846+8)
	.word	.LANCHOR8-(.LPIC4845+8)
	.word	.LC825-(.LPIC4844+8)
	.fnend
	.size	gaudio_open_streams, .-gaudio_open_streams
	.align	2
	.type	f_audio_capture_work, %function
f_audio_capture_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r4, .L16391
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC4868:
	add	r4, pc, r4
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r0, [r4, #428]
	bl	f_audio_buffer_alloc(PLT)
	subs	r7, r0, #0
	beq	.L16387
	ldr	r6, .L16391+4
	ldr	r3, [r7]
	ldr	r9, [r5, #-68]
	ldr	r8, [r4, #428]
.LPIC4873:
	add	r6, pc, r6
	str	r3, [sp]
	ldrb	r3, [r6, #-3948]	@ zero_extendqisi2
	ldr	fp, [r9, #164]
	cmp	r3, #0
	beq	.L16388
.L16376:
	mov	r3, r8, asl #3
	ldr	r4, .L16391+8
	mov	r8, fp
	str	r3, [sp, #4]
	mov	r3, sp
	bic	r3, r3, #8128
.LPIC4882:
	add	r4, pc, r4
	sub	r4, r4, #2512
	str	r3, [sp, #8]
	ldr	r3, .L16391+12
	sub	r4, r4, #4
.LPIC4881:
	add	r3, pc, r3
	str	r3, [sp, #12]
.L16382:
	ldr	r2, [r8, #168]
	ldr	r3, [sp, #8]
	ldr	r1, [r2]
	bic	fp, r3, #63
	cmp	r1, #4
	cmpne	r1, #7
	moveq	r2, #1
	movne	r2, #0
	cmp	r1, #1
	orreq	r2, r2, #1
	cmp	r2, #0
	bne	.L16389
.L16379:
	ldr	r6, [r8, #88]
	mov	r2, #0
	mov	r0, r9
	ldr	r3, [sp, #4]
	ldr	r10, [fp, #8]
	str	r2, [fp, #8]
	ldr	r1, [sp]
	udiv	r6, r3, r6
	mov	r2, r6
	bl	snd_pcm_lib_read(PLT)
	cmp	r6, r0
	bne	.L16390
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	str	r10, [r3, #8]
.L16380:
	sub	r4, r5, #8
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #20]
	add	r2, r7, #8
	mov	r1, r0
	add	ip, r5, #16
	mov	r0, r4
	str	r2, [r5, #20]
	str	ip, [r7, #8]
	str	r3, [r7, #12]
	str	r2, [r3]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L16389:
	mov	r0, r9
	movw	r1, #16704
	mov	r2, #0
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	bge	.L16379
	ldr	r4, .L16391+16
	mov	r2, r0
	ldr	r0, .L16391+20
.LPIC4878:
	add	r4, pc, r4
	sub	r1, r4, #2512
.LPIC4877:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, .L16391+24
	sub	r1, r4, #2528
	sub	r1, r1, #12
.LPIC4879:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L16380
.L16388:
	bl	gaudio_open_streams(PLT)
	cmp	r0, #0
	moveq	r3, #1
	streqb	r3, [r6, #-3948]
	beq	.L16376
	ldr	r1, .L16391+28
	mov	r2, r0
	ldr	r0, .L16391+32
.LPIC4875:
	add	r1, pc, r1
	sub	r1, r1, #2512
.LPIC4874:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L16380
.L16387:
	ldr	r1, .L16391+36
	ldr	r0, .L16391+40
.LPIC4870:
	add	r1, pc, r1
	sub	r1, r1, #2528
.LPIC4869:
	add	r0, pc, r0
	sub	r1, r1, #12
	mov	r2, r1
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk(PLT)
.L16390:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [sp, #12]
	bl	printk(PLT)
	str	r10, [fp, #8]
	b	.L16382
.L16392:
	.align	2
.L16391:
	.word	.LANCHOR1-(.LPIC4868+8)
	.word	.LANCHOR9-(.LPIC4873+8)
	.word	.LANCHOR8-(.LPIC4882+8)
	.word	.LC837-(.LPIC4881+8)
	.word	.LANCHOR8-(.LPIC4878+8)
	.word	.LC828-(.LPIC4877+8)
	.word	.LC836-(.LPIC4879+8)
	.word	.LANCHOR8-(.LPIC4875+8)
	.word	.LC835-(.LPIC4874+8)
	.word	.LANCHOR8-(.LPIC4870+8)
	.word	.LC834-(.LPIC4869+8)
	.fnend
	.size	f_audio_capture_work, .-f_audio_capture_work
	.align	2
	.type	f_audio_playback_work, %function
f_audio_playback_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r5, r0, #8
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r0, r5
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r6, #16]
	add	r3, r6, #16
	mov	r7, r0
	cmp	r4, r3
	beq	.L16409
	ldr	r3, [r4, #4]
	mov	lr, #256
	mov	ip, #512
	ldr	r2, [r4]
	mov	r1, r7
	mov	r0, r5
	sub	r8, r4, #8
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4]
	str	ip, [r4, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r7, [r4, #-4]
	ldr	r9, [r6, #-64]
	ldr	r3, [r4, #-8]
	cmp	r7, #0
	ldr	fp, [r9, #164]
	str	r3, [sp, #4]
	beq	.L16410
	ldr	r5, .L16415
.LPIC4887:
	add	r5, pc, r5
	ldrb	r2, [r5, #-3948]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L16411
.L16397:
	mov	r3, r7, asl #3
	ldr	r5, .L16415+4
	str	r3, [sp, #12]
	mov	r3, sp
	bic	r3, r3, #8128
.LPIC4898:
	add	r5, pc, r5
	sub	r5, r5, #2464
	str	r3, [sp, #8]
	ldr	r3, .L16415+8
	sub	r5, r5, #12
.LPIC4897:
	add	r3, pc, r3
	str	r3, [sp, #20]
.L16403:
	ldr	r3, [fp, #168]
	ldr	r2, [sp, #8]
	bic	r7, r2, #63
	ldr	r2, [r3]
	cmp	r2, #4
	cmpne	r2, #7
	moveq	r3, #1
	movne	r3, #0
	cmp	r2, #1
	orreq	r3, r3, #1
	cmp	r3, #0
	bne	.L16412
.L16399:
	ldr	r3, [fp, #88]
	mov	r2, #0
	ldr	r1, [sp, #4]
	cmp	r3, r2
	beq	.L16413
	ldr	r0, [sp, #12]
	udiv	r10, r0, r3
	ldr	r3, [r7, #8]
	ldr	r0, [r6, #-64]
	str	r2, [r7, #8]
	str	r3, [sp, #16]
	mov	r2, r10
	bl	snd_pcm_lib_write(PLT)
	cmp	r10, r0
	bne	.L16414
	mov	r3, sp
	ldr	r2, [sp, #16]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	str	r2, [r3, #8]
.L16400:
	cmp	r8, #0
	beq	.L16393
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r3, #0
	mov	r0, r8
	str	r3, [r4, #-8]
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	kfree(PLT)
.L16412:
	mov	r0, r9
	movw	r1, #16704
	mov	r2, #0
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	bge	.L16399
	ldr	r5, .L16415+12
	mov	r2, r0
	ldr	r0, .L16415+16
.LPIC4892:
	add	r5, pc, r5
	sub	r1, r5, #2464
.LPIC4891:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	r0, .L16415+20
	sub	r1, r5, #2496
	sub	r1, r1, #4
.LPIC4893:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L16400
.L16411:
	bl	gaudio_open_streams(PLT)
	cmp	r0, #0
	moveq	r2, #1
	streqb	r2, [r5, #-3948]
	beq	.L16397
	ldr	r1, .L16415+24
	ldr	r0, .L16415+28
.LPIC4889:
	add	r1, pc, r1
	sub	r1, r1, #2464
.LPIC4888:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L16400
.L16393:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16409:
	ldr	r1, .L16415+32
	ldr	r0, .L16415+36
.LPIC4884:
	add	r1, pc, r1
	sub	r1, r1, #2496
.LPIC4883:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r5
	mov	r1, r7
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L16413:
	ldr	r1, .L16415+40
	ldr	r0, .L16415+44
.LPIC4896:
	add	r1, pc, r1
	sub	r1, r1, #2464
.LPIC4895:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L16400
.L16414:
	mov	r2, r0
	mov	r1, r5
	ldr	r0, [sp, #20]
	bl	printk(PLT)
	ldr	r3, [sp, #16]
	str	r3, [r7, #8]
	b	.L16403
.L16410:
	ldr	r1, .L16415+48
	ldr	r0, .L16415+52
.LPIC4886:
	add	r1, pc, r1
	sub	r1, r1, #2464
.LPIC4885:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L16400
.L16416:
	.align	2
.L16415:
	.word	.LANCHOR9-(.LPIC4887+8)
	.word	.LANCHOR8-(.LPIC4898+8)
	.word	.LC842-(.LPIC4897+8)
	.word	.LANCHOR8-(.LPIC4892+8)
	.word	.LC826-(.LPIC4891+8)
	.word	.LC836-(.LPIC4893+8)
	.word	.LANCHOR8-(.LPIC4889+8)
	.word	.LC840-(.LPIC4888+8)
	.word	.LANCHOR8-(.LPIC4884+8)
	.word	.LC838-(.LPIC4883+8)
	.word	.LANCHOR8-(.LPIC4896+8)
	.word	.LC841-(.LPIC4895+8)
	.word	.LANCHOR8-(.LPIC4886+8)
	.word	.LC839-(.LPIC4885+8)
	.fnend
	.size	f_audio_playback_work, .-f_audio_playback_work
	.align	2
	.global	u_audio_clear
	.type	u_audio_clear, %function
u_audio_clear:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L16418
	mov	r2, #0
.LPIC4899:
	add	r3, pc, r3
	strb	r2, [r3, #-3948]
	bx	lr
.L16419:
	.align	2
.L16418:
	.word	.LANCHOR9-(.LPIC4899+8)
	.fnend
	.size	u_audio_clear, .-u_audio_clear
	.align	2
	.type	f_audio_disable, %function
f_audio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	u_audio_clear(PLT)
	.fnend
	.size	f_audio_disable, .-f_audio_disable
	.align	2
	.global	gaudio_setup
	.type	gaudio_setup, %function
gaudio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L16458
	ldr	r6, .L16464
	mov	r1, #2
	mov	r2, #0
.LPIC4903:
	add	r6, pc, r6
	ldr	r0, [r6, #3800]
	bl	filp_open(PLT)
	cmn	r0, #4096
	mov	r5, r0
	str	r0, [r4, #84]
	bhi	.L16459
	str	r4, [r4, #80]
	ldr	r0, [r6, #3804]
	mov	r1, #1
	mov	r2, #0
	bl	filp_open(PLT)
	cmn	r0, #4096
	str	r0, [r4, #112]
	bhi	.L16460
	ldr	r6, .L16464+4
	mov	r3, #2
	mov	ip, #3
	ldr	r1, [r0, #124]
	mov	r2, #8000
.LPIC4924:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	ldr	r1, [r1]
	str	r4, [r4, #108]
	str	ip, [r4, #120]
	str	r3, [r4, #124]
	ldr	r0, [r6, #40]
	str	r3, [r4, #128]
	str	r1, [r4, #116]
	str	r2, [r4, #132]
	cmp	r0, #0
	beq	.L16443
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r5, r0, #0
	beq	.L16461
.L16428:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any(PLT)
	ldr	r1, [r4, #120]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.103(PLT)
	ldr	r1, [r4, #124]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.104(PLT)
	ldr	r1, [r4, #128]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.105(PLT)
	mov	r0, r5
	ldr	r1, [r4, #132]
	bl	_snd_pcm_hw_param_set.constprop.106(PLT)
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L16444
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r2, #1
	bne	.L16430
.L16431:
	str	r3, [r4, #120]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L16446
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r2, #1
	bne	.L16432
.L16433:
	str	r3, [r4, #124]
	ldr	r3, [r5, #284]
	mov	r0, r5
	ldr	r7, .L16464+8
	str	r3, [r4, #128]
	ldr	r3, [r5, #296]
.LPIC4912:
	add	r7, pc, r7
	str	r3, [r4, #132]
	bl	kfree(PLT)
	mov	r1, #0
	ldr	r0, [r7, #3808]
	mov	r2, r1
	bl	filp_open(PLT)
	cmn	r0, #4096
	str	r0, [r4, #140]
	bhi	.L16462
	ldr	r2, [r0, #124]
	mov	lr, #3
	mov	ip, #2
	ldr	r0, [r6, #40]
	mov	r1, #1
	mov	r3, #8000
	ldr	r2, [r2]
	str	r4, [r4, #136]
	cmp	r0, #0
	str	lr, [r4, #148]
	str	ip, [r4, #152]
	str	r1, [r4, #156]
	str	r2, [r4, #144]
	str	r3, [r4, #160]
	beq	.L16448
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r5, r0, #0
	beq	.L16463
.L16435:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any(PLT)
	ldr	r1, [r4, #148]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.103(PLT)
	ldr	r1, [r4, #152]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.104(PLT)
	ldr	r1, [r4, #156]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.105(PLT)
	mov	r0, r5
	ldr	r1, [r4, #160]
	bl	_snd_pcm_hw_param_set.constprop.106(PLT)
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L16449
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r2, #1
	bne	.L16437
.L16438:
	str	r3, [r4, #148]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L16451
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r2, #1
	bne	.L16439
.L16440:
	str	r3, [r4, #152]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #156]
	ldr	r3, [r5, #296]
	str	r3, [r4, #160]
	bl	kfree(PLT)
.L16426:
	ldr	r3, .L16464+12
.LPIC4918:
	add	r3, pc, r3
	ldr	r5, [r3, #-3952]
	cmp	r5, #0
	movne	r5, #0
	streq	r4, [r3, #-3952]
.L16454:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16443:
	mov	r5, #16
	b	.L16428
.L16448:
	mov	r5, #16
	b	.L16435
.L16459:
	ldr	r1, .L16464+16
	ldr	r0, .L16464+20
	ldr	r2, [r6, #3800]
.LPIC4905:
	add	r1, pc, r1
	sub	r1, r1, #2448
.LPIC4904:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mov	r3, #0
	cmp	r5, #0
	str	r3, [r4, #84]
	beq	.L16426
	b	.L16425
.L16460:
	ldr	r1, .L16464+24
	mvn	r5, #21
	ldr	r0, .L16464+28
	ldr	r2, [r6, #3804]
.LPIC4909:
	add	r1, pc, r1
	sub	r1, r1, #2448
.LPIC4908:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mov	r3, #0
	str	r3, [r4, #112]
.L16425:
	ldr	r1, .L16464+32
	ldr	r0, .L16464+36
.LPIC4917:
	add	r1, pc, r1
	sub	r1, r1, #2432
.LPIC4916:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L16454
.L16462:
	ldr	r1, .L16464+40
	mvn	r5, #21
	ldr	r0, .L16464+44
	ldr	r2, [r7, #3808]
.LPIC4914:
	add	r1, pc, r1
	sub	r1, r1, #2448
.LPIC4913:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mov	r3, #0
	str	r3, [r4, #144]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	b	.L16425
.L16446:
	mov	r2, #0
.L16432:
	rsb	r1, r3, #0
	and	r3, r3, r1
#APP
@ 268 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2, asl #5
	b	.L16433
.L16444:
	mov	r2, #0
.L16430:
	rsb	r1, r3, #0
	and	r3, r3, r1
#APP
@ 268 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2, asl #5
	b	.L16431
.L16451:
	mov	r2, #0
.L16439:
	rsb	r1, r3, #0
	and	r3, r3, r1
#APP
@ 268 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2, asl #5
	b	.L16440
.L16449:
	mov	r2, #0
.L16437:
	rsb	r1, r3, #0
	and	r3, r3, r1
#APP
@ 268 "/home/ikke/Workspace/kernel_oneplus_onyx/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2, asl #5
	b	.L16438
.L16463:
	ldr	r1, .L16464+48
	mvn	r2, #11
	ldr	r0, .L16464+52
	mov	r5, r2
.LPIC4923:
	add	r1, pc, r1
	sub	r1, r1, #2448
.LPIC4922:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L16425
.L16461:
	ldr	r1, .L16464+56
	mvn	r2, #11
	ldr	r0, .L16464+60
	mov	r5, r2
.LPIC4921:
	add	r1, pc, r1
	sub	r1, r1, #2448
.LPIC4920:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L16425
.L16458:
	ldr	r1, .L16464+64
	mvn	r5, #18
	ldr	r0, .L16464+68
.LPIC4901:
	add	r1, pc, r1
	sub	r1, r1, #2448
.LPIC4900:
	add	r0, pc, r0
	sub	r1, r1, #8
	mov	r2, r1
	bl	printk(PLT)
	b	.L16425
.L16465:
	.align	2
.L16464:
	.word	.LANCHOR0-(.LPIC4903+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4924+8))
	.word	.LANCHOR0-(.LPIC4912+8)
	.word	.LANCHOR9-(.LPIC4918+8)
	.word	.LANCHOR8-(.LPIC4905+8)
	.word	.LC843-(.LPIC4904+8)
	.word	.LANCHOR8-(.LPIC4909+8)
	.word	.LC844-(.LPIC4908+8)
	.word	.LANCHOR8-(.LPIC4917+8)
	.word	.LC846-(.LPIC4916+8)
	.word	.LANCHOR8-(.LPIC4914+8)
	.word	.LC845-(.LPIC4913+8)
	.word	.LANCHOR8-(.LPIC4923+8)
	.word	.LC848-(.LPIC4922+8)
	.word	.LANCHOR8-(.LPIC4921+8)
	.word	.LC847-(.LPIC4920+8)
	.word	.LANCHOR8-(.LPIC4901+8)
	.word	.LC823-(.LPIC4900+8)
	.fnend
	.size	gaudio_setup, .-gaudio_setup
	.align	2
	.global	gaudio_cleanup
	.type	gaudio_cleanup, %function
gaudio_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16484
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC4925:
	add	r3, pc, r3
	ldr	r4, [r3, #-3952]
	cmp	r4, #0
	beq	.L16466
	ldr	r0, [r4, #84]
	cmp	r0, #0
	beq	.L16468
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #708]
	bl	filp_close(PLT)
.L16468:
	ldr	r0, [r4, #112]
	cmp	r0, #0
	beq	.L16469
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #708]
	bl	filp_close(PLT)
.L16469:
	ldr	r0, [r4, #140]
	cmp	r0, #0
	beq	.L16470
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #708]
	bl	filp_close(PLT)
.L16470:
	ldr	r3, .L16484+4
	mov	r2, #0
.LPIC4926:
	add	r3, pc, r3
	str	r2, [r3, #-3952]
.L16466:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L16485:
	.align	2
.L16484:
	.word	.LANCHOR9-(.LPIC4925+8)
	.word	.LANCHOR9-(.LPIC4926+8)
	.fnend
	.size	gaudio_cleanup, .-gaudio_cleanup
	.align	2
	.global	control_selector_init
	.type	control_selector_init, %function
control_selector_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16488
	mov	ip, r0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	add	r6, r0, #244
	add	r5, r0, #252
	strd	r8, [sp, #16]
	ldr	r9, .L16488+4
	mov	r0, #0
	strd	r10, [sp, #24]
	movw	fp, #65472
	movw	r10, #58272
.LPIC4927:
	add	r3, pc, r3
	str	lr, [sp, #32]
	add	r2, r3, #3840
	add	r4, r3, #1536
	add	r2, r2, #4
	add	lr, r3, #1504
	str	r6, [r3, #3812]
	add	r1, r3, #3808
	str	r6, [r3, #3848]
	add	r8, r3, #3872
	str	r2, [ip, #244]
	add	r1, r1, #4
	add	r7, r3, #3952
	str	r2, [r3, #3816]
	add	r2, r2, #8
	add	r6, r3, #4000
	str	r1, [ip, #248]
.LPIC4984:
	add	r9, pc, r9
	add	r8, r8, #4
	str	r2, [r3, #3964]
	add	r7, r7, #12
	add	r6, r6, #8
	str	r2, [r3, #4012]
	add	r2, r4, #20
	add	r4, r4, #12
	str	r1, [r3, #3844]
	add	r1, r1, #8
	str	r4, [ip, #256]
	str	r4, [r3, #1516]
	add	r4, lr, #20
	add	lr, lr, #12
	str	r5, [r3, #1548]
	str	lr, [ip, #252]
	add	ip, r3, #3920
	str	r5, [r3, #1520]
	add	r5, r3, #4048
	str	ip, [r3, #3880]
	add	r5, r5, #4
	str	ip, [r3, #3820]
	movw	ip, #65520
	str	r1, [r3, #3876]
	str	r1, [r3, #3924]
	sub	r1, r9, #4080
	sub	r1, r1, #8
	str	r8, [r3, #3824]
	str	r8, [r3, #3920]
	str	r7, [r3, #3856]
	str	r7, [r3, #4008]
	str	r6, [r3, #3968]
	str	r6, [r3, #3852]
	str	fp, [r3, #3940]
	str	fp, [r3, #4028]
	str	r10, [r3, #3944]
	str	r10, [r3, #4032]
	str	lr, [r3, #1552]
	str	ip, [r3, #3948]
	str	ip, [r3, #4036]
	mov	ip, #48
	str	r5, [r3, #1528]
	str	ip, [r3, #3952]
	str	ip, [r3, #4040]
	str	r4, [r3, #4052]
	str	r4, [r3, #4056]
	str	r5, [r3, #1524]
	str	r2, [r9, #-4088]
	str	r2, [r9, #-4084]
	str	r1, [r3, #1560]
	str	r1, [r3, #1556]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16489:
	.align	2
.L16488:
	.word	.LANCHOR0-(.LPIC4927+8)
	.word	.LANCHOR10-(.LPIC4984+8)
	.fnend
	.size	control_selector_init, .-control_selector_init
	.align	2
	.global	audio_bind_config
	.type	audio_bind_config, %function
audio_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16502
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
.LPIC5005:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	lr, [sp, #28]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L16495
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L16500
.L16491:
	ldr	lr, .L16502+4
	mov	r5, #0
	add	r1, r4, #196
	ldr	ip, .L16502+8
	add	r2, r4, #228
	mov	r0, r4
	ldr	r7, [r6, #24]
	ldr	r3, .L16502+12
.LPIC4992:
	add	lr, pc, lr
	ldr	r8, .L16502+16
.LPIC4994:
	add	ip, pc, ip
	ldr	r9, [r7]
	str	r5, [r4, #172]
	str	lr, [r4]
	ldr	r7, .L16502+20
.LPIC4993:
	add	r3, pc, r3
	str	r5, [r4, #204]
	ldr	lr, .L16502+24
	sub	r3, r3, #4032
	str	ip, [r4, #24]
	ldr	r5, .L16502+28
	sub	r3, r3, #12
	ldr	ip, .L16502+32
.LPIC4995:
	add	r8, pc, r8
	str	r1, [r4, #196]
.LPIC4996:
	add	r7, pc, r7
	str	r3, [r4, #4]
.LPIC4998:
	add	lr, pc, lr
	str	r1, [r4, #200]
.LPIC4997:
	add	r5, pc, r5
	str	r2, [r4, #228]
.LPIC4999:
	add	ip, pc, ip
	str	lr, [r4, #44]
	str	r5, [r4, #32]
	str	ip, [r4, #40]
	str	r2, [r4, #232]
	str	r9, [r4, #76]
	str	r8, [r4, #28]
	str	r7, [r4, #36]
	bl	control_selector_init(PLT)
	ldr	r2, .L16502+36
	mov	lr, #2560
	add	ip, r4, #184
	ldr	r3, .L16502+40
	add	r1, r4, #216
	mov	r0, r4
	str	lr, [r4, #180]
	str	lr, [r4, #212]
.LPIC5000:
	add	r2, pc, r2
	str	ip, [r4, #184]
.LPIC5001:
	add	r3, pc, r3
	str	ip, [r4, #188]
	str	r2, [r4, #192]
	str	r3, [r4, #224]
	str	r1, [r4, #216]
	str	r1, [r4, #220]
	bl	gaudio_setup(PLT)
	subs	r5, r0, #0
	blt	.L16493
	mov	r0, r6
	mov	r1, r4
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L16501
.L16492:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16495:
	mov	r4, #16
	b	.L16491
.L16493:
	bl	gaudio_cleanup(PLT)
.L16494:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
	b	.L16492
.L16500:
	mvn	r0, #11
	b	.L16492
.L16501:
	ldr	r1, .L16502+44
	mov	r3, r5
	ldr	r0, .L16502+48
.LPIC5003:
	add	r1, pc, r1
	sub	r1, r1, #2416
.LPIC5002:
	add	r0, pc, r0
	sub	r1, r1, #4
	mov	r2, r1
	bl	printk(PLT)
	b	.L16494
.L16503:
	.align	2
.L16502:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC5005+8))
	.word	.LC849-(.LPIC4992+8)
	.word	f_audio_bind-(.LPIC4994+8)
	.word	.LANCHOR10-(.LPIC4993+8)
	.word	f_audio_unbind-(.LPIC4995+8)
	.word	f_audio_get_alt-(.LPIC4996+8)
	.word	f_audio_setup-(.LPIC4998+8)
	.word	f_audio_set_alt-(.LPIC4997+8)
	.word	f_audio_disable-(.LPIC4999+8)
	.word	f_audio_playback_work-(.LPIC5000+8)
	.word	f_audio_capture_work-(.LPIC5001+8)
	.word	.LANCHOR8-(.LPIC5003+8)
	.word	.LC850-(.LPIC5002+8)
	.fnend
	.size	audio_bind_config, .-audio_bind_config
	.align	2
	.type	audio_function_bind_config, %function
audio_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	b	audio_bind_config(PLT)
	.fnend
	.size	audio_function_bind_config, .-audio_function_bind_config
	.align	2
	.global	ncm_bind_config
	.type	ncm_bind_config, %function
ncm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	ldr	r0, .L16523
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r8, [r5, #24]
	.pad #28
	sub	sp, sp, #28
.LPIC5006:
	add	r0, pc, r0
	ldr	r3, [r8]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L16520
.L16510:
	mvn	r0, #21
.L16506:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16520:
	ldr	r0, .L16523+4
	mov	r1, r4
.LPIC5007:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r6, #0
	cmpne	r0, #0
	beq	.L16510
	ldr	r7, .L16523+8
.LPIC5008:
	add	r7, pc, r7
	ldrb	r3, [r7, #832]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L16521
.L16507:
	ldr	r3, .L16523+12
.LPIC5034:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L16515
	movw	r1, #32976
	bl	kmem_cache_alloc(PLT)
	subs	r4, r0, #0
	beq	.L16522
.L16508:
	ldrb	r2, [r6, #2]	@ zero_extendqisi2
	add	r7, r4, #142
	mov	r1, #14
	ldrb	r3, [r6]	@ zero_extendqisi2
	mov	r0, r7
	mov	r8, #0
	ldrb	r10, [r6, #1]	@ zero_extendqisi2
	ldrb	r9, [r6, #3]	@ zero_extendqisi2
	ldrb	lr, [r6, #4]	@ zero_extendqisi2
	ldrb	ip, [r6, #5]	@ zero_extendqisi2
	str	r2, [sp, #4]
	ldr	r2, .L16523+16
	str	r10, [sp]
	str	r9, [sp, #8]
	ldr	r6, .L16523+20
	mov	r9, #2048
	str	lr, [sp, #12]
	ldr	r10, .L16523+24
	str	ip, [sp, #16]
.LPIC5019:
	add	r2, pc, r2
	bl	snprintf(PLT)
	ldr	r3, .L16523+28
	mov	r2, #15
.LPIC5020:
	add	r6, pc, r6
	ldr	r1, .L16523+32
	str	r8, [r4, #176]
	mov	r0, r5
	ldr	ip, .L16523+36
	str	r7, [r6, #844]
.LPIC5023:
	add	r10, pc, r10
	strh	r2, [r4, #90]	@ movhi
	ldr	r7, .L16523+40
	mov	lr, #1
.LPIC5021:
	add	r3, pc, r3
	strb	r8, [r4, #172]
	ldr	r2, .L16523+44
	add	fp, r3, #28
.LPIC5024:
	add	r1, pc, r1
	str	r8, [r4, #92]
	sub	r5, r1, #4032
.LPIC5025:
	add	ip, pc, ip
	str	fp, [r4, #168]
	ldr	fp, [r3, #16]
	sub	r5, r5, #4
	str	r10, [r4]
	ldr	r3, .L16523+48
.LPIC5026:
	add	r2, pc, r2
	str	r5, [r4, #4]
	ldr	r10, .L16523+52
.LPIC5027:
	add	r7, pc, r7
	str	ip, [r4, #24]
	ldr	r5, .L16523+56
	mov	r1, r4
	str	fp, [r4, #100]
	ldr	ip, .L16523+60
	ldr	fp, .L16523+64
.LPIC5028:
	add	r3, pc, r3
	str	r2, [r4, #28]
.LPIC5029:
	add	r10, pc, r10
	str	r7, [r4, #32]
.LPIC5030:
	add	r5, pc, r5
	str	r3, [r4, #36]
.LPIC5031:
	add	ip, pc, ip
	str	r10, [r4, #44]
.LPIC5032:
	add	fp, pc, fp
	str	r5, [r4, #40]
	str	ip, [r4, #120]
	str	fp, [r4, #124]
	str	r9, [r4, #104]
	strb	lr, [r4, #96]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	beq	.L16506
	mov	r0, r4
	str	r8, [r6, #844]
	bl	kfree(PLT)
	mov	r0, r5
	b	.L16506
.L16521:
	mov	r0, r8
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L16506
	ldr	r4, .L16523+68
	uxtb	r3, r0
	ldr	r0, [r5, #24]
	strb	r3, [r7, #832]
.LPIC5010:
	add	r4, pc, r4
	strb	r3, [r4, #1600]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L16506
	uxtb	r3, r0
	ldr	r0, [r5, #24]
	strb	r3, [r7, #848]
	strb	r3, [r4, #1620]
	strb	r3, [r4, #1632]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L16506
	uxtb	r3, r0
	ldr	r0, [r5, #24]
	strb	r3, [r7, #840]
	strb	r3, [r4, #3431]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L16506
	uxtb	r0, r0
	strb	r0, [r7, #856]
	strb	r0, [r4, #1591]
	b	.L16507
.L16515:
	mov	r4, #16
	b	.L16508
.L16522:
	mvn	r0, #11
	b	.L16506
.L16524:
	.align	2
.L16523:
	.word	.LC261-(.LPIC5006+8)
	.word	.LC407-(.LPIC5007+8)
	.word	.LANCHOR0-(.LPIC5008+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC5034+8))
	.word	.LC800-(.LPIC5019+8)
	.word	.LANCHOR0-(.LPIC5020+8)
	.word	.LC851-(.LPIC5023+8)
	.word	.LANCHOR1-(.LPIC5021+8)
	.word	.LANCHOR10-(.LPIC5024+8)
	.word	ncm_bind-(.LPIC5025+8)
	.word	ncm_set_alt-(.LPIC5027+8)
	.word	ncm_unbind-(.LPIC5026+8)
	.word	ncm_get_alt-(.LPIC5028+8)
	.word	ncm_setup-(.LPIC5029+8)
	.word	ncm_disable-(.LPIC5030+8)
	.word	ncm_wrap_ntb-(.LPIC5031+8)
	.word	ncm_unwrap_ntb-(.LPIC5032+8)
	.word	.LANCHOR1-(.LPIC5010+8)
	.fnend
	.size	ncm_bind_config, .-ncm_bind_config
	.align	2
	.type	ncm_function_bind_config, %function
ncm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r4, [r0, #4]
	.pad #28
	sub	sp, sp, #28
	cmp	r4, #0
	beq	.L16531
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	mov	r7, r1
	ldrb	r3, [r4]	@ zero_extendqisi2
	ldr	r5, .L16534
	ldr	r0, .L16534+4
	str	r2, [sp]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
.LPIC5039:
	add	r5, pc, r5
	sub	r5, r5, #2400
.LPIC5038:
	add	r0, pc, r0
	str	ip, [sp, #4]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	mov	r1, r5
	mov	r2, r5
	str	ip, [sp, #8]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	str	ip, [sp, #16]
	bl	printk(PLT)
	ldr	r3, [r7, #24]
	mov	r1, r4
	ldr	r2, .L16534+8
	ldr	r0, [r3]
.LPIC5041:
	add	r2, pc, r2
	bl	gether_setup_name(PLT)
	subs	r6, r0, #0
	bne	.L16532
	mov	r0, r7
	mov	r1, r4
	bl	ncm_bind_config(PLT)
	subs	r6, r0, #0
	moveq	r0, r6
	bne	.L16533
.L16527:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L16531:
	ldr	r1, .L16534+12
	ldr	r0, .L16534+16
.LPIC5036:
	add	r1, pc, r1
	sub	r1, r1, #2400
.LPIC5035:
	add	r0, pc, r0
	mov	r2, r1
	bl	printk(PLT)
	mvn	r0, #21
	b	.L16527
.L16533:
	ldr	r0, .L16534+20
	mov	r1, r5
	mov	r2, r5
	mov	r3, r6
.LPIC5045:
	add	r0, pc, r0
	bl	printk(PLT)
	bl	gether_cleanup(PLT)
	mov	r0, r6
	b	.L16527
.L16532:
	ldr	r0, .L16534+24
	mov	r1, r5
	mov	r2, r5
	mov	r3, r6
.LPIC5042:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r6
	b	.L16527
.L16535:
	.align	2
.L16534:
	.word	.LANCHOR8-(.LPIC5039+8)
	.word	.LC810-(.LPIC5038+8)
	.word	.LC853-(.LPIC5041+8)
	.word	.LANCHOR8-(.LPIC5036+8)
	.word	.LC852-(.LPIC5035+8)
	.word	.LC855-(.LPIC5045+8)
	.word	.LC854-(.LPIC5042+8)
	.fnend
	.size	ncm_function_bind_config, .-ncm_function_bind_config
	.global	diag_dload
	.global	speaker_output_terminal_desc
	.global	speaker_input_terminal_desc
	.global	uac1_ac_header_desc
	.global	uac1_ac_interface_desc
	.global	_rndis_qc
	.global	bam2bam_data_ports
	.global	rndis_ul_max_xfer_size_rcvd
	.global	rndis_ul_max_pkt_per_xfer_rcvd
	.global	mtp_ext_config_desc
	.global	mtp_tx_reqs
	.global	mtp_tx_req_len
	.global	mtp_rx_req_len
	.global	ghsuart_data_stats_ops
	.global	ghsuart_data_tx_intr_thld
	.global	ghsic_stats_ops
	.global	gdata_timestamp_ops
	.global	ghsic_data_tx_intr_thld
	.global	gctrl_dfile
	.global	gctrl_dent
	.global	gctrl_stats_ops
	.global	smd_ctrl_dfile
	.global	smd_ctrl_dent
	.global	gsmd_ctrl_stats_ops
	.global	online_clients
	.global	gbam_dent
	.global	gbam_stats_ops
	.global	bam2bam_ports
	.global	smd_pi
	.global	sport_info
	.global	gs_dent
	.global	debug_adb_ops
	.global	debug_rst_ops
	.global	dent_rmnet_mux
	.global	rmnet_mux_svlte_debug_stats_ops
	.global	debug_rmnet_sdio_stats_ops
	.global	sdio_rx_fctrl_dis_thld
	.global	sdio_rx_fctrl_en_thld
	.global	sdio_tx_pkt_drop_thld
	.global	dent_smd
	.global	rmnet_smd_debug_stats_ops
	.global	dent_diag
	.section	.rodata
	.align	3
.LANCHOR3 = . + 0
.LANCHOR8 = . + 8184
	.type	the_report_descriptor, %object
	.size	the_report_descriptor, 34
the_report_descriptor:
	.byte	6
	.byte	-96
	.byte	-1
	.byte	9
	.byte	-91
	.byte	-95
	.byte	1
	.byte	9
	.byte	-90
	.byte	9
	.byte	-89
	.byte	21
	.byte	-128
	.byte	37
	.byte	127
	.byte	117
	.byte	8
	.byte	-107
	.byte	2
	.byte	-127
	.byte	2
	.byte	9
	.byte	-87
	.byte	21
	.byte	-128
	.byte	37
	.byte	127
	.byte	117
	.byte	8
	.byte	-107
	.byte	2
	.byte	-111
	.byte	2
	.byte	-64
	.space	2
	.type	__func__.39372, %object
	.size	__func__.39372, 24
__func__.39372:
	.ascii	"usb_rmnet_mux_ctrl_open\000"
	.type	__func__.48678, %object
	.size	__func__.48678, 14
__func__.48678:
	.ascii	"gsmd_start_rx\000"
	.space	2
	.type	__func__.49430, %object
	.size	__func__.49430, 21
__func__.49430:
	.ascii	"gbam_stop_endless_rx\000"
	.space	3
	.type	__func__.49436, %object
	.size	__func__.49436, 21
__func__.49436:
	.ascii	"gbam_stop_endless_tx\000"
	.space	3
	.type	__func__.51043, %object
	.size	__func__.51043, 24
__func__.51043:
	.ascii	"ghsic_send_cpkt_tomodem\000"
	.type	__func__.56867, %object
	.size	__func__.56867, 13
__func__.56867:
	.ascii	"ecm_qc_setup\000"
	.space	3
	.type	__func__.57184, %object
	.size	__func__.57184, 21
__func__.57184:
	.ascii	"mbim_ep0out_complete\000"
	.space	3
	.type	__func__.57445, %object
	.size	__func__.57445, 25
__func__.57445:
	.ascii	"bam_data_stop_endless_rx\000"
	.space	3
	.type	__func__.57451, %object
	.size	__func__.57451, 25
__func__.57451:
	.ascii	"bam_data_stop_endless_tx\000"
	.space	3
	.type	__func__.57828, %object
	.size	__func__.57828, 27
__func__.57828:
	.ascii	"rndis_qc_response_complete\000"
	.space	1
	.type	__func__.57820, %object
	.size	__func__.57820, 28
__func__.57820:
	.ascii	"rndis_qc_response_available\000"
	.type	__func__.61546, %object
	.size	__func__.61546, 21
__func__.61546:
	.ascii	"f_audio_buffer_alloc\000"
	.space	3
	.type	__func__.61716, %object
	.size	__func__.61716, 23
__func__.61716:
	.ascii	"audio_set_endpoint_req\000"
	.space	1
	.type	__func__.61792, %object
	.size	__func__.61792, 14
__func__.61792:
	.ascii	"f_audio_setup\000"
	.space	2
	.type	__func__.63523, %object
	.size	__func__.63523, 31
__func__.63523:
	.ascii	"android_bind_enabled_functions\000"
	.space	1
	.type	__func__.63568, %object
	.size	__func__.63568, 24
__func__.63568:
	.ascii	"android_enable_function\000"
	.type	__func__.57949, %object
	.size	__func__.57949, 21
__func__.57949:
	.ascii	"rndis_qc_release_dev\000"
	.space	3
	.type	__func__.40094, %object
	.size	__func__.40094, 10
__func__.40094:
	.ascii	"gps_setup\000"
	.space	2
	.type	__func__.39799, %object
	.size	__func__.39799, 23
__func__.39799:
	.ascii	"frmnet_notify_complete\000"
	.space	1
	.type	__func__.57235, %object
	.size	__func__.57235, 17
__func__.57235:
	.ascii	"mbim_ctrlrequest\000"
	.space	3
	.type	__func__.57347, %object
	.size	__func__.57347, 13
__func__.57347:
	.ascii	"mbim_release\000"
	.space	3
	.type	__func__.48482, %object
	.size	__func__.48482, 16
__func__.48482:
	.ascii	"gsdio_open_work\000"
	.type	dirletter.46150, %object
	.size	dirletter.46150, 4
dirletter.46150:
	.byte	117
	.byte	111
	.byte	105
	.byte	110
	.type	__func__.52118, %object
	.size	__func__.52118, 26
__func__.52118:
	.ascii	"ghsuart_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.48390, %object
	.size	__func__.48390, 21
__func__.48390:
	.ascii	"gsdio_write_complete\000"
	.space	3
	.type	__func__.48458, %object
	.size	__func__.48458, 24
__func__.48458:
	.ascii	"gsdio_ctrl_notify_modem\000"
	.type	__func__.52673, %object
	.size	__func__.52673, 19
__func__.52673:
	.ascii	"ghsuart_data_probe\000"
	.space	1
	.type	__func__.49827, %object
	.size	__func__.49827, 24
__func__.49827:
	.ascii	"grmnet_ctrl_smd_write_w\000"
	.type	__func__.49799, %object
	.size	__func__.49799, 23
__func__.49799:
	.ascii	"grmnet_ctrl_smd_read_w\000"
	.space	1
	.type	__func__.54345, %object
	.size	__func__.54345, 16
__func__.54345:
	.ascii	"mtp_ctrlrequest\000"
	.type	__func__.38230, %object
	.size	__func__.38230, 24
__func__.38230:
	.ascii	"rmnet_sdio_data_rx_work\000"
	.type	__func__.49297, %object
	.size	__func__.49297, 23
__func__.49297:
	.ascii	"gbam_write_data_tohost\000"
	.space	1
	.type	__func__.49364, %object
	.size	__func__.49364, 19
__func__.49364:
	.ascii	"gbam_epin_complete\000"
	.space	1
	.type	__func__.52503, %object
	.size	__func__.52503, 25
__func__.52503:
	.ascii	"ghsuart_data_write_tomdm\000"
	.space	3
	.type	__func__.52546, %object
	.size	__func__.52546, 22
__func__.52546:
	.ascii	"ghsuart_data_start_rx\000"
	.space	2
	.type	__func__.49896, %object
	.size	__func__.49896, 26
__func__.49896:
	.ascii	"grmnet_ctrl_smd_connect_w\000"
	.space	2
	.type	__func__.49410, %object
	.size	__func__.49410, 14
__func__.49410:
	.ascii	"gbam_start_rx\000"
	.space	2
	.type	__func__.49379, %object
	.size	__func__.49379, 20
__func__.49379:
	.ascii	"gbam_epout_complete\000"
	.type	__func__.57957, %object
	.size	__func__.57957, 15
__func__.57957:
	.ascii	"rndis_qc_ioctl\000"
	.space	1
	.type	__func__.57355, %object
	.size	__func__.57355, 11
__func__.57355:
	.ascii	"mbim_ioctl\000"
	.space	1
	.type	__func__.39395, %object
	.size	__func__.39395, 24
__func__.39395:
	.ascii	"usb_rmnet_mux_ctrl_read\000"
	.type	__func__.39418, %object
	.size	__func__.39418, 25
__func__.39418:
	.ascii	"usb_rmnet_mux_ctrl_write\000"
	.space	3
	.type	audio_hw_info, %object
	.size	audio_hw_info, 64
audio_hw_info:
	.word	65811
	.space	4
	.word	4
	.word	0
	.space	4
	.word	44100
	.word	44100
	.word	2
	.word	2
	.word	1048576
	.word	64
	.word	524288
	.word	2
	.word	1024
	.space	8
	.type	__func__.48700, %object
	.size	__func__.48700, 13
__func__.48700:
	.ascii	"gsmd_rx_push\000"
	.space	3
	.type	__func__.48733, %object
	.size	__func__.48733, 13
__func__.48733:
	.ascii	"gsmd_tx_pull\000"
	.space	3
	.type	__func__.51129, %object
	.size	__func__.51129, 18
__func__.51129:
	.ascii	"ghsic_ctrl_remove\000"
	.space	2
	.type	__func__.48816, %object
	.size	__func__.48816, 18
__func__.48816:
	.ascii	"gsmd_notify_modem\000"
	.space	2
	.type	__func__.49563, %object
	.size	__func__.49563, 19
__func__.49563:
	.ascii	"gbam_peer_reset_cb\000"
	.space	1
	.type	__func__.49418, %object
	.size	__func__.49418, 22
__func__.49418:
	.ascii	"gbam_start_endless_rx\000"
	.space	2
	.type	__func__.49424, %object
	.size	__func__.49424, 22
__func__.49424:
	.ascii	"gbam_start_endless_tx\000"
	.space	2
	.type	__func__.57458, %object
	.size	__func__.57458, 23
__func__.57458:
	.ascii	"bam_data_peer_reset_cb\000"
	.space	1
	.type	__func__.57968, %object
	.size	__func__.57968, 14
__func__.57968:
	.ascii	"rndis_qc_init\000"
	.space	2
	.type	__func__.39439, %object
	.size	__func__.39439, 27
__func__.39439:
	.ascii	"rmnet_mux_ctrl_device_init\000"
	.space	1
	.type	__func__.57972, %object
	.size	__func__.57972, 17
__func__.57972:
	.ascii	"rndis_qc_cleanup\000"
	.space	3
	.type	__func__.57383, %object
	.size	__func__.57383, 14
__func__.57383:
	.ascii	"fmbim_cleanup\000"
	.space	2
	.type	__func__.56627, %object
	.size	__func__.56627, 13
__func__.56627:
	.ascii	"rndis_rm_hdr\000"
	.space	3
	.type	__func__.61595, %object
	.size	__func__.61595, 29
__func__.61595:
	.ascii	"f_audio_playback_ep_complete\000"
	.space	3
	.type	__func__.61617, %object
	.size	__func__.61617, 28
__func__.61617:
	.ascii	"f_audio_capture_ep_complete\000"
	.type	__func__.61634, %object
	.size	__func__.61634, 17
__func__.61634:
	.ascii	"f_audio_complete\000"
	.space	3
	.type	__func__.64201, %object
	.size	__func__.64201, 21
__func__.64201:
	.ascii	"alloc_android_config\000"
	.space	3
	.type	__func__.63660, %object
	.size	__func__.63660, 16
__func__.63660:
	.ascii	"functions_store\000"
	.type	__func__.62388, %object
	.size	__func__.62388, 13
__func__.62388:
	.ascii	"android_work\000"
	.space	3
	.type	__func__.48449, %object
	.size	__func__.48449, 14
__func__.48449:
	.ascii	"gsdio_ctrl_wq\000"
	.space	2
	.type	__func__.50199, %object
	.size	__func__.50199, 16
__func__.50199:
	.ascii	"rmnet_ctrl_poll\000"
	.type	__func__.51050, %object
	.size	__func__.51050, 25
__func__.51050:
	.ascii	"ghsic_send_cbits_tomodem\000"
	.space	3
	.type	__func__.52127, %object
	.size	__func__.52127, 27
__func__.52127:
	.ascii	"ghsuart_send_cbits_tomodem\000"
	.space	1
	.type	__func__.57537, %object
	.size	__func__.57537, 17
__func__.57537:
	.ascii	"bam_data_wake_cb\000"
	.space	3
	.type	__func__.57943, %object
	.size	__func__.57943, 18
__func__.57943:
	.ascii	"rndis_qc_open_dev\000"
	.space	2
	.type	__func__.40037, %object
	.size	__func__.40037, 12
__func__.40037:
	.ascii	"gps_connect\000"
	.type	__func__.40044, %object
	.size	__func__.40044, 15
__func__.40044:
	.ascii	"gps_disconnect\000"
	.space	1
	.type	__func__.40063, %object
	.size	__func__.40063, 17
__func__.40063:
	.ascii	"gps_cmd_complete\000"
	.space	3
	.type	__func__.39763, %object
	.size	__func__.39763, 15
__func__.39763:
	.ascii	"frmnet_connect\000"
	.space	1
	.type	__func__.39770, %object
	.size	__func__.39770, 18
__func__.39770:
	.ascii	"frmnet_disconnect\000"
	.space	2
	.type	__func__.39790, %object
	.size	__func__.39790, 20
__func__.39790:
	.ascii	"frmnet_cmd_complete\000"
	.type	__func__.57339, %object
	.size	__func__.57339, 10
__func__.57339:
	.ascii	"mbim_open\000"
	.space	2
	.type	__func__.51062, %object
	.size	__func__.51062, 21
__func__.51062:
	.ascii	"ghsic_ctrl_connect_w\000"
	.space	3
	.type	__func__.58371, %object
	.size	__func__.58371, 12
__func__.58371:
	.ascii	"gether_init\000"
	.type	__func__.48380, %object
	.size	__func__.48380, 20
__func__.48380:
	.ascii	"gsdio_read_complete\000"
	.type	__func__.49856, %object
	.size	__func__.49856, 29
__func__.49856:
	.ascii	"gsmd_ctrl_send_cbits_tomodem\000"
	.space	3
	.type	__func__.64265, %object
	.size	__func__.64265, 5
__func__.64265:
	.ascii	"init\000"
	.space	3
	.type	__func__.52488, %object
	.size	__func__.52488, 26
__func__.52488:
	.ascii	"ghsuart_data_write_tohost\000"
	.space	2
	.type	__func__.48505, %object
	.size	__func__.48505, 15
__func__.48505:
	.ascii	"gsdio_ch_probe\000"
	.space	1
	.type	__func__.48799, %object
	.size	__func__.48799, 18
__func__.48799:
	.ascii	"gsmd_connect_work\000"
	.space	2
	.type	__func__.49500, %object
	.size	__func__.49500, 25
__func__.49500:
	.ascii	"gbam2bam_disconnect_work\000"
	.space	3
	.type	__func__.57467, %object
	.size	__func__.57467, 29
__func__.57467:
	.ascii	"bam2bam_data_disconnect_work\000"
	.space	3
	.type	__func__.51671, %object
	.size	__func__.51671, 21
__func__.51671:
	.ascii	"ghsic_data_connect_w\000"
	.space	3
	.type	__func__.52135, %object
	.size	__func__.52135, 23
__func__.52135:
	.ascii	"ghsuart_ctrl_connect_w\000"
	.space	1
	.type	__func__.52645, %object
	.size	__func__.52645, 23
__func__.52645:
	.ascii	"ghsuart_data_connect_w\000"
	.space	1
	.type	__func__.57368, %object
	.size	__func__.57368, 10
__func__.57368:
	.ascii	"mbim_init\000"
	.space	2
	.type	oid_supported_list, %object
	.size	oid_supported_list, 112
oid_supported_list:
	.word	65793
	.word	65794
	.word	65795
	.word	65796
	.word	65798
	.word	65799
	.word	65802
	.word	65803
	.word	65804
	.word	65805
	.word	65814
	.word	65806
	.word	65809
	.word	65812
	.word	66050
	.word	131329
	.word	131330
	.word	131331
	.word	131332
	.word	131333
	.word	16843009
	.word	16843010
	.word	16843011
	.word	16843013
	.word	16843012
	.word	16908545
	.word	16908546
	.word	16908547
	.type	__func__.56396, %object
	.size	__func__.56396, 20
__func__.56396:
	.ascii	"gen_ndis_query_resp\000"
	.type	__func__.53878, %object
	.size	__func__.53878, 22
__func__.53878:
	.ascii	"ccid_ctrl_device_init\000"
	.space	2
	.type	__func__.53889, %object
	.size	__func__.53889, 11
__func__.53889:
	.ascii	"ccid_setup\000"
	.space	1
	.type	__func__.53822, %object
	.size	__func__.53822, 22
__func__.53822:
	.ascii	"ccid_bulk_device_init\000"
	.space	2
	.type	__func__.52698, %object
	.size	__func__.52698, 33
__func__.52698:
	.ascii	"ghsuart_send_controlbits_tomodem\000"
	.space	3
	.type	__func__.40053, %object
	.size	__func__.40053, 23
__func__.40053:
	.ascii	"gps_send_cpkt_response\000"
	.space	1
	.type	__func__.49842, %object
	.size	__func__.49842, 34
__func__.49842:
	.ascii	"grmnet_ctrl_smd_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.39779, %object
	.size	__func__.39779, 26
__func__.39779:
	.ascii	"frmnet_send_cpkt_response\000"
	.space	2
	.type	__func__.61815, %object
	.size	__func__.61815, 16
__func__.61815:
	.ascii	"f_audio_set_alt\000"
	.type	__func__.51708, %object
	.size	__func__.51708, 17
__func__.51708:
	.ascii	"ghsic_data_probe\000"
	.space	3
	.type	__func__.51117, %object
	.size	__func__.51117, 17
__func__.51117:
	.ascii	"ghsic_ctrl_probe\000"
	.space	3
	.type	__func__.48748, %object
	.size	__func__.48748, 19
__func__.48748:
	.ascii	"gsmd_read_complete\000"
	.space	1
	.type	__func__.48754, %object
	.size	__func__.48754, 20
__func__.48754:
	.ascii	"gsmd_write_complete\000"
	.type	__func__.51716, %object
	.size	__func__.51716, 18
__func__.51716:
	.ascii	"ghsic_data_remove\000"
	.space	2
	.type	__func__.52683, %object
	.size	__func__.52683, 20
__func__.52683:
	.ascii	"ghsuart_data_remove\000"
	.type	__func__.57433, %object
	.size	__func__.57433, 26
__func__.57433:
	.ascii	"bam_data_start_endless_rx\000"
	.space	2
	.type	__func__.57439, %object
	.size	__func__.57439, 26
__func__.57439:
	.ascii	"bam_data_start_endless_tx\000"
	.space	2
	.type	__func__.57170, %object
	.size	__func__.57170, 21
__func__.57170:
	.ascii	"mbim_notify_complete\000"
	.space	3
	.type	__func__.57161, %object
	.size	__func__.57161, 15
__func__.57161:
	.ascii	"mbim_do_notify\000"
	.space	1
	.type	__func__.51549, %object
	.size	__func__.51549, 24
__func__.51549:
	.ascii	"ghsic_data_write_tohost\000"
	.type	__func__.51578, %object
	.size	__func__.51578, 23
__func__.51578:
	.ascii	"ghsic_data_write_tomdm\000"
	.space	1
	.type	__func__.51627, %object
	.size	__func__.51627, 20
__func__.51627:
	.ascii	"ghsic_data_start_rx\000"
	.type	__func__.38254, %object
	.size	__func__.38254, 26
__func__.38254:
	.ascii	"rmnet_sdio_complete_epout\000"
	.space	2
	.type	__func__.50079, %object
	.size	__func__.50079, 24
__func__.50079:
	.ascii	"rmnet_ctrl_queue_notify\000"
	.type	__func__.57206, %object
	.size	__func__.57206, 11
__func__.57206:
	.ascii	"mbim_setup\000"
	.space	1
	.type	__func__.38176, %object
	.size	__func__.38176, 20
__func__.38176:
	.ascii	"rmnet_sdio_start_rx\000"
	.type	__func__.38399, %object
	.size	__func__.38399, 21
__func__.38399:
	.ascii	"rmnet_open_sdio_work\000"
	.space	3
	.type	__func__.57298, %object
	.size	__func__.57298, 10
__func__.57298:
	.ascii	"mbim_read\000"
	.space	2
	.type	__func__.45859, %object
	.size	__func__.45859, 10
__func__.45859:
	.ascii	"fsg_setup\000"
	.space	2
	.type	__func__.39232, %object
	.size	__func__.39232, 16
__func__.39232:
	.ascii	"transport_store\000"
	.type	__func__.49527, %object
	.size	__func__.49527, 22
__func__.49527:
	.ascii	"gbam2bam_connect_work\000"
	.space	2
	.type	__func__.45881, %object
	.size	__func__.45881, 18
__func__.45881:
	.ascii	"start_in_transfer\000"
	.space	2
	.type	__func__.45886, %object
	.size	__func__.45886, 19
__func__.45886:
	.ascii	"start_out_transfer\000"
	.space	1
	.type	__func__.53799, %object
	.size	__func__.53799, 16
__func__.53799:
	.ascii	"ccid_bulk_write\000"
	.type	__func__.48655, %object
	.size	__func__.48655, 15
__func__.48655:
	.ascii	"gsmd_alloc_req\000"
	.space	1
	.type	__func__.48759, %object
	.size	__func__.48759, 14
__func__.48759:
	.ascii	"gsmd_start_io\000"
	.space	2
	.type	__func__.49513, %object
	.size	__func__.49513, 18
__func__.49513:
	.ascii	"gbam_connect_work\000"
	.space	2
	.type	__func__.49454, %object
	.size	__func__.49454, 14
__func__.49454:
	.ascii	"gbam_start_io\000"
	.space	2
	.type	__func__.57193, %object
	.size	__func__.57193, 19
__func__.57193:
	.ascii	"fmbim_cmd_complete\000"
	.space	1
	.type	__func__.50091, %object
	.size	__func__.50091, 34
__func__.50091:
	.ascii	"grmnet_ctrl_qti_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.39085, %object
	.size	__func__.39085, 27
__func__.39085:
	.ascii	"rmnet_mux_command_complete\000"
	.space	1
	.type	__func__.53769, %object
	.size	__func__.53769, 15
__func__.53769:
	.ascii	"ccid_bulk_read\000"
	.space	1
	.type	__func__.55604, %object
	.size	__func__.55604, 16
__func__.55604:
	.ascii	"acc_ctrlrequest\000"
	.type	f_midi_cin_length, %object
	.size	f_midi_cin_length, 16
f_midi_cin_length:
	.byte	0
	.byte	0
	.byte	2
	.byte	3
	.byte	3
	.byte	1
	.byte	2
	.byte	3
	.byte	3
	.byte	3
	.byte	3
	.byte	3
	.byte	2
	.byte	2
	.byte	3
	.byte	1
	.type	__func__.57334, %object
	.size	__func__.57334, 11
__func__.57334:
	.ascii	"mbim_write\000"
	.space	1
	.type	__func__.57098, %object
	.size	__func__.57098, 25
__func__.57098:
	.ascii	"fmbim_send_cpkt_response\000"
	.space	3
	.type	__func__.57088, %object
	.size	__func__.57088, 30
__func__.57088:
	.ascii	"fmbim_ctrl_response_available\000"
	.space	2
	.type	__func__.38338, %object
	.size	__func__.38338, 22
__func__.38338:
	.ascii	"rmnet_close_sdio_work\000"
	.space	2
	.type	__func__.23917, %object
	.size	__func__.23917, 11
__func__.23917:
	.ascii	"set_config\000"
	.space	1
	.type	__func__.24135, %object
	.size	__func__.24135, 16
__func__.24135:
	.ascii	"composite_setup\000"
	.type	__func__.38410, %object
	.size	__func__.38410, 19
__func__.38410:
	.ascii	"rmnet_sdio_set_alt\000"
	.space	1
	.type	__func__.53712, %object
	.size	__func__.53712, 22
__func__.53712:
	.ascii	"ccid_function_set_alt\000"
	.space	2
	.type	__func__.56923, %object
	.size	__func__.56923, 12
__func__.56923:
	.ascii	"ecm_qc_bind\000"
	.type	__func__.57273, %object
	.size	__func__.57273, 10
__func__.57273:
	.ascii	"mbim_bind\000"
	.space	2
	.type	__func__.61847, %object
	.size	__func__.61847, 13
__func__.61847:
	.ascii	"f_audio_bind\000"
	.space	3
	.type	__func__.53736, %object
	.size	__func__.53736, 19
__func__.53736:
	.ascii	"ccid_function_bind\000"
	.space	1
	.type	__func__.62401, %object
	.size	__func__.62401, 15
__func__.62401:
	.ascii	"android_enable\000"
	.space	1
	.type	__func__.53463, %object
	.size	__func__.53463, 9
__func__.53463:
	.ascii	"adb_open\000"
	.space	3
	.type	__func__.23978, %object
	.size	__func__.23978, 18
__func__.23978:
	.ascii	"usb_remove_config\000"
	.space	2
	.type	__func__.63705, %object
	.size	__func__.63705, 13
__func__.63705:
	.ascii	"enable_store\000"
	.space	3
	.type	__func__.53470, %object
	.size	__func__.53470, 12
__func__.53470:
	.ascii	"adb_release\000"
	.type	__func__.62533, %object
	.size	__func__.62533, 20
__func__.62533:
	.ascii	"adb_closed_callback\000"
	.type	__func__.62493, %object
	.size	__func__.62493, 27
__func__.62493:
	.ascii	"functionfs_closed_callback\000"
	.space	1
	.type	__func__.44926, %object
	.size	__func__.44926, 13
__func__.44926:
	.ascii	"ffs_data_put\000"
	.space	3
	.type	__func__.63497, %object
	.size	__func__.63497, 23
__func__.63497:
	.ascii	"android_init_functions\000"
	.space	1
	.type	__func__.64103, %object
	.size	__func__.64103, 13
__func__.64103:
	.ascii	"android_bind\000"
	.space	3
	.type	longname, %object
	.size	longname, 15
longname:
	.ascii	"Gadget Android\000"
	.space	1
	.type	__func__.62950, %object
	.size	__func__.62950, 26
__func__.62950:
	.ascii	"qdss_function_bind_config\000"
	.space	2
	.type	__func__.64231, %object
	.size	__func__.64231, 14
__func__.64231:
	.ascii	"android_probe\000"
	.space	2
	.type	__func__.24264, %object
	.size	__func__.24264, 29
__func__.24264:
	.ascii	"usb_composite_setup_continue\000"
	.space	3
	.type	__func__.46300, %object
	.size	__func__.46300, 17
__func__.46300:
	.ascii	"handle_exception\000"
	.space	3
	.type	__func__.46230, %object
	.size	__func__.46230, 17
__func__.46230:
	.ascii	"get_next_command\000"
	.space	3
	.type	__func__.46121, %object
	.size	__func__.46121, 13
__func__.46121:
	.ascii	"finish_reply\000"
	.space	3
	.type	__func__.26473, %object
	.size	__func__.26473, 14
__func__.26473:
	.ascii	"usb_diag_read\000"
	.space	2
	.type	__func__.26491, %object
	.size	__func__.26491, 15
__func__.26491:
	.ascii	"usb_diag_write\000"
	.space	1
	.type	__func__.62933, %object
	.size	__func__.62933, 26
__func__.62933:
	.ascii	"diag_function_bind_config\000"
	.space	2
	.type	__func__.31706, %object
	.size	__func__.31706, 25
__func__.31706:
	.ascii	"usb_qdss_disconnect_work\000"
	.space	3
	.type	__func__.39852, %object
	.size	__func__.39852, 12
__func__.39852:
	.ascii	"frmnet_bind\000"
	.type	__func__.40118, %object
	.size	__func__.40118, 9
__func__.40118:
	.ascii	"gps_bind\000"
	.space	3
	.type	__func__.47425, %object
	.size	__func__.47425, 12
__func__.47425:
	.ascii	"gs_start_tx\000"
	.type	__func__.47487, %object
	.size	__func__.47487, 18
__func__.47487:
	.ascii	"gs_write_complete\000"
	.space	2
	.type	__func__.47703, %object
	.size	__func__.47703, 14
__func__.47703:
	.ascii	"gserial_setup\000"
	.space	2
	.type	__func__.48303, %object
	.size	__func__.48303, 16
__func__.48303:
	.ascii	"gsdio_alloc_req\000"
	.type	__func__.48335, %object
	.size	__func__.48335, 15
__func__.48335:
	.ascii	"gsdio_start_rx\000"
	.space	1
	.type	__func__.48352, %object
	.size	__func__.48352, 12
__func__.48352:
	.ascii	"gsdio_write\000"
	.type	__func__.48362, %object
	.size	__func__.48362, 14
__func__.48362:
	.ascii	"gsdio_rx_push\000"
	.space	2
	.type	__func__.48404, %object
	.size	__func__.48404, 19
__func__.48404:
	.ascii	"gsdio_read_pending\000"
	.space	1
	.type	__func__.48415, %object
	.size	__func__.48415, 14
__func__.48415:
	.ascii	"gsdio_tx_pull\000"
	.space	2
	.type	__func__.48433, %object
	.size	__func__.48433, 15
__func__.48433:
	.ascii	"gsdio_start_io\000"
	.space	1
	.type	__func__.48442, %object
	.size	__func__.48442, 16
__func__.48442:
	.ascii	"gsdio_port_free\000"
	.type	__func__.48516, %object
	.size	__func__.48516, 17
__func__.48516:
	.ascii	"gsdio_port_alloc\000"
	.space	3
	.type	__func__.48529, %object
	.size	__func__.48529, 14
__func__.48529:
	.ascii	"gsdio_connect\000"
	.space	2
	.type	__func__.48539, %object
	.size	__func__.48539, 17
__func__.48539:
	.ascii	"gsdio_disconnect\000"
	.space	3
	.type	__func__.48596, %object
	.size	__func__.48596, 12
__func__.48596:
	.ascii	"gsdio_setup\000"
	.type	__func__.48825, %object
	.size	__func__.48825, 13
__func__.48825:
	.ascii	"gsmd_connect\000"
	.space	3
	.type	__func__.48835, %object
	.size	__func__.48835, 16
__func__.48835:
	.ascii	"gsmd_disconnect\000"
	.type	__func__.53148, %object
	.size	__func__.53148, 20
__func__.53148:
	.ascii	"acm_port_disconnect\000"
	.type	__func__.53138, %object
	.size	__func__.53138, 17
__func__.53138:
	.ascii	"acm_port_connect\000"
	.space	3
	.type	__func__.48932, %object
	.size	__func__.48932, 11
__func__.48932:
	.ascii	"gsmd_setup\000"
	.space	1
	.type	__func__.49315, %object
	.size	__func__.49315, 18
__func__.49315:
	.ascii	"gbam_data_recv_cb\000"
	.space	2
	.type	__func__.49683, %object
	.size	__func__.49683, 16
__func__.49683:
	.ascii	"gbam_disconnect\000"
	.type	__func__.49698, %object
	.size	__func__.49698, 13
__func__.49698:
	.ascii	"gbam_connect\000"
	.space	3
	.type	__func__.49708, %object
	.size	__func__.49708, 11
__func__.49708:
	.ascii	"gbam_setup\000"
	.space	1
	.type	__func__.39700, %object
	.size	__func__.39700, 15
__func__.39700:
	.ascii	"frmnet_suspend\000"
	.space	1
	.type	__func__.39715, %object
	.size	__func__.39715, 14
__func__.39715:
	.ascii	"frmnet_resume\000"
	.space	2
	.type	__func__.49907, %object
	.size	__func__.49907, 18
__func__.49907:
	.ascii	"gsmd_ctrl_connect\000"
	.space	2
	.type	__func__.40012, %object
	.size	__func__.40012, 12
__func__.40012:
	.ascii	"gps_set_alt\000"
	.type	__func__.49928, %object
	.size	__func__.49928, 21
__func__.49928:
	.ascii	"gsmd_ctrl_disconnect\000"
	.space	3
	.type	__func__.49991, %object
	.size	__func__.49991, 16
__func__.49991:
	.ascii	"gsmd_ctrl_setup\000"
	.type	__func__.40140, %object
	.size	__func__.40140, 14
__func__.40140:
	.ascii	"gps_init_port\000"
	.space	2
	.type	__func__.62698, %object
	.size	__func__.62698, 25
__func__.62698:
	.ascii	"gps_function_bind_config\000"
	.space	3
	.type	__func__.40129, %object
	.size	__func__.40129, 16
__func__.40129:
	.ascii	"gps_bind_config\000"
	.type	__func__.50106, %object
	.size	__func__.50106, 18
__func__.50106:
	.ascii	"gqti_ctrl_connect\000"
	.space	2
	.type	__func__.50116, %object
	.size	__func__.50116, 21
__func__.50116:
	.ascii	"gqti_ctrl_disconnect\000"
	.space	3
	.type	__func__.51074, %object
	.size	__func__.51074, 19
__func__.51074:
	.ascii	"ghsic_ctrl_connect\000"
	.space	1
	.type	__func__.51092, %object
	.size	__func__.51092, 22
__func__.51092:
	.ascii	"ghsic_ctrl_disconnect\000"
	.space	2
	.type	__func__.51155, %object
	.size	__func__.51155, 25
__func__.51155:
	.ascii	"ghsic_ctrl_set_port_name\000"
	.space	3
	.type	__func__.51164, %object
	.size	__func__.51164, 17
__func__.51164:
	.ascii	"ghsic_ctrl_setup\000"
	.space	3
	.type	__func__.51146, %object
	.size	__func__.51146, 17
__func__.51146:
	.ascii	"gctrl_port_alloc\000"
	.space	3
	.type	__func__.51742, %object
	.size	__func__.51742, 22
__func__.51742:
	.ascii	"ghsic_data_disconnect\000"
	.space	2
	.type	__func__.51758, %object
	.size	__func__.51758, 19
__func__.51758:
	.ascii	"ghsic_data_connect\000"
	.space	1
	.type	__func__.51901, %object
	.size	__func__.51901, 25
__func__.51901:
	.ascii	"ghsic_data_set_port_name\000"
	.space	3
	.type	__func__.51910, %object
	.size	__func__.51910, 17
__func__.51910:
	.ascii	"ghsic_data_setup\000"
	.space	3
	.type	__func__.51729, %object
	.size	__func__.51729, 22
__func__.51729:
	.ascii	"ghsic_data_port_alloc\000"
	.space	2
	.type	__func__.52143, %object
	.size	__func__.52143, 21
__func__.52143:
	.ascii	"ghsuart_ctrl_connect\000"
	.space	3
	.type	__func__.52160, %object
	.size	__func__.52160, 24
__func__.52160:
	.ascii	"ghsuart_ctrl_disconnect\000"
	.type	__func__.52208, %object
	.size	__func__.52208, 19
__func__.52208:
	.ascii	"ghsuart_ctrl_setup\000"
	.space	1
	.type	__func__.52196, %object
	.size	__func__.52196, 24
__func__.52196:
	.ascii	"ghsuart_ctrl_port_alloc\000"
	.type	__func__.52721, %object
	.size	__func__.52721, 24
__func__.52721:
	.ascii	"ghsuart_data_disconnect\000"
	.type	__func__.39658, %object
	.size	__func__.39658, 23
__func__.39658:
	.ascii	"gport_rmnet_disconnect\000"
	.space	1
	.type	__func__.52930, %object
	.size	__func__.52930, 17
__func__.52930:
	.ascii	"gport_disconnect\000"
	.space	3
	.type	__func__.52740, %object
	.size	__func__.52740, 21
__func__.52740:
	.ascii	"ghsuart_data_connect\000"
	.space	3
	.type	__func__.52918, %object
	.size	__func__.52918, 14
__func__.52918:
	.ascii	"gport_connect\000"
	.space	2
	.type	__func__.39738, %object
	.size	__func__.39738, 15
__func__.39738:
	.ascii	"frmnet_set_alt\000"
	.space	1
	.type	__func__.39636, %object
	.size	__func__.39636, 20
__func__.39636:
	.ascii	"gport_rmnet_connect\000"
	.type	__func__.52822, %object
	.size	__func__.52822, 19
__func__.52822:
	.ascii	"ghsuart_data_setup\000"
	.space	1
	.type	__func__.52706, %object
	.size	__func__.52706, 24
__func__.52706:
	.ascii	"ghsuart_data_port_alloc\000"
	.type	__func__.39885, %object
	.size	__func__.39885, 17
__func__.39885:
	.ascii	"frmnet_init_port\000"
	.space	3
	.type	__func__.39865, %object
	.size	__func__.39865, 19
__func__.39865:
	.ascii	"frmnet_bind_config\000"
	.space	1
	.type	__func__.62625, %object
	.size	__func__.62625, 27
__func__.62625:
	.ascii	"rmnet_function_bind_config\000"
	.space	1
	.type	__func__.53089, %object
	.size	__func__.53089, 18
__func__.53089:
	.ascii	"gserial_init_port\000"
	.space	2
	.type	__func__.63022, %object
	.size	__func__.63022, 28
__func__.63022:
	.ascii	"serial_function_bind_config\000"
	.type	__func__.53299, %object
	.size	__func__.53299, 14
__func__.53299:
	.ascii	"acm_init_port\000"
	.space	2
	.type	__func__.62573, %object
	.size	__func__.62573, 25
__func__.62573:
	.ascii	"acm_function_bind_config\000"
	.space	3
	.type	__func__.57914, %object
	.size	__func__.57914, 14
__func__.57914:
	.ascii	"rndis_qc_bind\000"
	.space	2
	.type	__func__.57863, %object
	.size	__func__.57863, 15
__func__.57863:
	.ascii	"rndis_qc_setup\000"
	.space	1
	.type	__func__.56445, %object
	.size	__func__.56445, 18
__func__.56445:
	.ascii	"gen_ndis_set_resp\000"
	.space	2
	.type	__func__.56525, %object
	.size	__func__.56525, 17
__func__.56525:
	.ascii	"rndis_msg_parser\000"
	.space	3
	.type	__func__.57842, %object
	.size	__func__.57842, 26
__func__.57842:
	.ascii	"rndis_qc_command_complete\000"
	.space	2
	.type	__func__.57480, %object
	.size	__func__.57480, 26
__func__.57480:
	.ascii	"bam2bam_data_connect_work\000"
	.space	2
	.type	__func__.57112, %object
	.size	__func__.57112, 22
__func__.57112:
	.ascii	"mbim_configure_params\000"
	.space	2
	.type	__func__.57500, %object
	.size	__func__.57500, 20
__func__.57500:
	.ascii	"bam_data_disconnect\000"
	.type	__func__.57256, %object
	.size	__func__.57256, 13
__func__.57256:
	.ascii	"mbim_disable\000"
	.space	3
	.type	__func__.57125, %object
	.size	__func__.57125, 20
__func__.57125:
	.ascii	"mbim_bam_disconnect\000"
	.type	__func__.57512, %object
	.size	__func__.57512, 17
__func__.57512:
	.ascii	"bam_data_connect\000"
	.space	3
	.type	__func__.57245, %object
	.size	__func__.57245, 13
__func__.57245:
	.ascii	"mbim_set_alt\000"
	.space	3
	.type	__func__.57121, %object
	.size	__func__.57121, 17
__func__.57121:
	.ascii	"mbim_bam_connect\000"
	.space	3
	.type	__func__.57524, %object
	.size	__func__.57524, 15
__func__.57524:
	.ascii	"bam_data_setup\000"
	.space	1
	.type	__func__.57287, %object
	.size	__func__.57287, 17
__func__.57287:
	.ascii	"mbim_bind_config\000"
	.space	3
	.type	__func__.57106, %object
	.size	__func__.57106, 15
__func__.57106:
	.ascii	"mbim_bam_setup\000"
	.space	1
	.type	__func__.57260, %object
	.size	__func__.57260, 13
__func__.57260:
	.ascii	"mbim_suspend\000"
	.space	3
	.type	__func__.57264, %object
	.size	__func__.57264, 12
__func__.57264:
	.ascii	"mbim_resume\000"
	.type	__func__.57788, %object
	.size	__func__.57788, 19
__func__.57788:
	.ascii	"rndis_qc_bam_setup\000"
	.space	1
	.type	__func__.57937, %object
	.size	__func__.57937, 28
__func__.57937:
	.ascii	"rndis_qc_bind_config_vendor\000"
	.type	__func__.63103, %object
	.size	__func__.63103, 27
__func__.63103:
	.ascii	"rndis_function_bind_config\000"
	.space	1
	.type	__func__.63286, %object
	.size	__func__.63286, 25
__func__.63286:
	.ascii	"ecm_function_bind_config\000"
	.space	3
	.type	__func__.58345, %object
	.size	__func__.58345, 15
__func__.58345:
	.ascii	"gether_connect\000"
	.space	1
	.type	__func__.56812, %object
	.size	__func__.56812, 17
__func__.56812:
	.ascii	"ecm_qc_bam_setup\000"
	.space	3
	.type	__func__.56937, %object
	.size	__func__.56937, 19
__func__.56937:
	.ascii	"ecm_qc_bind_config\000"
	.space	1
	.type	__func__.63110, %object
	.size	__func__.63110, 30
__func__.63110:
	.ascii	"rndis_qc_function_bind_config\000"
	.space	2
	.type	__func__.62770, %object
	.size	__func__.62770, 28
__func__.62770:
	.ascii	"ecm_qc_function_bind_config\000"
	.type	__func__.56822, %object
	.size	__func__.56822, 19
__func__.56822:
	.ascii	"ecm_qc_bam_connect\000"
	.space	1
	.type	__func__.57882, %object
	.size	__func__.57882, 17
__func__.57882:
	.ascii	"rndis_qc_disable\000"
	.space	3
	.type	__func__.57797, %object
	.size	__func__.57797, 21
__func__.57797:
	.ascii	"rndis_qc_bam_connect\000"
	.space	3
	.type	__func__.61292, %object
	.size	__func__.61292, 20
__func__.61292:
	.ascii	"gaudio_open_streams\000"
	.type	__func__.61265, %object
	.size	__func__.61265, 24
__func__.61265:
	.ascii	"playback_prepare_params\000"
	.type	__func__.61276, %object
	.size	__func__.61276, 23
__func__.61276:
	.ascii	"capture_prepare_params\000"
	.space	1
	.type	__func__.61605, %object
	.size	__func__.61605, 21
__func__.61605:
	.ascii	"f_audio_capture_work\000"
	.space	3
	.type	__func__.61322, %object
	.size	__func__.61322, 16
__func__.61322:
	.ascii	"u_audio_capture\000"
	.type	__func__.61585, %object
	.size	__func__.61585, 22
__func__.61585:
	.ascii	"f_audio_playback_work\000"
	.space	2
	.type	__func__.61308, %object
	.size	__func__.61308, 17
__func__.61308:
	.ascii	"u_audio_playback\000"
	.space	3
	.type	__func__.61346, %object
	.size	__func__.61346, 20
__func__.61346:
	.ascii	"gaudio_open_snd_dev\000"
	.type	__func__.61357, %object
	.size	__func__.61357, 13
__func__.61357:
	.ascii	"gaudio_setup\000"
	.space	3
	.type	__func__.61876, %object
	.size	__func__.61876, 18
__func__.61876:
	.ascii	"audio_bind_config\000"
	.space	2
	.type	__func__.62715, %object
	.size	__func__.62715, 25
__func__.62715:
	.ascii	"ncm_function_bind_config\000"
	.space	3
	.type	__param_str_audio_capture_buf_size, %object
	.size	__param_str_audio_capture_buf_size, 31
__param_str_audio_capture_buf_size:
	.ascii	"android.audio_capture_buf_size\000"
	.space	1
	.type	__param_str_req_capture_count, %object
	.size	__param_str_req_capture_count, 26
__param_str_req_capture_count:
	.ascii	"android.req_capture_count\000"
	.space	2
	.type	__param_str_req_capture_buf_size, %object
	.size	__param_str_req_capture_buf_size, 29
__param_str_req_capture_buf_size:
	.ascii	"android.req_capture_buf_size\000"
	.space	3
	.type	__param_str_audio_playback_buf_size, %object
	.size	__param_str_audio_playback_buf_size, 32
__param_str_audio_playback_buf_size:
	.ascii	"android.audio_playback_buf_size\000"
	.type	__param_str_req_playback_count, %object
	.size	__param_str_req_playback_count, 27
__param_str_req_playback_count:
	.ascii	"android.req_playback_count\000"
	.space	1
	.type	__param_str_req_playback_buf_size, %object
	.size	__param_str_req_playback_buf_size, 30
__param_str_req_playback_buf_size:
	.ascii	"android.req_playback_buf_size\000"
	.space	2
	.type	__param_str_fn_cntl, %object
	.size	__param_str_fn_cntl, 16
__param_str_fn_cntl:
	.ascii	"android.fn_cntl\000"
	.type	__param_str_fn_cap, %object
	.size	__param_str_fn_cap, 15
__param_str_fn_cap:
	.ascii	"android.fn_cap\000"
	.space	1
	.type	__param_str_fn_play, %object
	.size	__param_str_fn_play, 16
__param_str_fn_play:
	.ascii	"android.fn_play\000"
	.type	__param_str_qc_host_addr, %object
	.size	__param_str_qc_host_addr, 21
__param_str_qc_host_addr:
	.ascii	"android.qc_host_addr\000"
	.space	3
	.type	__param_str_qc_dev_addr, %object
	.size	__param_str_qc_dev_addr, 20
__param_str_qc_dev_addr:
	.ascii	"android.qc_dev_addr\000"
	.type	__param_str_host_addr, %object
	.size	__param_str_host_addr, 18
__param_str_host_addr:
	.ascii	"android.host_addr\000"
	.space	2
	.type	__param_str_dev_addr, %object
	.size	__param_str_dev_addr, 17
__param_str_dev_addr:
	.ascii	"android.dev_addr\000"
	.space	3
	.type	__param_str_qmult, %object
	.size	__param_str_qmult, 14
__param_str_qmult:
	.ascii	"android.qmult\000"
	.space	2
	.type	__param_str_rndis_ul_max_xfer_size_rcvd, %object
	.size	__param_str_rndis_ul_max_xfer_size_rcvd, 36
__param_str_rndis_ul_max_xfer_size_rcvd:
	.ascii	"android.rndis_ul_max_xfer_size_rcvd\000"
	.type	__param_str_rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	__param_str_rndis_ul_max_pkt_per_xfer_rcvd, 39
__param_str_rndis_ul_max_pkt_per_xfer_rcvd:
	.ascii	"android.rndis_ul_max_pkt_per_xfer_rcvd\000"
	.space	1
	.type	__param_str_rndis_ul_max_pkt_per_xfer, %object
	.size	__param_str_rndis_ul_max_pkt_per_xfer, 34
__param_str_rndis_ul_max_pkt_per_xfer:
	.ascii	"android.rndis_ul_max_pkt_per_xfer\000"
	.space	2
	.type	__param_str_rndis_dl_max_pkt_per_xfer, %object
	.size	__param_str_rndis_dl_max_pkt_per_xfer, 34
__param_str_rndis_dl_max_pkt_per_xfer:
	.ascii	"android.rndis_dl_max_pkt_per_xfer\000"
	.space	2
	.type	acc_hid_table, %object
	.size	acc_hid_table, 32
acc_hid_table:
	.short	3
	.space	2
	.word	-1
	.word	-1
	.space	4
	.space	16
	.type	mtp_shortname, %object
	.size	mtp_shortname, 8
mtp_shortname:
	.ascii	"mtp_usb\000"
	.type	__param_str_mtp_tx_reqs, %object
	.size	__param_str_mtp_tx_reqs, 20
__param_str_mtp_tx_reqs:
	.ascii	"android.mtp_tx_reqs\000"
	.type	__param_str_mtp_tx_req_len, %object
	.size	__param_str_mtp_tx_req_len, 23
__param_str_mtp_tx_req_len:
	.ascii	"android.mtp_tx_req_len\000"
	.space	1
	.type	__param_str_mtp_rx_req_len, %object
	.size	__param_str_mtp_rx_req_len, 23
__param_str_mtp_rx_req_len:
	.ascii	"android.mtp_rx_req_len\000"
	.space	1
	.type	adb_shortname, %object
	.size	adb_shortname, 12
adb_shortname:
	.ascii	"android_adb\000"
	.type	__param_str_ghsuart_data_tx_intr_thld, %object
	.size	__param_str_ghsuart_data_tx_intr_thld, 34
__param_str_ghsuart_data_tx_intr_thld:
	.ascii	"android.ghsuart_data_tx_intr_thld\000"
	.space	2
	.type	__param_str_ghsuart_data_rx_req_size, %object
	.size	__param_str_ghsuart_data_rx_req_size, 33
__param_str_ghsuart_data_rx_req_size:
	.ascii	"android.ghsuart_data_rx_req_size\000"
	.space	3
	.type	__param_str_ghsuart_data_serial_rx_q_size, %object
	.size	__param_str_ghsuart_data_serial_rx_q_size, 38
__param_str_ghsuart_data_serial_rx_q_size:
	.ascii	"android.ghsuart_data_serial_rx_q_size\000"
	.space	2
	.type	__param_str_ghsuart_data_serial_tx_q_size, %object
	.size	__param_str_ghsuart_data_serial_tx_q_size, 38
__param_str_ghsuart_data_serial_tx_q_size:
	.ascii	"android.ghsuart_data_serial_tx_q_size\000"
	.space	2
	.type	__param_str_ghsuart_data_rmnet_rx_q_size, %object
	.size	__param_str_ghsuart_data_rmnet_rx_q_size, 37
__param_str_ghsuart_data_rmnet_rx_q_size:
	.ascii	"android.ghsuart_data_rmnet_rx_q_size\000"
	.space	3
	.type	__param_str_ghsuart_data_rmnet_tx_q_size, %object
	.size	__param_str_ghsuart_data_rmnet_tx_q_size, 37
__param_str_ghsuart_data_rmnet_tx_q_size:
	.ascii	"android.ghsuart_data_rmnet_tx_q_size\000"
	.space	3
	.type	__param_str_record_timestamp, %object
	.size	__param_str_record_timestamp, 25
__param_str_record_timestamp:
	.ascii	"android.record_timestamp\000"
	.space	3
	.type	__param_str_ghsic_data_pend_limit_with_bridge, %object
	.size	__param_str_ghsic_data_pend_limit_with_bridge, 42
__param_str_ghsic_data_pend_limit_with_bridge:
	.ascii	"android.ghsic_data_pend_limit_with_bridge\000"
	.space	2
	.type	__param_str_ghsic_data_fctrl_dis_thld, %object
	.size	__param_str_ghsic_data_fctrl_dis_thld, 34
__param_str_ghsic_data_fctrl_dis_thld:
	.ascii	"android.ghsic_data_fctrl_dis_thld\000"
	.space	2
	.type	__param_str_ghsic_data_fctrl_en_thld, %object
	.size	__param_str_ghsic_data_fctrl_en_thld, 33
__param_str_ghsic_data_fctrl_en_thld:
	.ascii	"android.ghsic_data_fctrl_en_thld\000"
	.space	3
	.type	__param_str_ghsic_data_fctrl_support, %object
	.size	__param_str_ghsic_data_fctrl_support, 33
__param_str_ghsic_data_fctrl_support:
	.ascii	"android.ghsic_data_fctrl_support\000"
	.space	3
	.type	__param_str_ghsic_data_tx_intr_thld, %object
	.size	__param_str_ghsic_data_tx_intr_thld, 32
__param_str_ghsic_data_tx_intr_thld:
	.ascii	"android.ghsic_data_tx_intr_thld\000"
	.type	__param_str_ghsic_data_rx_req_size, %object
	.size	__param_str_ghsic_data_rx_req_size, 31
__param_str_ghsic_data_rx_req_size:
	.ascii	"android.ghsic_data_rx_req_size\000"
	.space	1
	.type	__param_str_ghsic_data_serial_rx_q_size, %object
	.size	__param_str_ghsic_data_serial_rx_q_size, 36
__param_str_ghsic_data_serial_rx_q_size:
	.ascii	"android.ghsic_data_serial_rx_q_size\000"
	.type	__param_str_ghsic_data_serial_tx_q_size, %object
	.size	__param_str_ghsic_data_serial_tx_q_size, 36
__param_str_ghsic_data_serial_tx_q_size:
	.ascii	"android.ghsic_data_serial_tx_q_size\000"
	.type	__param_str_ghsic_data_rmnet_rx_q_size, %object
	.size	__param_str_ghsic_data_rmnet_rx_q_size, 35
__param_str_ghsic_data_rmnet_rx_q_size:
	.ascii	"android.ghsic_data_rmnet_rx_q_size\000"
	.space	1
	.type	__param_str_ghsic_data_rmnet_tx_q_size, %object
	.size	__param_str_ghsic_data_rmnet_tx_q_size, 35
__param_str_ghsic_data_rmnet_tx_q_size:
	.ascii	"android.ghsic_data_rmnet_tx_q_size\000"
	.space	1
	.type	__param_str_dl_intr_threshold, %object
	.size	__param_str_dl_intr_threshold, 26
__param_str_dl_intr_threshold:
	.ascii	"android.dl_intr_threshold\000"
	.space	2
	.type	__param_str_bam_mux_rx_req_size, %object
	.size	__param_str_bam_mux_rx_req_size, 28
__param_str_bam_mux_rx_req_size:
	.ascii	"android.bam_mux_rx_req_size\000"
	.type	__param_str_bam_mux_rx_q_size, %object
	.size	__param_str_bam_mux_rx_q_size, 26
__param_str_bam_mux_rx_q_size:
	.ascii	"android.bam_mux_rx_q_size\000"
	.space	2
	.type	__param_str_bam_mux_tx_q_size, %object
	.size	__param_str_bam_mux_tx_q_size, 26
__param_str_bam_mux_tx_q_size:
	.ascii	"android.bam_mux_tx_q_size\000"
	.space	2
	.type	__param_str_bam_mux_rx_fctrl_dis_thld, %object
	.size	__param_str_bam_mux_rx_fctrl_dis_thld, 34
__param_str_bam_mux_rx_fctrl_dis_thld:
	.ascii	"android.bam_mux_rx_fctrl_dis_thld\000"
	.space	2
	.type	__param_str_bam_mux_rx_fctrl_support, %object
	.size	__param_str_bam_mux_rx_fctrl_support, 33
__param_str_bam_mux_rx_fctrl_support:
	.ascii	"android.bam_mux_rx_fctrl_support\000"
	.space	3
	.type	__param_str_bam_mux_rx_fctrl_en_thld, %object
	.size	__param_str_bam_mux_rx_fctrl_en_thld, 33
__param_str_bam_mux_rx_fctrl_en_thld:
	.ascii	"android.bam_mux_rx_fctrl_en_thld\000"
	.space	3
	.type	__param_str_bam_mux_tx_pkt_drop_thld, %object
	.size	__param_str_bam_mux_tx_pkt_drop_thld, 33
__param_str_bam_mux_tx_pkt_drop_thld:
	.ascii	"android.bam_mux_tx_pkt_drop_thld\000"
	.space	3
	.type	__param_str_bam_pending_limit, %object
	.size	__param_str_bam_pending_limit, 26
__param_str_bam_pending_limit:
	.ascii	"android.bam_pending_limit\000"
	.space	2
	.type	fsg_string_interface, %object
	.size	fsg_string_interface, 13
fsg_string_interface:
	.ascii	"Mass Storage\000"
	.space	3
	.type	__param_str_mux_sdio_rx_fctrl_dis_thld, %object
	.size	__param_str_mux_sdio_rx_fctrl_dis_thld, 35
__param_str_mux_sdio_rx_fctrl_dis_thld:
	.ascii	"android.mux_sdio_rx_fctrl_dis_thld\000"
	.space	1
	.type	__param_str_mux_sdio_rx_fctrl_en_thld, %object
	.size	__param_str_mux_sdio_rx_fctrl_en_thld, 34
__param_str_mux_sdio_rx_fctrl_en_thld:
	.ascii	"android.mux_sdio_rx_fctrl_en_thld\000"
	.space	2
	.type	__param_str_mux_sdio_tx_pkt_drop_thld, %object
	.size	__param_str_mux_sdio_tx_pkt_drop_thld, 34
__param_str_mux_sdio_tx_pkt_drop_thld:
	.ascii	"android.mux_sdio_tx_pkt_drop_thld\000"
	.space	2
	.type	__param_str_rmnet_mux_smd_data_ch, %object
	.size	__param_str_rmnet_mux_smd_data_ch, 30
__param_str_rmnet_mux_smd_data_ch:
	.ascii	"android.rmnet_mux_smd_data_ch\000"
	.space	2
	.type	__param_str_rmnet_mux_sdio_data_ch, %object
	.size	__param_str_rmnet_mux_sdio_data_ch, 31
__param_str_rmnet_mux_sdio_data_ch:
	.ascii	"android.rmnet_mux_sdio_data_ch\000"
	.space	1
	.type	__param_str_rmnet_mux_sdio_ctl_ch, %object
	.size	__param_str_rmnet_mux_sdio_ctl_ch, 30
__param_str_rmnet_mux_sdio_ctl_ch:
	.ascii	"android.rmnet_mux_sdio_ctl_ch\000"
	.space	2
	.type	__param_str_sdio_rx_fctrl_dis_thld, %object
	.size	__param_str_sdio_rx_fctrl_dis_thld, 31
__param_str_sdio_rx_fctrl_dis_thld:
	.ascii	"android.sdio_rx_fctrl_dis_thld\000"
	.space	1
	.type	__param_str_sdio_rx_fctrl_en_thld, %object
	.size	__param_str_sdio_rx_fctrl_en_thld, 30
__param_str_sdio_rx_fctrl_en_thld:
	.ascii	"android.sdio_rx_fctrl_en_thld\000"
	.space	2
	.type	__param_str_sdio_tx_pkt_drop_thld, %object
	.size	__param_str_sdio_tx_pkt_drop_thld, 30
__param_str_sdio_tx_pkt_drop_thld:
	.ascii	"android.sdio_tx_pkt_drop_thld\000"
	.space	2
	.type	__param_str_rmnet_sdio_data_ch, %object
	.size	__param_str_rmnet_sdio_data_ch, 27
__param_str_rmnet_sdio_data_ch:
	.ascii	"android.rmnet_sdio_data_ch\000"
	.space	1
	.type	__param_str_rmnet_sdio_ctl_ch, %object
	.size	__param_str_rmnet_sdio_ctl_ch, 26
__param_str_rmnet_sdio_ctl_ch:
	.ascii	"android.rmnet_sdio_ctl_ch\000"
	.space	2
	.type	__param_str_rmnet_data_ch, %object
	.size	__param_str_rmnet_data_ch, 22
__param_str_rmnet_data_ch:
	.ascii	"android.rmnet_data_ch\000"
	.space	2
	.type	__param_str_rmnet_ctl_ch, %object
	.size	__param_str_rmnet_ctl_ch, 21
__param_str_rmnet_ctl_ch:
	.ascii	"android.rmnet_ctl_ch\000"
	.space	3
	.type	__param_str_iSerialNumber, %object
	.size	__param_str_iSerialNumber, 22
__param_str_iSerialNumber:
	.ascii	"android.iSerialNumber\000"
	.space	2
	.type	__param_str_iProduct, %object
	.size	__param_str_iProduct, 17
__param_str_iProduct:
	.ascii	"android.iProduct\000"
	.space	3
	.type	__param_str_iManufacturer, %object
	.size	__param_str_iManufacturer, 22
__param_str_iManufacturer:
	.ascii	"android.iManufacturer\000"
	.space	2
	.type	__param_str_bcdDevice, %object
	.size	__param_str_bcdDevice, 18
__param_str_bcdDevice:
	.ascii	"android.bcdDevice\000"
	.space	2
	.type	__param_str_idProduct, %object
	.size	__param_str_idProduct, 18
__param_str_idProduct:
	.ascii	"android.idProduct\000"
	.space	2
	.type	__param_str_idVendor, %object
	.size	__param_str_idVendor, 17
__param_str_idVendor:
	.ascii	"android.idVendor\000"
	.section	.exitcall.exit,"aw",%progbits
	.align	2
	.type	__exitcall_cleanup, %object
	.size	__exitcall_cleanup, 4
__exitcall_cleanup:
	.word	cleanup
	.type	__exitcall_gether_exit, %object
	.size	__exitcall_gether_exit, 4
__exitcall_gether_exit:
	.word	gether_exit
	.type	__exitcall_ghsuart_data_exit, %object
	.size	__exitcall_ghsuart_data_exit, 4
__exitcall_ghsuart_data_exit:
	.word	ghsuart_data_exit
	.type	__exitcall_ghsuart_ctrl_exit, %object
	.size	__exitcall_ghsuart_ctrl_exit, 4
__exitcall_ghsuart_ctrl_exit:
	.word	ghsuart_ctrl_exit
	.type	__exitcall_ghsic_data_exit, %object
	.size	__exitcall_ghsic_data_exit, 4
__exitcall_ghsic_data_exit:
	.word	ghsic_data_exit
	.type	__exitcall_gctrl_exit, %object
	.size	__exitcall_gctrl_exit, 4
__exitcall_gctrl_exit:
	.word	gctrl_exit
	.type	__exitcall_gqti_ctrl_cleanup, %object
	.size	__exitcall_gqti_ctrl_cleanup, 4
__exitcall_gqti_ctrl_cleanup:
	.word	gqti_ctrl_cleanup
	.type	__exitcall_gsmd_ctrl_exit, %object
	.size	__exitcall_gsmd_ctrl_exit, 4
__exitcall_gsmd_ctrl_exit:
	.word	gsmd_ctrl_exit
	.section	__modver,"aw",%progbits
	.align	2
	.type	__modver_attr, %object
	.size	__modver_attr, 4
__modver_attr:
	.word	___modver_attr
	.section	.data.rel.ro,"aw",%progbits
	.align	2
.LANCHOR6 = . + 0
	.type	ffs_sb_operations, %object
	.size	ffs_sb_operations, 108
ffs_sb_operations:
	.space	16
	.word	generic_delete_inode
	.space	24
	.word	simple_statfs
	.space	60
	.type	ffs_ep0_operations, %object
	.size	ffs_ep0_operations, 104
ffs_ep0_operations:
	.word	0
	.word	no_llseek
	.word	ffs_ep0_read
	.word	ffs_ep0_write
	.space	16
	.word	ffs_ep0_ioctl
	.space	8
	.word	ffs_ep0_open
	.space	4
	.word	ffs_ep0_release
	.space	48
	.type	ffs_epfile_operations, %object
	.size	ffs_epfile_operations, 104
ffs_epfile_operations:
	.word	0
	.word	no_llseek
	.word	ffs_epfile_read
	.word	ffs_epfile_write
	.space	16
	.word	ffs_epfile_ioctl
	.space	8
	.word	ffs_epfile_open
	.space	4
	.word	ffs_epfile_release
	.space	48
	.type	eth_netdev_ops, %object
	.size	eth_netdev_ops, 136
eth_netdev_ops:
	.space	8
	.word	eth_open
	.word	eth_stop
	.word	eth_start_xmit
	.space	12
	.word	eth_mac_addr
	.word	eth_validate_addr
	.space	8
	.word	ueth_change_mtu
	.space	84
	.type	ops, %object
	.size	ops, 164
ops:
	.space	8
	.word	eth_get_drvinfo
	.space	28
	.word	ethtool_op_get_link
	.space	120
	.type	eth_qc_netdev_ops, %object
	.size	eth_qc_netdev_ops, 136
eth_qc_netdev_ops:
	.space	8
	.word	eth_qc_open
	.word	eth_qc_stop
	.word	eth_qc_start_xmit
	.space	12
	.word	eth_mac_addr
	.word	eth_validate_addr
	.space	8
	.word	ueth_qc_change_mtu
	.space	84
	.type	qc_ethtool_ops, %object
	.size	qc_ethtool_ops, 164
qc_ethtool_ops:
	.space	8
	.word	eth_qc_get_drvinfo
	.space	28
	.word	ethtool_op_get_link
	.space	120
	.type	rmnet_mux_ctrl_fops, %object
	.size	rmnet_mux_ctrl_fops, 104
rmnet_mux_ctrl_fops:
	.word	0
	.space	4
	.word	usb_rmnet_mux_ctrl_read
	.word	usb_rmnet_mux_ctrl_write
	.space	16
	.word	usb_rmnet_mux_ctrl_ioctl
	.space	8
	.word	usb_rmnet_mux_ctrl_open
	.space	4
	.word	usb_rmnet_mux_ctrl_release
	.space	48
	.section	.devinit.rodata,"a",%progbits
	.align	2
	.type	android_id_table, %object
	.size	android_id_table, 48
android_id_table:
	.ascii	"android_usb\000"
	.space	8
	.space	4
	.ascii	"android_usb_hsic\000"
	.space	3
	.space	4
	.section	.data.rel.ro.local,"aw",%progbits
	.align	2
.LANCHOR5 = . + 0
	.type	ghsuart_ctrl_stats_ops, %object
	.size	ghsuart_ctrl_stats_ops, 104
ghsuart_ctrl_stats_ops:
	.space	8
	.word	ghsuart_ctrl_read_stats
	.word	ghsuart_ctrl_reset_stats
	.space	88
	.type	debug_fdiag_ops, %object
	.size	debug_fdiag_ops, 104
debug_fdiag_ops:
	.space	8
	.word	debug_read_stats
	.word	debug_reset_stats
	.space	28
	.word	debug_open
	.space	56
	.type	gs_tty_ops, %object
	.size	gs_tty_ops, 124
gs_tty_ops:
	.space	12
	.word	gs_open
	.word	gs_close
	.space	8
	.word	gs_write
	.word	gs_put_char
	.word	gs_flush_chars
	.word	gs_write_room
	.word	gs_chars_in_buffer
	.space	16
	.word	gs_unthrottle
	.space	12
	.word	gs_break_ctl
	.space	16
	.word	gs_tiocmget
	.word	gs_tiocmset
	.space	16
	.type	debug_gsdio_ops, %object
	.size	debug_gsdio_ops, 104
debug_gsdio_ops:
	.space	8
	.word	debug_sdio_read_stats
	.word	debug_sdio_reset_stats
	.space	28
	.word	debug_sdio_open
	.space	56
	.type	debug_gsmd_ops, %object
	.size	debug_gsmd_ops, 104
debug_gsmd_ops:
	.space	8
	.word	debug_smd_read_stats
	.word	debug_smd_reset_stats
	.space	28
	.word	debug_smd_open
	.space	56
	.type	ctrl_names, %object
	.size	ctrl_names, 24
ctrl_names:
	.word	.LC940
	.word	.LC941
	.word	.LC942
	.word	.LC941
	.space	8
	.type	ghsuart_data_names, %object
	.size	ghsuart_data_names, 8
ghsuart_data_names:
	.word	.LC937
	.word	.LC938
	.type	rndis_qc_fops, %object
	.size	rndis_qc_fops, 104
rndis_qc_fops:
	.word	0
	.space	28
	.word	rndis_qc_ioctl
	.space	8
	.word	rndis_qc_open_dev
	.space	4
	.word	rndis_qc_release_dev
	.space	48
	.type	mbim_fops, %object
	.size	mbim_fops, 104
mbim_fops:
	.word	0
	.space	4
	.word	mbim_read
	.word	mbim_write
	.space	16
	.word	mbim_ioctl
	.space	8
	.word	mbim_open
	.space	4
	.word	mbim_release
	.space	48
	.type	acc_fops, %object
	.size	acc_fops, 104
acc_fops:
	.word	0
	.space	4
	.word	acc_read
	.word	acc_write
	.space	16
	.word	acc_ioctl
	.space	8
	.word	acc_open
	.space	4
	.word	acc_release
	.space	48
	.type	mtp_fops, %object
	.size	mtp_fops, 104
mtp_fops:
	.word	0
	.space	4
	.word	mtp_read
	.word	mtp_write
	.space	16
	.word	mtp_ioctl
	.space	8
	.word	mtp_open
	.space	4
	.word	mtp_release
	.space	48
	.type	ccid_ctrl_fops, %object
	.size	ccid_ctrl_fops, 104
ccid_ctrl_fops:
	.word	0
	.space	4
	.word	ccid_ctrl_read
	.space	20
	.word	ccid_ctrl_ioctl
	.space	8
	.word	ccid_ctrl_open
	.space	4
	.word	ccid_ctrl_release
	.space	48
	.type	ccid_bulk_fops, %object
	.size	ccid_bulk_fops, 104
ccid_bulk_fops:
	.word	0
	.space	4
	.word	ccid_bulk_read
	.word	ccid_bulk_write
	.space	28
	.word	ccid_bulk_open
	.space	4
	.word	ccid_bulk_release
	.space	48
	.type	adb_fops, %object
	.size	adb_fops, 104
adb_fops:
	.word	0
	.space	4
	.word	adb_read
	.word	adb_write
	.space	28
	.word	adb_open
	.space	4
	.word	adb_release
	.space	48
	.type	ghsuart_data_stats_ops, %object
	.size	ghsuart_data_stats_ops, 104
ghsuart_data_stats_ops:
	.space	8
	.word	ghsuart_data_read_stats
	.word	ghsuart_data_reset_stats
	.space	88
	.type	ghsic_stats_ops, %object
	.size	ghsic_stats_ops, 104
ghsic_stats_ops:
	.space	8
	.word	ghsic_data_read_stats
	.word	ghsic_data_reset_stats
	.space	88
	.type	gdata_timestamp_ops, %object
	.size	gdata_timestamp_ops, 104
gdata_timestamp_ops:
	.space	8
	.word	show_timestamp
	.space	92
	.type	gctrl_stats_ops, %object
	.size	gctrl_stats_ops, 104
gctrl_stats_ops:
	.space	8
	.word	gctrl_read_stats
	.word	gctrl_reset_stats
	.space	88
	.type	rmnet_ctrl_fops, %object
	.size	rmnet_ctrl_fops, 104
rmnet_ctrl_fops:
	.word	0
	.space	4
	.word	rmnet_ctrl_read
	.word	rmnet_ctrl_write
	.space	12
	.word	rmnet_ctrl_poll
	.word	rmnet_ctrl_ioctl
	.space	8
	.word	rmnet_ctrl_open
	.space	4
	.word	rmnet_ctrl_release
	.space	48
	.type	gsmd_ctrl_stats_ops, %object
	.size	gsmd_ctrl_stats_ops, 104
gsmd_ctrl_stats_ops:
	.space	8
	.word	gsmd_ctrl_read_stats
	.word	gsmd_ctrl_reset_stats
	.space	88
	.type	gbam_stats_ops, %object
	.size	gbam_stats_ops, 104
gbam_stats_ops:
	.space	8
	.word	gbam_read_stats
	.word	gbam_reset_stats
	.space	88
	.type	debug_adb_ops, %object
	.size	debug_adb_ops, 104
debug_adb_ops:
	.space	8
	.word	debug_read_status
	.space	32
	.word	serial_debug_open
	.space	56
	.type	debug_rst_ops, %object
	.size	debug_rst_ops, 104
debug_rst_ops:
	.space	12
	.word	debug_write_reset
	.space	28
	.word	serial_debug_open
	.space	56
	.type	rmnet_mux_svlte_debug_stats_ops, %object
	.size	rmnet_mux_svlte_debug_stats_ops, 104
rmnet_mux_svlte_debug_stats_ops:
	.space	8
	.word	rmnet_mux_read_stats
	.word	rmnet_mux_reset_stats
	.space	28
	.word	dbg_rmnet_mux_open
	.space	56
	.type	debug_rmnet_sdio_stats_ops, %object
	.size	debug_rmnet_sdio_stats_ops, 104
debug_rmnet_sdio_stats_ops:
	.space	8
	.word	rmnet_sdio_read_stats
	.word	rmnet_sdio_reset_stats
	.space	28
	.word	debug_rmnet_sdio_open
	.space	56
	.type	rmnet_smd_debug_stats_ops, %object
	.size	rmnet_smd_debug_stats_ops, 104
rmnet_smd_debug_stats_ops:
	.space	8
	.word	rmnet_smd_debug_read_stats
	.word	rmnet_smd_debug_reset_stats
	.space	28
	.word	rmnet_smd_debug_open
	.space	56
	.section	.data.rel.local,"aw",%progbits
	.align	3
.LANCHOR0 = . + 0
.LANCHOR10 = . + 8184
	.type	usb_diag_ch_list, %object
	.size	usb_diag_ch_list, 8
usb_diag_ch_list:
	.word	usb_diag_ch_list
	.word	usb_diag_ch_list
	.type	dev_attr_suspended, %object
	.size	dev_attr_suspended, 16
dev_attr_suspended:
	.word	.LC960
	.short	292
	.space	2
	.word	composite_show_suspended
	.word	0
	.type	usb_qdss_ch_list, %object
	.size	usb_qdss_ch_list, 8
usb_qdss_ch_list:
	.word	usb_qdss_ch_list
	.word	usb_qdss_ch_list
	.type	android_platform_driver, %object
	.size	android_platform_driver, 80
android_platform_driver:
	.word	android_probe
	.word	android_remove
	.space	12
	.word	.LC566
	.space	16
	.word	usb_android_dt_match
	.space	32
	.word	android_id_table
	.type	rmnet_ctl_ch, %object
	.size	rmnet_ctl_ch, 4
rmnet_ctl_ch:
	.word	.LC294
	.type	rmnet_data_ch, %object
	.size	rmnet_data_ch, 4
rmnet_data_ch:
	.word	.LC294
	.type	rmnet_device, %object
	.size	rmnet_device, 36
rmnet_device:
	.word	255
	.word	.LC939
	.word	rmnet_ctrl_fops
	.space	24
	.type	acc_device, %object
	.size	acc_device, 36
acc_device:
	.word	255
	.word	.LC928
	.word	acc_fops
	.space	24
	.type	rndis_qc_device, %object
	.size	rndis_qc_device, 36
rndis_qc_device:
	.word	255
	.word	.LC917
	.word	rndis_qc_fops
	.space	24
	.type	mtp_device, %object
	.size	mtp_device, 36
mtp_device:
	.word	255
	.word	mtp_shortname
	.word	mtp_fops
	.space	24
	.type	adb_device, %object
	.size	adb_device, 36
adb_device:
	.word	255
	.word	adb_shortname
	.word	adb_fops
	.space	24
	.type	rmnet_mux_ctrl_dev, %object
	.size	rmnet_mux_ctrl_dev, 36
rmnet_mux_ctrl_dev:
	.word	255
	.word	.LC954
	.word	rmnet_mux_ctrl_fops
	.space	24
	.type	ccid_bulk_device, %object
	.size	ccid_bulk_device, 36
ccid_bulk_device:
	.word	255
	.word	.LC932
	.word	ccid_bulk_fops
	.space	24
	.type	ccid_ctrl_device, %object
	.size	ccid_ctrl_device, 36
ccid_ctrl_device:
	.word	255
	.word	.LC931
	.word	ccid_ctrl_fops
	.space	24
	.type	mbim_device, %object
	.size	mbim_device, 36
mbim_device:
	.word	255
	.word	.LC924
	.word	mbim_fops
	.space	24
	.type	acc_hid_ll_driver, %object
	.size	acc_hid_ll_driver, 28
acc_hid_ll_driver:
	.word	acc_hid_start
	.word	acc_hid_stop
	.word	acc_hid_open
	.word	acc_hid_close
	.space	8
	.word	acc_hid_parse
	.type	ffs_fs_type, %object
	.size	ffs_fs_type, 36
ffs_fs_type:
	.word	.LC951
	.space	4
	.word	ffs_fs_mount
	.space	8
	.word	ffs_fs_kill_sb
	.word	0
	.space	8
	.type	composite_driver, %object
	.size	composite_driver, 88
composite_driver:
	.space	8
	.word	composite_unbind
	.word	composite_setup
	.word	composite_disconnect
	.word	composite_suspend
	.word	composite_resume
	.space	8
	.word	0
	.space	44
	.space	4
	.type	acc_hid_driver, %object
	.size	acc_hid_driver, 132
acc_hid_driver:
	.word	.LC927
	.word	acc_hid_table
	.space	12
	.word	acc_hid_probe
	.space	108
	.type	dev_attr_cdrom, %object
	.size	dev_attr_cdrom, 16
dev_attr_cdrom:
	.word	.LC947
	.short	420
	.space	2
	.word	fsg_show_cdrom
	.word	fsg_store_cdrom
	.type	dev_attr_nofua, %object
	.size	dev_attr_nofua, 16
dev_attr_nofua:
	.word	.LC949
	.short	420
	.space	2
	.word	fsg_show_nofua
	.word	fsg_store_nofua
	.type	dev_attr_ro, %object
	.size	dev_attr_ro, 16
dev_attr_ro:
	.word	.LC950
	.short	420
	.space	2
	.word	fsg_show_ro
	.word	fsg_store_ro
	.type	dev_attr_file, %object
	.size	dev_attr_file, 16
dev_attr_file:
	.word	.LC948
	.short	420
	.space	2
	.word	fsg_show_file
	.word	fsg_store_file
	.type	ecm_string_defs, %object
	.size	ecm_string_defs, 40
ecm_string_defs:
	.space	4
	.word	.LC921
	.space	4
	.word	0
	.space	4
	.word	.LC922
	.space	4
	.word	.LC923
	.space	8
	.type	ncm_string_defs, %object
	.size	ncm_string_defs, 40
ncm_string_defs:
	.space	4
	.word	.LC900
	.space	4
	.word	0
	.space	4
	.word	.LC901
	.space	4
	.word	.LC902
	.space	8
	.type	ct_func_strings, %object
	.size	ct_func_strings, 8
ct_func_strings:
	.word	ct_func_string_table
	.word	0
	.type	ccid_fs_descs, %object
	.size	ccid_fs_descs, 24
ccid_fs_descs:
	.word	ccid_interface_desc
	.word	ccid_class_desc
	.word	ccid_fs_notify_desc
	.word	ccid_fs_in_desc
	.word	ccid_fs_out_desc
	.word	0
	.type	ccid_hs_descs, %object
	.size	ccid_hs_descs, 24
ccid_hs_descs:
	.word	ccid_interface_desc
	.word	ccid_class_desc
	.word	ccid_hs_notify_desc
	.word	ccid_hs_in_desc
	.word	ccid_hs_out_desc
	.word	0
	.type	fs_adb_descs, %object
	.size	fs_adb_descs, 16
fs_adb_descs:
	.word	adb_interface_desc
	.word	adb_fullspeed_in_desc
	.word	adb_fullspeed_out_desc
	.word	0
	.type	hs_adb_descs, %object
	.size	hs_adb_descs, 16
hs_adb_descs:
	.word	adb_interface_desc
	.word	adb_highspeed_in_desc
	.word	adb_highspeed_out_desc
	.word	0
	.type	ss_adb_descs, %object
	.size	ss_adb_descs, 24
ss_adb_descs:
	.word	adb_interface_desc
	.word	adb_superspeed_in_desc
	.word	adb_superspeed_in_comp_desc
	.word	adb_superspeed_out_desc
	.word	adb_superspeed_out_comp_desc
	.word	0
	.type	rmnet_mux_strings, %object
	.size	rmnet_mux_strings, 8
rmnet_mux_strings:
	.word	rmnet_mux_string_table
	.word	0
	.type	rmnet_mux_fs_function, %object
	.size	rmnet_mux_fs_function, 20
rmnet_mux_fs_function:
	.word	rmnet_mux_interface_desc
	.word	rmnet_mux_fs_notify_desc
	.word	rmnet_mux_fs_in_desc
	.word	rmnet_mux_fs_out_desc
	.word	0
	.type	rmnet_mux_hs_function, %object
	.size	rmnet_mux_hs_function, 20
rmnet_mux_hs_function:
	.word	rmnet_mux_interface_desc
	.word	rmnet_mux_hs_notify_desc
	.word	rmnet_mux_hs_in_desc
	.word	rmnet_mux_hs_out_desc
	.word	0
	.type	fs_diag_desc, %object
	.size	fs_diag_desc, 16
fs_diag_desc:
	.word	intf_desc
	.word	fs_bulk_in_desc
	.word	fs_bulk_out_desc
	.word	0
	.type	hs_diag_desc, %object
	.size	hs_diag_desc, 16
hs_diag_desc:
	.word	intf_desc
	.word	hs_bulk_in_desc
	.word	hs_bulk_out_desc
	.word	0
	.type	ss_diag_desc, %object
	.size	ss_diag_desc, 24
ss_diag_desc:
	.word	intf_desc
	.word	ss_bulk_in_desc
	.word	ss_bulk_in_comp_desc
	.word	ss_bulk_out_desc
	.word	ss_bulk_out_comp_desc
	.word	0
	.type	ecm_qc_fs_function, %object
	.size	ecm_qc_fs_function, 40
ecm_qc_fs_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_fs_notify_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_fs_in_desc
	.word	ecm_qc_fs_out_desc
	.word	0
	.type	ecm_qc_hs_function, %object
	.size	ecm_qc_hs_function, 40
ecm_qc_hs_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_hs_notify_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_hs_in_desc
	.word	ecm_qc_hs_out_desc
	.word	0
	.type	ecm_qc_ss_function, %object
	.size	ecm_qc_ss_function, 52
ecm_qc_ss_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_ss_notify_desc
	.word	ecm_qc_ss_notify_comp_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_ss_in_desc
	.word	ecm_qc_ss_in_comp_desc
	.word	ecm_qc_ss_out_desc
	.word	ecm_qc_ss_out_comp_desc
	.word	0
	.type	mbim_fs_function, %object
	.size	mbim_fs_function, 48
mbim_fs_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	fs_mbim_notify_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	fs_mbim_in_desc
	.word	fs_mbim_out_desc
	.word	0
	.type	mbim_hs_function, %object
	.size	mbim_hs_function, 48
mbim_hs_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	hs_mbim_notify_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	hs_mbim_in_desc
	.word	hs_mbim_out_desc
	.word	0
	.type	mbim_ss_function, %object
	.size	mbim_ss_function, 60
mbim_ss_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	ss_mbim_notify_desc
	.word	ss_mbim_notify_comp_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	ss_mbim_in_desc
	.word	ss_mbim_in_comp_desc
	.word	ss_mbim_out_desc
	.word	ss_mbim_out_comp_desc
	.word	0
	.type	ecm_fs_function, %object
	.size	ecm_fs_function, 44
ecm_fs_function:
	.word	ecm_iad_descriptor
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	fs_ecm_notify_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	fs_ecm_in_desc
	.word	fs_ecm_out_desc
	.word	0
	.type	ecm_hs_function, %object
	.size	ecm_hs_function, 44
ecm_hs_function:
	.word	ecm_iad_descriptor
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	hs_ecm_notify_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	hs_ecm_in_desc
	.word	hs_ecm_out_desc
	.word	0
	.type	ecm_ss_function, %object
	.size	ecm_ss_function, 52
ecm_ss_function:
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	ss_ecm_notify_desc
	.word	ss_ecm_intr_comp_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	ss_ecm_in_desc
	.word	ss_ecm_bulk_comp_desc
	.word	ss_ecm_out_desc
	.word	ss_ecm_bulk_comp_desc
	.word	0
	.type	microphone_as_iso_in, %object
	.size	microphone_as_iso_in, 32
microphone_as_iso_in:
	.word	microphone_as_iso_in
	.word	microphone_as_iso_in
	.space	12
	.word	.LC903
	.byte	1
	.space	3
	.word	microphone_as_iso_in_desc
	.type	speaker_as_iso_out, %object
	.size	speaker_as_iso_out, 32
speaker_as_iso_out:
	.word	speaker_as_iso_out
	.word	speaker_as_iso_out
	.space	12
	.word	.LC905
	.byte	1
	.space	3
	.word	speaker_as_iso_out_desc
	.type	ncm_fs_function, %object
	.size	ncm_fs_function, 48
ncm_fs_function:
	.word	ncm_iad_desc
	.word	ncm_control_intf
	.word	ncm_header_desc
	.word	ncm_union_desc
	.word	necm_desc
	.word	ncm_desc
	.word	fs_ncm_notify_desc
	.word	ncm_data_nop_intf
	.word	ncm_data_intf
	.word	fs_ncm_in_desc
	.word	fs_ncm_out_desc
	.word	0
	.type	ncm_hs_function, %object
	.size	ncm_hs_function, 48
ncm_hs_function:
	.word	ncm_iad_desc
	.word	ncm_control_intf
	.word	ncm_header_desc
	.word	ncm_union_desc
	.word	necm_desc
	.word	ncm_desc
	.word	hs_ncm_notify_desc
	.word	ncm_data_nop_intf
	.word	ncm_data_intf
	.word	hs_ncm_in_desc
	.word	hs_ncm_out_desc
	.word	0
	.type	charger_fs_descriptors, %object
	.size	charger_fs_descriptors, 16
charger_fs_descriptors:
	.word	charger_interface_desc
	.word	charger_hid_desc
	.word	charger_fs_in_ep_desc
	.word	0
	.type	charger_hs_descriptors, %object
	.size	charger_hs_descriptors, 16
charger_hs_descriptors:
	.word	charger_interface_desc
	.word	charger_hid_desc
	.word	charger_hs_in_ep_desc
	.word	0
	.type	charger_ss_descriptors, %object
	.size	charger_ss_descriptors, 16
charger_ss_descriptors:
	.word	charger_interface_desc
	.word	charger_hid_desc
	.word	charger_ss_in_ep_desc
	.word	0
	.type	fsg_fs_function, %object
	.size	fsg_fs_function, 16
fsg_fs_function:
	.word	fsg_intf_desc
	.word	fsg_fs_bulk_in_desc
	.word	fsg_fs_bulk_out_desc
	.word	0
	.type	fsg_hs_function, %object
	.size	fsg_hs_function, 16
fsg_hs_function:
	.word	fsg_intf_desc
	.word	fsg_hs_bulk_in_desc
	.word	fsg_hs_bulk_out_desc
	.word	0
	.type	fsg_ss_function, %object
	.size	fsg_ss_function, 24
fsg_ss_function:
	.word	fsg_intf_desc
	.word	fsg_ss_bulk_in_desc
	.word	fsg_ss_bulk_in_comp_desc
	.word	fsg_ss_bulk_out_desc
	.word	fsg_ss_bulk_out_comp_desc
	.word	0
	.type	qdss_hs_desc, %object
	.size	qdss_hs_desc, 24
qdss_hs_desc:
	.word	qdss_data_intf_desc
	.word	qdss_hs_data_desc
	.word	qdss_ctrl_intf_desc
	.word	qdss_hs_ctrl_in_desc
	.word	qdss_hs_ctrl_out_desc
	.word	0
	.type	qdss_ss_desc, %object
	.size	qdss_ss_desc, 36
qdss_ss_desc:
	.word	qdss_data_intf_desc
	.word	qdss_ss_data_desc
	.word	qdss_data_ep_comp_desc
	.word	qdss_ctrl_intf_desc
	.word	qdss_ss_ctrl_in_desc
	.word	qdss_ctrl_in_ep_comp_desc
	.word	qdss_ss_ctrl_out_desc
	.word	qdss_ctrl_out_ep_comp_desc
	.word	0
	.type	adb_function, %object
	.size	adb_function, 52
adb_function:
	.word	.LC488
	.space	20
	.word	adb_function_init
	.word	adb_function_cleanup
	.word	adb_android_function_enable
	.word	adb_android_function_disable
	.word	adb_function_bind_config
	.space	8
	.type	ffs_function, %object
	.size	ffs_function, 52
ffs_function:
	.word	.LC242
	.space	12
	.word	ffs_function_attributes
	.space	4
	.word	ffs_function_init
	.word	ffs_function_cleanup
	.word	ffs_function_enable
	.word	ffs_function_disable
	.word	ffs_function_bind_config
	.space	8
	.type	midi_string_defs, %object
	.size	midi_string_defs, 16
midi_string_defs:
	.space	4
	.word	.LC959
	.space	8
	.type	strings_dev, %object
	.size	strings_dev, 32
strings_dev:
	.space	4
	.word	manufacturer_string
	.space	4
	.word	product_string
	.space	4
	.word	serial_string
	.space	8
	.type	acc_string_defs, %object
	.size	acc_string_defs, 16
acc_string_defs:
	.space	4
	.word	.LC929
	.space	8
	.type	acc_strings, %object
	.size	acc_strings, 8
acc_strings:
	.word	acc_string_table
	.word	0
	.type	fs_acc_descs, %object
	.size	fs_acc_descs, 16
fs_acc_descs:
	.word	acc_interface_desc
	.word	acc_fullspeed_in_desc
	.word	acc_fullspeed_out_desc
	.word	0
	.type	hs_acc_descs, %object
	.size	hs_acc_descs, 16
hs_acc_descs:
	.word	acc_interface_desc
	.word	acc_highspeed_in_desc
	.word	acc_highspeed_out_desc
	.word	0
	.type	ss_acc_descs, %object
	.size	ss_acc_descs, 24
ss_acc_descs:
	.word	acc_interface_desc
	.word	acc_superspeed_in_desc
	.word	acc_superspeed_in_comp_desc
	.word	acc_superspeed_out_desc
	.word	acc_superspeed_out_comp_desc
	.word	0
	.type	fsg_strings, %object
	.size	fsg_strings, 16
fsg_strings:
	.byte	0
	.space	3
	.word	fsg_string_interface
	.space	8
	.type	fsg_strings_array, %object
	.size	fsg_strings_array, 8
fsg_strings_array:
	.word	fsg_stringtab
	.word	0
	.type	mtp_string_defs, %object
	.size	mtp_string_defs, 16
mtp_string_defs:
	.space	4
	.word	.LC930
	.space	8
	.type	mtp_strings, %object
	.size	mtp_strings, 8
mtp_strings:
	.word	mtp_string_table
	.word	0
	.type	fs_ptp_descs, %object
	.size	fs_ptp_descs, 20
fs_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_fullspeed_in_desc
	.word	mtp_fullspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	hs_ptp_descs, %object
	.size	hs_ptp_descs, 20
hs_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_highspeed_in_desc
	.word	mtp_highspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	ss_ptp_descs, %object
	.size	ss_ptp_descs, 32
ss_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_superspeed_in_desc
	.word	mtp_superspeed_in_comp_desc
	.word	mtp_superspeed_out_desc
	.word	mtp_superspeed_out_comp_desc
	.word	mtp_intr_desc
	.word	mtp_superspeed_intr_comp_desc
	.word	0
	.type	qdss_string_defs, %object
	.size	qdss_string_defs, 24
qdss_string_defs:
	.space	4
	.word	.LC957
	.space	4
	.word	.LC958
	.space	8
	.type	qdss_strings, %object
	.size	qdss_strings, 8
qdss_strings:
	.word	qdss_string_table
	.word	0
	.type	fs_mtp_descs, %object
	.size	fs_mtp_descs, 20
fs_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_fullspeed_in_desc
	.word	mtp_fullspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	hs_mtp_descs, %object
	.size	hs_mtp_descs, 20
hs_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_highspeed_in_desc
	.word	mtp_highspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	ss_mtp_descs, %object
	.size	ss_mtp_descs, 32
ss_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_superspeed_in_desc
	.word	mtp_superspeed_in_comp_desc
	.word	mtp_superspeed_out_desc
	.word	mtp_superspeed_out_comp_desc
	.word	mtp_intr_desc
	.word	mtp_superspeed_intr_comp_desc
	.word	0
	.type	supported_functions, %object
	.size	supported_functions, 112
supported_functions:
	.word	ffs_function
	.word	mbim_function
	.word	ecm_qc_function
	.word	audio_function
	.word	rmnet_smd_function
	.word	rmnet_sdio_function
	.word	rmnet_smd_sdio_function
	.word	rmnet_function
	.word	gps_function
	.word	diag_function
	.word	qdss_function
	.word	serial_function
	.word	adb_function
	.word	ccid_function
	.word	acm_function
	.word	mtp_function
	.word	ptp_function
	.word	rndis_function
	.word	rndis_qc_function
	.word	ecm_function
	.word	ncm_function
	.word	mass_storage_function
	.word	accessory_function
	.word	audio_source_function
	.word	uasp_function
	.word	midi_function
	.word	charger_function
	.word	0
	.type	android_usb_attributes, %object
	.size	android_usb_attributes, 60
android_usb_attributes:
	.word	dev_attr_idVendor
	.word	dev_attr_idProduct
	.word	dev_attr_bcdDevice
	.word	dev_attr_bDeviceClass
	.word	dev_attr_bDeviceSubClass
	.word	dev_attr_bDeviceProtocol
	.word	dev_attr_iManufacturer
	.word	dev_attr_iProduct
	.word	dev_attr_iSerial
	.word	dev_attr_functions
	.word	dev_attr_enable
	.word	dev_attr_pm_qos
	.word	dev_attr_state
	.word	dev_attr_remote_wakeup
	.word	0
	.type	android_usb_driver, %object
	.size	android_usb_driver, 44
android_usb_driver:
	.word	.LC566
	.space	8
	.word	device_desc
	.word	dev_strings
	.word	5
	.space	4
	.word	android_usb_unbind
	.space	12
	.type	ops.25936, %object
	.size	ops.25936, 12
ops.25936:
	.word	f_midi_snd_free
	.space	8
	.type	gmidi_in_ops, %object
	.size	gmidi_in_ops, 16
gmidi_in_ops:
	.word	f_midi_in_open
	.word	f_midi_in_close
	.word	f_midi_in_trigger
	.space	4
	.type	gmidi_out_ops, %object
	.size	gmidi_out_ops, 16
gmidi_out_ops:
	.word	f_midi_out_open
	.word	f_midi_out_close
	.word	f_midi_out_trigger
	.space	4
	.type	midi_strings, %object
	.size	midi_strings, 8
midi_strings:
	.word	midi_stringtab
	.word	0
	.type	rmnet_smd_strings, %object
	.size	rmnet_smd_strings, 8
rmnet_smd_strings:
	.word	rmnet_smd_string_table
	.word	0
	.type	rmnet_smd_fs_function, %object
	.size	rmnet_smd_fs_function, 20
rmnet_smd_fs_function:
	.word	rmnet_smd_interface_desc
	.word	rmnet_smd_fs_notify_desc
	.word	rmnet_smd_fs_in_desc
	.word	rmnet_smd_fs_out_desc
	.word	0
	.type	rmnet_smd_hs_function, %object
	.size	rmnet_smd_hs_function, 20
rmnet_smd_hs_function:
	.word	rmnet_smd_interface_desc
	.word	rmnet_smd_hs_notify_desc
	.word	rmnet_smd_hs_in_desc
	.word	rmnet_smd_hs_out_desc
	.word	0
	.type	rmnet_sdio_strings, %object
	.size	rmnet_sdio_strings, 8
rmnet_sdio_strings:
	.word	rmnet_sdio_string_table
	.word	0
	.type	rmnet_sdio_fs_function, %object
	.size	rmnet_sdio_fs_function, 20
rmnet_sdio_fs_function:
	.word	rmnet_sdio_interface_desc
	.word	rmnet_sdio_fs_notify_desc
	.word	rmnet_sdio_fs_in_desc
	.word	rmnet_sdio_fs_out_desc
	.word	0
	.type	rmnet_sdio_hs_function, %object
	.size	rmnet_sdio_hs_function, 20
rmnet_sdio_hs_function:
	.word	rmnet_sdio_interface_desc
	.word	rmnet_sdio_hs_notify_desc
	.word	rmnet_sdio_hs_in_desc
	.word	rmnet_sdio_hs_out_desc
	.word	0
	.type	rmnet_fs_function, %object
	.size	rmnet_fs_function, 20
rmnet_fs_function:
	.word	rmnet_interface_desc
	.word	rmnet_fs_notify_desc
	.word	rmnet_fs_in_desc
	.word	rmnet_fs_out_desc
	.word	0
	.type	rmnet_hs_function, %object
	.size	rmnet_hs_function, 20
rmnet_hs_function:
	.word	rmnet_interface_desc
	.word	rmnet_hs_notify_desc
	.word	rmnet_hs_in_desc
	.word	rmnet_hs_out_desc
	.word	0
	.type	rmnet_ss_function, %object
	.size	rmnet_ss_function, 32
rmnet_ss_function:
	.word	rmnet_interface_desc
	.word	rmnet_ss_notify_desc
	.word	rmnet_ss_notify_comp_desc
	.word	rmnet_ss_in_desc
	.word	rmnet_ss_in_comp_desc
	.word	rmnet_ss_out_desc
	.word	rmnet_ss_out_comp_desc
	.word	0
	.type	gps_fs_function, %object
	.size	gps_fs_function, 12
gps_fs_function:
	.word	gps_interface_desc
	.word	gps_fs_notify_desc
	.word	0
	.type	gps_hs_function, %object
	.size	gps_hs_function, 12
gps_hs_function:
	.word	gps_interface_desc
	.word	gps_hs_notify_desc
	.word	0
	.type	gps_ss_function, %object
	.size	gps_ss_function, 16
gps_ss_function:
	.word	gps_interface_desc
	.word	gps_ss_notify_desc
	.word	gps_ss_notify_comp_desc
	.word	0
	.space	4
	.type	_audio_dev, %object
	.size	_audio_dev, 152
_audio_dev:
	.word	.LC525
	.space	4
	.word	fs_audio_desc
	.word	hs_audio_desc
	.space	8
	.word	audio_bind
	.word	audio_unbind
	.word	audio_set_alt
	.space	4
	.word	audio_disable
	.word	audio_setup
	.space	28
	.space	12
	.word	_audio_dev+88
	.word	_audio_dev+88
	.space	4
	.word	0
	.space	48
	.type	gser_fs_function, %object
	.size	gser_fs_function, 36
gser_fs_function:
	.word	gser_interface_desc
	.word	gser_header_desc
	.word	gser_call_mgmt_descriptor
	.word	gser_descriptor
	.word	gser_union_desc
	.word	gser_fs_notify_desc
	.word	gser_fs_in_desc
	.word	gser_fs_out_desc
	.word	0
	.type	gser_hs_function, %object
	.size	gser_hs_function, 36
gser_hs_function:
	.word	gser_interface_desc
	.word	gser_header_desc
	.word	gser_call_mgmt_descriptor
	.word	gser_descriptor
	.word	gser_union_desc
	.word	gser_hs_notify_desc
	.word	gser_hs_in_desc
	.word	gser_hs_out_desc
	.word	0
	.type	gser_ss_function, %object
	.size	gser_ss_function, 48
gser_ss_function:
	.word	gser_interface_desc
	.word	gser_header_desc
	.word	gser_call_mgmt_descriptor
	.word	gser_descriptor
	.word	gser_union_desc
	.word	gser_ss_notify_desc
	.word	gser_ss_notify_comp_desc
	.word	gser_ss_in_desc
	.word	gser_ss_bulk_comp_desc
	.word	gser_ss_out_desc
	.word	gser_ss_bulk_comp_desc
	.word	0
	.type	acm_fs_function, %object
	.size	acm_fs_function, 44
acm_fs_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_fs_notify_desc
	.word	acm_data_interface_desc
	.word	acm_fs_in_desc
	.word	acm_fs_out_desc
	.word	0
	.type	acm_hs_function, %object
	.size	acm_hs_function, 44
acm_hs_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_hs_notify_desc
	.word	acm_data_interface_desc
	.word	acm_hs_in_desc
	.word	acm_hs_out_desc
	.word	0
	.type	acm_ss_function, %object
	.size	acm_ss_function, 56
acm_ss_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_hs_notify_desc
	.word	acm_ss_bulk_comp_desc
	.word	acm_data_interface_desc
	.word	acm_ss_in_desc
	.word	acm_ss_bulk_comp_desc
	.word	acm_ss_out_desc
	.word	acm_ss_bulk_comp_desc
	.word	0
	.type	gps_string_defs, %object
	.size	gps_string_defs, 16
gps_string_defs:
	.space	4
	.word	.LC952
	.space	8
	.type	gps_strings, %object
	.size	gps_strings, 8
gps_strings:
	.word	gps_string_table
	.word	0
	.type	rmnet_string_defs, %object
	.size	rmnet_string_defs, 16
rmnet_string_defs:
	.space	4
	.word	.LC953
	.space	8
	.type	rmnet_strings, %object
	.size	rmnet_strings, 8
rmnet_strings:
	.word	rmnet_string_table
	.word	0
	.type	gser_string_defs, %object
	.size	gser_string_defs, 16
gser_string_defs:
	.space	4
	.word	.LC936
	.space	8
	.type	gser_strings, %object
	.size	gser_strings, 8
gser_strings:
	.word	gser_string_table
	.word	0
	.type	acm_string_defs, %object
	.size	acm_string_defs, 32
acm_string_defs:
	.space	4
	.word	.LC933
	.space	4
	.word	.LC934
	.space	4
	.word	.LC935
	.space	8
	.type	acm_strings, %object
	.size	acm_strings, 8
acm_strings:
	.word	acm_string_table
	.word	0
	.type	eth_fs_function, %object
	.size	eth_fs_function, 44
eth_fs_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	fs_notify_desc
	.word	rndis_data_intf
	.word	fs_in_desc
	.word	fs_out_desc
	.word	0
	.type	eth_hs_function, %object
	.size	eth_hs_function, 44
eth_hs_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	hs_notify_desc
	.word	rndis_data_intf
	.word	hs_in_desc
	.word	hs_out_desc
	.word	0
	.type	eth_ss_function, %object
	.size	eth_ss_function, 56
eth_ss_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	ss_notify_desc
	.word	ss_intr_comp_desc
	.word	rndis_data_intf
	.word	ss_in_desc
	.word	ss_bulk_comp_desc
	.word	ss_out_desc
	.word	ss_bulk_comp_desc
	.word	0
	.type	eth_qc_fs_function, %object
	.size	eth_qc_fs_function, 44
eth_qc_fs_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_fs_notify_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_fs_in_desc
	.word	rndis_qc_fs_out_desc
	.word	0
	.type	eth_qc_hs_function, %object
	.size	eth_qc_hs_function, 44
eth_qc_hs_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_hs_notify_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_hs_in_desc
	.word	rndis_qc_hs_out_desc
	.word	0
	.type	eth_qc_ss_function, %object
	.size	eth_qc_ss_function, 56
eth_qc_ss_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_ss_notify_desc
	.word	rndis_qc_ss_intr_comp_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_ss_in_desc
	.word	rndis_qc_ss_bulk_comp_desc
	.word	rndis_qc_ss_out_desc
	.word	rndis_qc_ss_bulk_comp_desc
	.word	0
	.type	rndis_string_defs, %object
	.size	rndis_string_defs, 32
rndis_string_defs:
	.space	4
	.word	.LC918
	.space	4
	.word	.LC919
	.space	4
	.word	.LC920
	.space	8
	.type	rndis_strings, %object
	.size	rndis_strings, 8
rndis_strings:
	.word	rndis_string_table
	.word	0
	.type	ecm_qc_string_defs, %object
	.size	ecm_qc_string_defs, 32
ecm_qc_string_defs:
	.space	4
	.word	.LC921
	.space	4
	.word	0
	.space	4
	.word	.LC922
	.space	8
	.type	mbim_string_defs, %object
	.size	mbim_string_defs, 24
mbim_string_defs:
	.space	4
	.word	.LC925
	.space	4
	.word	.LC926
	.space	8
	.type	mbim_strings, %object
	.size	mbim_strings, 8
mbim_strings:
	.word	mbim_string_table
	.word	0
	.type	ecm_strings, %object
	.size	ecm_strings, 8
ecm_strings:
	.word	ecm_string_table
	.word	0
	.type	rndis_qc_string_defs, %object
	.size	rndis_qc_string_defs, 32
rndis_qc_string_defs:
	.space	4
	.word	.LC918
	.space	4
	.word	.LC919
	.space	4
	.word	.LC920
	.space	8
	.type	rndis_qc_strings, %object
	.size	rndis_qc_strings, 8
rndis_qc_strings:
	.word	rndis_qc_string_table
	.word	0
	.type	gadget_type, %object
	.size	gadget_type, 24
gadget_type:
	.word	.LC916
	.space	20
	.type	ecm_qc_strings, %object
	.size	ecm_qc_strings, 8
ecm_qc_strings:
	.word	ecm_qc_string_table
	.word	0
	.type	qc_gadget_type, %object
	.size	qc_gadget_type, 24
qc_gadget_type:
	.word	.LC916
	.space	20
	.type	fn_cntl, %object
	.size	fn_cntl, 4
fn_cntl:
	.word	.LC913
	.type	fn_play, %object
	.size	fn_play, 4
fn_play:
	.word	.LC915
	.type	fn_cap, %object
	.size	fn_cap, 4
fn_cap:
	.word	.LC914
	.type	microphone_fu_controls, %object
	.size	microphone_fu_controls, 32
microphone_fu_controls:
	.word	microphone_fu_controls
	.word	microphone_fu_controls
	.space	12
	.word	.LC907
	.space	8
	.type	speaker_fu_controls, %object
	.size	speaker_fu_controls, 32
speaker_fu_controls:
	.word	speaker_fu_controls
	.word	speaker_fu_controls
	.space	12
	.word	.LC910
	.space	8
	.type	microphone_mute_control, %object
	.size	microphone_mute_control, 44
microphone_mute_control:
	.word	microphone_mute_control
	.word	microphone_mute_control
	.word	.LC909
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	microphone_volume_control, %object
	.size	microphone_volume_control, 44
microphone_volume_control:
	.word	microphone_volume_control
	.word	microphone_volume_control
	.word	.LC908
	.byte	2
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_mute_control, %object
	.size	speaker_mute_control, 44
speaker_mute_control:
	.word	speaker_mute_control
	.word	speaker_mute_control
	.word	.LC912
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_volume_control, %object
	.size	speaker_volume_control, 44
speaker_volume_control:
	.word	speaker_volume_control
	.word	speaker_volume_control
	.word	.LC911
	.byte	2
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	microphone_sample_freq_control, %object
	.size	microphone_sample_freq_control, 44
microphone_sample_freq_control:
	.word	microphone_sample_freq_control
	.word	microphone_sample_freq_control
	.word	.LC904
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_sample_freq_control, %object
	.size	speaker_sample_freq_control, 44
speaker_sample_freq_control:
	.word	speaker_sample_freq_control
	.word	speaker_sample_freq_control
	.word	.LC906
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	audio_strings, %object
	.size	audio_strings, 8
audio_strings:
	.word	audio_stringtab_dev
	.word	0
	.type	ncm_strings, %object
	.size	ncm_strings, 8
ncm_strings:
	.word	ncm_string_table
	.word	0
	.type	dev_attr_remote_wakeup, %object
	.size	dev_attr_remote_wakeup, 16
dev_attr_remote_wakeup:
	.word	.LC856
	.short	420
	.space	2
	.word	remote_wakeup_show
	.word	remote_wakeup_store
	.type	dev_attr_state, %object
	.size	dev_attr_state, 16
dev_attr_state:
	.word	.LC857
	.short	292
	.space	2
	.word	state_show
	.word	0
	.type	dev_attr_pm_qos, %object
	.size	dev_attr_pm_qos, 16
dev_attr_pm_qos:
	.word	.LC858
	.short	420
	.space	2
	.word	pm_qos_show
	.word	pm_qos_store
	.type	dev_attr_enable, %object
	.size	dev_attr_enable, 16
dev_attr_enable:
	.word	.LC859
	.short	420
	.space	2
	.word	enable_show
	.word	enable_store
	.type	dev_attr_functions, %object
	.size	dev_attr_functions, 16
dev_attr_functions:
	.word	.LC860
	.short	420
	.space	2
	.word	functions_show
	.word	functions_store
	.type	dev_attr_iSerial, %object
	.size	dev_attr_iSerial, 16
dev_attr_iSerial:
	.word	.LC861
	.short	420
	.space	2
	.word	iSerial_show
	.word	iSerial_store
	.type	dev_attr_iProduct, %object
	.size	dev_attr_iProduct, 16
dev_attr_iProduct:
	.word	.LC862
	.short	420
	.space	2
	.word	iProduct_show
	.word	iProduct_store
	.type	dev_attr_iManufacturer, %object
	.size	dev_attr_iManufacturer, 16
dev_attr_iManufacturer:
	.word	.LC863
	.short	420
	.space	2
	.word	iManufacturer_show
	.word	iManufacturer_store
	.type	dev_attr_bDeviceProtocol, %object
	.size	dev_attr_bDeviceProtocol, 16
dev_attr_bDeviceProtocol:
	.word	.LC864
	.short	420
	.space	2
	.word	bDeviceProtocol_show
	.word	bDeviceProtocol_store
	.type	dev_attr_bDeviceSubClass, %object
	.size	dev_attr_bDeviceSubClass, 16
dev_attr_bDeviceSubClass:
	.word	.LC865
	.short	420
	.space	2
	.word	bDeviceSubClass_show
	.word	bDeviceSubClass_store
	.type	dev_attr_bDeviceClass, %object
	.size	dev_attr_bDeviceClass, 16
dev_attr_bDeviceClass:
	.word	.LC866
	.short	420
	.space	2
	.word	bDeviceClass_show
	.word	bDeviceClass_store
	.type	dev_attr_bcdDevice, %object
	.size	dev_attr_bcdDevice, 16
dev_attr_bcdDevice:
	.word	.LC867
	.short	420
	.space	2
	.word	bcdDevice_show
	.word	bcdDevice_store
	.type	dev_attr_idProduct, %object
	.size	dev_attr_idProduct, 16
dev_attr_idProduct:
	.word	.LC868
	.short	420
	.space	2
	.word	idProduct_show
	.word	idProduct_store
	.type	dev_attr_idVendor, %object
	.size	dev_attr_idVendor, 16
dev_attr_idVendor:
	.word	.LC869
	.short	420
	.space	2
	.word	idVendor_show
	.word	idVendor_store
	.type	midi_function, %object
	.size	midi_function, 52
midi_function:
	.word	.LC870
	.space	12
	.word	midi_function_attributes
	.space	4
	.word	midi_function_init
	.word	midi_function_cleanup
	.space	8
	.word	midi_function_bind_config
	.space	8
	.type	midi_function_attributes, %object
	.size	midi_function_attributes, 8
midi_function_attributes:
	.word	dev_attr_alsa
	.word	0
	.type	dev_attr_alsa, %object
	.size	dev_attr_alsa, 16
dev_attr_alsa:
	.word	.LC871
	.short	292
	.space	2
	.word	midi_alsa_show
	.word	0
	.type	uasp_function, %object
	.size	uasp_function, 52
uasp_function:
	.word	.LC872
	.space	20
	.word	uasp_function_init
	.word	uasp_function_cleanup
	.space	8
	.word	uasp_function_bind_config
	.space	8
	.type	audio_source_function, %object
	.size	audio_source_function, 52
audio_source_function:
	.word	.LC525
	.space	12
	.word	audio_source_function_attributes
	.space	4
	.word	audio_source_function_init
	.word	audio_source_function_cleanup
	.space	8
	.word	audio_source_function_bind_config
	.word	audio_source_function_unbind_config
	.space	4
	.type	audio_source_function_attributes, %object
	.size	audio_source_function_attributes, 8
audio_source_function_attributes:
	.word	dev_attr_pcm
	.word	0
	.type	dev_attr_pcm, %object
	.size	dev_attr_pcm, 16
dev_attr_pcm:
	.word	.LC873
	.short	420
	.space	2
	.word	audio_source_pcm_show
	.word	0
	.type	accessory_function, %object
	.size	accessory_function, 52
accessory_function:
	.word	.LC541
	.space	20
	.word	accessory_function_init
	.word	accessory_function_cleanup
	.space	8
	.word	accessory_function_bind_config
	.space	4
	.word	accessory_function_ctrlrequest
	.type	mass_storage_function, %object
	.size	mass_storage_function, 52
mass_storage_function:
	.word	.LC874
	.space	12
	.word	mass_storage_function_attributes
	.space	4
	.word	mass_storage_function_init
	.word	mass_storage_function_cleanup
	.space	8
	.word	mass_storage_function_bind_config
	.space	8
	.type	mass_storage_function_attributes, %object
	.size	mass_storage_function_attributes, 8
mass_storage_function_attributes:
	.word	dev_attr_inquiry_string
	.word	0
	.type	dev_attr_inquiry_string, %object
	.size	dev_attr_inquiry_string, 16
dev_attr_inquiry_string:
	.word	.LC875
	.short	420
	.space	2
	.word	mass_storage_inquiry_show
	.word	mass_storage_inquiry_store
	.type	ecm_function, %object
	.size	ecm_function, 52
ecm_function:
	.word	.LC813
	.space	12
	.word	ecm_function_attributes
	.space	4
	.word	ecm_function_init
	.word	ecm_function_cleanup
	.space	8
	.word	ecm_function_bind_config
	.word	ecm_function_unbind_config
	.space	4
	.type	rndis_qc_function, %object
	.size	rndis_qc_function, 52
rndis_qc_function:
	.word	.LC876
	.space	12
	.word	rndis_function_attributes
	.space	4
	.word	rndis_qc_function_init
	.word	rndis_qc_function_cleanup
	.space	8
	.word	rndis_qc_function_bind_config
	.word	rndis_qc_function_unbind_config
	.space	4
	.type	rndis_function, %object
	.size	rndis_function, 52
rndis_function:
	.word	.LC757
	.space	12
	.word	rndis_function_attributes
	.space	4
	.word	rndis_function_init
	.word	rndis_function_cleanup
	.space	8
	.word	rndis_function_bind_config
	.word	rndis_function_unbind_config
	.space	4
	.type	rndis_function_attributes, %object
	.size	rndis_function_attributes, 24
rndis_function_attributes:
	.word	dev_attr_manufacturer
	.word	dev_attr_wceis
	.word	dev_attr_ethaddr
	.word	dev_attr_vendorID
	.word	dev_attr_max_pkt_per_xfer
	.word	0
	.type	dev_attr_max_pkt_per_xfer, %object
	.size	dev_attr_max_pkt_per_xfer, 16
dev_attr_max_pkt_per_xfer:
	.word	.LC877
	.short	420
	.space	2
	.word	rndis_max_pkt_per_xfer_show
	.word	rndis_max_pkt_per_xfer_store
	.type	dev_attr_vendorID, %object
	.size	dev_attr_vendorID, 16
dev_attr_vendorID:
	.word	.LC878
	.short	420
	.space	2
	.word	rndis_vendorID_show
	.word	rndis_vendorID_store
	.type	dev_attr_ethaddr, %object
	.size	dev_attr_ethaddr, 16
dev_attr_ethaddr:
	.word	.LC879
	.short	420
	.space	2
	.word	rndis_ethaddr_show
	.word	rndis_ethaddr_store
	.type	dev_attr_wceis, %object
	.size	dev_attr_wceis, 16
dev_attr_wceis:
	.word	.LC880
	.short	420
	.space	2
	.word	rndis_wceis_show
	.word	rndis_wceis_store
	.type	dev_attr_manufacturer, %object
	.size	dev_attr_manufacturer, 16
dev_attr_manufacturer:
	.word	.LC881
	.short	420
	.space	2
	.word	rndis_manufacturer_show
	.word	rndis_manufacturer_store
	.type	ptp_function, %object
	.size	ptp_function, 52
ptp_function:
	.word	.LC882
	.space	20
	.word	ptp_function_init
	.word	ptp_function_cleanup
	.space	8
	.word	ptp_function_bind_config
	.space	8
	.type	mtp_function, %object
	.size	mtp_function, 52
mtp_function:
	.word	.LC544
	.space	20
	.word	mtp_function_init
	.word	mtp_function_cleanup
	.space	8
	.word	mtp_function_bind_config
	.space	4
	.word	mtp_function_ctrlrequest
	.type	charger_function, %object
	.size	charger_function, 52
charger_function:
	.word	.LC486
	.space	36
	.word	charger_function_bind_config
	.space	8
	.type	ccid_function, %object
	.size	ccid_function, 52
ccid_function:
	.word	.LC487
	.space	20
	.word	ccid_function_init
	.word	ccid_function_cleanup
	.space	8
	.word	ccid_function_bind_config
	.space	8
	.type	serial_function, %object
	.size	serial_function, 52
serial_function:
	.word	.LC883
	.space	12
	.word	serial_function_attributes
	.space	8
	.word	serial_function_cleanup
	.space	8
	.word	serial_function_bind_config
	.space	8
	.type	serial_function_attributes, %object
	.size	serial_function_attributes, 12
serial_function_attributes:
	.word	dev_attr_transports
	.word	dev_attr_serial_xport_names
	.word	0
	.type	dev_attr_serial_xport_names, %object
	.size	dev_attr_serial_xport_names, 16
dev_attr_serial_xport_names:
	.word	.LC884
	.short	420
	.space	2
	.word	serial_xport_names_show
	.word	serial_xport_names_store
	.type	dev_attr_transports, %object
	.size	dev_attr_transports, 16
dev_attr_transports:
	.word	.LC885
	.short	128
	.space	2
	.word	0
	.word	serial_transports_store
	.type	qdss_function, %object
	.size	qdss_function, 52
qdss_function:
	.word	.LC545
	.space	20
	.word	qdss_function_init
	.word	qdss_function_cleanup
	.space	8
	.word	qdss_function_bind_config
	.space	8
	.type	diag_function, %object
	.size	diag_function, 52
diag_function:
	.word	.LC886
	.space	12
	.word	diag_function_attributes
	.space	4
	.word	diag_function_init
	.word	diag_function_cleanup
	.space	8
	.word	diag_function_bind_config
	.space	8
	.type	diag_function_attributes, %object
	.size	diag_function_attributes, 8
diag_function_attributes:
	.word	dev_attr_clients
	.word	0
	.type	dev_attr_clients, %object
	.size	dev_attr_clients, 16
dev_attr_clients:
	.word	.LC887
	.short	128
	.space	2
	.word	0
	.word	clients_store
	.type	audio_function, %object
	.size	audio_function, 52
audio_function:
	.word	.LC849
	.space	36
	.word	audio_function_bind_config
	.space	8
	.type	mbim_function, %object
	.size	mbim_function, 52
mbim_function:
	.word	.LC796
	.space	12
	.word	mbim_function_attributes
	.space	4
	.word	mbim_function_init
	.word	mbim_function_cleanup
	.space	8
	.word	mbim_function_bind_config
	.space	4
	.word	mbim_function_ctrlrequest
	.type	mbim_function_attributes, %object
	.size	mbim_function_attributes, 8
mbim_function_attributes:
	.word	dev_attr_mbim_transports
	.word	0
	.type	dev_attr_mbim_transports, %object
	.size	dev_attr_mbim_transports, 16
dev_attr_mbim_transports:
	.word	.LC888
	.short	420
	.space	2
	.word	mbim_transports_show
	.word	mbim_transports_store
	.type	ecm_qc_function, %object
	.size	ecm_qc_function, 52
ecm_qc_function:
	.word	.LC889
	.space	12
	.word	ecm_function_attributes
	.space	4
	.word	ecm_function_init
	.word	ecm_function_cleanup
	.space	8
	.word	ecm_qc_function_bind_config
	.word	ecm_qc_function_unbind_config
	.space	4
	.type	ecm_function_attributes, %object
	.size	ecm_function_attributes, 12
ecm_function_attributes:
	.word	dev_attr_ecm_transports
	.word	dev_attr_ecm_ethaddr
	.word	0
	.type	dev_attr_ecm_transports, %object
	.size	dev_attr_ecm_transports, 16
dev_attr_ecm_transports:
	.word	.LC890
	.short	420
	.space	2
	.word	ecm_transports_show
	.word	ecm_transports_store
	.type	dev_attr_ecm_ethaddr, %object
	.size	dev_attr_ecm_ethaddr, 16
dev_attr_ecm_ethaddr:
	.word	.LC891
	.short	420
	.space	2
	.word	ecm_ethaddr_show
	.word	ecm_ethaddr_store
	.type	ncm_function, %object
	.size	ncm_function, 52
ncm_function:
	.word	.LC853
	.space	12
	.word	ncm_function_attributes
	.space	4
	.word	ncm_function_init
	.word	ncm_function_cleanup
	.space	8
	.word	ncm_function_bind_config
	.word	ncm_function_unbind_config
	.space	4
	.type	ncm_function_attributes, %object
	.size	ncm_function_attributes, 8
ncm_function_attributes:
	.word	dev_attr_ncm_ethaddr
	.word	0
	.type	dev_attr_ncm_ethaddr, %object
	.size	dev_attr_ncm_ethaddr, 16
dev_attr_ncm_ethaddr:
	.word	.LC892
	.short	420
	.space	2
	.word	ncm_ethaddr_show
	.word	ncm_ethaddr_store
	.type	gps_function, %object
	.size	gps_function, 52
gps_function:
	.word	.LC703
	.space	24
	.word	gps_function_cleanup
	.space	8
	.word	gps_function_bind_config
	.space	8
	.type	rmnet_function, %object
	.size	rmnet_function, 52
rmnet_function:
	.word	.LC635
	.space	12
	.word	rmnet_function_attributes
	.space	8
	.word	rmnet_function_cleanup
	.space	8
	.word	rmnet_function_bind_config
	.space	8
	.type	rmnet_function_attributes, %object
	.size	rmnet_function_attributes, 12
rmnet_function_attributes:
	.word	dev_attr_rmnet_transports
	.word	dev_attr_rmnet_xport_names
	.word	0
	.type	dev_attr_rmnet_xport_names, %object
	.size	dev_attr_rmnet_xport_names, 16
dev_attr_rmnet_xport_names:
	.word	.LC884
	.short	420
	.space	2
	.word	rmnet_xport_names_show
	.word	rmnet_xport_names_store
	.type	dev_attr_rmnet_transports, %object
	.size	dev_attr_rmnet_transports, 16
dev_attr_rmnet_transports:
	.word	.LC885
	.short	420
	.space	2
	.word	rmnet_transports_show
	.word	rmnet_transports_store
	.type	rmnet_smd_sdio_function, %object
	.size	rmnet_smd_sdio_function, 52
rmnet_smd_sdio_function:
	.word	.LC489
	.space	12
	.word	rmnet_smd_sdio_attributes
	.space	4
	.word	rmnet_smd_sdio_function_init
	.word	rmnet_smd_sdio_function_cleanup
	.space	8
	.word	rmnet_smd_sdio_bind_config
	.space	8
	.type	rmnet_smd_sdio_attributes, %object
	.size	rmnet_smd_sdio_attributes, 8
rmnet_smd_sdio_attributes:
	.word	dev_attr_transport
	.word	0
	.type	rmnet_sdio_function, %object
	.size	rmnet_sdio_function, 52
rmnet_sdio_function:
	.word	.LC637
	.space	36
	.word	rmnet_sdio_function_bind_config
	.space	8
	.type	rmnet_smd_function, %object
	.size	rmnet_smd_function, 52
rmnet_smd_function:
	.word	.LC893
	.space	36
	.word	rmnet_smd_function_bind_config
	.space	8
	.type	acm_function, %object
	.size	acm_function, 52
acm_function:
	.word	.LC894
	.space	12
	.word	acm_function_attributes
	.space	8
	.word	acm_function_cleanup
	.space	8
	.word	acm_function_bind_config
	.space	8
	.type	acm_function_attributes, %object
	.size	acm_function_attributes, 8
acm_function_attributes:
	.word	dev_attr_acm_transports
	.word	0
	.type	dev_attr_acm_transports, %object
	.size	dev_attr_acm_transports, 16
dev_attr_acm_transports:
	.word	.LC895
	.short	128
	.space	2
	.word	0
	.word	acm_transports_store
	.type	ffs_function_attributes, %object
	.size	ffs_function_attributes, 8
ffs_function_attributes:
	.word	dev_attr_aliases
	.word	0
	.type	dev_attr_aliases, %object
	.size	dev_attr_aliases, 16
dev_attr_aliases:
	.word	.LC896
	.short	420
	.space	2
	.word	ffs_aliases_show
	.word	ffs_aliases_store
	.type	dev_strings, %object
	.size	dev_strings, 8
dev_strings:
	.word	stringtab_dev
	.word	0
	.type	stringtab_dev, %object
	.size	stringtab_dev, 8
stringtab_dev:
	.short	1033
	.space	2
	.word	strings_dev
	.type	ct_func_string_table, %object
	.size	ct_func_string_table, 8
ct_func_string_table:
	.short	1033
	.space	2
	.word	ct_func_string_defs
	.type	ct_func_string_defs, %object
	.size	ct_func_string_defs, 16
ct_func_string_defs:
	.space	4
	.word	.LC899
	.space	8
	.type	ncm_string_table, %object
	.size	ncm_string_table, 8
ncm_string_table:
	.short	1033
	.space	2
	.word	ncm_string_defs
	.type	audio_stringtab_dev, %object
	.size	audio_stringtab_dev, 8
audio_stringtab_dev:
	.short	1033
	.space	2
	.word	audio_string_defs
	.type	rndis_qc_string_table, %object
	.size	rndis_qc_string_table, 8
rndis_qc_string_table:
	.short	1033
	.space	2
	.word	rndis_qc_string_defs
	.type	ecm_string_table, %object
	.size	ecm_string_table, 8
ecm_string_table:
	.short	1033
	.space	2
	.word	ecm_string_defs
	.type	mbim_string_table, %object
	.size	mbim_string_table, 8
mbim_string_table:
	.short	1033
	.space	2
	.word	mbim_string_defs
	.type	ecm_qc_string_table, %object
	.size	ecm_qc_string_table, 8
ecm_qc_string_table:
	.short	1033
	.space	2
	.word	ecm_qc_string_defs
	.type	rndis_string_table, %object
	.size	rndis_string_table, 8
rndis_string_table:
	.short	1033
	.space	2
	.word	rndis_string_defs
	.type	acc_string_table, %object
	.size	acc_string_table, 8
acc_string_table:
	.short	1033
	.space	2
	.word	acc_string_defs
	.type	mtp_string_table, %object
	.size	mtp_string_table, 8
mtp_string_table:
	.short	1033
	.space	2
	.word	mtp_string_defs
	.type	acm_string_table, %object
	.size	acm_string_table, 8
acm_string_table:
	.short	1033
	.space	2
	.word	acm_string_defs
	.type	gser_string_table, %object
	.size	gser_string_table, 8
gser_string_table:
	.short	1033
	.space	2
	.word	gser_string_defs
	.type	smd_pi, %object
	.size	smd_pi, 24
smd_pi:
	.space	4
	.word	.LC943
	.space	4
	.space	4
	.word	.LC944
	.space	4
	.type	sport_info, %object
	.size	sport_info, 24
sport_info:
	.word	.LC945
	.space	4
	.word	9
	.word	.LC946
	.space	4
	.word	10
	.type	fsg_stringtab, %object
	.size	fsg_stringtab, 8
fsg_stringtab:
	.short	1033
	.space	2
	.word	fsg_strings
	.type	fs_audio_desc, %object
	.size	fs_audio_desc, 48
fs_audio_desc:
	.word	audio_source_ac_interface_desc
	.word	audio_source_ac_header_desc
	.word	input_terminal_desc
	.word	output_terminal_desc
	.word	feature_unit_desc
	.word	as_interface_alt_0_desc
	.word	as_interface_alt_1_desc
	.word	as_header_desc
	.word	as_type_i_desc
	.word	fs_as_in_ep_desc
	.word	as_iso_in_desc
	.word	0
	.type	hs_audio_desc, %object
	.size	hs_audio_desc, 48
hs_audio_desc:
	.word	audio_source_ac_interface_desc
	.word	audio_source_ac_header_desc
	.word	input_terminal_desc
	.word	output_terminal_desc
	.word	feature_unit_desc
	.word	as_interface_alt_0_desc
	.word	as_interface_alt_1_desc
	.word	as_header_desc
	.word	as_type_i_desc
	.word	hs_as_in_ep_desc
	.word	as_iso_in_desc
	.word	0
	.type	gps_string_table, %object
	.size	gps_string_table, 8
gps_string_table:
	.short	1033
	.space	2
	.word	gps_string_defs
	.type	rmnet_string_table, %object
	.size	rmnet_string_table, 8
rmnet_string_table:
	.short	1033
	.space	2
	.word	rmnet_string_defs
	.type	dev_attr_transport, %object
	.size	dev_attr_transport, 16
dev_attr_transport:
	.word	.LC955
	.short	420
	.space	2
	.word	0
	.word	transport_store
	.type	rmnet_mux_string_table, %object
	.size	rmnet_mux_string_table, 8
rmnet_mux_string_table:
	.short	1033
	.space	2
	.word	rmnet_mux_string_defs
	.type	rmnet_mux_string_defs, %object
	.size	rmnet_mux_string_defs, 16
rmnet_mux_string_defs:
	.space	4
	.word	.LC953
	.space	8
	.type	rmnet_sdio_string_table, %object
	.size	rmnet_sdio_string_table, 8
rmnet_sdio_string_table:
	.short	1033
	.space	2
	.word	rmnet_sdio_string_defs
	.type	rmnet_sdio_string_defs, %object
	.size	rmnet_sdio_string_defs, 16
rmnet_sdio_string_defs:
	.space	4
	.word	.LC956
	.space	8
	.type	rmnet_smd_string_table, %object
	.size	rmnet_smd_string_table, 8
rmnet_smd_string_table:
	.short	1033
	.space	2
	.word	rmnet_smd_string_defs
	.type	rmnet_smd_string_defs, %object
	.size	rmnet_smd_string_defs, 16
rmnet_smd_string_defs:
	.space	4
	.word	.LC956
	.space	8
	.type	qdss_string_table, %object
	.size	qdss_string_table, 8
qdss_string_table:
	.short	1033
	.space	2
	.word	qdss_string_defs
	.type	midi_stringtab, %object
	.size	midi_stringtab, 8
midi_stringtab:
	.short	1033
	.space	2
	.word	midi_string_defs
	.section	.initcall6.init,"aw",%progbits
	.align	2
	.type	__initcall_init6, %object
	.size	__initcall_init6, 4
__initcall_init6:
	.word	init
	.type	__initcall_gether_init6, %object
	.size	__initcall_gether_init6, 4
__initcall_gether_init6:
	.word	gether_init
	.type	__initcall_ghsuart_data_init6, %object
	.size	__initcall_ghsuart_data_init6, 4
__initcall_ghsuart_data_init6:
	.word	ghsuart_data_init
	.type	__initcall_ghsuart_ctrl_init6, %object
	.size	__initcall_ghsuart_ctrl_init6, 4
__initcall_ghsuart_ctrl_init6:
	.word	ghsuart_ctrl_init
	.type	__initcall_ghsic_data_init6, %object
	.size	__initcall_ghsic_data_init6, 4
__initcall_ghsic_data_init6:
	.word	ghsic_data_init
	.type	__initcall_gctrl_init6, %object
	.size	__initcall_gctrl_init6, 4
__initcall_gctrl_init6:
	.word	gctrl_init
	.type	__initcall_gqti_ctrl_init6, %object
	.size	__initcall_gqti_ctrl_init6, 4
__initcall_gqti_ctrl_init6:
	.word	gqti_ctrl_init
	.type	__initcall_gsmd_ctrl_init6, %object
	.size	__initcall_gsmd_ctrl_init6, 4
__initcall_gsmd_ctrl_init6:
	.word	gsmd_ctrl_init
	.data
	.align	2
.LANCHOR1 = . + 0
	.type	ntb_parameters, %object
	.size	ntb_parameters, 28
ntb_parameters:
	.short	28
	.short	3
	.word	2048
	.short	4
	.short	0
	.short	4
	.space	2
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.type	ndp16_opts, %object
	.size	ndp16_opts, 44
ndp16_opts:
	.word	1213023054
	.word	810369870
	.word	12
	.word	8
	.word	4
	.word	1
	.word	1
	.word	1
	.word	0
	.word	0
	.word	1
	.type	ndp32_opts, %object
	.size	ndp32_opts, 44
ndp32_opts:
	.word	1751999342
	.word	812475246
	.word	16
	.word	16
	.word	8
	.word	2
	.word	2
	.word	2
	.word	1
	.word	2
	.word	2
	.type	charger_hid_desc, %object
	.size	charger_hid_desc, 9
charger_hid_desc:
	.byte	9
	.byte	33
	.short	273
	.byte	0
	.byte	1
	.byte	34
	.2byte	34
	.space	3
	.type	mbim_ntb_parameters, %object
	.size	mbim_ntb_parameters, 28
mbim_ntb_parameters:
	.short	28
	.short	1
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.word	4096
	.short	4
	.short	0
	.short	4
	.short	0
	.type	mbim_ext_config_desc, %object
	.size	mbim_ext_config_desc, 40
mbim_ext_config_desc:
	.word	40
	.short	256
	.short	4
	.byte	1
	.space	7
	.byte	0
	.byte	1
	.byte	65
	.byte	76
	.byte	84
	.byte	82
	.byte	67
	.byte	70
	.byte	71
	.space	1
	.space	14
	.type	mbim_os_string, %object
	.size	mbim_os_string, 18
mbim_os_string:
	.byte	18
	.byte	3
	.byte	77
	.byte	0
	.byte	83
	.byte	0
	.byte	70
	.byte	0
	.byte	84
	.byte	0
	.byte	49
	.byte	0
	.byte	48
	.byte	0
	.byte	48
	.byte	0
	.byte	-91
	.byte	0
	.space	2
	.type	device_desc, %object
	.size	device_desc, 18
device_desc:
	.byte	18
	.byte	1
	.short	512
	.byte	0
	.space	3
	.short	6353
	.short	1
	.space	5
	.byte	1
	.space	2
	.type	_rs.52119, %object
	.size	_rs.52119, 24
_rs.52119:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	mtp_os_string, %object
	.size	mtp_os_string, 18
mtp_os_string:
	.byte	18
	.byte	3
	.byte	77
	.byte	0
	.byte	83
	.byte	0
	.byte	70
	.byte	0
	.byte	84
	.byte	0
	.byte	49
	.byte	0
	.byte	48
	.byte	0
	.byte	48
	.byte	0
	.byte	1
	.byte	0
	.space	2
	.type	ccid_class_desc, %object
	.size	ccid_class_desc, 54
ccid_class_desc:
	.byte	54
	.byte	33
	.short	272
	.byte	0
	.byte	2
	.4byte	1
	.4byte	3580
	.4byte	3580
	.byte	0
	.4byte	9600
	.4byte	9600
	.byte	0
	.word	0
	.word	0
	.word	0
	.word	131198
	.word	512
	.byte	0
	.byte	0
	.short	0
	.byte	0
	.byte	1
	.space	2
	.type	dl_intr_threshold, %object
	.size	dl_intr_threshold, 4
dl_intr_threshold:
	.word	20
	.type	ghsic_data_fctrl_support, %object
	.size	ghsic_data_fctrl_support, 4
ghsic_data_fctrl_support:
	.word	1
	.type	ghsic_data_fctrl_en_thld, %object
	.size	ghsic_data_fctrl_en_thld, 4
ghsic_data_fctrl_en_thld:
	.word	500
	.type	qmult, %object
	.size	qmult, 4
qmult:
	.word	10
	.type	_rs.52505, %object
	.size	_rs.52505, 24
_rs.52505:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	ghsuart_data_rx_req_size, %object
	.size	ghsuart_data_rx_req_size, 4
ghsuart_data_rx_req_size:
	.word	2048
	.type	_rs.52556, %object
	.size	_rs.52556, 24
_rs.52556:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	bam_mux_rx_fctrl_support, %object
	.size	bam_mux_rx_fctrl_support, 4
bam_mux_rx_fctrl_support:
	.word	1
	.type	bam_mux_rx_fctrl_en_thld, %object
	.size	bam_mux_rx_fctrl_en_thld, 4
bam_mux_rx_fctrl_en_thld:
	.word	500
	.type	bam_mux_rx_req_size, %object
	.size	bam_mux_rx_req_size, 4
bam_mux_rx_req_size:
	.word	2048
	.type	bam_pending_limit, %object
	.size	bam_pending_limit, 4
bam_pending_limit:
	.word	220
	.type	bam_mux_rx_fctrl_dis_thld, %object
	.size	bam_mux_rx_fctrl_dis_thld, 4
bam_mux_rx_fctrl_dis_thld:
	.word	300
	.type	audio_playback_buf_size, %object
	.size	audio_playback_buf_size, 4
audio_playback_buf_size:
	.word	8192
	.type	audio_capture_buf_size, %object
	.size	audio_capture_buf_size, 4
audio_capture_buf_size:
	.word	8192
	.type	last_vote.62367, %object
	.size	last_vote.62367, 4
last_vote.62367:
	.word	-1
	.type	req_capture_buf_size, %object
	.size	req_capture_buf_size, 4
req_capture_buf_size:
	.word	32
	.type	req_playback_count, %object
	.size	req_playback_count, 4
req_playback_count:
	.word	48
	.type	req_playback_buf_size, %object
	.size	req_playback_buf_size, 4
req_playback_buf_size:
	.word	32
	.type	ghsic_data_fctrl_dis_thld, %object
	.size	ghsic_data_fctrl_dis_thld, 4
ghsic_data_fctrl_dis_thld:
	.word	300
	.type	_rs.51583, %object
	.size	_rs.51583, 24
_rs.51583:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	ghsic_data_pend_limit_with_bridge, %object
	.size	ghsic_data_pend_limit_with_bridge, 4
ghsic_data_pend_limit_with_bridge:
	.word	500
	.type	ghsic_data_rx_req_size, %object
	.size	ghsic_data_rx_req_size, 4
ghsic_data_rx_req_size:
	.word	2048
	.type	_rs.51640, %object
	.size	_rs.51640, 24
_rs.51640:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	mbim_ndp16_opts, %object
	.size	mbim_ndp16_opts, 44
mbim_ndp16_opts:
	.word	1213023054
	.word	810369870
	.word	12
	.word	8
	.word	4
	.word	1
	.word	1
	.word	1
	.word	0
	.word	0
	.word	1
	.type	mbim_ndp32_opts, %object
	.size	mbim_ndp32_opts, 44
mbim_ndp32_opts:
	.word	1751999342
	.word	812475246
	.word	16
	.word	16
	.word	8
	.word	2
	.word	2
	.word	2
	.word	1
	.word	2
	.word	2
	.type	mux_sdio_rx_fctrl_en_thld, %object
	.size	mux_sdio_rx_fctrl_en_thld, 4
mux_sdio_rx_fctrl_en_thld:
	.word	1000
	.type	bam_mux_rx_q_size, %object
	.size	bam_mux_rx_q_size, 4
bam_mux_rx_q_size:
	.word	16
	.type	bam_mux_tx_q_size, %object
	.size	bam_mux_tx_q_size, 4
bam_mux_tx_q_size:
	.word	200
	.type	_rs.39083, %object
	.size	_rs.39083, 24
_rs.39083:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	as_interface_alt_1_desc, %object
	.size	as_interface_alt_1_desc, 9
as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	mtp_intr_desc, %object
	.size	mtp_intr_desc, 9
mtp_intr_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	28
	.byte	6
	.space	2
	.space	3
	.type	intf_desc, %object
	.size	intf_desc, 9
intf_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	fs_bulk_in_desc, %object
	.size	fs_bulk_in_desc, 9
fs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.byte	0
	.space	2
	.space	3
	.type	fs_bulk_out_desc, %object
	.size	fs_bulk_out_desc, 9
fs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.byte	0
	.space	2
	.space	3
	.type	hs_bulk_in_desc, %object
	.size	hs_bulk_in_desc, 9
hs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.byte	0
	.space	2
	.space	3
	.type	hs_bulk_out_desc, %object
	.size	hs_bulk_out_desc, 9
hs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.byte	0
	.space	2
	.space	3
	.type	ss_bulk_in_desc, %object
	.size	ss_bulk_in_desc, 9
ss_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_bulk_out_desc, %object
	.size	ss_bulk_out_desc, 9
ss_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_smd_interface_desc, %object
	.size	rmnet_smd_interface_desc, 9
rmnet_smd_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_smd_fs_in_desc, %object
	.size	rmnet_smd_fs_in_desc, 9
rmnet_smd_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_smd_fs_out_desc, %object
	.size	rmnet_smd_fs_out_desc, 9
rmnet_smd_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_smd_fs_notify_desc, %object
	.size	rmnet_smd_fs_notify_desc, 9
rmnet_smd_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_smd_hs_in_desc, %object
	.size	rmnet_smd_hs_in_desc, 9
rmnet_smd_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_smd_hs_out_desc, %object
	.size	rmnet_smd_hs_out_desc, 9
rmnet_smd_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_smd_hs_notify_desc, %object
	.size	rmnet_smd_hs_notify_desc, 9
rmnet_smd_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_sdio_interface_desc, %object
	.size	rmnet_sdio_interface_desc, 9
rmnet_sdio_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_sdio_fs_in_desc, %object
	.size	rmnet_sdio_fs_in_desc, 9
rmnet_sdio_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_sdio_fs_out_desc, %object
	.size	rmnet_sdio_fs_out_desc, 9
rmnet_sdio_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_sdio_fs_notify_desc, %object
	.size	rmnet_sdio_fs_notify_desc, 9
rmnet_sdio_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_sdio_hs_in_desc, %object
	.size	rmnet_sdio_hs_in_desc, 9
rmnet_sdio_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_sdio_hs_out_desc, %object
	.size	rmnet_sdio_hs_out_desc, 9
rmnet_sdio_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_sdio_hs_notify_desc, %object
	.size	rmnet_sdio_hs_notify_desc, 9
rmnet_sdio_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	input_terminal_desc, %object
	.size	input_terminal_desc, 12
input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	1
	.short	513
	.byte	0
	.space	1
	.short	3
	.space	2
	.type	as_type_i_desc, %object
	.size	as_type_i_desc, 11
as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.space	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	audio_source_ac_interface_desc, %object
	.size	audio_source_ac_interface_desc, 9
audio_source_ac_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	0
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	audio_source_ac_header_desc, %object
	.size	audio_source_ac_header_desc, 10
audio_source_ac_header_desc:
	.byte	10
	.byte	36
	.byte	1
	.2byte	256
	.2byte	40
	.byte	2
	.byte	0
	.byte	1
	.space	2
	.type	as_interface_alt_0_desc, %object
	.size	as_interface_alt_0_desc, 9
as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	fs_as_in_ep_desc, %object
	.size	fs_as_in_ep_desc, 9
fs_as_in_ep_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	13
	.short	256
	.byte	1
	.space	2
	.space	3
	.type	hs_as_in_ep_desc, %object
	.size	hs_as_in_ep_desc, 9
hs_as_in_ep_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	13
	.short	256
	.byte	4
	.space	2
	.space	3
	.type	ecm_qc_control_intf, %object
	.size	ecm_qc_control_intf, 9
ecm_qc_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_union_desc, %object
	.size	ecm_qc_union_desc, 5
ecm_qc_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ecm_qc_data_nop_intf, %object
	.size	ecm_qc_data_nop_intf, 9
ecm_qc_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_data_intf, %object
	.size	ecm_qc_data_intf, 9
ecm_qc_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_fs_in_desc, %object
	.size	ecm_qc_fs_in_desc, 9
ecm_qc_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	ecm_qc_fs_out_desc, %object
	.size	ecm_qc_fs_out_desc, 9
ecm_qc_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	ecm_qc_fs_notify_desc, %object
	.size	ecm_qc_fs_notify_desc, 9
ecm_qc_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	ecm_qc_hs_in_desc, %object
	.size	ecm_qc_hs_in_desc, 9
ecm_qc_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ecm_qc_hs_out_desc, %object
	.size	ecm_qc_hs_out_desc, 9
ecm_qc_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ecm_qc_hs_notify_desc, %object
	.size	ecm_qc_hs_notify_desc, 9
ecm_qc_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_qc_ss_in_desc, %object
	.size	ecm_qc_ss_in_desc, 9
ecm_qc_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ecm_qc_ss_out_desc, %object
	.size	ecm_qc_ss_out_desc, 9
ecm_qc_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ecm_qc_ss_notify_desc, %object
	.size	ecm_qc_ss_notify_desc, 9
ecm_qc_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	mbim_iad_desc, %object
	.size	mbim_iad_desc, 8
mbim_iad_desc:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	14
	.byte	0
	.space	1
	.type	mbim_control_intf, %object
	.size	mbim_control_intf, 9
mbim_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	14
	.byte	0
	.space	1
	.space	3
	.type	mbim_union_desc, %object
	.size	mbim_union_desc, 5
mbim_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	mbim_data_nop_intf, %object
	.size	mbim_data_nop_intf, 9
mbim_data_nop_intf:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	2
	.space	1
	.space	3
	.type	mbim_data_intf, %object
	.size	mbim_data_intf, 9
mbim_data_intf:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	2
	.space	1
	.space	3
	.type	fs_mbim_in_desc, %object
	.size	fs_mbim_in_desc, 9
fs_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_mbim_out_desc, %object
	.size	fs_mbim_out_desc, 9
fs_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_mbim_notify_desc, %object
	.size	fs_mbim_notify_desc, 9
fs_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	32
	.space	2
	.space	3
	.type	mbb_desc, %object
	.size	mbb_desc, 12
mbb_desc:
	.byte	12
	.byte	36
	.byte	27
	.2byte	256
	.2byte	4096
	.byte	32
	.byte	-128
	.2byte	4064
	.byte	32
	.type	hs_mbim_in_desc, %object
	.size	hs_mbim_in_desc, 9
hs_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_mbim_out_desc, %object
	.size	hs_mbim_out_desc, 9
hs_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_mbim_notify_desc, %object
	.size	hs_mbim_notify_desc, 9
hs_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	ss_mbim_in_desc, %object
	.size	ss_mbim_in_desc, 9
ss_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_mbim_out_desc, %object
	.size	ss_mbim_out_desc, 9
ss_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_mbim_notify_desc, %object
	.size	ss_mbim_notify_desc, 9
ss_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	ecm_iad_descriptor, %object
	.size	ecm_iad_descriptor, 8
ecm_iad_descriptor:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	ecm_control_intf, %object
	.size	ecm_control_intf, 9
ecm_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.space	3
	.type	ecm_union_desc, %object
	.size	ecm_union_desc, 5
ecm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ecm_data_nop_intf, %object
	.size	ecm_data_nop_intf, 9
ecm_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_data_intf, %object
	.size	ecm_data_intf, 9
ecm_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	fs_ecm_in_desc, %object
	.size	fs_ecm_in_desc, 9
fs_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_ecm_out_desc, %object
	.size	fs_ecm_out_desc, 9
fs_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_ecm_notify_desc, %object
	.size	fs_ecm_notify_desc, 9
fs_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	hs_ecm_in_desc, %object
	.size	hs_ecm_in_desc, 9
hs_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ecm_out_desc, %object
	.size	hs_ecm_out_desc, 9
hs_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ecm_notify_desc, %object
	.size	hs_ecm_notify_desc, 9
hs_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ss_ecm_in_desc, %object
	.size	ss_ecm_in_desc, 9
ss_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_ecm_out_desc, %object
	.size	ss_ecm_out_desc, 9
ss_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_ecm_notify_desc, %object
	.size	ss_ecm_notify_desc, 9
ss_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	speaker_as_type_i_desc, %object
	.size	speaker_as_type_i_desc, 11
speaker_as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.space	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	microphone_input_terminal_desc, %object
	.size	microphone_input_terminal_desc, 12
microphone_input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	1
	.short	513
	.byte	2
	.byte	1
	.short	3
	.space	2
	.type	microphone_as_type_i_desc, %object
	.size	microphone_as_type_i_desc, 11
microphone_as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.byte	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	microphone_as_interface_alt_0_desc, %object
	.size	microphone_as_interface_alt_0_desc, 9
microphone_as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	microphone_as_interface_alt_1_desc, %object
	.size	microphone_as_interface_alt_1_desc, 9
microphone_as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	speaker_as_interface_alt_0_desc, %object
	.size	speaker_as_interface_alt_0_desc, 9
speaker_as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	speaker_as_interface_alt_1_desc, %object
	.size	speaker_as_interface_alt_1_desc, 9
speaker_as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	microphone_as_ep_in_desc, %object
	.size	microphone_as_ep_in_desc, 9
microphone_as_ep_in_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	5
	.short	32
	.byte	4
	.space	2
	.space	3
	.type	speaker_as_ep_out_desc, %object
	.size	speaker_as_ep_out_desc, 9
speaker_as_ep_out_desc:
	.byte	9
	.byte	5
	.byte	0
	.byte	9
	.short	32
	.byte	4
	.space	2
	.space	3
	.type	ncm_iad_desc, %object
	.size	ncm_iad_desc, 8
ncm_iad_desc:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	13
	.byte	0
	.space	1
	.type	ncm_control_intf, %object
	.size	ncm_control_intf, 9
ncm_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	13
	.byte	0
	.space	1
	.space	3
	.type	ncm_union_desc, %object
	.size	ncm_union_desc, 5
ncm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ncm_data_nop_intf, %object
	.size	ncm_data_nop_intf, 9
ncm_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	1
	.space	1
	.space	3
	.type	ncm_data_intf, %object
	.size	ncm_data_intf, 9
ncm_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	1
	.space	1
	.space	3
	.type	fs_ncm_in_desc, %object
	.size	fs_ncm_in_desc, 9
fs_ncm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_ncm_out_desc, %object
	.size	fs_ncm_out_desc, 9
fs_ncm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_ncm_notify_desc, %object
	.size	fs_ncm_notify_desc, 9
fs_ncm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	hs_ncm_in_desc, %object
	.size	hs_ncm_in_desc, 9
hs_ncm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ncm_out_desc, %object
	.size	hs_ncm_out_desc, 9
hs_ncm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ncm_notify_desc, %object
	.size	hs_ncm_notify_desc, 9
hs_ncm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	charger_interface_desc, %object
	.size	charger_interface_desc, 9
charger_interface_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	1
	.byte	3
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	charger_fs_in_ep_desc, %object
	.size	charger_fs_in_ep_desc, 9
charger_fs_in_ep_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	1
	.byte	16
	.space	2
	.space	3
	.type	charger_hs_in_ep_desc, %object
	.size	charger_hs_in_ep_desc, 9
charger_hs_in_ep_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	1
	.byte	16
	.space	2
	.space	3
	.type	charger_ss_in_ep_desc, %object
	.size	charger_ss_in_ep_desc, 9
charger_ss_in_ep_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	1
	.byte	16
	.space	2
	.space	3
	.type	acc_interface_desc, %object
	.size	acc_interface_desc, 9
acc_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	-1
	.byte	0
	.space	1
	.space	3
	.type	acc_fullspeed_in_desc, %object
	.size	acc_fullspeed_in_desc, 9
acc_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	acc_fullspeed_out_desc, %object
	.size	acc_fullspeed_out_desc, 9
acc_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	acc_highspeed_in_desc, %object
	.size	acc_highspeed_in_desc, 9
acc_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acc_highspeed_out_desc, %object
	.size	acc_highspeed_out_desc, 9
acc_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acc_superspeed_in_desc, %object
	.size	acc_superspeed_in_desc, 9
acc_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acc_superspeed_out_desc, %object
	.size	acc_superspeed_out_desc, 9
acc_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_intf_desc, %object
	.size	fsg_intf_desc, 9
fsg_intf_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	8
	.byte	6
	.byte	80
	.byte	0
	.space	3
	.type	fsg_fs_bulk_in_desc, %object
	.size	fsg_fs_bulk_in_desc, 9
fsg_fs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fsg_fs_bulk_out_desc, %object
	.size	fsg_fs_bulk_out_desc, 9
fsg_fs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fsg_hs_bulk_in_desc, %object
	.size	fsg_hs_bulk_in_desc, 9
fsg_hs_bulk_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	fsg_hs_bulk_out_desc, %object
	.size	fsg_hs_bulk_out_desc, 9
fsg_hs_bulk_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.byte	1
	.space	2
	.space	3
	.type	fsg_ss_bulk_in_desc, %object
	.size	fsg_ss_bulk_in_desc, 9
fsg_ss_bulk_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_ss_bulk_in_comp_desc, %object
	.size	fsg_ss_bulk_in_comp_desc, 6
fsg_ss_bulk_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	fsg_ss_bulk_out_desc, %object
	.size	fsg_ss_bulk_out_desc, 9
fsg_ss_bulk_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_ss_bulk_out_comp_desc, %object
	.size	fsg_ss_bulk_out_comp_desc, 6
fsg_ss_bulk_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	mtp_interface_desc, %object
	.size	mtp_interface_desc, 9
mtp_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	3
	.byte	-1
	.byte	-1
	.byte	0
	.space	1
	.space	3
	.type	mtp_fullspeed_in_desc, %object
	.size	mtp_fullspeed_in_desc, 9
mtp_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	mtp_fullspeed_out_desc, %object
	.size	mtp_fullspeed_out_desc, 9
mtp_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	mtp_highspeed_in_desc, %object
	.size	mtp_highspeed_in_desc, 9
mtp_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	mtp_highspeed_out_desc, %object
	.size	mtp_highspeed_out_desc, 9
mtp_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	mtp_superspeed_in_desc, %object
	.size	mtp_superspeed_in_desc, 9
mtp_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	mtp_superspeed_out_desc, %object
	.size	mtp_superspeed_out_desc, 9
mtp_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ccid_interface_desc, %object
	.size	ccid_interface_desc, 9
ccid_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	11
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ccid_fs_notify_desc, %object
	.size	ccid_fs_notify_desc, 9
ccid_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	4
	.byte	32
	.space	2
	.space	3
	.type	ccid_fs_in_desc, %object
	.size	ccid_fs_in_desc, 9
ccid_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	ccid_fs_out_desc, %object
	.size	ccid_fs_out_desc, 9
ccid_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	ccid_hs_in_desc, %object
	.size	ccid_hs_in_desc, 9
ccid_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ccid_hs_out_desc, %object
	.size	ccid_hs_out_desc, 9
ccid_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ccid_hs_notify_desc, %object
	.size	ccid_hs_notify_desc, 9
ccid_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	4
	.byte	9
	.space	2
	.space	3
	.type	qdss_data_intf_desc, %object
	.size	qdss_data_intf_desc, 9
qdss_data_intf_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	1
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	qdss_ctrl_intf_desc, %object
	.size	qdss_ctrl_intf_desc, 9
qdss_ctrl_intf_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	2
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	qdss_ss_data_desc, %object
	.size	qdss_ss_data_desc, 9
qdss_ss_data_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_data_ep_comp_desc, %object
	.size	qdss_data_ep_comp_desc, 6
qdss_data_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	1
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_ctrl_in_desc, %object
	.size	qdss_ss_ctrl_in_desc, 9
qdss_ss_ctrl_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_ctrl_in_ep_comp_desc, %object
	.size	qdss_ctrl_in_ep_comp_desc, 6
qdss_ctrl_in_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	0
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_ctrl_out_desc, %object
	.size	qdss_ss_ctrl_out_desc, 9
qdss_ss_ctrl_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_ctrl_out_ep_comp_desc, %object
	.size	qdss_ctrl_out_ep_comp_desc, 6
qdss_ctrl_out_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	0
	.byte	0
	.short	0
	.space	2
	.type	qdss_hs_data_desc, %object
	.size	qdss_hs_data_desc, 9
qdss_hs_data_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_ctrl_in_desc, %object
	.size	qdss_hs_ctrl_in_desc, 9
qdss_hs_ctrl_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_ctrl_out_desc, %object
	.size	qdss_hs_ctrl_out_desc, 9
qdss_hs_ctrl_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_interface_desc, %object
	.size	rmnet_mux_interface_desc, 9
rmnet_mux_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_mux_fs_in_desc, %object
	.size	rmnet_mux_fs_in_desc, 9
rmnet_mux_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_mux_fs_out_desc, %object
	.size	rmnet_mux_fs_out_desc, 9
rmnet_mux_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_mux_fs_notify_desc, %object
	.size	rmnet_mux_fs_notify_desc, 9
rmnet_mux_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_mux_hs_in_desc, %object
	.size	rmnet_mux_hs_in_desc, 9
rmnet_mux_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_hs_out_desc, %object
	.size	rmnet_mux_hs_out_desc, 9
rmnet_mux_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_hs_notify_desc, %object
	.size	rmnet_mux_hs_notify_desc, 9
rmnet_mux_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rl.53461, %object
	.size	rl.53461, 24
rl.53461:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	rl.63688, %object
	.size	rl.63688, 24
rl.63688:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	rl.53468, %object
	.size	rl.53468, 24
rl.53468:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	ac_interface_desc, %object
	.size	ac_interface_desc, 9
ac_interface_desc:
	.byte	9
	.byte	4
	.space	3
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	ms_interface_desc, %object
	.size	ms_interface_desc, 9
ms_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	1
	.byte	3
	.space	2
	.space	3
	.type	ac_header_desc, %object
	.size	ac_header_desc, 9
ac_header_desc:
	.byte	9
	.byte	36
	.byte	1
	.2byte	256
	.2byte	9
	.byte	1
	.space	1
	.space	3
	.type	bulk_in_desc, %object
	.size	bulk_in_desc, 9
bulk_in_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	bulk_out_desc, %object
	.size	bulk_out_desc, 9
bulk_out_desc:
	.byte	9
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	ms_header_desc, %object
	.size	ms_header_desc, 7
ms_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.2byte	256
	.space	2
	.space	1
	.type	ms_in_desc, %object
	.size	ms_in_desc, 20
ms_in_desc:
	.space	1
	.byte	37
	.byte	1
	.space	17
	.type	ms_out_desc, %object
	.size	ms_out_desc, 20
ms_out_desc:
	.space	1
	.byte	37
	.byte	1
	.space	17
	.type	rl.26468, %object
	.size	rl.26468, 24
rl.26468:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	rl.26486, %object
	.size	rl.26486, 24
rl.26486:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	rmnet_interface_desc, %object
	.size	rmnet_interface_desc, 9
rmnet_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_fs_in_desc, %object
	.size	rmnet_fs_in_desc, 9
rmnet_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_fs_out_desc, %object
	.size	rmnet_fs_out_desc, 9
rmnet_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_fs_notify_desc, %object
	.size	rmnet_fs_notify_desc, 9
rmnet_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_hs_in_desc, %object
	.size	rmnet_hs_in_desc, 9
rmnet_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_hs_out_desc, %object
	.size	rmnet_hs_out_desc, 9
rmnet_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_hs_notify_desc, %object
	.size	rmnet_hs_notify_desc, 9
rmnet_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_ss_in_desc, %object
	.size	rmnet_ss_in_desc, 9
rmnet_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_ss_out_desc, %object
	.size	rmnet_ss_out_desc, 9
rmnet_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_ss_notify_desc, %object
	.size	rmnet_ss_notify_desc, 9
rmnet_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	gps_interface_desc, %object
	.size	gps_interface_desc, 9
gps_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	gps_fs_notify_desc, %object
	.size	gps_fs_notify_desc, 9
gps_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	32
	.space	2
	.space	3
	.type	gps_hs_notify_desc, %object
	.size	gps_hs_notify_desc, 9
gps_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	gps_ss_notify_desc, %object
	.size	gps_ss_notify_desc, 9
gps_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	gser_interface_desc, %object
	.size	gser_interface_desc, 9
gser_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	gser_fs_in_desc, %object
	.size	gser_fs_in_desc, 9
gser_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	gser_fs_out_desc, %object
	.size	gser_fs_out_desc, 9
gser_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	gser_fs_notify_desc, %object
	.size	gser_fs_notify_desc, 9
gser_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	32
	.space	2
	.space	3
	.type	gser_hs_in_desc, %object
	.size	gser_hs_in_desc, 9
gser_hs_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	gser_hs_out_desc, %object
	.size	gser_hs_out_desc, 9
gser_hs_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	gser_ss_in_desc, %object
	.size	gser_ss_in_desc, 9
gser_ss_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	gser_ss_out_desc, %object
	.size	gser_ss_out_desc, 9
gser_ss_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	gser_hs_notify_desc, %object
	.size	gser_hs_notify_desc, 9
gser_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	9
	.space	2
	.space	3
	.type	gser_ss_notify_desc, %object
	.size	gser_ss_notify_desc, 9
gser_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	9
	.space	2
	.space	3
	.type	acm_iad_descriptor, %object
	.size	acm_iad_descriptor, 8
acm_iad_descriptor:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	2
	.byte	1
	.space	1
	.type	acm_control_interface_desc, %object
	.size	acm_control_interface_desc, 9
acm_control_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	1
	.space	1
	.space	3
	.type	acm_union_desc, %object
	.size	acm_union_desc, 5
acm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	acm_data_interface_desc, %object
	.size	acm_data_interface_desc, 9
acm_data_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	acm_call_mgmt_descriptor, %object
	.size	acm_call_mgmt_descriptor, 5
acm_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.space	1
	.space	3
	.type	acm_fs_in_desc, %object
	.size	acm_fs_in_desc, 9
acm_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	acm_fs_out_desc, %object
	.size	acm_fs_out_desc, 9
acm_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	acm_fs_notify_desc, %object
	.size	acm_fs_notify_desc, 9
acm_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	32
	.space	2
	.space	3
	.type	acm_hs_in_desc, %object
	.size	acm_hs_in_desc, 9
acm_hs_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acm_hs_out_desc, %object
	.size	acm_hs_out_desc, 9
acm_hs_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acm_hs_notify_desc, %object
	.size	acm_hs_notify_desc, 9
acm_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	9
	.space	2
	.space	3
	.type	acm_ss_in_desc, %object
	.size	acm_ss_in_desc, 9
acm_ss_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acm_ss_out_desc, %object
	.size	acm_ss_out_desc, 9
acm_ss_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	bam_mux_tx_pkt_drop_thld, %object
	.size	bam_mux_tx_pkt_drop_thld, 4
bam_mux_tx_pkt_drop_thld:
	.word	1000
	.type	ghsic_data_serial_tx_q_size, %object
	.size	ghsic_data_serial_tx_q_size, 4
ghsic_data_serial_tx_q_size:
	.word	20
	.type	ghsic_data_serial_rx_q_size, %object
	.size	ghsic_data_serial_rx_q_size, 4
ghsic_data_serial_rx_q_size:
	.word	10
	.type	ghsic_data_rmnet_tx_q_size, %object
	.size	ghsic_data_rmnet_tx_q_size, 4
ghsic_data_rmnet_tx_q_size:
	.word	300
	.type	ghsic_data_rmnet_rx_q_size, %object
	.size	ghsic_data_rmnet_rx_q_size, 4
ghsic_data_rmnet_rx_q_size:
	.word	50
	.type	ghsuart_data_serial_tx_q_size, %object
	.size	ghsuart_data_serial_tx_q_size, 4
ghsuart_data_serial_tx_q_size:
	.word	5
	.type	ghsuart_data_serial_rx_q_size, %object
	.size	ghsuart_data_serial_rx_q_size, 4
ghsuart_data_serial_rx_q_size:
	.word	5
	.type	ghsuart_data_rmnet_tx_q_size, %object
	.size	ghsuart_data_rmnet_tx_q_size, 4
ghsuart_data_rmnet_tx_q_size:
	.word	20
	.type	ghsuart_data_rmnet_rx_q_size, %object
	.size	ghsuart_data_rmnet_rx_q_size, 4
ghsuart_data_rmnet_rx_q_size:
	.word	10
	.type	adb_interface_desc, %object
	.size	adb_interface_desc, 9
adb_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	66
	.byte	1
	.space	1
	.space	3
	.type	adb_fullspeed_in_desc, %object
	.size	adb_fullspeed_in_desc, 9
adb_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	adb_fullspeed_out_desc, %object
	.size	adb_fullspeed_out_desc, 9
adb_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	adb_highspeed_in_desc, %object
	.size	adb_highspeed_in_desc, 9
adb_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	adb_highspeed_out_desc, %object
	.size	adb_highspeed_out_desc, 9
adb_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	adb_superspeed_in_desc, %object
	.size	adb_superspeed_in_desc, 9
adb_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	adb_superspeed_out_desc, %object
	.size	adb_superspeed_out_desc, 9
adb_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_iad_descriptor, %object
	.size	rndis_iad_descriptor, 8
rndis_iad_descriptor:
	.byte	8
	.byte	11
	.byte	0
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	rndis_control_intf, %object
	.size	rndis_control_intf, 9
rndis_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	-1
	.space	1
	.space	3
	.type	rndis_union_desc, %object
	.size	rndis_union_desc, 5
rndis_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	rndis_data_intf, %object
	.size	rndis_data_intf, 9
rndis_data_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	fs_in_desc, %object
	.size	fs_in_desc, 9
fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_out_desc, %object
	.size	fs_out_desc, 9
fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_notify_desc, %object
	.size	fs_notify_desc, 9
fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	hs_in_desc, %object
	.size	hs_in_desc, 9
hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_out_desc, %object
	.size	hs_out_desc, 9
hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_notify_desc, %object
	.size	hs_notify_desc, 9
hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	ss_in_desc, %object
	.size	ss_in_desc, 9
ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_out_desc, %object
	.size	ss_out_desc, 9
ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_notify_desc, %object
	.size	ss_notify_desc, 9
ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rndis_ul_max_pkt_per_xfer, %object
	.size	rndis_ul_max_pkt_per_xfer, 4
rndis_ul_max_pkt_per_xfer:
	.word	3
	.type	rndis_qc_iad_descriptor, %object
	.size	rndis_qc_iad_descriptor, 8
rndis_qc_iad_descriptor:
	.byte	8
	.byte	11
	.byte	0
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	rndis_qc_control_intf, %object
	.size	rndis_qc_control_intf, 9
rndis_qc_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	-1
	.space	1
	.space	3
	.type	rndis_qc_union_desc, %object
	.size	rndis_qc_union_desc, 5
rndis_qc_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	rndis_qc_data_intf, %object
	.size	rndis_qc_data_intf, 9
rndis_qc_data_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	rndis_qc_fs_in_desc, %object
	.size	rndis_qc_fs_in_desc, 9
rndis_qc_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	rndis_qc_fs_out_desc, %object
	.size	rndis_qc_fs_out_desc, 9
rndis_qc_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	rndis_qc_fs_notify_desc, %object
	.size	rndis_qc_fs_notify_desc, 9
rndis_qc_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rndis_qc_hs_in_desc, %object
	.size	rndis_qc_hs_in_desc, 9
rndis_qc_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rndis_qc_hs_out_desc, %object
	.size	rndis_qc_hs_out_desc, 9
rndis_qc_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rndis_qc_hs_notify_desc, %object
	.size	rndis_qc_hs_notify_desc, 9
rndis_qc_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rndis_qc_ss_in_desc, %object
	.size	rndis_qc_ss_in_desc, 9
rndis_qc_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_qc_ss_out_desc, %object
	.size	rndis_qc_ss_out_desc, 9
rndis_qc_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_qc_ss_notify_desc, %object
	.size	rndis_qc_ss_notify_desc, 9
rndis_qc_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rndis_dl_max_pkt_per_xfer, %object
	.size	rndis_dl_max_pkt_per_xfer, 4
rndis_dl_max_pkt_per_xfer:
	.word	3
	.type	ecm_desc, %object
	.size	ecm_desc, 13
ecm_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	ecm_qc_desc, %object
	.size	ecm_qc_desc, 13
ecm_qc_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	necm_desc, %object
	.size	necm_desc, 13
necm_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	usb_android_dt_match, %object
	.size	usb_android_dt_match, 392
usb_android_dt_match:
	.space	64
	.ascii	"qcom,android-usb\000"
	.space	111
	.space	4
	.space	196
	.type	ncm_desc, %object
	.size	ncm_desc, 6
ncm_desc:
	.byte	6
	.byte	36
	.byte	26
	.2byte	256
	.byte	17
	.space	2
	.type	ncm_header_desc, %object
	.size	ncm_header_desc, 5
ncm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	microphone_as_iso_in_desc, %object
	.size	microphone_as_iso_in_desc, 7
microphone_as_iso_in_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	microphone_as_header_desc, %object
	.size	microphone_as_header_desc, 7
microphone_as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	2
	.byte	1
	.2byte	1
	.space	1
	.type	speaker_as_iso_out_desc, %object
	.size	speaker_as_iso_out_desc, 7
speaker_as_iso_out_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	speaker_as_header_desc, %object
	.size	speaker_as_header_desc, 7
speaker_as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	3
	.byte	1
	.2byte	1
	.space	1
	.type	microphone_output_terminal_desc, %object
	.size	microphone_output_terminal_desc, 9
microphone_output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	2
	.short	257
	.byte	1
	.byte	1
	.space	1
	.space	3
	.type	speaker_output_terminal_desc, %object
	.size	speaker_output_terminal_desc, 9
speaker_output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	4
	.short	769
	.byte	3
	.byte	3
	.space	1
	.space	3
	.type	speaker_input_terminal_desc, %object
	.size	speaker_input_terminal_desc, 12
speaker_input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	3
	.short	257
	.byte	4
	.space	1
	.short	3
	.space	2
	.type	uac1_ac_header_desc, %object
	.size	uac1_ac_header_desc, 10
uac1_ac_header_desc:
	.byte	10
	.byte	36
	.byte	1
	.2byte	256
	.2byte	52
	.byte	2
	.space	2
	.space	2
	.type	uac1_ac_interface_desc, %object
	.size	uac1_ac_interface_desc, 9
uac1_ac_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	0
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	req_capture_count, %object
	.size	req_capture_count, 4
req_capture_count:
	.word	48
	.type	rndis_qc_ss_bulk_comp_desc, %object
	.size	rndis_qc_ss_bulk_comp_desc, 6
rndis_qc_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rndis_qc_ss_intr_comp_desc, %object
	.size	rndis_qc_ss_intr_comp_desc, 6
rndis_qc_ss_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	rndis_qc_acm_descriptor, %object
	.size	rndis_qc_acm_descriptor, 4
rndis_qc_acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	0
	.type	rndis_qc_call_mgmt_descriptor, %object
	.size	rndis_qc_call_mgmt_descriptor, 5
rndis_qc_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.byte	1
	.space	3
	.type	rndis_qc_header_desc, %object
	.size	rndis_qc_header_desc, 5
rndis_qc_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ss_ecm_bulk_comp_desc, %object
	.size	ss_ecm_bulk_comp_desc, 6
ss_ecm_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_ecm_intr_comp_desc, %object
	.size	ss_ecm_intr_comp_desc, 6
ss_ecm_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	16
	.space	2
	.type	ecm_header_desc, %object
	.size	ecm_header_desc, 5
ecm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ss_mbim_out_comp_desc, %object
	.size	ss_mbim_out_comp_desc, 6
ss_mbim_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_mbim_in_comp_desc, %object
	.size	ss_mbim_in_comp_desc, 6
ss_mbim_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_mbim_notify_comp_desc, %object
	.size	ss_mbim_notify_comp_desc, 6
ss_mbim_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	64
	.space	2
	.type	ext_mbb_desc, %object
	.size	ext_mbb_desc, 8
ext_mbb_desc:
	.byte	8
	.byte	36
	.byte	28
	.2byte	256
	.byte	64
	.short	1500
	.type	mbim_header_desc, %object
	.size	mbim_header_desc, 5
mbim_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ecm_qc_ss_out_comp_desc, %object
	.size	ecm_qc_ss_out_comp_desc, 6
ecm_qc_ss_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ecm_qc_ss_in_comp_desc, %object
	.size	ecm_qc_ss_in_comp_desc, 6
ecm_qc_ss_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ecm_qc_ss_notify_comp_desc, %object
	.size	ecm_qc_ss_notify_comp_desc, 6
ecm_qc_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	16
	.space	2
	.type	ecm_qc_header_desc, %object
	.size	ecm_qc_header_desc, 5
ecm_qc_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ss_bulk_comp_desc, %object
	.size	ss_bulk_comp_desc, 6
ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_intr_comp_desc, %object
	.size	ss_intr_comp_desc, 6
ss_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	rndis_acm_descriptor, %object
	.size	rndis_acm_descriptor, 4
rndis_acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	0
	.type	call_mgmt_descriptor, %object
	.size	call_mgmt_descriptor, 5
call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.byte	1
	.space	3
	.type	header_desc, %object
	.size	header_desc, 5
header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	acc_superspeed_out_comp_desc, %object
	.size	acc_superspeed_out_comp_desc, 6
acc_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acc_superspeed_in_comp_desc, %object
	.size	acc_superspeed_in_comp_desc, 6
acc_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	mtp_ext_config_desc, %object
	.size	mtp_ext_config_desc, 40
mtp_ext_config_desc:
	.word	40
	.short	256
	.short	4
	.byte	1
	.space	7
	.byte	0
	.byte	1
	.byte	77
	.byte	84
	.byte	80
	.space	5
	.space	14
	.type	mtp_superspeed_intr_comp_desc, %object
	.size	mtp_superspeed_intr_comp_desc, 6
mtp_superspeed_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	28
	.space	2
	.type	mtp_superspeed_out_comp_desc, %object
	.size	mtp_superspeed_out_comp_desc, 6
mtp_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.byte	2
	.space	3
	.space	2
	.type	mtp_superspeed_in_comp_desc, %object
	.size	mtp_superspeed_in_comp_desc, 6
mtp_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.byte	2
	.space	3
	.space	2
	.type	ptp_interface_desc, %object
	.size	ptp_interface_desc, 9
ptp_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	3
	.byte	6
	.byte	1
	.byte	1
	.space	1
	.space	3
	.type	mtp_tx_reqs, %object
	.size	mtp_tx_reqs, 4
mtp_tx_reqs:
	.word	8
	.type	mtp_tx_req_len, %object
	.size	mtp_tx_req_len, 4
mtp_tx_req_len:
	.word	16384
	.type	mtp_rx_req_len, %object
	.size	mtp_rx_req_len, 4
mtp_rx_req_len:
	.word	16384
	.type	adb_superspeed_out_comp_desc, %object
	.size	adb_superspeed_out_comp_desc, 6
adb_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	adb_superspeed_in_comp_desc, %object
	.size	adb_superspeed_in_comp_desc, 6
adb_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acm_ss_bulk_comp_desc, %object
	.size	acm_ss_bulk_comp_desc, 6
acm_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acm_descriptor, %object
	.size	acm_descriptor, 4
acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	2
	.type	acm_header_desc, %object
	.size	acm_header_desc, 5
acm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	gser_ss_notify_comp_desc, %object
	.size	gser_ss_notify_comp_desc, 6
gser_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	10
	.space	2
	.type	gser_ss_bulk_comp_desc, %object
	.size	gser_ss_bulk_comp_desc, 6
gser_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	gser_union_desc, %object
	.size	gser_union_desc, 5
gser_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	gser_descriptor, %object
	.size	gser_descriptor, 4
gser_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	2
	.type	gser_call_mgmt_descriptor, %object
	.size	gser_call_mgmt_descriptor, 5
gser_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.space	1
	.space	3
	.type	gser_header_desc, %object
	.size	gser_header_desc, 5
gser_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ghsuart_data_tx_intr_thld, %object
	.size	ghsuart_data_tx_intr_thld, 4
ghsuart_data_tx_intr_thld:
	.word	1
	.type	ghsic_data_tx_intr_thld, %object
	.size	ghsic_data_tx_intr_thld, 4
ghsic_data_tx_intr_thld:
	.word	20
	.type	as_iso_in_desc, %object
	.size	as_iso_in_desc, 7
as_iso_in_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	as_header_desc, %object
	.size	as_header_desc, 7
as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	output_terminal_desc, %object
	.size	output_terminal_desc, 9
output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	3
	.short	257
	.byte	2
	.byte	2
	.space	1
	.space	3
	.type	feature_unit_desc, %object
	.size	feature_unit_desc, 9
feature_unit_desc:
	.byte	9
	.byte	36
	.byte	6
	.byte	2
	.byte	1
	.byte	2
	.space	3
	.space	3
	.type	gps_ss_notify_comp_desc, %object
	.size	gps_ss_notify_comp_desc, 6
gps_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	64
	.space	2
	.type	rmnet_ss_out_comp_desc, %object
	.size	rmnet_ss_out_comp_desc, 6
rmnet_ss_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rmnet_ss_in_comp_desc, %object
	.size	rmnet_ss_in_comp_desc, 6
rmnet_ss_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rmnet_ss_notify_comp_desc, %object
	.size	rmnet_ss_notify_comp_desc, 6
rmnet_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	mux_sdio_rx_fctrl_dis_thld, %object
	.size	mux_sdio_rx_fctrl_dis_thld, 4
mux_sdio_rx_fctrl_dis_thld:
	.word	500
	.type	mux_sdio_tx_pkt_drop_thld, %object
	.size	mux_sdio_tx_pkt_drop_thld, 4
mux_sdio_tx_pkt_drop_thld:
	.word	1000
	.type	sdio_rx_fctrl_dis_thld, %object
	.size	sdio_rx_fctrl_dis_thld, 4
sdio_rx_fctrl_dis_thld:
	.word	500
	.type	sdio_rx_fctrl_en_thld, %object
	.size	sdio_rx_fctrl_en_thld, 4
sdio_rx_fctrl_en_thld:
	.word	1000
	.type	sdio_tx_pkt_drop_thld, %object
	.size	sdio_tx_pkt_drop_thld, 4
sdio_tx_pkt_drop_thld:
	.word	1000
	.type	ss_bulk_out_comp_desc, %object
	.size	ss_bulk_out_comp_desc, 6
ss_bulk_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_bulk_in_comp_desc, %object
	.size	ss_bulk_in_comp_desc, 6
ss_bulk_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.section	.rodata.str1.4,"aMS",%progbits,1
	.align	2
.LC0:
	.ascii	"TTY\000"
.LC1:
	.ascii	"SDIO\000"
	.space	3
.LC2:
	.ascii	"SMD\000"
.LC3:
	.ascii	"QTI\000"
.LC4:
	.ascii	"BAM\000"
.LC5:
	.ascii	"BAM2BAM\000"
.LC6:
	.ascii	"BAM2BAM_IPA\000"
.LC7:
	.ascii	"HSIC\000"
	.space	3
.LC8:
	.ascii	"HSUART\000"
	.space	1
.LC9:
	.ascii	"NONE\000"
	.space	3
.LC10:
	.ascii	"UNDEFINED\000"
	.space	2
.LC11:
	.ascii	"rmnet notify ep error %d\012\000"
	.space	2
.LC12:
	.ascii	"rmnet notify ep enqueue error %d\012\000"
	.space	2
.LC13:
	.ascii	"rmnet notifyep error %d\012\000"
	.space	3
.LC14:
	.ascii	"rmnet notify ep enq error %d\012\000"
	.space	2
.LC15:
	.ascii	"gser response on ttyGS%d, err %d\012\000"
	.space	2
.LC16:
	.ascii	"acm response on ttyGS%d, err %d\012\000"
	.space	3
.LC17:
	.ascii	"ecm req %02x.%02x response err %d\012\000"
	.space	1
.LC18:
	.ascii	"ncm req %02x.%02x response err %d\012\000"
	.space	1
.LC19:
	.ascii	"rmnet_mux notifyep error %d\012\000"
	.space	3
.LC20:
	.ascii	"rmnet data rx enqueue err %d\012\000"
	.space	2
.LC21:
	.ascii	"rmnet control SDIO write failed\012\000"
	.space	3
.LC22:
	.ascii	"rmnet_mux ep0 enqueue err %d\012\000"
	.space	2
.LC23:
	.ascii	"usb_ep_queue error on ep0 %d\012\000"
	.space	2
.LC24:
	.ascii	"usb ep stall\012\000"
	.space	2
.LC25:
	.ascii	"<3>%s: device is already opened\012\000"
	.space	3
.LC26:
	.ascii	"<3>audio response on err %d\012\000"
	.space	3
.LC27:
	.ascii	"<3>%s: port is null\012\000"
	.space	3
.LC28:
	.ascii	"<3>%s: usb ep out queue failedport:%pK, port#%d\012"
	.ascii	"\000"
	.space	3
.LC29:
	.ascii	"<3>%s: port->port_usb is NULL\000"
	.space	2
.LC30:
	.ascii	"<3>%s: error dequeuing transfer, %d\012\000"
	.space	3
.LC31:
	.ascii	"<3>%s: Invalid portno#%d\012\000"
	.space	2
.LC32:
	.ascii	"<3>%s: ecm req %02x.%02x response err %d\012\000"
	.space	2
.LC33:
	.ascii	"<3>%s: Bad control-OUT transfer\012\000"
	.space	3
.LC34:
	.ascii	"<3>%s: Illegal INPUT SIZE (%d) from host\012\000"
	.space	2
.LC35:
	.ascii	"<3>%s: Illegal NTB length %d\012\000"
	.space	2
.LC36:
	.ascii	"<3>%s: dev:%pK Failed\012\000"
	.space	1
.LC37:
	.ascii	"<3>%s: %s: error dequeuing transfer, %d\012\000"
	.space	3
.LC38:
	.ascii	"<3>%s: %s(): cdev or config is NULL.\012\000"
	.space	2
.LC39:
	.ascii	"<6>%s: RNDIS %s response error %d, %d/%d\012\000"
	.space	2
.LC40:
	.ascii	"<6>%s: notify/0 --> %d\012\000"
.LC41:
	.ascii	"<3>%s: Failed to allocate playback_copy_buf\000"
.LC42:
	.ascii	"<3>%s: Failed to allocate playback_copy_buf buffer\000"
	.space	1
.LC43:
	.ascii	"<3>%s: Unknown command\000"
	.space	1
.LC44:
	.ascii	"<3>%s: Unknown control request %02x.%02x v%04x i%04"
	.ascii	"x l%d\012\000"
	.space	2
.LC45:
	.ascii	"<3>%s: audio response failed on err %d\012\000"
.LC46:
	.ascii	"<3>%s: STALL\012\000"
	.space	2
.LC47:
	.ascii	"<3>%s: %s: %s failed\012\000"
	.space	2
.LC48:
	.ascii	"<3>%s: %s is enabled in other device\012\000"
	.space	2
.LC49:
	.ascii	"<3>%s: Failed to alloc f_holder\012\000"
	.space	3
.LC50:
	.ascii	"<3>acc_complete_set_string, err %d\012\000"
.LC51:
	.ascii	"<3>unknown accessory string index %d\012\000"
	.space	2
.LC52:
	.ascii	"<6>acc_release\012\000"
.LC53:
	.ascii	"/home/ikke/Workspace/kernel_oneplus_onyx/drivers/us"
	.ascii	"b/gadget/f_accessory.c\000"
	.space	2
.LC54:
	.ascii	"<6>acc_open\012\000"
	.space	3
.LC55:
	.ascii	"<6>%s: Close rndis QC file\000"
	.space	1
.LC56:
	.ascii	"<6>mtp_release\012\000"
.LC57:
	.ascii	"<3>CCID notify ep error %d\012\000"
.LC58:
	.ascii	"<3>%s: ctrl resp queue empty\000"
	.space	3
.LC59:
	.ascii	"gps ep0 enqueue err %d\012\000"
.LC60:
	.ascii	"<3>gps notify ep error %d\012\000"
	.space	1
.LC61:
	.ascii	"<3>ctrl resp queue empty  req%02x.%02x v%04x i%04x "
	.ascii	"l%d\012\000"
.LC62:
	.ascii	"rmnet ep0 enqueue err %d\012\000"
	.space	2
.LC63:
	.ascii	"<3>rmnet notify ep error %d\012\000"
	.space	3
.LC64:
	.ascii	"<3>%s: Invalid notify_count=%lu to decrement\012\000"
	.space	2
.LC65:
	.ascii	"<3>%s: response queue error: %d\000"
.LC66:
	.ascii	"<6>%s: Close mbim file\000"
	.space	1
.LC67:
	.ascii	"<3>%s: port:%pK port#%d unable to open sdio ch:%s\012"
	.ascii	"\000"
	.space	1
.LC68:
	.ascii	"%d\012\000"
.LC69:
	.ascii	"CONFIGURED\000"
	.space	1
.LC70:
	.ascii	"DISCONNECTED\000"
	.space	3
.LC71:
	.ascii	"CONNECTED\000"
	.space	2
.LC72:
	.ascii	"%s\012\000"
.LC73:
	.ascii	"%s\000"
	.space	1
.LC74:
	.ascii	"%04x\012\000"
	.space	2
.LC75:
	.ascii	"%d %d\012\000"
	.space	1
.LC76:
	.ascii	"%02x:%02x:%02x:%02x:%02x:%02x\012\000"
	.space	1
.LC77:
	.ascii	"rmnet %s response error %d, %d/%d\012\000"
	.space	1
.LC78:
	.ascii	"rmnet_mux %s response error %d, %d/%d\012\000"
	.space	1
.LC79:
	.ascii	"%u\012\000"
.LC80:
	.ascii	", H%c=%u\000"
	.space	3
.LC81:
	.ascii	"/home/ikke/Workspace/kernel_oneplus_onyx/drivers/us"
	.ascii	"b/gadget/composite.c\000"
.LC82:
	.ascii	"/home/ikke/Workspace/kernel_oneplus_onyx/include/li"
	.ascii	"nux/netdevice.h\000"
	.space	1
.LC83:
	.ascii	"<6>netif_stop_queue() cannot be called before regis"
	.ascii	"ter_netdev()\012\000"
	.space	3
.LC84:
	.ascii	"gmidi_transmit: midi_alloc_ep_request failed\012\000"
	.space	2
.LC85:
	.ascii	"<3>%s: write error:%d\012\000"
	.space	1
.LC86:
	.ascii	"qmi resp empty  req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC87:
	.ascii	"<4>%s: port:%pK port#%d unexpected %s status %d\012"
	.ascii	"\000"
	.space	3
.LC88:
	.ascii	"<3>%s: invalid portno#%d\012\000"
	.space	2
.LC89:
	.ascii	"<3>%s: gser is null\012\000"
	.space	3
.LC90:
	.ascii	"<3>%s: port:%pK port#%d sdio not connected\012\000"
.LC91:
	.ascii	"<3>%s: invalid port: %d\012\000"
	.space	3
.LC92:
	.ascii	"smd_control_ch_opened: %lu\012smd_data_ch_opened: %"
	.ascii	"lu\012usb online : %d\012dpkts_from_modem: %lu\012d"
	.ascii	"pkts_to_host: %lu\012pending_dpkts_to_host: %lu\012"
	.ascii	"dpkts_from_host: %lu\012dpkts_to_modem: %lu\012pend"
	.ascii	"ing_dpkts_to_modem: %lu\012cpkts_from_modem: %lu\012"
	.ascii	"cpkts_to_host: %lu\012pending_cpkts_to_host: %lu\012"
	.ascii	"cpkts_from_host: %lu\012cpkts_to_modem: %lu\012pend"
	.ascii	"ing_cpkts_to_modem: %lu\012smd_read_avail_ctrl: %d\012"
	.ascii	"smd_write_avail_ctrl: %d\012smd_read_avail_data: %d"
	.ascii	"\012smd_write_avail_data: %d\012\000"
.LC93:
	.ascii	"-*-DATA-*-\012dpkts_tohost:%lu epInPool:%u tx_size:"
	.ascii	"%u drp_cnt:%lu\012dpkts_tomodem:%lu epOutPool:%u rx"
	.ascii	"_size:%u pending:%u\012-*-QMI-*-\012cpkts_tomodem:%"
	.ascii	"lu  qmi_req_q:%u cbits:%d\012cpkts_tolaptop:%lu qmi"
	.ascii	"_resp_q:%u notify_cnt:%d\012-*-MISC-*-\012data_ch_s"
	.ascii	"tatus: %lu ctrl_ch_status: %lu\012\000"
	.space	2
.LC94:
	.ascii	"nbytes_from_host: %lu\012\000"
	.space	1
.LC95:
	.ascii	"nbytes_to_tty: %lu\012\000"
.LC96:
	.ascii	"nbytes_with_usb_OUT_txr: %lu\012\000"
	.space	2
.LC97:
	.ascii	"nbytes_from_tty: %lu\012\000"
	.space	2
.LC98:
	.ascii	"nbytes_to_host: %lu\012\000"
	.space	3
.LC99:
	.ascii	"nbytes_with_usb_IN_txr: %lu\012\000"
	.space	3
.LC100:
	.ascii	"tty_flags: %lu\012\000"
.LC101:
	.ascii	"DTR_status: %d\012\000"
.LC102:
	.ascii	"###PORT:%d port:%pK###\012nbytes_tolaptop: %lu\012n"
	.ascii	"bytes_tomodem:  %lu\012cbits_to_modem:  %u\012cbits"
	.ascii	"_to_laptop: %u\012read_pool_len:   %lu\012read_queu"
	.ascii	"e_len:  %lu\012write_pool_len:  %lu\012n_read:     "
	.ascii	"     %u\012sdio_open:       %d\012sdio_probe:      "
	.ascii	"%d\012\000"
	.space	3
.LC103:
	.ascii	"###PORT:%d###\012nbytes_tolaptop: %lu\012nbytes_tom"
	.ascii	"odem:  %lu\012cbits_to_modem:  %u\012cbits_to_lapto"
	.ascii	"p: %u\012n_read: %u\012smd_read_avail: %d\012smd_wr"
	.ascii	"ite_avail: %d\012CH_OPENED: %d\012CH_READY: %d\012\000"
	.space	2
.LC104:
	.ascii	"#PORT:%d port:%pK data_ch:%pK#\012dpkts_to_usbhost:"
	.ascii	" %lu\012dpkts_to_modem:  %lu\012dpkts_pwith_bam: %u"
	.ascii	"\012to_usbhost_dcnt:  %u\012tomodem__dcnt:  %u\012r"
	.ascii	"x_flow_control_disable_count: %u\012rx_flow_control"
	.ascii	"_enable_count: %u\012rx_flow_control_triggered: %u\012"
	.ascii	"max_num_pkts_pending_with_bam: %u\012tx_buf_len:\011"
	.ascii	" %u\012rx_buf_len:\011 %u\012data_ch_open:   %d\012"
	.ascii	"data_ch_ready:  %d\012\000"
.LC105:
	.ascii	"HIGH\000"
	.space	3
.LC106:
	.ascii	"LOW\000"
.LC107:
	.ascii	"#PORT:%d port:%pK ctrl_ch:%pK#\012to_usbhost: %lu\012"
	.ascii	"to_modem:   %lu\012DTR:        %s\012ch_open:    %d"
	.ascii	"\012ch_ready:   %d\012read_avail: %d\012write_avail"
	.ascii	":%d\012\000"
	.space	1
.LC108:
	.ascii	"\012Name:        %s\012#PORT:%d port: %p\012to_usbh"
	.ascii	"ost:    %lu\012to_modem:      %lu\012cpkt_drp_cnt: "
	.ascii	" %lu\012DTR:           %s\012ch_open:       %d\012c"
	.ascii	"h_ready:      %d\012\000"
	.space	1
.LC109:
	.ascii	"\012Name:           %s\012#PORT:%d port#:   %pK\012"
	.ascii	"data_ch_open:\011   %d\012data_ch_ready:    %d\012\012"
	.ascii	"******UL INFO*****\012\012dpkts_to_modem:   %lu\012"
	.ascii	"tomodem_drp_cnt:  %u\012rx_buf_len:       %u\012tx "
	.ascii	"thld cnt       %u\012tx unthld cnt     %u\012TX_THR"
	.ascii	"OTTLED      %d\012\000"
.LC110:
	.ascii	"\012******DL INFO******\012\012dpkts_to_usbhost: %l"
	.ascii	"u\012tx_buf_len:\011   %u\012rx thld cnt\011   %u\012"
	.ascii	"rx unthld cnt\011   %u\012uthld pnd skbs    %u\012R"
	.ascii	"X_THROTTLED\011   %d\012\000"
	.space	3
.LC111:
	.ascii	"#PORT:%d port: %pK\012to_usbhost:    %lu\012to_mode"
	.ascii	"m:      %lu\012cpkt_drp_cnt:  %lu\012DTR:          "
	.ascii	" %s\012\000"
	.space	1
.LC112:
	.ascii	"\012Name:           %s\012#PORT:%d port#:   %pK\012"
	.ascii	"data_ch_open:\011   %d\012data_ch_ready:    %d\012d"
	.ascii	"ata_ch_connected: %d\012\012******UL INFO*****\012\012"
	.ascii	"dpkts_to_modem:   %lu\012tomodem_drp_cnt:  %u\012rx"
	.ascii	"_buf_len:       %u\012TX_THROTTLED      %d\012\000"
.LC113:
	.ascii	"\012******DL INFO******\012\012dpkts_to_usbhost: %l"
	.ascii	"u\012tx_buf_len:\011   %u\012RX_THROTTLED\011   %d\012"
	.ascii	"\000"
	.space	2
.LC114:
	.ascii	"---Name: %s---\012endpoints: %s, %s\012dpkts_tolapt"
	.ascii	"op: %lu\012dpkts_tomodem:  %lu\012pkts_tolaptop_pen"
	.ascii	"ding: %u\012\000"
.LC115:
	.ascii	"rmnet command error %d\012\000"
.LC116:
	.ascii	"rmnet control smd write failed\012\000"
.LC117:
	.ascii	"rmnet QMI pool is empty\012\000"
	.space	3
.LC118:
	.ascii	"RMNET %s response error %d, %d/%d\012\000"
	.space	1
.LC119:
	.ascii	"rmnet data smd write failed\012\000"
	.space	3
.LC120:
	.ascii	"rmnet SMD data write failed\012\000"
	.space	3
.LC121:
	.ascii	"<3>%s: smd_write failed err:%d\012\000"
.LC122:
	.ascii	"rmnet_mux SMD data write failed\012\000"
	.space	3
.LC123:
	.ascii	"rmnet data tx ep error %d\012\000"
	.space	1
.LC124:
	.ascii	"rmnet tx data enqueue err %d\012\000"
	.space	2
.LC125:
	.ascii	"rmnet QMI Tx buffers full\012\000"
	.space	1
.LC126:
	.ascii	"Unable to open control smd channel: %d\012\000"
.LC127:
	.ascii	"pdrv %s register failed %d\012\000"
.LC128:
	.ascii	"Unable to open data smd channel\012\000"
	.space	3
.LC129:
	.ascii	"<3>%s:smd read_avail failure:%d or channel closed c"
	.ascii	"h=%pK\000"
	.space	3
.LC130:
	.ascii	"<3>%s: SMD sending incorrect pkt\012\000"
	.space	2
.LC131:
	.ascii	"<3>%s: smd read failure %d\012\000"
.LC132:
	.ascii	"%s: response queue error\012\000"
	.space	2
.LC133:
	.ascii	"<3>ccid ep0 enqueue err %d\012\000"
.LC134:
	.ascii	"usb_rmnet_ctrl_smd\000"
	.space	1
.LC135:
	.ascii	"status\000"
	.space	1
.LC136:
	.ascii	"ghsic_ctrl_xport\000"
	.space	3
.LC137:
	.ascii	"ghsic_data_xport\000"
	.space	3
.LC138:
	.ascii	"timestamp\000"
	.space	2
.LC139:
	.ascii	"ghsuart_ctrl_xport\000"
	.space	1
.LC140:
	.ascii	"ghsuart_data_xport\000"
	.space	1
.LC141:
	.ascii	"usb_diag\000"
	.space	3
.LC142:
	.ascii	"<6>%s: sdio data ch not open\012\000"
	.space	2
.LC143:
	.ascii	"rmnet SDIO data write failed\012\000"
	.space	2
.LC144:
	.ascii	"<3>%s: usb epIn failed with %d\012\000"
.LC145:
	.ascii	"<3>%s: data tx ep error %d\012\000"
.LC146:
	.ascii	"rmnet_mux SDIO data write failed\012\000"
	.space	2
.LC147:
	.ascii	"<3>%s: rx queue failed\012\000"
.LC148:
	.ascii	"<3>%s: unable to open smd port:%s err:%d\012\000"
	.space	2
.LC149:
	.ascii	"Unable to open SDIO DATA channel\012\000"
	.space	2
.LC150:
	.ascii	"<3>%s: rx queue failed %d\012\000"
	.space	1
.LC151:
	.ascii	"<3>%s: %s response error %d, %d/%d\012\000"
.LC152:
	.ascii	"<3>%s: data rx enqueue err %d\012\000"
	.space	1
.LC153:
	.ascii	"<3>copying to user space failed\000"
.LC154:
	.ascii	"<3>wrong parameter\000"
	.space	1
.LC155:
	.ascii	"<6>%s: Received command %d\000"
	.space	1
.LC156:
	.ascii	"<3>%s: copying to user space failed\000"
.LC157:
	.ascii	"<6>%s: Sent max packets per xfer %d\000"
.LC158:
	.ascii	"<3>%s: Unsupported IOCTL\000"
	.space	3
.LC159:
	.ascii	"<6>%s: Sent NTB size %d\000"
.LC160:
	.ascii	"<6>%s: Sent NTB datagrams count %d\000"
	.space	1
.LC161:
	.ascii	"<3>%s: wrong parameter\000"
	.space	1
.LC162:
	.ascii	"<3>%s: cpkt size:%d > buf size:%d\012\000"
	.space	1
.LC163:
	.ascii	"<3>Buffer size is too big %d, should be at most %d\012"
	.ascii	"\000"
.LC164:
	.ascii	"<3>Previous reading is not finished yet\012\000"
	.space	3
.LC165:
	.ascii	"<3>cpkt size too big:%d > buf size:%d\012\000"
	.space	1
.LC166:
	.ascii	"<3>copy_to_user failed: err %d\012\000"
.LC167:
	.ascii	"<3>%s: zero length ctrl pkt\012\000"
	.space	3
.LC168:
	.ascii	"<3>%s: max_pkt_size:%d given_pkt_size:%d\012\000"
	.space	2
.LC169:
	.ascii	"<3>%s: copy_from_user failed err:%d\012\000"
	.space	3
.LC170:
	.ascii	"rmnet_mux notify ep enqueue error %d\012\000"
	.space	2
.LC171:
	.ascii	"<3>%s: cannot allocate rmnet_mux ctrl pkt\012\000"
	.space	1
.LC172:
	.ascii	"<3>Previous writing not finished yet\012\000"
	.space	2
.LC173:
	.ascii	"<3>failed to allocate ctrl pkt\012\000"
.LC174:
	.ascii	"<3>copy_from_user failed err:%d\012\000"
	.space	3
.LC175:
	.ascii	"<3>failed to send ctrl packet. error=%d\012\000"
	.space	3
.LC176:
	.ascii	"<3>send_cpkt_response callback is NULL\012\000"
.LC177:
	.ascii	"<3>ccid notify ep enqueue error %d\012\000"
.LC178:
	.ascii	"g_ether\000"
.LC179:
	.ascii	"29-May-2008\000"
.LC180:
	.ascii	"g_qc_ether\000"
	.space	1
.LC181:
	.ascii	"<3>usb_ep_queue failed ret: %d\012\000"
.LC182:
	.ascii	"/home/ikke/Workspace/kernel_oneplus_onyx/drivers/us"
	.ascii	"b/gadget/f_fs.c\000"
	.space	1
.LC183:
	.ascii	"<4>%s: port:%pK port#%d Unexpected Rx Status:%d\012"
	.ascii	"\000"
	.space	3
.LC184:
	.ascii	"<3>%s: smd write failed err:%d\012\000"
.LC185:
	.ascii	"<3>%s: usb ep out queue failedport:%pK, port#%d err"
	.ascii	":%d\012\000"
.LC186:
	.ascii	"%s,\000"
.LC187:
	.ascii	"bam_dmux_ch_8\000"
	.space	2
.LC188:
	.ascii	"<3>%s: BAM reset failed %d\012\000"
.LC189:
	.ascii	"<3>%s: usb_ep_enable failed eptype:IN ep:%pK\000"
	.space	3
.LC190:
	.ascii	"<3>%s: usb_ep_enable failed eptype:OUT ep:%pK\000"
	.space	2
.LC191:
	.ascii	"<3>%s: error enqueuing transfer, %d\012\000"
	.space	3
.LC192:
	.ascii	"<3>%s: %s: BAM reset failed %d\012\000"
.LC193:
	.ascii	"<3>Failed to allocate rmnet control device\012\000"
.LC194:
	.ascii	"&port->read_wq\000"
	.space	1
.LC195:
	.ascii	"<3>rmnet control driver failed to register\000"
	.space	1
.LC196:
	.ascii	"&dev->read_wq\000"
	.space	2
.LC197:
	.ascii	"&dev->write_wq\000"
	.space	1
.LC198:
	.ascii	"<3>USB accessory gadget driver failed to initialize"
	.ascii	"\012\000"
	.space	3
.LC199:
	.ascii	"<6>%s: initialize rndis QC instance\012\000"
	.space	3
.LC200:
	.ascii	"<3>%s: rndis QC driver failed to register\000"
	.space	2
.LC201:
	.ascii	"&dev->intr_wq\000"
	.space	2
.LC202:
	.ascii	"f_mtp\000"
	.space	2
.LC203:
	.ascii	"<3>mtp gadget driver failed to initialize\012\000"
	.space	1
.LC204:
	.ascii	"<3>adb gadget driver failed to initialize\012\000"
	.space	1
.LC205:
	.ascii	"k_rmnet_mux_work\000"
	.space	3
.LC206:
	.ascii	"&smd_dev->smd_data.wait\000"
.LC207:
	.ascii	"&ctrl_dev->tx_wait_q\000"
	.space	3
.LC208:
	.ascii	"<3>%s: failed to register misc device\012\000"
	.space	1
.LC209:
	.ascii	"usb_rmnet_mux\000"
	.space	2
.LC210:
	.ascii	"<6>%s: rndis QC cleanup\000"
.LC211:
	.ascii	"<6>%s: Enter\000"
	.space	3
.LC212:
	.ascii	"<3>invalid rndis pkt: skblen:%u hdr_len:%u\000"
	.space	1
.LC213:
	.ascii	"<3>invalid rndis message: %d/%d/%d/%d, len:%d\012\000"
	.space	1
.LC214:
	.ascii	"<3>%s:skb clone failed\012\000"
.LC215:
	.ascii	"<3>%s: Failed to queue %s req: err - %d\012\000"
	.space	3
.LC216:
	.ascii	"<3>%s: Failed completion: status %d\000"
.LC217:
	.ascii	"<3>acc_complete_set_hid_report_desc, err %d\012\000"
	.space	3
.LC218:
	.ascii	"unable to open backing file: %s\012\000"
	.space	3
.LC219:
	.ascii	"invalid file type: %s\012\000"
	.space	1
.LC220:
	.ascii	"file not readable: %s\012\000"
	.space	1
.LC221:
	.ascii	"unable to find file size: %s\012\000"
	.space	2
.LC222:
	.ascii	"file too big: %s\012\000"
	.space	2
.LC223:
	.ascii	"using only first %d blocks\012\000"
.LC224:
	.ascii	"file too small: %s\012\000"
.LC225:
	.ascii	"Wrong NTH SIGN, skblen %d\012\000"
	.space	1
.LC226:
	.ascii	"<6>\000"
.LC227:
	.ascii	"HEAD:\000"
	.space	2
.LC228:
	.ascii	"Wrong NTB headersize\012\000"
	.space	2
.LC229:
	.ascii	"OUT size exceeded\012\000"
	.space	1
.LC230:
	.ascii	"Bad index: %x\012\000"
	.space	1
.LC231:
	.ascii	"Wrong NDP SIGN\012\000"
.LC232:
	.ascii	"Bad NDP length: %x\012\000"
.LC233:
	.ascii	"Bad dgram length: %x\012\000"
	.space	2
.LC234:
	.ascii	"Bad CRC\012\000"
	.space	3
.LC235:
	.ascii	"%d\000"
	.space	1
.LC236:
	.ascii	"%28s\000"
	.space	3
.LC237:
	.ascii	"%04x\000"
	.space	3
.LC238:
	.ascii	"%255s\000"
	.space	2
.LC239:
	.ascii	":\000"
	.space	2
.LC240:
	.ascii	"<3>%s: %s(): Failed to alloc memory for android con"
	.ascii	"f\012\000"
	.space	2
.LC241:
	.ascii	",\000"
	.space	2
.LC242:
	.ascii	"ffs\000"
.LC243:
	.ascii	"<3>%s: android_usb: Cannot enable ffs (%d)\000"
	.space	1
.LC244:
	.ascii	"<3>%s: android_usb: Cannot enable '%s' (%d)\000"
.LC245:
	.ascii	"ACCESSORY=START\000"
.LC246:
	.ascii	"USB_STATE=DISCONNECTED\000"
	.space	1
.LC247:
	.ascii	"USB_STATE=CONNECTED\000"
.LC248:
	.ascii	"USB_STATE=CONFIGURED\000"
	.space	3
.LC249:
	.ascii	"USB_STATE=SUSPENDED\000"
.LC250:
	.ascii	"USB_STATE=RESUMED\000"
	.space	2
.LC251:
	.ascii	"low\000"
.LC252:
	.ascii	"<6>%s: %s: sent missed DISCONNECT event\012\000"
	.space	3
.LC253:
	.ascii	"<6>%s: %s: sent uevent %s\012\000"
	.space	1
.LC254:
	.ascii	"<6>%s: %s: did not send uevent (%d %d %pK)\012\000"
.LC255:
	.ascii	"<3>acc_complete_send_hid_event, err %d\012\000"
.LC256:
	.ascii	"<3>can't add hid device: %d\012\000"
	.space	3
.LC257:
	.ascii	"<3>can't add HID device %pK\012\000"
	.space	3
.LC258:
	.ascii	"<6>unloading\012\000"
	.space	2
.LC259:
	.ascii	"<6>file system registered\012\000"
	.space	1
.LC260:
	.ascii	"<3>failed registering file system (%d)\012\000"
.LC261:
	.ascii	"pxa25x_udc\000"
	.space	1
.LC262:
	.ascii	"<3>Physical address or size of buf is NULL\000"
	.space	1
.LC263:
	.ascii	"<3>%s on a NULL device\012\000"
.LC264:
	.ascii	"<3>%s: FAILED: d_port == NULL\000"
	.space	2
.LC265:
	.ascii	"<3>%s: FAILED: d_port->cdev == NULL\000"
.LC266:
	.ascii	"<3>%s: FAILED: d_port->cdev->gadget == NULL\000"
.LC267:
	.ascii	"<6>%s: Open rndis QC driver\012\000"
	.space	3
.LC268:
	.ascii	"<3>%s: rndis_qc_dev not created yet\012\000"
	.space	3
.LC269:
	.ascii	"<3>%s: Already opened\012\000"
	.space	1
.LC270:
	.ascii	"<6>%s: rndis QC file opened\012\000"
	.space	3
.LC271:
	.ascii	"<6>mtp_open\012\000"
	.space	3
.LC272:
	.ascii	"<3>%s: Invalid grmnet:%pK\012\000"
	.space	1
.LC273:
	.ascii	"<3>%s: gps notify ep enqueue error %d\012\000"
	.space	1
.LC274:
	.ascii	"<3>%s: dev is null\012\000"
.LC275:
	.ascii	"<3>%s: rmnet notify ep enqueue error %d\012\000"
	.space	3
.LC276:
	.ascii	"<3>%s: rmnet dev is null\012\000"
	.space	2
.LC277:
	.ascii	"<6>%s: Open mbim driver\012\000"
	.space	3
.LC278:
	.ascii	"<3>%s: mbim_dev not created yet\012\000"
	.space	3
.LC279:
	.ascii	"<3>%s: USB cable not connected\012\000"
.LC280:
	.ascii	"<6>%s: Exit, mbim file opened\012\000"
	.space	1
.LC281:
	.ascii	"<6>%s: Lock mbim_dev->open_excl for open\012\000"
	.space	2
.LC282:
	.ascii	"<3>%s: ctrl bridge open failed :%d\012\000"
.LC283:
	.ascii	"uether\000"
	.space	1
.LC284:
	.ascii	"<3>%s: %s: Unable to create workqueue: uether\012\000"
	.space	1
.LC285:
	.ascii	"<3>%s: grmnet is null\012\000"
	.space	1
.LC286:
	.ascii	"<3>%s: %s(): Failed to register androidplatform dri"
	.ascii	"ver\012\000"
.LC287:
	.ascii	"<3>%s: usb epIn failed\012\000"
.LC288:
	.ascii	"<6>%s: name:%s is not found\012\000"
	.space	3
.LC289:
	.ascii	"<3>%s: usb_bam_disconnect_ipa failed: err:%d\012\000"
	.space	2
.LC290:
	.ascii	"<3>%s: unable open bridge ch:%d err:%d\012\000"
.LC291:
	.ascii	"<3>%s: smux close timedout\012\000"
.LC292:
	.ascii	"<3> %s smux_open failed\012\000"
	.space	3
.LC293:
	.ascii	"<3>%s: unable to open smux ch:%d err:%d\012\000"
	.space	3
.LC294:
	.ascii	"\000"
	.space	3
.LC295:
	.ascii	"<6>%s: initialize %d instances\012\000"
.LC296:
	.ascii	"<3>%s: Failed to allocate mbim dev\012\000"
.LC297:
	.ascii	"<3>%s: mbim driver failed to register\000"
	.space	2
.LC298:
	.ascii	"<6>%s: Initialized %d ports\012\000"
	.space	3
.LC299:
	.ascii	"<3>%s: Failed\000"
	.space	2
.LC300:
	.ascii	"<4>%s: query unknown OID 0x%08X\012\000"
	.space	3
.LC301:
	.ascii	"<3>%s: ccid_ctrl_device_init failed, err:%d\012\000"
	.space	3
.LC302:
	.ascii	"<3>%s: ccid_bulk_device_init failed, err:%d\012\000"
	.space	3
.LC303:
	.ascii	"<3>ccid gadget driver failed to initialize\012\000"
.LC304:
	.ascii	"&bulk_dev->read_wq\000"
	.space	1
.LC305:
	.ascii	"&bulk_dev->write_wq\000"
.LC306:
	.ascii	"acm ttyGS%d can't notify serial state, %d\012\000"
	.space	1
.LC307:
	.ascii	"gser ttyGS%d can't notify serial state, %d\012\000"
.LC308:
	.ascii	"<3>'=' missing in %s\012\000"
	.space	2
.LC309:
	.ascii	"<3>%s: invalid value: %s\012\000"
	.space	2
.LC310:
	.ascii	"rmode\000"
	.space	2
.LC311:
	.ascii	"fmode\000"
	.space	2
.LC312:
	.ascii	"mode\000"
	.space	3
.LC313:
	.ascii	"uid\000"
.LC314:
	.ascii	"gid\000"
.LC315:
	.ascii	"<3>%s: invalid option\012\000"
	.space	1
.LC316:
	.ascii	"<3>%s: Invalid grmnet/buf, grmnet:%pK buf:%pK\012\000"
	.space	1
.LC317:
	.ascii	"<3>%s: Unable to allocate ctrl pkt\012\000"
.LC318:
	.ascii	"unable to allocate memory for QMI req\012\000"
	.space	1
.LC319:
	.ascii	"<3>%s: Failed to enable capture ep\000"
	.space	1
.LC320:
	.ascii	"<3>%s: request allocation failed\012\000"
	.space	2
.LC321:
	.ascii	"<3>%s: request buffer allocation failed\012\000"
	.space	3
.LC322:
	.ascii	"<3>%s: Failed to queue %s req: err %d\012\000"
	.space	1
.LC323:
	.ascii	"<3>%s: Failed to enable playback ep\000"
.LC324:
	.ascii	"<3>%s: Failed to queue %s queue req: err %d\012\000"
	.space	3
.LC325:
	.ascii	"<3>%s: Schedule playback_work\000"
	.space	2
.LC326:
	.ascii	"<3>%s: playback_buf is empty. Stop.\000"
.LC327:
	.ascii	"<3>%s: Interface %d. Do nothing. Return %d\012\000"
.LC328:
	.ascii	"dwc3-gadget\000"
.LC329:
	.ascii	"<3>%s:Unable to close smux channel: %d\012\000"
.LC330:
	.ascii	"<6>%s: ESHUTDOWN/ECONNRESET, connection gone\000"
	.space	3
.LC331:
	.ascii	"<3>%s: Unknown event %02x --> %d\012\000"
	.space	2
.LC332:
	.ascii	"<3>%s: Pending notifications in MBIM_NOTIFY_NONE\012"
	.ascii	"\000"
	.space	2
.LC333:
	.ascii	"<3>%s: Queue notify request failed, err: %d\000"
.LC334:
	.ascii	"<3>%s: usb_ep_queue failed, err: %d\000"
.LC335:
	.ascii	"&ffs->mutex\000"
.LC336:
	.ascii	"&ffs->ev.waitq\000"
	.space	1
.LC337:
	.ascii	"&x->wait\000"
	.space	3
.LC338:
	.ascii	"ep0\000"
.LC339:
	.ascii	"/home/ikke/Workspace/kernel_oneplus_onyx/drivers/us"
	.ascii	"b/gadget/u_serial.c\000"
	.space	1
.LC340:
	.ascii	"<3>%s: rmnet ctrl file handler %pK is not open\000"
	.space	1
.LC341:
	.ascii	"<6>%s: usb cable is not connected\012\000"
	.space	1
.LC342:
	.ascii	"<3>%s: w_length > 0: %d\000"
.LC343:
	.ascii	"<3>%s: ctrl resp queue empty\012\000"
	.space	2
.LC344:
	.ascii	"<3>%s: wrong NTB length %d\000"
	.space	1
.LC345:
	.ascii	"<3>%s: invalid control req: %02x.%02x v%04x i%04x l"
	.ascii	"%d\012\000"
	.space	1
.LC346:
	.ascii	"<3>%s: queueing req failed: %02x.%02x, err %d\012\000"
	.space	1
.LC347:
	.ascii	"<3>%s: ctrl req err %d: %02x.%02x v%04x i%04x l%d\012"
	.ascii	"\000"
	.space	1
.LC348:
	.ascii	"rmnet_mux data tx ep error %d\012\000"
	.space	1
.LC349:
	.ascii	"RMNET_MUX %s response error %d, %d/%d\012\000"
	.space	1
.LC350:
	.ascii	"rmnet_mux data smd write failed\012\000"
	.space	3
.LC351:
	.ascii	"delayed status mismatch..resetting\012\000"
.LC352:
	.ascii	"<3>%s: USB not connected\012\000"
	.space	2
.LC353:
	.ascii	"<6>%s: usb rmnet sdio channels are open retry_cnt:%"
	.ascii	"d\012\000"
	.space	2
.LC354:
	.ascii	"Unable to open control SDIO channel\012\000"
	.space	3
.LC355:
	.ascii	"Unable to open DATA SDIO channel\012\000"
	.space	2
.LC356:
	.ascii	"<3>%s: Received NULL mbim pointer\012\000"
	.space	1
.LC357:
	.ascii	"<3>%s: Buffer size is too big %d, should be at most"
	.ascii	" %d\012\000"
.LC358:
	.ascii	"<3>%s: Previous reading is not finished yet\012\000"
	.space	3
.LC359:
	.ascii	"<3>%s: USB cable not connected. Wait.\012\000"
	.space	1
.LC360:
	.ascii	"<3>%s: cpkt size too big:%d > buf size:%d\012\000"
	.space	1
.LC361:
	.ascii	"<3>%s: copy_to_user failed: err %d\012\000"
.LC362:
	.ascii	"<3>%s: Waiting failed\012\000"
	.space	1
.LC363:
	.ascii	"common->fsg is NULL in %s at %u\012\000"
	.space	3
.LC364:
	.ascii	"/home/ikke/Workspace/kernel_oneplus_onyx/drivers/us"
	.ascii	"b/gadget/f_mass_storage.c\000"
	.space	3
.LC365:
	.ascii	"error in submission: %s --> %d\012\000"
.LC366:
	.ascii	"rmnet_mux data rx enqueue err %d\012\000"
	.space	2
.LC367:
	.ascii	"<3>%s: usb cable is not connected\012\000"
	.space	1
.LC368:
	.ascii	"<3>%s: given_xport:%s cur_xport:%s doing nothing\012"
	.ascii	"\000"
	.space	2
.LC369:
	.ascii	"<3>%s: undefined transport\012\000"
.LC370:
	.ascii	"<3>%s: usb_bam_connect (src) failed: err:%d\012\000"
	.space	3
.LC371:
	.ascii	"<3>%s: usb_bam_connect (dst) failed: err:%d\012\000"
	.space	3
.LC372:
	.ascii	"<3>%s:teth_bridge_init() failed\012\000"
	.space	3
.LC373:
	.ascii	"<3>%s: out of memory\012\000"
	.space	2
.LC374:
	.ascii	"<3>%s: usb_bam_client_ready failed: err:%d\012\000"
.LC375:
	.ascii	"write %u @ %llu beyond end %llu\012\000"
	.space	3
.LC376:
	.ascii	"dpkts_tomsm:  %lu\012dpkts_tomdm: %lu\012cpkts_tomd"
	.ascii	"m: %lu\012dpkts_tolaptop: %lu\012cpkts_tolaptop:  %"
	.ascii	"lu\012cbits_to_modem: %lu\012tx skb size:     %u\012"
	.ascii	"rx_skb_size:     %u\012dpkts_pending_at_dmux: %u\012"
	.ascii	"tx drp cnt: %lu\012cpkts_drp_cnt: %lu\012cpkt_tx_ql"
	.ascii	"en: %lu\012cpkt_rx_qlen_to_modem: %lu\012xport: %s\012"
	.ascii	"ctr_ch_opened:\011%d\012\000"
.LC377:
	.ascii	"<3>%s: max_buffer_size:%d given_pkt_size:%d\012\000"
	.space	3
.LC378:
	.ascii	"<3> %s dev->error\012\000"
	.space	1
.LC379:
	.ascii	"<3>%s: usb alloc request failed\012\000"
	.space	3
.LC380:
	.ascii	"<3>%s: request buf allocation failed\012\000"
	.space	2
.LC381:
	.ascii	"<3>%s: unable to allocate IN requests\012\000"
	.space	1
.LC382:
	.ascii	"<3>%s: unable to allocate out requests\012\000"
.LC383:
	.ascii	"<3>%s: unable open bam ch:%d err:%d\012\000"
	.space	3
.LC384:
	.ascii	"<3>%s: rx req allocation failed\012\000"
	.space	3
.LC385:
	.ascii	"<3>%s: tx req allocation failed\012\000"
	.space	3
.LC386:
	.ascii	"lun%d\000"
	.space	2
.LC387:
	.ascii	"Linux\000"
	.space	2
.LC388:
	.ascii	"File-CD Gadget\000"
	.space	1
.LC389:
	.ascii	"File-Stor Gadget\000"
	.space	3
.LC390:
	.ascii	"file-storage\000"
	.space	3
.LC391:
	.ascii	"(no medium)\000"
.LC392:
	.ascii	"(error)\000"
.LC393:
	.ascii	"removable \000"
	.space	1
.LC394:
	.ascii	"read only \000"
	.space	1
.LC395:
	.ascii	"CD-ROM \000"
.LC396:
	.ascii	"lun0\000"
	.space	3
.LC397:
	.ascii	"lun1\000"
	.space	3
.LC398:
	.ascii	"uicc%d\000"
	.space	1
.LC399:
	.ascii	"invalid number of LUNs: %u\012\000"
.LC400:
	.ascii	"&common->filesem\000"
	.space	3
.LC401:
	.ascii	"failed to register LUN%d: %d\012\000"
	.space	2
.LC402:
	.ascii	"no file given for LUN%d\012\000"
	.space	3
.LC403:
	.ascii	"net2280\000"
.LC404:
	.ascii	"dummy_udc\000"
	.space	2
.LC405:
	.ascii	"goku_udc\000"
	.space	3
.LC406:
	.ascii	"omap_udc\000"
	.space	3
.LC407:
	.ascii	"pxa27x_udc\000"
	.space	1
.LC408:
	.ascii	"s3c2410_udc\000"
.LC409:
	.ascii	"at91_udc\000"
	.space	3
.LC410:
	.ascii	"imx_udc\000"
.LC411:
	.ascii	"musb-hdrc\000"
	.space	2
.LC412:
	.ascii	"atmel_usba_udc\000"
	.space	1
.LC413:
	.ascii	"fsl-usb2-udc\000"
	.space	3
.LC414:
	.ascii	"amd5536udc\000"
	.space	1
.LC415:
	.ascii	"m66592_udc\000"
	.space	1
.LC416:
	.ascii	"fsl_qe_udc\000"
	.space	1
.LC417:
	.ascii	"ci13xxx_pci\000"
.LC418:
	.ascii	"langwell_udc\000"
	.space	3
.LC419:
	.ascii	"r8a66597_udc\000"
	.space	3
.LC420:
	.ascii	"s3c-hsotg\000"
	.space	2
.LC421:
	.ascii	"pch_udc\000"
.LC422:
	.ascii	"ci13xxx_msm\000"
.LC423:
	.ascii	"renesas_usbhs_udc\000"
	.space	2
.LC424:
	.ascii	"s3c-hsudc\000"
	.space	2
.LC425:
	.ascii	"net2272\000"
.LC426:
	.ascii	"msm72k_udc\000"
	.space	1
.LC427:
	.ascii	"ci13xxx_msm_hsic\000"
	.space	3
.LC428:
	.ascii	"%-8s%-16s%04x\000"
	.space	2
.LC429:
	.ascii	"&common->fsg_wait\000"
	.space	2
.LC430:
	.ascii	"Mass Storage Function, version: 2009/09/11\012\000"
.LC431:
	.ascii	"Number of LUNs=%d\012\000"
	.space	1
.LC432:
	.ascii	"LUN: %s%s%sfile: %s\012\000"
	.space	3
.LC433:
	.ascii	"controller '%s' not recognized\012\000"
.LC434:
	.ascii	"<3>%s: mbim dev is null\012\000"
	.space	3
.LC435:
	.ascii	"<3>%s: mbim command error %d\012\000"
	.space	2
.LC436:
	.ascii	"<3>given pkt size too big:%d > max_pkt_size:%d\012\000"
.LC437:
	.ascii	"<3>rmnet file handler %pK is not open\000"
	.space	2
.LC438:
	.ascii	"rmnet_mux command error %d\012\000"
.LC439:
	.ascii	"<3>%s: ctrl pkts dropped: cpkts_drp_cnt: %lu\012\000"
	.space	2
.LC440:
	.ascii	"unable to allocate memory for ctrl req\012\000"
.LC441:
	.ascii	"<3>%s bulk_dev_error\012\000"
	.space	2
.LC442:
	.ascii	"<3>%s usb ep queue failed\012\000"
	.space	1
.LC443:
	.ascii	"can't allocate request for %s\012\000"
	.space	1
.LC444:
	.ascii	"<3>%s: kevent %d may have been dropped\012\000"
.LC445:
	.ascii	"%s setup response queue error\012\000"
	.space	1
.LC446:
	.ascii	"kill %s:  resubmit %d bytes --> %d\012\000"
.LC447:
	.ascii	"<3>%s: given pkt size too big:%d > max_pkt_size:%d\012"
	.ascii	"\000"
.LC448:
	.ascii	"<3>%s: Previous writing not finished yet\012\000"
	.space	2
.LC449:
	.ascii	"<3>%s: dev:%pK is not connected\012\000"
	.space	3
.LC450:
	.ascii	"<3>%s: dev:%pK state=%d, recover!!\012\000"
.LC451:
	.ascii	"<3>%s: dev:%pK is not online\012\000"
	.space	2
.LC452:
	.ascii	"<3>%s: dev:%pK req is NULL\012\000"
.LC453:
	.ascii	"<3>%s: dev:%pK req->buf is NULL\012\000"
	.space	3
.LC454:
	.ascii	"<3>%s: ep enqueue error %d\012\000"
.LC455:
	.ascii	"<6>%s: setting notify count to zero\012\000"
	.space	3
.LC456:
	.ascii	"%s config #%d: %s\012\000"
	.space	1
.LC457:
	.ascii	"<3>%s(): No SS desc for function:%s\012\000"
	.space	3
.LC458:
	.ascii	"unconfigured\000"
	.space	3
.LC459:
	.ascii	"func_suspend() returned error %d\012\000"
	.space	2
.LC460:
	.ascii	"%s: Delayed status not supported for w_length != 0\000"
	.space	1
.LC461:
	.ascii	"/home/ikke/Workspace/kernel_oneplus_onyx/include/li"
	.ascii	"nux/kref.h\000"
	.space	2
.LC462:
	.ascii	"ep-e\000"
	.space	3
.LC463:
	.ascii	"ep-f\000"
	.space	3
.LC464:
	.ascii	"ep3-bulk\000"
	.space	3
.LC465:
	.ascii	"ep2-bulk\000"
	.space	3
.LC466:
	.ascii	"ep0 bMaxBurst must be 0\012\000"
	.space	3
.LC467:
	.ascii	"can't enable %s, result %d\012\000"
.LC468:
	.ascii	"config_ep_by_speed failed for ep %s, result %d\012\000"
.LC469:
	.ascii	"config_ep_by_speed failes for ep %s, result %d\012\000"
.LC470:
	.ascii	"<3>%s: unable to allocate memory for notify ep\012\000"
.LC471:
	.ascii	"config_ep fail ep %s, result %d\012\000"
	.space	3
.LC472:
	.ascii	"failedto enable ep%s, result %d\012\000"
	.space	3
.LC473:
	.ascii	"config_ep_by_speed FAILED!\012\000"
.LC474:
	.ascii	"Enable IN endpoint FAILED!\012\000"
.LC475:
	.ascii	"failed to enable ep %s, result %d\012\000"
	.space	1
.LC476:
	.ascii	"<3>%s: unable to allocate memory for notify req\012"
	.ascii	"\000"
	.space	3
.LC477:
	.ascii	"<3>%s: unable to allocate memory for out req\012\000"
	.space	2
.LC478:
	.ascii	"<3>%s: unable to allocate memory for in req\012\000"
	.space	3
.LC479:
	.ascii	"<3>%s: config_ep_by_speed failed for ep#%s, err#%d\012"
	.ascii	"\000"
.LC480:
	.ascii	"<3>%s: usb ep#%s enable failed, err#%d\012\000"
.LC481:
	.ascii	"<3>qdss_st_alt: qdss supportes HS or SS only\012\000"
	.space	2
.LC482:
	.ascii	"<3>qdss_set_alt failed\012\000"
.LC483:
	.ascii	"can't configure %s: %d\012\000"
.LC484:
	.ascii	"can't start %s: %d\012\000"
.LC485:
	.ascii	"%s queue req: %d\012\000"
	.space	2
.LC486:
	.ascii	"charging\000"
	.space	3
.LC487:
	.ascii	"ccid\000"
	.space	3
.LC488:
	.ascii	"adb\000"
.LC489:
	.ascii	"rmnet_smd_sdio\000"
	.space	1
.LC490:
	.ascii	"<3>%s: %s: can't bind, err %d\012\000"
	.space	1
.LC491:
	.ascii	"dual\000"
	.space	3
.LC492:
	.ascii	"full\000"
	.space	3
.LC493:
	.ascii	"<3>%s: usb epin autoconfig failed\012\000"
	.space	1
.LC494:
	.ascii	"<6>%s: usb epin autoconfig succeeded\012\000"
	.space	2
.LC495:
	.ascii	"<3>%s: usb epout autoconfig failed\012\000"
.LC496:
	.ascii	"<6>%s: usb epout autoconfig succeeded\012\000"
	.space	1
.LC497:
	.ascii	"<3>%s: usb notify ep autoconfig failed\012\000"
.LC498:
	.ascii	"<6>%s: usb notify ep autoconfig succeeded\012\000"
	.space	1
.LC499:
	.ascii	"<6>%s: allocated notify ep request & request buffer"
	.ascii	"\012\000"
	.space	3
.LC500:
	.ascii	"<6>%s: mbim(%d): %s speed IN/%s OUT/%s NOTIFY/%s\012"
	.ascii	"\000"
	.space	2
.LC501:
	.ascii	"<3>%s: %s failed to bind, err %d\012\000"
	.space	2
.LC502:
	.ascii	"<6>%s: failed to allocate notify request\012\000"
	.space	2
.LC503:
	.ascii	"%s: can't bind, err %d\012\000"
.LC504:
	.ascii	"<3>%s: %s: failed to allocate desc interface\000"
	.space	3
.LC505:
	.ascii	"<3>%s: %s: failed to allocate alt interface\000"
.LC506:
	.ascii	"<3>%s: %s: failed to autoconfig in endpoint\000"
.LC507:
	.ascii	"<3>%s: %s: failed to autoconfig out endpoint\000"
	.space	3
.LC508:
	.ascii	"charger_bind FAILED\012\000"
	.space	3
.LC509:
	.ascii	"android\000"
.LC510:
	.ascii	"<3>acc_bind() could not allocate requests\012\000"
	.space	1
.LC511:
	.ascii	"unable to autoconfigure all endpoints\012\000"
	.space	1
.LC512:
	.ascii	"<3>mtp_bind() could not allocate requests\012\000"
	.space	1
.LC513:
	.ascii	"<3>%s: unable to allocate ifc id, err:%d\000"
	.space	3
.LC514:
	.ascii	"<3>%s: usb epnotify autoconfig failed\012\000"
	.space	1
.LC515:
	.ascii	"<3>qdss_bind: full-speed is not supported\012\000"
	.space	1
.LC516:
	.ascii	"<3>interface allocation error\012\000"
	.space	1
.LC517:
	.ascii	"<3>ep_autoconfig error\012\000"
.LC518:
	.ascii	"<3>usb_copy_descriptors error\012\000"
	.space	1
.LC519:
	.ascii	"/home/ikke/Workspace/kernel_oneplus_onyx/drivers/us"
	.ascii	"b/gadget/android.c\000"
	.space	2
.LC520:
	.ascii	"<3>%s: %s: usb_add_config failed : err: %d\012\000"
.LC521:
	.ascii	"<6>adb_open\012\000"
	.space	3
.LC522:
	.ascii	"<7>usb: %s cdev->config=%pK, config=%pK\012\000"
	.space	3
.LC523:
	.ascii	"enabled\000"
.LC524:
	.ascii	"disabled\000"
	.space	3
.LC525:
	.ascii	"audio_source\000"
	.space	3
.LC526:
	.ascii	"<3>%s: %s: android_enable failed\012\000"
	.space	2
.LC527:
	.ascii	"<3>%s: android_usb: already %s\012\000"
.LC528:
	.ascii	"<6>adb_release\012\000"
.LC529:
	.ascii	"<3>%s: adb_closed_callback: data->dev is NULL\000"
	.space	2
.LC530:
	.ascii	"<3>%s: adb_closed_callback: config->dev is NULL\000"
.LC531:
	.ascii	"<6>%s(): freeing\012\000"
	.space	2
.LC532:
	.ascii	"Function FS Gadget\000"
	.space	1
.LC533:
	.ascii	"f_%s\000"
	.space	3
.LC534:
	.ascii	"<3>%s: %s: Failed to create dev %s\000"
	.space	1
.LC535:
	.ascii	"<3>%s: %s: Failed to init %s\000"
	.space	3
.LC536:
	.ascii	"<3>%s: %s: Failed to create function %s attributes\000"
	.space	1
.LC537:
	.ascii	"Android\000"
.LC538:
	.ascii	"0123456789ABCDEF\000"
	.space	3
.LC539:
	.ascii	"<4>%s: %s: controller '%s' not recognized\012\000"
	.space	1
.LC540:
	.ascii	"<6>acc_bind_config\012\000"
.LC541:
	.ascii	"accessory\000"
	.space	2
.LC542:
	.ascii	"Mass Storage Function\000"
	.space	2
.LC543:
	.ascii	"<6>mtp_bind_config\012\000"
.LC544:
	.ascii	"mtp\000"
.LC545:
	.ascii	"qdss\000"
	.space	3
.LC546:
	.ascii	"<3>qdss_bind_config: allocating channel failed\012\000"
.LC547:
	.ascii	"<3>qdss usb_add_function failed\012\000"
	.space	3
.LC548:
	.ascii	"<3>%s: qdss: Cannot open channel qdss\000"
	.space	2
.LC549:
	.ascii	"%s %s with %s\000"
	.space	2
.LC550:
	.ascii	"failed to override string ID\012\000"
	.space	2
.LC551:
	.ascii	"userspace failed to provide iSerialNumber\012\000"
	.space	1
.LC552:
	.ascii	"%s ready\012\000"
	.space	2
.LC553:
	.ascii	"<6>read descriptors\012\000"
	.space	3
.LC554:
	.ascii	"<6>read strings\012\000"
	.space	3
.LC555:
	.ascii	"&epfile->mutex\000"
	.space	1
.LC556:
	.ascii	"&epfile->wait\000"
	.space	2
.LC557:
	.ascii	"ep%u\000"
	.space	3
.LC558:
	.ascii	"composite\000"
	.space	2
.LC559:
	.ascii	"<3>%s: unable to allocate platform data\012\000"
	.space	3
.LC560:
	.ascii	"qcom,android-usb-swfi-latency\000"
	.space	2
.LC561:
	.ascii	"qcom,android-usb-cdrom\000"
	.space	1
.LC562:
	.ascii	"qcom,android-usb-internal-ums\000"
	.space	2
.LC563:
	.ascii	"qcom,streaming-func\000"
.LC564:
	.ascii	"<3>%s: Invalid number of functions used.\012\000"
	.space	2
.LC565:
	.ascii	"qcom,android-usb-uicc-nluns\000"
.LC566:
	.ascii	"android_usb\000"
.LC567:
	.ascii	"<3>%s: %s(): Failed to alloc memory for android_dev"
	.ascii	"\012\000"
	.space	3
.LC568:
	.ascii	"&android_dev->mutex\000"
.LC569:
	.ascii	"ioremap failed\012\000"
.LC570:
	.ascii	"android%d\000"
	.space	2
.LC571:
	.ascii	"<3>%s: %s(): android_create_device failed\012\000"
	.space	1
.LC572:
	.ascii	"<3>%s: %s(): Failed to register android composite d"
	.ascii	"river\012\000"
	.space	2
.LC573:
	.ascii	"high\000"
	.space	3
.LC574:
	.ascii	"%s: Unexpected call\012\000"
	.space	3
.LC575:
	.ascii	"usb_ep_set_wedge -> %d\012\000"
.LC576:
	.ascii	"usb_ep_set_halt -> %d\012\000"
	.space	1
.LC577:
	.ascii	"INQUIRY\000"
.LC578:
	.ascii	"MODE SELECT(6)\000"
	.space	1
.LC579:
	.ascii	"MODE SELECT(10)\000"
.LC580:
	.ascii	"MODE SENSE(6)\000"
	.space	2
.LC581:
	.ascii	"MODE SENSE(10)\000"
	.space	1
.LC582:
	.ascii	"PREVENT-ALLOW MEDIUM REMOVAL\000"
	.space	3
.LC583:
	.ascii	"READ(6)\000"
.LC584:
	.ascii	"READ(10)\000"
	.space	3
.LC585:
	.ascii	"READ(12)\000"
	.space	3
.LC586:
	.ascii	"READ CAPACITY\000"
	.space	2
.LC587:
	.ascii	"READ HEADER\000"
.LC588:
	.ascii	"READ TOC\000"
	.space	3
.LC589:
	.ascii	"READ FORMAT CAPACITIES\000"
	.space	1
.LC590:
	.ascii	"REQUEST SENSE\000"
	.space	2
.LC591:
	.ascii	"START-STOP UNIT\000"
.LC592:
	.ascii	"SYNCHRONIZE CACHE\000"
	.space	2
.LC593:
	.ascii	"TEST UNIT READY\000"
.LC594:
	.ascii	"VERIFY\000"
	.space	1
.LC595:
	.ascii	"WRITE(6)\000"
	.space	3
.LC596:
	.ascii	"WRITE(10)\000"
	.space	2
.LC597:
	.ascii	"WRITE(12)\000"
	.space	2
.LC598:
	.ascii	"Unknown x%02x\000"
	.space	2
.LC599:
	.ascii	"snd_card_create() failed\012\000"
	.space	2
.LC600:
	.ascii	"snd_device_new() failed: error %d\012\000"
	.space	1
.LC603:
	.ascii	"MIDI\000"
	.space	3
.LC604:
	.ascii	"snd_rawmidi_new() failed: error %d\012\000"
.LC605:
	.ascii	"snd_card_register() failed\012\000"
.LC606:
	.ascii	"gmidi function\000"
	.space	1
.LC601:
	.ascii	"MIDI Gadget\000"
.LC602:
	.ascii	"f_midi\000"
	.space	1
.LC607:
	.ascii	"%s: no requests available\012\000"
	.space	1
.LC608:
	.ascii	"%s: cannot queue read request\012\000"
	.space	1
.LC609:
	.ascii	"usb_add_function failed\012\000"
	.space	3
.LC610:
	.ascii	"unable to get diag usb channel\012\000"
.LC611:
	.ascii	"<3>%s: diag: Cannot open channel '%s'\000"
	.space	2
.LC612:
	.ascii	"<3>usb_ep_alloc_request failed\012\000"
.LC613:
	.ascii	"<3>send_sps_req: usb_ep_queue error\012\000"
	.space	3
.LC614:
	.ascii	"<3>msm_ep_config failed\012\000"
	.space	3
.LC615:
	.ascii	"<3>init_data error\000"
	.space	1
.LC616:
	.ascii	"<3>qdss_data_connection: memory alloc failed\012\000"
	.space	2
.LC617:
	.ascii	"<3>set_qdss_data_connection error\000"
	.space	2
.LC618:
	.ascii	"<3>send_sps_req error\012\000"
	.space	1
.LC619:
	.ascii	"<3>uninit_data\012\000"
.LC620:
	.ascii	"<3>msm_ep_unconfig failed\012\000"
	.space	1
.LC621:
	.ascii	"<3>%s: uninit_data error\012\000"
	.space	2
.LC622:
	.ascii	"<3>usb_bam_disconnection error\012\000"
.LC623:
	.ascii	"<3>qdss_disconnect error\000"
	.space	3
.LC624:
	.ascii	"<3>usb_qdss_free_req: qdss ctx is NULL\012\000"
.LC625:
	.ascii	"<3>usb_qdss_alloc_req: missing params\012\000"
	.space	1
.LC626:
	.ascii	"<3>usb_qdss_alloc_req: ctrl_in allocation err\012\000"
	.space	1
.LC627:
	.ascii	"<3>usb_qdss_alloc_req:ctrl_out allocation err\012\000"
	.space	1
.LC628:
	.ascii	"<3>error: usb_qdss_ctrl_read list is empty\012\000"
.LC629:
	.ascii	"<3>qdss usb_ep_queue failed\012\000"
	.space	3
.LC630:
	.ascii	"<3>error: usb_qdss_ctrl_write list is empty\012\000"
	.space	3
.LC631:
	.ascii	"<3>usb_qdss_open: notification func is missing\012\000"
.LC632:
	.ascii	"k_rmnet_work\000"
	.space	3
.LC633:
	.ascii	"&dev->smd_ctl.wait\000"
	.space	1
.LC634:
	.ascii	"&dev->smd_data.wait\000"
.LC635:
	.ascii	"rmnet\000"
	.space	2
.LC636:
	.ascii	"usb_rmnet_smd\000"
	.space	2
.LC637:
	.ascii	"rmnet_sdio\000"
	.space	1
.LC638:
	.ascii	"usb_rmnet_sdio\000"
	.space	1
.LC639:
	.ascii	"<6>%s: GPS(%d) %s Speed\012\000"
	.space	3
.LC640:
	.ascii	"USB audio source\000"
	.space	3
.LC641:
	.ascii	"USB gadget audio\000"
	.space	3
.LC642:
	.ascii	"USB accessory audio source\000"
	.space	1
.LC643:
	.ascii	"<3>%s: %s err %d\012\000"
	.space	2
.LC644:
	.ascii	"queue\000"
	.space	2
.LC645:
	.ascii	"<4>%s: unexpected %s status %d\012\000"
.LC646:
	.ascii	"<4>ttyGS%d: unexpected RX status %d\012\000"
	.space	3
.LC647:
	.ascii	"<4>ttyGS%d: RX not scheduled?\012\000"
	.space	1
.LC648:
	.ascii	"%s/%pK: can't bind, err %d\012\000"
.LC649:
	.ascii	"g_serial\000"
	.space	3
.LC650:
	.ascii	"ttyGS\000"
	.space	2
.LC651:
	.ascii	"k_gserial\000"
	.space	2
.LC652:
	.ascii	"&ports[i].lock\000"
	.space	1
.LC653:
	.ascii	"&port->close_wait\000"
	.space	2
.LC654:
	.ascii	"&port->drain_wait\000"
	.space	2
.LC655:
	.ascii	"<3>%s: cannot register, err %d\012\000"
.LC656:
	.ascii	"<4>%s: no classdev for port %d, err %ld\012\000"
	.space	3
.LC657:
	.ascii	"usb_serial%d\000"
	.space	3
.LC658:
	.ascii	"readstatus\000"
	.space	1
.LC659:
	.ascii	"reset\000"
	.space	2
.LC660:
	.ascii	"<3>%s: usb request is null port#%d\012\000"
.LC661:
	.ascii	"<3>%s: port#%d sdio write failed err:%d\000"
.LC662:
	.ascii	"<3>%s: sio channel is not open\012\000"
.LC663:
	.ascii	"<3>%s: usb disconnected\012\000"
	.space	3
.LC664:
	.ascii	"<3>%s: port:%pK port#%d sdio read failed err:%d\000"
.LC665:
	.ascii	"<3>%s: unable to allocate out reqs\012\000"
.LC666:
	.ascii	"<3>%s: unable to allocate in reqs\012\000"
	.space	1
.LC667:
	.ascii	"<3>%s: port allocation failed\012\000"
	.space	1
.LC668:
	.ascii	"<3>%s: failed to enable in ep w/ err:%d\012\000"
	.space	3
.LC669:
	.ascii	"<3>%s: invalid number of ports count:%d max_ports:%"
	.ascii	"d\012\000"
	.space	2
.LC670:
	.ascii	"usb_gsdio\000"
	.space	2
.LC671:
	.ascii	"<3>%s: unable to create workqueue gsdio_wq\012\000"
.LC672:
	.ascii	"&sdio_ports[i].lock\000"
.LC673:
	.ascii	"<3>%s: sdio logical port allocation failed\012\000"
.LC674:
	.ascii	"<3>%s: Invalid port no#%d\000"
	.space	2
.LC675:
	.ascii	"<3>%s: Un-supported transport:%s\012\000"
	.space	2
.LC676:
	.ascii	"<3>%s: Un-supported transport: %s\012\000"
	.space	1
.LC677:
	.ascii	"<3>%s: Invalid num of ports count:%d gadget:%pK\012"
	.ascii	"\000"
	.space	3
.LC678:
	.ascii	"k_gsmd\000"
	.space	1
.LC679:
	.ascii	"usb_gsmd\000"
	.space	3
.LC680:
	.ascii	"<3>%s: Unable to create workqueue gsmd_wq\012\000"
	.space	1
.LC681:
	.ascii	"&smd_ports[i].lock\000"
	.space	1
.LC682:
	.ascii	"<3>%s: Unable to alloc port:%d\012\000"
.LC683:
	.ascii	"<3>%s: tx pkt dropped: tx_drop_cnt:%u\012\000"
	.space	1
.LC684:
	.ascii	"<3>%s: invalid bam portno#%d\012\000"
	.space	2
.LC685:
	.ascii	"<3>%s: invalid bam2bam portno#%d\012\000"
	.space	2
.LC686:
	.ascii	"<3>%s: grmnet port is null\012\000"
.LC687:
	.ascii	"<3>%s: usb_bam_client_ready failed\012\000"
.LC688:
	.ascii	"<3>%s: Invalid num of ports count:%d,%d\012\000"
	.space	3
.LC689:
	.ascii	"k_gbam\000"
	.space	1
.LC690:
	.ascii	"<3>%s: Unable to create workqueue gbam_wq\012\000"
	.space	1
.LC691:
	.ascii	"usb_rmnet\000"
	.space	2
.LC692:
	.ascii	"<3>%s: Invalid port_num#%d\012\000"
.LC693:
	.ascii	"<3>%s: Invalid client:%d\012\000"
	.space	2
.LC694:
	.ascii	"<3>%s: Invalid num of ports count:%d\012\000"
	.space	2
.LC695:
	.ascii	"gsmd_ctrl\000"
	.space	2
.LC696:
	.ascii	"<3>%s: Unable to create workqueue grmnet_ctrl\012\000"
	.space	1
.LC697:
	.ascii	"&c->wait\000"
	.space	3
.LC698:
	.ascii	"&c->smd_wait_q\000"
	.space	1
.LC699:
	.ascii	"<3>%s: Unable to allocate gps device\012\000"
	.space	2
.LC700:
	.ascii	"<3>%s: gps: Cannot init gps port\000"
	.space	3
.LC701:
	.ascii	"<3>%s: gps: Cannot setup transports\000"
.LC702:
	.ascii	"<3>%s: failed to get string id, err:%d\012\000"
.LC703:
	.ascii	"gps\000"
.LC704:
	.ascii	"<3>%s: cannot allocate memory for name\012\000"
.LC705:
	.ascii	"<3>%s: usb add function failed: %d\012\000"
.LC706:
	.ascii	"<3>%s: Could not bind gps config\012\000"
	.space	2
.LC707:
	.ascii	"<3>%s: setting xport name for invalid port num %d\012"
	.ascii	"\000"
	.space	1
.LC708:
	.ascii	"_ctrl\000"
	.space	2
.LC709:
	.ascii	"<3>%s: Unable to create workqueue:%s\012\000"
	.space	2
.LC710:
	.ascii	"_data\000"
	.space	2
.LC711:
	.ascii	"SMUX_RMNET_CTL_HSUART\000"
	.space	2
.LC712:
	.ascii	"SMUX_CONNECTED\000"
	.space	1
.LC713:
	.ascii	"SMUX_DISCONNECTED\000"
	.space	2
.LC714:
	.ascii	"SMUX_READ_DONE\000"
	.space	1
.LC715:
	.ascii	"SMUX_READ_FAIL\000"
	.space	1
.LC716:
	.ascii	"SMUX_WRITE_DONE\000"
.LC717:
	.ascii	"SMUX_WRITE_FAIL\000"
.LC718:
	.ascii	"SMUX_HIGH_WM_HIT\000"
	.space	3
.LC719:
	.ascii	"SMUX_LOW_WM_HIT\000"
.LC720:
	.ascii	"SMUX_TIOCM_UPDATE\000"
	.space	2
.LC721:
	.ascii	"<3>%s: ghsic_ctrl_connect failed: err:%d\012\000"
	.space	2
.LC722:
	.ascii	"<3>%s: ghsic_data_connect failed: err:%d\012\000"
	.space	2
.LC723:
	.ascii	"<3>%s: ghsuart_data_connect failed: err:%d\012\000"
.LC724:
	.ascii	"<3>%s: gsmd_ctrl_connect failed: err:%d\012\000"
	.space	3
.LC725:
	.ascii	"<3>%s: gqti_ctrl_connect failed: err:%d\012\000"
	.space	3
.LC726:
	.ascii	"<3>%s: ghsuart_ctrl_connect failed: err:%d\012\000"
.LC727:
	.ascii	"<3>%s: usb_bam_get_connection_idx failed\012\000"
	.space	2
.LC728:
	.ascii	"<3>%s: gbam_connect failed: err:%d\012\000"
.LC729:
	.ascii	"<3>%s: Max-%d instances supported\012\000"
	.space	1
.LC730:
	.ascii	"<3>%s: Unable to allocate rmnet device\012\000"
.LC731:
	.ascii	"<3>%s: Un-supported transport: %u\012\000"
	.space	1
.LC732:
	.ascii	"<3>%s: supporting ports#%u port_id:%u\000"
	.space	2
.LC733:
	.ascii	"rmnet%d\000"
.LC734:
	.ascii	"<3>%s: rmnet: Cannot open ctrl port:'%s' data port:"
	.ascii	"'%s'\012\000"
	.space	3
.LC735:
	.ascii	"<3>%s: rmnet: Cannot setup transports\000"
	.space	2
.LC736:
	.ascii	"<3>%s: Could not bind rmnet%u config\012\000"
	.space	2
.LC737:
	.ascii	"gser\000"
	.space	3
.LC738:
	.ascii	"modem\000"
	.space	2
.LC739:
	.ascii	"nmea\000"
	.space	3
.LC740:
	.ascii	"modem2\000"
	.space	1
.LC741:
	.ascii	"<3>%s: Un-supported transport transport: %u\012\000"
	.space	3
.LC742:
	.ascii	"<3>%s: serial: Cannot setup transports\000"
	.space	1
.LC743:
	.ascii	"<3>%s: serial: bind_config failed for port %d\000"
	.space	2
.LC744:
	.ascii	"<3>%s: serial: Cannot open port '%s'\000"
	.space	3
.LC745:
	.ascii	"acm%u\000"
	.space	2
.LC746:
	.ascii	"<3>%s: acm: Cannot setup transports\000"
.LC747:
	.ascii	"<3>%s: acm: bind_config failed for port %d\000"
	.space	1
.LC748:
	.ascii	"<3>%s: acm: Cannot open port '%s'\000"
	.space	2
.LC749:
	.ascii	"<3>adb_bind() could not allocate requests\012\000"
	.space	1
.LC750:
	.ascii	"<3>RNDIS header is NULL.\012\000"
	.space	2
.LC751:
	.ascii	"rndis response on err %d\012\000"
	.space	2
.LC752:
	.ascii	"<3>%s: rndis response on err %d\012\000"
	.space	3
.LC753:
	.ascii	"<4>%s: set unknown OID 0x%08X, size %d\012\000"
.LC754:
	.ascii	"<4>%s: unknown RNDIS message 0x%08X len %d\012\000"
.LC755:
	.ascii	"RNDIS command error %d, %d/%d\012\000"
	.space	1
.LC756:
	.ascii	"<3>%s: RNDIS command error %d, %d/%d\012\000"
	.space	2
.LC757:
	.ascii	"rndis\000"
	.space	2
.LC758:
	.ascii	"<3>%s: %s:teth_bridge_init() failed\012\000"
	.space	3
.LC759:
	.ascii	"<3>%s: %s: usb_bam_connect_ipa failed: err:%d\012\000"
	.space	1
.LC760:
	.ascii	"<3>%s: %s:teth_bridge_connect() failed\012\000"
.LC761:
	.ascii	"<3>%s: port_usb is NULL\000"
.LC762:
	.ascii	"<3>%s: port_usb->out (bulk out ep) is NULL\000"
	.space	1
.LC763:
	.ascii	"<3>%s: %s: usb_bam_client_ready failed: err:%d\012\000"
.LC764:
	.ascii	"<3>%s: %s: teth_bridge_set_aggr_params failed\012\000"
	.space	1
.LC765:
	.ascii	"<3>%s: data port is null\012\000"
	.space	2
.LC766:
	.ascii	"<3>%s: %s: usb_bam_client_ready failed\012\000"
.LC767:
	.ascii	"<6>%s: SET DEVICE OFFLINE\000"
	.space	2
.LC768:
	.ascii	"<6>%s: dev:%pK port:%d. Do nothing.\012\000"
	.space	3
.LC769:
	.ascii	"<6>%s: mbim deactivated\012\000"
	.space	3
.LC770:
	.ascii	"<6>%s: CONTROL_INTERFACE\000"
	.space	3
.LC771:
	.ascii	"<6>%s: reset mbim control %d\012\000"
	.space	2
.LC772:
	.ascii	"<3>%s: Failed configuring notify ep %s: err %d\012\000"
.LC773:
	.ascii	"<6>%s: DATA_INTERFACE\000"
	.space	2
.LC774:
	.ascii	"<6>%s: reset mbim\012\000"
	.space	1
.LC775:
	.ascii	"<6>%s: Alt set 1, initialize ports\000"
	.space	1
.LC776:
	.ascii	"<6>%s: Choose endpoints\000"
.LC777:
	.ascii	"<3>%s: IN ep %s failed: %d\012\000"
.LC778:
	.ascii	"<6>%s: Set mbim port in_desc = 0x%pK\000"
	.space	3
.LC779:
	.ascii	"<3>%s: OUT ep %s failed: %d\012\000"
	.space	3
.LC780:
	.ascii	"<6>%s: Set mbim port out_desc = 0x%pK\000"
	.space	2
.LC781:
	.ascii	"<6>%s: dev:%pK portno:%d\012\000"
	.space	2
.LC782:
	.ascii	"<3>%s: bam_data_setup failed: err:%d\012\000"
	.space	2
.LC783:
	.ascii	"<6>%s: mbim bam connected\012\000"
	.space	1
.LC784:
	.ascii	"<6>%s: PORTS already SET\000"
	.space	3
.LC785:
	.ascii	"<6>%s: SET DEVICE ONLINE\000"
	.space	3
.LC786:
	.ascii	"<3>%s: ERROR: Illegal Interface\000"
.LC787:
	.ascii	"k_bam_data\000"
	.space	1
.LC788:
	.ascii	"<3>%s: Failed to create workqueue\012\000"
	.space	1
.LC789:
	.ascii	"<3>%s: Failed to alloc port:%d\012\000"
.LC790:
	.ascii	"<6>%s: port number %u\000"
	.space	2
.LC791:
	.ascii	"<3>%s: Can not add port %u. Max ports = %d\000"
	.space	1
.LC792:
	.ascii	"<6>%s: no_ports:%d\012\000"
.LC793:
	.ascii	"<3>%s: bam_data_setup failed err: %d\012\000"
	.space	2
.LC794:
	.ascii	"<3>%s: bam setup failed\000"
.LC795:
	.ascii	"<6>%s: mbim struct not allocated\000"
	.space	3
.LC796:
	.ascii	"usb_mbim\000"
	.space	3
.LC797:
	.ascii	"<6>%s: Exit status %d\000"
	.space	2
.LC798:
	.ascii	"<6>%s: mbim suspended\012\000"
	.space	1
.LC799:
	.ascii	"<6>%s: mbim resumed\012\000"
	.space	3
.LC800:
	.ascii	"%02X%02X%02X%02X%02X%02X\000"
	.space	3
.LC801:
	.ascii	"cdc_ethernet\000"
	.space	3
.LC802:
	.ascii	"%s%%d\000"
	.space	2
.LC803:
	.ascii	"using random %s ethernet address\012\000"
	.space	2
.LC804:
	.ascii	"self\000"
	.space	3
.LC805:
	.ascii	"host\000"
	.space	3
.LC806:
	.ascii	"<6>%s: MAC %pM\012\000"
.LC807:
	.ascii	"<6>%s: HOST MAC %pM\012\000"
	.space	3
.LC808:
	.ascii	"usb\000"
.LC809:
	.ascii	"<3>%s: %s: rndis_pdata\012\000"
.LC810:
	.ascii	"<6>%s: %s MAC: %02X:%02X:%02X:%02X:%02X:%02X\012\000"
	.space	2
.LC811:
	.ascii	"<3>%s: %s: gether_setup failed\012\000"
.LC812:
	.ascii	"<3>%s: %s: ecm_pdata\012\000"
	.space	2
.LC813:
	.ascii	"ecm\000"
.LC814:
	.ascii	"<3>%s: %s: ecm_bind_config failed\012\000"
	.space	1
.LC815:
	.ascii	"<3>%s: RNDIS header memory allocation failed.\012\000"
	.space	1
.LC816:
	.ascii	"<3>%s: failed to add function\000"
	.space	2
.LC817:
	.ascii	"<3>%s: failed to initialize ecm_ipa\000"
.LC818:
	.ascii	"rndis0\000"
	.space	1
.LC819:
	.ascii	"ecm0\000"
	.space	3
.LC820:
	.ascii	"<3>%s: bam_data_connect failed: err:%d\012\000"
.LC821:
	.ascii	"<6>%s: rndis deactivated\012\000"
	.space	2
.LC822:
	.ascii	"<6>%s: rndis bam connected\012\000"
.LC823:
	.ascii	"<3>%s: %s: Card is NULL\000"
.LC824:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_DROP failed: %d\012\000"
.LC825:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_HW_PARAMS failed: %d\012\000"
	.space	3
.LC826:
	.ascii	"<3>%s: Preparing playback failed: %d\012\000"
	.space	2
.LC827:
	.ascii	"<3>%s: Failed to allocate hw params\000"
.LC828:
	.ascii	"<3>%s: Preparing capture failed: %d\012\000"
	.space	3
.LC829:
	.ascii	"<3>%s: Failed to allocate sw params\000"
.LC830:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_SW_PARAMS failed: %d\012\000"
	.space	3
.LC831:
	.ascii	"<3>%s: Setting capture params failed: err %d\000"
	.space	3
.LC832:
	.ascii	"<6>%s: Initialized capture params\000"
	.space	2
.LC833:
	.ascii	"<3>%s: Setting playback params failed: err %d\000"
	.space	2
.LC834:
	.ascii	"<3>%s: %s: buffer alloc failed\012\000"
.LC835:
	.ascii	"<3>%s: Failed to init audio streams: err %d\000"
.LC836:
	.ascii	"<3>%s: copying failed\000"
	.space	2
.LC837:
	.ascii	"<3>%s: Capture error: %d\012\000"
	.space	2
.LC838:
	.ascii	"<3>%s: playback_buf is empty\000"
	.space	3
.LC839:
	.ascii	"<3>%s: Buffer is empty, no data to play\000"
.LC840:
	.ascii	"<3>%s: Failed to init audio streams\000"
.LC841:
	.ascii	"<3>%s: SND failure - runtime->frame_bits == 0\000"
	.space	2
.LC842:
	.ascii	"<3>%s: snd_pcm_lib_write failed with err %d\012\000"
	.space	3
.LC843:
	.ascii	"<3>%s: unable to open sound control device file: %s"
	.ascii	"\012\000"
	.space	3
.LC844:
	.ascii	"<3>%s: No such PCM playback device: %s\012\000"
.LC845:
	.ascii	"<3>%s: No such PCM capture device: %s\012\000"
	.space	1
.LC846:
	.ascii	"<3>%s: Failed to open snd devices\012\000"
	.space	1
.LC847:
	.ascii	"<3>%s: Setting playback HW params failed: err %d\000"
	.space	3
.LC848:
	.ascii	"<3>%s: Setting capture HW params failed: err %d\000"
.LC849:
	.ascii	"audio\000"
	.space	2
.LC850:
	.ascii	"<3>%s: %s: Failed to add usb audio function, err = "
	.ascii	"%d\000"
	.space	2
.LC851:
	.ascii	"cdc_network\000"
.LC852:
	.ascii	"<3>%s: %s: ncm config is null\012\000"
	.space	1
.LC853:
	.ascii	"ncm\000"
.LC854:
	.ascii	"<3>%s: %s: gether setup failed err:%d\012\000"
	.space	1
.LC855:
	.ascii	"<3>%s: %s: ncm bind config failed err:%d\000"
	.space	3
.LC856:
	.ascii	"remote_wakeup\000"
	.space	2
.LC857:
	.ascii	"state\000"
	.space	2
.LC858:
	.ascii	"pm_qos\000"
	.space	1
.LC859:
	.ascii	"enable\000"
	.space	1
.LC860:
	.ascii	"functions\000"
	.space	2
.LC861:
	.ascii	"iSerial\000"
.LC862:
	.ascii	"iProduct\000"
	.space	3
.LC863:
	.ascii	"iManufacturer\000"
	.space	2
.LC864:
	.ascii	"bDeviceProtocol\000"
.LC865:
	.ascii	"bDeviceSubClass\000"
.LC866:
	.ascii	"bDeviceClass\000"
	.space	3
.LC867:
	.ascii	"bcdDevice\000"
	.space	2
.LC868:
	.ascii	"idProduct\000"
	.space	2
.LC869:
	.ascii	"idVendor\000"
	.space	3
.LC870:
	.ascii	"midi\000"
	.space	3
.LC871:
	.ascii	"alsa\000"
	.space	3
.LC872:
	.ascii	"uasp\000"
	.space	3
.LC873:
	.ascii	"pcm\000"
.LC874:
	.ascii	"mass_storage\000"
	.space	3
.LC875:
	.ascii	"inquiry_string\000"
	.space	1
.LC876:
	.ascii	"rndis_qc\000"
	.space	3
.LC877:
	.ascii	"max_pkt_per_xfer\000"
	.space	3
.LC878:
	.ascii	"vendorID\000"
	.space	3
.LC879:
	.ascii	"ethaddr\000"
.LC880:
	.ascii	"wceis\000"
	.space	2
.LC881:
	.ascii	"manufacturer\000"
	.space	3
.LC882:
	.ascii	"ptp\000"
.LC883:
	.ascii	"serial\000"
	.space	1
.LC884:
	.ascii	"transport_names\000"
.LC885:
	.ascii	"transports\000"
	.space	1
.LC886:
	.ascii	"diag\000"
	.space	3
.LC887:
	.ascii	"clients\000"
.LC888:
	.ascii	"mbim_transports\000"
.LC889:
	.ascii	"ecm_qc\000"
	.space	1
.LC890:
	.ascii	"ecm_transports\000"
	.space	1
.LC891:
	.ascii	"ecm_ethaddr\000"
.LC892:
	.ascii	"ncm_ethaddr\000"
.LC893:
	.ascii	"rmnet_smd\000"
	.space	2
.LC894:
	.ascii	"acm\000"
.LC895:
	.ascii	"acm_transports\000"
	.space	1
.LC896:
	.ascii	"aliases\000"
.LC897:
	.ascii	"version\000"
.LC898:
	.ascii	"1.0\000"
.LC899:
	.ascii	"HID Interface\000"
	.space	2
.LC900:
	.ascii	"CDC Network Control Model (NCM)\000"
.LC901:
	.ascii	"CDC Network Data\000"
	.space	3
.LC902:
	.ascii	"CDC NCM\000"
.LC903:
	.ascii	"Microphone Iso-IN Endpoint Control\000"
	.space	1
.LC904:
	.ascii	"Microphone Sampling Frequency Control\000"
	.space	2
.LC905:
	.ascii	"Speaker Iso-out Endpoint Control\000"
	.space	3
.LC906:
	.ascii	"Speaker Sampling Frequency Control\000"
	.space	1
.LC907:
	.ascii	"Microphone Feature Unit Controls\000"
	.space	3
.LC908:
	.ascii	"Microphone Volume Control\000"
	.space	2
.LC909:
	.ascii	"Microphone Mute Control\000"
.LC910:
	.ascii	"Speaker Function Unit Controls\000"
	.space	1
.LC911:
	.ascii	"Speaker Volume Control\000"
	.space	1
.LC912:
	.ascii	"Speaker Mute Control\000"
	.space	3
.LC913:
	.ascii	"/dev/snd/controlC0\000"
	.space	1
.LC914:
	.ascii	"/dev/snd/pcmC0D6c\000"
	.space	2
.LC915:
	.ascii	"/dev/snd/pcmC0D5p\000"
	.space	2
.LC916:
	.ascii	"gadget\000"
	.space	1
.LC917:
	.ascii	"android_rndis_qc\000"
	.space	3
.LC918:
	.ascii	"RNDIS Communications Control\000"
	.space	3
.LC919:
	.ascii	"RNDIS Ethernet Data\000"
.LC920:
	.ascii	"RNDIS\000"
	.space	2
.LC921:
	.ascii	"CDC Ethernet Control Model (ECM)\000"
	.space	3
.LC922:
	.ascii	"CDC Ethernet Data\000"
	.space	2
.LC923:
	.ascii	"CDC ECM\000"
.LC924:
	.ascii	"android_mbim\000"
	.space	3
.LC925:
	.ascii	"MBIM Control\000"
	.space	3
.LC926:
	.ascii	"MBIM Data\000"
	.space	2
.LC927:
	.ascii	"USB accessory\000"
	.space	2
.LC928:
	.ascii	"usb_accessory\000"
	.space	2
.LC929:
	.ascii	"Android Accessory Interface\000"
.LC930:
	.ascii	"MTP\000"
.LC931:
	.ascii	"ccid_ctrl\000"
	.space	2
.LC932:
	.ascii	"ccid_bulk\000"
	.space	2
.LC933:
	.ascii	"CDC Abstract Control Model (ACM)\000"
	.space	3
.LC934:
	.ascii	"CDC ACM Data\000"
	.space	3
.LC935:
	.ascii	"CDC Serial\000"
	.space	1
.LC936:
	.ascii	"Generic Serial\000"
	.space	1
.LC937:
	.ascii	"SMUX_DUN_DATA_HSUART\000"
	.space	3
.LC938:
	.ascii	"SMUX_RMNET_DATA_HSUART\000"
	.space	1
.LC939:
	.ascii	"rmnet_ctrl\000"
	.space	1
.LC940:
	.ascii	"DATA40_CNTL\000"
.LC941:
	.ascii	"DATA39_CNTL\000"
.LC942:
	.ascii	"DATA38_CNTL\000"
.LC943:
	.ascii	"DS\000"
	.space	1
.LC944:
	.ascii	"UNUSED\000"
	.space	1
.LC945:
	.ascii	"SDIO_DUN\000"
	.space	3
.LC946:
	.ascii	"SDIO_NMEA\000"
	.space	2
.LC947:
	.ascii	"cdrom\000"
	.space	2
.LC948:
	.ascii	"file\000"
	.space	3
.LC949:
	.ascii	"nofua\000"
	.space	2
.LC950:
	.ascii	"ro\000"
	.space	1
.LC951:
	.ascii	"functionfs\000"
	.space	1
.LC952:
	.ascii	"GPS\000"
.LC953:
	.ascii	"RmNet\000"
	.space	2
.LC954:
	.ascii	"rmnet_mux_ctrl\000"
	.space	1
.LC955:
	.ascii	"transport\000"
	.space	2
.LC956:
	.ascii	"QMI RmNet\000"
	.space	2
.LC957:
	.ascii	"QDSS DATA\000"
	.space	2
.LC958:
	.ascii	"QDSS CTRL\000"
	.space	2
.LC959:
	.ascii	"MIDI function\000"
	.space	2
.LC960:
	.ascii	"suspended\000"
	.section	__param,"aw",%progbits
	.align	2
	.type	__param_audio_capture_buf_size, %object
	.size	__param_audio_capture_buf_size, 16
__param_audio_capture_buf_size:
	.word	__param_str_audio_capture_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	audio_capture_buf_size
	.type	__param_req_capture_count, %object
	.size	__param_req_capture_count, 16
__param_req_capture_count:
	.word	__param_str_req_capture_count
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_capture_count
	.type	__param_req_capture_buf_size, %object
	.size	__param_req_capture_buf_size, 16
__param_req_capture_buf_size:
	.word	__param_str_req_capture_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_capture_buf_size
	.type	__param_audio_playback_buf_size, %object
	.size	__param_audio_playback_buf_size, 16
__param_audio_playback_buf_size:
	.word	__param_str_audio_playback_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	audio_playback_buf_size
	.type	__param_req_playback_count, %object
	.size	__param_req_playback_count, 16
__param_req_playback_count:
	.word	__param_str_req_playback_count
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_playback_count
	.type	__param_req_playback_buf_size, %object
	.size	__param_req_playback_buf_size, 16
__param_req_playback_buf_size:
	.word	__param_str_req_playback_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_playback_buf_size
	.type	__param_fn_cntl, %object
	.size	__param_fn_cntl, 16
__param_fn_cntl:
	.word	__param_str_fn_cntl
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_cntl
	.type	__param_fn_cap, %object
	.size	__param_fn_cap, 16
__param_fn_cap:
	.word	__param_str_fn_cap
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_cap
	.type	__param_fn_play, %object
	.size	__param_fn_play, 16
__param_fn_play:
	.word	__param_str_fn_play
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_play
	.type	__param_qc_host_addr, %object
	.size	__param_qc_host_addr, 16
__param_qc_host_addr:
	.word	__param_str_qc_host_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	qc_host_addr
	.type	__param_qc_dev_addr, %object
	.size	__param_qc_dev_addr, 16
__param_qc_dev_addr:
	.word	__param_str_qc_dev_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	qc_dev_addr
	.type	__param_host_addr, %object
	.size	__param_host_addr, 16
__param_host_addr:
	.word	__param_str_host_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	host_addr
	.type	__param_dev_addr, %object
	.size	__param_dev_addr, 16
__param_dev_addr:
	.word	__param_str_dev_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	dev_addr
	.type	__param_qmult, %object
	.size	__param_qmult, 16
__param_qmult:
	.word	__param_str_qmult
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	qmult
	.type	__param_rndis_ul_max_xfer_size_rcvd, %object
	.size	__param_rndis_ul_max_xfer_size_rcvd, 16
__param_rndis_ul_max_xfer_size_rcvd:
	.word	__param_str_rndis_ul_max_xfer_size_rcvd
	.word	param_ops_int
	.short	292
	.short	-1
	.word	rndis_ul_max_xfer_size_rcvd
	.type	__param_rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	__param_rndis_ul_max_pkt_per_xfer_rcvd, 16
__param_rndis_ul_max_pkt_per_xfer_rcvd:
	.word	__param_str_rndis_ul_max_pkt_per_xfer_rcvd
	.word	param_ops_int
	.short	292
	.short	-1
	.word	rndis_ul_max_pkt_per_xfer_rcvd
	.type	__param_rndis_ul_max_pkt_per_xfer, %object
	.size	__param_rndis_ul_max_pkt_per_xfer, 16
__param_rndis_ul_max_pkt_per_xfer:
	.word	__param_str_rndis_ul_max_pkt_per_xfer
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	rndis_ul_max_pkt_per_xfer
	.type	__param_rndis_dl_max_pkt_per_xfer, %object
	.size	__param_rndis_dl_max_pkt_per_xfer, 16
__param_rndis_dl_max_pkt_per_xfer:
	.word	__param_str_rndis_dl_max_pkt_per_xfer
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	rndis_dl_max_pkt_per_xfer
	.type	__param_mtp_tx_reqs, %object
	.size	__param_mtp_tx_reqs, 16
__param_mtp_tx_reqs:
	.word	__param_str_mtp_tx_reqs
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_tx_reqs
	.type	__param_mtp_tx_req_len, %object
	.size	__param_mtp_tx_req_len, 16
__param_mtp_tx_req_len:
	.word	__param_str_mtp_tx_req_len
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_tx_req_len
	.type	__param_mtp_rx_req_len, %object
	.size	__param_mtp_rx_req_len, 16
__param_mtp_rx_req_len:
	.word	__param_str_mtp_rx_req_len
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_rx_req_len
	.type	__param_ghsuart_data_tx_intr_thld, %object
	.size	__param_ghsuart_data_tx_intr_thld, 16
__param_ghsuart_data_tx_intr_thld:
	.word	__param_str_ghsuart_data_tx_intr_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_tx_intr_thld
	.type	__param_ghsuart_data_rx_req_size, %object
	.size	__param_ghsuart_data_rx_req_size, 16
__param_ghsuart_data_rx_req_size:
	.word	__param_str_ghsuart_data_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rx_req_size
	.type	__param_ghsuart_data_serial_rx_q_size, %object
	.size	__param_ghsuart_data_serial_rx_q_size, 16
__param_ghsuart_data_serial_rx_q_size:
	.word	__param_str_ghsuart_data_serial_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_serial_rx_q_size
	.type	__param_ghsuart_data_serial_tx_q_size, %object
	.size	__param_ghsuart_data_serial_tx_q_size, 16
__param_ghsuart_data_serial_tx_q_size:
	.word	__param_str_ghsuart_data_serial_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_serial_tx_q_size
	.type	__param_ghsuart_data_rmnet_rx_q_size, %object
	.size	__param_ghsuart_data_rmnet_rx_q_size, 16
__param_ghsuart_data_rmnet_rx_q_size:
	.word	__param_str_ghsuart_data_rmnet_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rmnet_rx_q_size
	.type	__param_ghsuart_data_rmnet_tx_q_size, %object
	.size	__param_ghsuart_data_rmnet_tx_q_size, 16
__param_ghsuart_data_rmnet_tx_q_size:
	.word	__param_str_ghsuart_data_rmnet_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rmnet_tx_q_size
	.type	__param_record_timestamp, %object
	.size	__param_record_timestamp, 16
__param_record_timestamp:
	.word	__param_str_record_timestamp
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	record_timestamp
	.type	__param_ghsic_data_pend_limit_with_bridge, %object
	.size	__param_ghsic_data_pend_limit_with_bridge, 16
__param_ghsic_data_pend_limit_with_bridge:
	.word	__param_str_ghsic_data_pend_limit_with_bridge
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_pend_limit_with_bridge
	.type	__param_ghsic_data_fctrl_dis_thld, %object
	.size	__param_ghsic_data_fctrl_dis_thld, 16
__param_ghsic_data_fctrl_dis_thld:
	.word	__param_str_ghsic_data_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_dis_thld
	.type	__param_ghsic_data_fctrl_en_thld, %object
	.size	__param_ghsic_data_fctrl_en_thld, 16
__param_ghsic_data_fctrl_en_thld:
	.word	__param_str_ghsic_data_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_en_thld
	.type	__param_ghsic_data_fctrl_support, %object
	.size	__param_ghsic_data_fctrl_support, 16
__param_ghsic_data_fctrl_support:
	.word	__param_str_ghsic_data_fctrl_support
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_support
	.type	__param_ghsic_data_tx_intr_thld, %object
	.size	__param_ghsic_data_tx_intr_thld, 16
__param_ghsic_data_tx_intr_thld:
	.word	__param_str_ghsic_data_tx_intr_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_tx_intr_thld
	.type	__param_ghsic_data_rx_req_size, %object
	.size	__param_ghsic_data_rx_req_size, 16
__param_ghsic_data_rx_req_size:
	.word	__param_str_ghsic_data_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rx_req_size
	.type	__param_ghsic_data_serial_rx_q_size, %object
	.size	__param_ghsic_data_serial_rx_q_size, 16
__param_ghsic_data_serial_rx_q_size:
	.word	__param_str_ghsic_data_serial_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_serial_rx_q_size
	.type	__param_ghsic_data_serial_tx_q_size, %object
	.size	__param_ghsic_data_serial_tx_q_size, 16
__param_ghsic_data_serial_tx_q_size:
	.word	__param_str_ghsic_data_serial_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_serial_tx_q_size
	.type	__param_ghsic_data_rmnet_rx_q_size, %object
	.size	__param_ghsic_data_rmnet_rx_q_size, 16
__param_ghsic_data_rmnet_rx_q_size:
	.word	__param_str_ghsic_data_rmnet_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rmnet_rx_q_size
	.type	__param_ghsic_data_rmnet_tx_q_size, %object
	.size	__param_ghsic_data_rmnet_tx_q_size, 16
__param_ghsic_data_rmnet_tx_q_size:
	.word	__param_str_ghsic_data_rmnet_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rmnet_tx_q_size
	.type	__param_dl_intr_threshold, %object
	.size	__param_dl_intr_threshold, 16
__param_dl_intr_threshold:
	.word	__param_str_dl_intr_threshold
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	dl_intr_threshold
	.type	__param_bam_mux_rx_req_size, %object
	.size	__param_bam_mux_rx_req_size, 16
__param_bam_mux_rx_req_size:
	.word	__param_str_bam_mux_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_req_size
	.type	__param_bam_mux_rx_q_size, %object
	.size	__param_bam_mux_rx_q_size, 16
__param_bam_mux_rx_q_size:
	.word	__param_str_bam_mux_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_q_size
	.type	__param_bam_mux_tx_q_size, %object
	.size	__param_bam_mux_tx_q_size, 16
__param_bam_mux_tx_q_size:
	.word	__param_str_bam_mux_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_tx_q_size
	.type	__param_bam_mux_rx_fctrl_dis_thld, %object
	.size	__param_bam_mux_rx_fctrl_dis_thld, 16
__param_bam_mux_rx_fctrl_dis_thld:
	.word	__param_str_bam_mux_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_dis_thld
	.type	__param_bam_mux_rx_fctrl_support, %object
	.size	__param_bam_mux_rx_fctrl_support, 16
__param_bam_mux_rx_fctrl_support:
	.word	__param_str_bam_mux_rx_fctrl_support
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_support
	.type	__param_bam_mux_rx_fctrl_en_thld, %object
	.size	__param_bam_mux_rx_fctrl_en_thld, 16
__param_bam_mux_rx_fctrl_en_thld:
	.word	__param_str_bam_mux_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_en_thld
	.type	__param_bam_mux_tx_pkt_drop_thld, %object
	.size	__param_bam_mux_tx_pkt_drop_thld, 16
__param_bam_mux_tx_pkt_drop_thld:
	.word	__param_str_bam_mux_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_tx_pkt_drop_thld
	.type	__param_bam_pending_limit, %object
	.size	__param_bam_pending_limit, 16
__param_bam_pending_limit:
	.word	__param_str_bam_pending_limit
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_pending_limit
	.type	__param_mux_sdio_rx_fctrl_dis_thld, %object
	.size	__param_mux_sdio_rx_fctrl_dis_thld, 16
__param_mux_sdio_rx_fctrl_dis_thld:
	.word	__param_str_mux_sdio_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_rx_fctrl_dis_thld
	.type	__param_mux_sdio_rx_fctrl_en_thld, %object
	.size	__param_mux_sdio_rx_fctrl_en_thld, 16
__param_mux_sdio_rx_fctrl_en_thld:
	.word	__param_str_mux_sdio_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_rx_fctrl_en_thld
	.type	__param_mux_sdio_tx_pkt_drop_thld, %object
	.size	__param_mux_sdio_tx_pkt_drop_thld, 16
__param_mux_sdio_tx_pkt_drop_thld:
	.word	__param_str_mux_sdio_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_tx_pkt_drop_thld
	.type	__param_rmnet_mux_smd_data_ch, %object
	.size	__param_rmnet_mux_smd_data_ch, 16
__param_rmnet_mux_smd_data_ch:
	.word	__param_str_rmnet_mux_smd_data_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_mux_smd_data_ch
	.type	__param_rmnet_mux_sdio_data_ch, %object
	.size	__param_rmnet_mux_sdio_data_ch, 16
__param_rmnet_mux_sdio_data_ch:
	.word	__param_str_rmnet_mux_sdio_data_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_mux_sdio_data_ch
	.type	__param_rmnet_mux_sdio_ctl_ch, %object
	.size	__param_rmnet_mux_sdio_ctl_ch, 16
__param_rmnet_mux_sdio_ctl_ch:
	.word	__param_str_rmnet_mux_sdio_ctl_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_mux_sdio_ctl_ch
	.type	__param_sdio_rx_fctrl_dis_thld, %object
	.size	__param_sdio_rx_fctrl_dis_thld, 16
__param_sdio_rx_fctrl_dis_thld:
	.word	__param_str_sdio_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_rx_fctrl_dis_thld
	.type	__param_sdio_rx_fctrl_en_thld, %object
	.size	__param_sdio_rx_fctrl_en_thld, 16
__param_sdio_rx_fctrl_en_thld:
	.word	__param_str_sdio_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_rx_fctrl_en_thld
	.type	__param_sdio_tx_pkt_drop_thld, %object
	.size	__param_sdio_tx_pkt_drop_thld, 16
__param_sdio_tx_pkt_drop_thld:
	.word	__param_str_sdio_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_tx_pkt_drop_thld
	.type	__param_rmnet_sdio_data_ch, %object
	.size	__param_rmnet_sdio_data_ch, 16
__param_rmnet_sdio_data_ch:
	.word	__param_str_rmnet_sdio_data_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_sdio_data_ch
	.type	__param_rmnet_sdio_ctl_ch, %object
	.size	__param_rmnet_sdio_ctl_ch, 16
__param_rmnet_sdio_ctl_ch:
	.word	__param_str_rmnet_sdio_ctl_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_sdio_ctl_ch
	.type	__param_rmnet_data_ch, %object
	.size	__param_rmnet_data_ch, 16
__param_rmnet_data_ch:
	.word	__param_str_rmnet_data_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_data_ch
	.type	__param_rmnet_ctl_ch, %object
	.size	__param_rmnet_ctl_ch, 16
__param_rmnet_ctl_ch:
	.word	__param_str_rmnet_ctl_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_ctl_ch
	.type	__param_iSerialNumber, %object
	.size	__param_iSerialNumber, 16
__param_iSerialNumber:
	.word	__param_str_iSerialNumber
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iSerialNumber
	.type	__param_iProduct, %object
	.size	__param_iProduct, 16
__param_iProduct:
	.word	__param_str_iProduct
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iProduct
	.type	__param_iManufacturer, %object
	.size	__param_iManufacturer, 16
__param_iManufacturer:
	.word	__param_str_iManufacturer
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iManufacturer
	.type	__param_bcdDevice, %object
	.size	__param_bcdDevice, 16
__param_bcdDevice:
	.word	__param_str_bcdDevice
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	bcdDevice
	.type	__param_idProduct, %object
	.size	__param_idProduct, 16
__param_idProduct:
	.word	__param_str_idProduct
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	idProduct
	.type	__param_idVendor, %object
	.size	__param_idVendor, 16
__param_idVendor:
	.word	__param_str_idVendor
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	idVendor
	.bss
	.align	2
.LANCHOR2 = . + 0
.LANCHOR4 = . + 8184
.LANCHOR9 = . + 16368
	.type	android_dev_list, %object
	.size	android_dev_list, 8
android_dev_list:
	.space	8
	.type	gps_port, %object
	.size	gps_port, 8
gps_port:
	.space	8
	.type	gserial_ports, %object
	.size	gserial_ports, 36
gserial_ports:
	.space	36
	.type	gacm_ports, %object
	.size	gacm_ports, 36
gacm_ports:
	.space	36
	.type	composite, %object
	.size	composite, 4
composite:
	.space	4
	.type	n_sdio_ports, %object
	.size	n_sdio_ports, 4
n_sdio_ports:
	.space	4
	.type	sdio_ports, %object
	.size	sdio_ports, 216
sdio_ports:
	.space	216
	.type	n_smd_ports, %object
	.size	n_smd_ports, 4
n_smd_ports:
	.space	4
	.type	smd_ports, %object
	.size	smd_ports, 216
smd_ports:
	.space	216
	.type	ctrl_smd_ports, %object
	.size	ctrl_smd_ports, 504
ctrl_smd_ports:
	.space	504
	.type	no_ctrl_ports, %object
	.size	no_ctrl_ports, 4
no_ctrl_ports:
	.space	4
	.type	gctrl_ports, %object
	.size	gctrl_ports, 416
gctrl_ports:
	.space	416
	.type	no_data_ports, %object
	.size	no_data_ports, 4
no_data_ports:
	.space	4
	.type	gdata_ports, %object
	.size	gdata_ports, 416
gdata_ports:
	.space	416
	.type	num_ctrl_ports, %object
	.size	num_ctrl_ports, 4
num_ctrl_ports:
	.space	4
	.type	ghsuart_ctrl_ports, %object
	.size	ghsuart_ctrl_ports, 168
ghsuart_ctrl_ports:
	.space	168
	.type	num_data_ports, %object
	.size	num_data_ports, 4
num_data_ports:
	.space	4
	.type	ghsuart_data_ports, %object
	.size	ghsuart_data_ports, 168
ghsuart_data_ports:
	.space	168
	.type	_ccid_dev, %object
	.size	_ccid_dev, 4
_ccid_dev:
	.space	4
	.type	n_bam_ports, %object
	.size	n_bam_ports, 4
n_bam_ports:
	.space	4
	.type	bam_ports, %object
	.size	bam_ports, 84
bam_ports:
	.space	84
	.type	rmux_dev, %object
	.size	rmux_dev, 4
rmux_dev:
	.space	4
	.type	_acc_dev, %object
	.size	_acc_dev, 4
_acc_dev:
	.space	4
	.type	_mtp_dev, %object
	.size	_mtp_dev, 4
_mtp_dev:
	.space	4
	.type	rmnet_ports, %object
	.size	rmnet_ports, 72
rmnet_ports:
	.space	72
	.type	_mbim_dev, %object
	.size	_mbim_dev, 4
_mbim_dev:
	.space	4
	.type	serial_string, %object
	.size	serial_string, 256
serial_string:
	.space	256
	.type	product_string, %object
	.size	product_string, 256
product_string:
	.space	256
	.type	manufacturer_string, %object
	.size	manufacturer_string, 256
manufacturer_string:
	.space	256
	.type	ecm_transports, %object
	.size	ecm_transports, 50
ecm_transports:
	.space	50
	.space	2
	.type	serial_xport_names, %object
	.size	serial_xport_names, 32
serial_xport_names:
	.space	32
	.type	rmnet_xport_names, %object
	.size	rmnet_xport_names, 50
rmnet_xport_names:
	.space	50
	.space	2
	.type	rmnet_transports, %object
	.size	rmnet_transports, 50
rmnet_transports:
	.space	50
	.space	2
	.type	mbim_transports, %object
	.size	mbim_transports, 50
mbim_transports:
	.space	50
	.space	2
	.type	rmnet_smd, %object
	.size	rmnet_smd, 4
rmnet_smd:
	.space	4
	.type	gserial_wq, %object
	.size	gserial_wq, 4
gserial_wq:
	.space	4
	.type	gsdio_wq, %object
	.size	gsdio_wq, 4
gsdio_wq:
	.space	4
	.type	debug_buffer, %object
	.size	debug_buffer, 4096
debug_buffer:
	.space	4096
	.type	uether_wq, %object
	.size	uether_wq, 4
uether_wq:
	.space	4
	.type	d_lock, %object
	.size	d_lock, 4
d_lock:
	.space	4
	.type	ghsuart_ctrl_dent, %object
	.size	ghsuart_ctrl_dent, 4
ghsuart_ctrl_dent:
	.space	4
	.type	ghsuart_data_dent, %object
	.size	ghsuart_data_dent, 4
ghsuart_data_dent:
	.space	4
	.type	ch_lock, %object
	.size	ch_lock, 4
ch_lock:
	.space	4
	.type	grmnet_ctrl_wq, %object
	.size	grmnet_ctrl_wq, 4
grmnet_ctrl_wq:
	.space	4
	.type	_adb_dev, %object
	.size	_adb_dev, 4
_adb_dev:
	.space	4
	.type	gdata_dent, %object
	.size	gdata_dent, 4
gdata_dent:
	.space	4
	.type	gdata_dfile_stats, %object
	.size	gdata_dfile_stats, 4
gdata_dfile_stats:
	.space	4
	.type	gdata_dfile_tstamp, %object
	.size	gdata_dfile_tstamp, 4
gdata_dfile_tstamp:
	.space	4
	.type	diag_dev_list, %object
	.size	diag_dev_list, 8
diag_dev_list:
	.space	8
	.type	n_tx_req_queued, %object
	.size	n_tx_req_queued, 4
n_tx_req_queued:
	.space	4
	.type	gbam_wq, %object
	.size	gbam_wq, 4
gbam_wq:
	.space	4
	.type	retry_cnt.39202, %object
	.size	retry_cnt.39202, 4
retry_cnt.39202:
	.space	4
	.type	acm_transports, %object
	.size	acm_transports, 32
acm_transports:
	.space	32
	.type	serial_transports, %object
	.size	serial_transports, 32
serial_transports:
	.space	32
	.type	diag_clients, %object
	.size	diag_clients, 32
diag_clients:
	.space	32
	.type	gsmd_wq, %object
	.size	gsmd_wq, 4
gsmd_wq:
	.space	4
	.type	__key.50211, %object
	.size	__key.50211, 0
__key.50211:
	.type	ctrl_port, %object
	.size	ctrl_port, 4
ctrl_port:
	.space	4
	.type	__key.55722, %object
	.size	__key.55722, 0
__key.55722:
	.type	__key.55723, %object
	.size	__key.55723, 0
__key.55723:
	.type	__key.54400, %object
	.size	__key.54400, 0
__key.54400:
	.type	__key.54401, %object
	.size	__key.54401, 0
__key.54401:
	.type	__key.54402, %object
	.size	__key.54402, 0
__key.54402:
	.type	__key.53518, %object
	.size	__key.53518, 0
__key.53518:
	.type	__key.53519, %object
	.size	__key.53519, 0
__key.53519:
	.type	__key.39312, %object
	.size	__key.39312, 0
__key.39312:
	.type	__key.39438, %object
	.size	__key.39438, 0
__key.39438:
	.type	nr_mbim_ports, %object
	.size	nr_mbim_ports, 4
nr_mbim_ports:
	.space	4
	.type	mbim_ports, %object
	.size	mbim_ports, 8
mbim_ports:
	.space	8
	.type	next_state.62382, %object
	.size	next_state.62382, 4
next_state.62382:
	.space	4
	.type	last_uevent.62381, %object
	.size	last_uevent.62381, 4
last_uevent.62381:
	.space	4
	.type	epnum, %object
	.size	epnum, 4
epnum:
	.space	4
	.type	android_dev_count, %object
	.size	android_dev_count, 4
android_dev_count:
	.space	4
	.type	record_timestamp, %object
	.size	record_timestamp, 4
record_timestamp:
	.space	4
	.type	dbg_data, %object
	.size	dbg_data, 4104
dbg_data:
	.space	4104
	.type	__key.57371, %object
	.size	__key.57371, 0
__key.57371:
	.type	__key.57372, %object
	.size	__key.57372, 0
__key.57372:
	.type	rndis_per_dev_params, %object
	.size	rndis_per_dev_params, 60
rndis_per_dev_params:
	.space	60
	.type	__key.53877, %object
	.size	__key.53877, 0
__key.53877:
	.type	__key.53820, %object
	.size	__key.53820, 0
__key.53820:
	.type	__key.53821, %object
	.size	__key.53821, 0
__key.53821:
	.type	__key.44934, %object
	.size	__key.44934, 0
__key.44934:
	.type	__key.44936, %object
	.size	__key.44936, 0
__key.44936:
	.type	__key.8215, %object
	.size	__key.8215, 0
__key.8215:
	.type	retry_cnt.38398, %object
	.size	retry_cnt.38398, 4
retry_cnt.38398:
	.space	4
	.type	rmnet_mux_smd_data_ch, %object
	.size	rmnet_mux_smd_data_ch, 4
rmnet_mux_smd_data_ch:
	.space	4
	.type	write_error_after_csw_sent, %object
	.size	write_error_after_csw_sent, 4
write_error_after_csw_sent:
	.space	4
	.type	csw_hack_sent, %object
	.size	csw_hack_sent, 4
csw_hack_sent:
	.space	4
	.type	android_class, %object
	.size	android_class, 4
android_class:
	.space	4
	.type	__key.46415, %object
	.size	__key.46415, 0
__key.46415:
	.type	__key.46424, %object
	.size	__key.46424, 0
__key.46424:
	.type	composite_manufacturer, %object
	.size	composite_manufacturer, 50
composite_manufacturer:
	.space	50
	.space	2
	.type	iManufacturer, %object
	.size	iManufacturer, 4
iManufacturer:
	.space	4
	.type	iProduct, %object
	.size	iProduct, 4
iProduct:
	.space	4
	.type	iSerialNumber, %object
	.size	iSerialNumber, 4
iSerialNumber:
	.space	4
	.type	composite_gadget_bind, %object
	.size	composite_gadget_bind, 4
composite_gadget_bind:
	.space	4
	.type	idVendor, %object
	.size	idVendor, 2
idVendor:
	.space	2
	.type	idProduct, %object
	.size	idProduct, 2
idProduct:
	.space	2
	.type	bcdDevice, %object
	.size	bcdDevice, 2
bcdDevice:
	.space	2
	.space	2
	.type	__key.44971, %object
	.size	__key.44971, 0
__key.44971:
	.type	__key.44972, %object
	.size	__key.44972, 0
__key.44972:
	.type	__key.64237, %object
	.size	__key.64237, 0
__key.64237:
	.type	__key.64241, %object
	.size	__key.64241, 0
__key.64241:
	.type	unknown.46175, %object
	.size	unknown.46175, 16
unknown.46175:
	.space	16
	.type	bam_info, %object
	.size	bam_info, 16
bam_info:
	.space	16
	.type	__key.32858, %object
	.size	__key.32858, 0
__key.32858:
	.type	__key.32859, %object
	.size	__key.32859, 0
__key.32859:
	.type	prev_len.47418, %object
	.size	prev_len.47418, 4
prev_len.47418:
	.space	4
	.type	ports, %object
	.size	ports, 224
ports:
	.space	224
	.type	gs_tty_driver, %object
	.size	gs_tty_driver, 4
gs_tty_driver:
	.space	4
	.type	__key.47699, %object
	.size	__key.47699, 0
__key.47699:
	.type	__key.47645, %object
	.size	__key.47645, 0
__key.47645:
	.type	__key.47646, %object
	.size	__key.47646, 0
__key.47646:
	.type	n_ports, %object
	.size	n_ports, 4
n_ports:
	.space	4
	.type	__key.48597, %object
	.size	__key.48597, 0
__key.48597:
	.type	__key.48933, %object
	.size	__key.48933, 0
__key.48933:
	.type	n_bam2bam_ports, %object
	.size	n_bam2bam_ports, 4
n_bam2bam_ports:
	.space	4
	.type	nr_rmnet_ports, %object
	.size	nr_rmnet_ports, 4
nr_rmnet_ports:
	.space	4
	.type	no_ctrl_smd_ports, %object
	.size	no_ctrl_smd_ports, 4
no_ctrl_smd_ports:
	.space	4
	.type	no_ctrl_qti_ports, %object
	.size	no_ctrl_qti_ports, 4
no_ctrl_qti_ports:
	.space	4
	.type	no_data_bam_ports, %object
	.size	no_data_bam_ports, 4
no_data_bam_ports:
	.space	4
	.type	no_data_bam2bam_ports, %object
	.size	no_data_bam2bam_ports, 4
no_data_bam2bam_ports:
	.space	4
	.type	no_ctrl_hsic_ports, %object
	.size	no_ctrl_hsic_ports, 4
no_ctrl_hsic_ports:
	.space	4
	.type	no_data_hsic_ports, %object
	.size	no_data_hsic_ports, 4
no_data_hsic_ports:
	.space	4
	.type	no_ctrl_hsuart_ports, %object
	.size	no_ctrl_hsuart_ports, 4
no_ctrl_hsuart_ports:
	.space	4
	.type	no_data_hsuart_ports, %object
	.size	no_data_hsuart_ports, 4
no_data_hsuart_ports:
	.space	4
	.type	__key.49977, %object
	.size	__key.49977, 0
__key.49977:
	.type	__key.49978, %object
	.size	__key.49978, 0
__key.49978:
	.type	gps_initialized.62697, %object
	.size	gps_initialized.62697, 4
gps_initialized.62697:
	.space	4
	.type	port_num.51154, %object
	.size	port_num.51154, 4
port_num.51154:
	.space	4
	.type	port_num.51900, %object
	.size	port_num.51900, 4
port_num.51900:
	.space	4
	.type	rmnet_initialized.62623, %object
	.size	rmnet_initialized.62623, 4
rmnet_initialized.62623:
	.space	4
	.type	ports.62624, %object
	.size	ports.62624, 4
ports.62624:
	.space	4
	.type	serial_initialized.63019, %object
	.size	serial_initialized.63019, 4
serial_initialized.63019:
	.space	4
	.type	ports.63020, %object
	.size	ports.63020, 4
ports.63020:
	.space	4
	.type	no_tty_ports, %object
	.size	no_tty_ports, 4
no_tty_ports:
	.space	4
	.type	no_sdio_ports, %object
	.size	no_sdio_ports, 4
no_sdio_ports:
	.space	4
	.type	no_smd_ports, %object
	.size	no_smd_ports, 4
no_smd_ports:
	.space	4
	.type	no_hsic_sports, %object
	.size	no_hsic_sports, 4
no_hsic_sports:
	.space	4
	.type	no_hsuart_sports, %object
	.size	no_hsuart_sports, 4
no_hsuart_sports:
	.space	4
	.type	nr_ports, %object
	.size	nr_ports, 4
nr_ports:
	.space	4
	.type	acm_initialized.62570, %object
	.size	acm_initialized.62570, 4
acm_initialized.62570:
	.space	4
	.type	ports.62571, %object
	.size	ports.62571, 4
ports.62571:
	.space	4
	.type	no_acm_tty_ports, %object
	.size	no_acm_tty_ports, 4
no_acm_tty_ports:
	.space	4
	.type	no_acm_sdio_ports, %object
	.size	no_acm_sdio_ports, 4
no_acm_sdio_ports:
	.space	4
	.type	no_acm_smd_ports, %object
	.size	no_acm_smd_ports, 4
no_acm_smd_ports:
	.space	4
	.type	nr_acm_ports, %object
	.size	nr_acm_ports, 4
nr_acm_ports:
	.space	4
	.type	rndis_initialized, %object
	.size	rndis_initialized, 1
rndis_initialized:
	.space	1
	.space	3
	.type	ipa_params, %object
	.size	ipa_params, 28
ipa_params:
	.space	28
	.type	n_bam2bam_data_ports, %object
	.size	n_bam2bam_data_ports, 4
n_bam2bam_data_ports:
	.space	4
	.type	bam_data_wq, %object
	.size	bam_data_wq, 4
bam_data_wq:
	.space	4
	.type	the_dev, %object
	.size	the_dev, 4
the_dev:
	.space	4
	.type	dev_addr, %object
	.size	dev_addr, 4
dev_addr:
	.space	4
	.type	host_addr, %object
	.size	host_addr, 4
host_addr:
	.space	4
	.type	qc_dev_addr, %object
	.size	qc_dev_addr, 4
qc_dev_addr:
	.space	4
	.type	qc_host_addr, %object
	.size	qc_host_addr, 4
qc_host_addr:
	.space	4
	.type	the_card, %object
	.size	the_card, 4
the_card:
	.space	4
	.type	audio_reinit, %object
	.size	audio_reinit, 1
audio_reinit:
	.space	1
	.space	3
	.type	diag_dload, %object
	.size	diag_dload, 4
diag_dload:
	.space	4
	.type	audio_string_defs, %object
	.size	audio_string_defs, 8
audio_string_defs:
	.space	8
	.type	_rndis_qc, %object
	.size	_rndis_qc, 4
_rndis_qc:
	.space	4
	.type	bam2bam_data_ports, %object
	.size	bam2bam_data_ports, 4
bam2bam_data_ports:
	.space	4
	.type	rndis_ul_max_xfer_size_rcvd, %object
	.size	rndis_ul_max_xfer_size_rcvd, 4
rndis_ul_max_xfer_size_rcvd:
	.space	4
	.type	rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	rndis_ul_max_pkt_per_xfer_rcvd, 4
rndis_ul_max_pkt_per_xfer_rcvd:
	.space	4
	.type	gctrl_dfile, %object
	.size	gctrl_dfile, 4
gctrl_dfile:
	.space	4
	.type	gctrl_dent, %object
	.size	gctrl_dent, 4
gctrl_dent:
	.space	4
	.type	smd_ctrl_dfile, %object
	.size	smd_ctrl_dfile, 4
smd_ctrl_dfile:
	.space	4
	.type	smd_ctrl_dent, %object
	.size	smd_ctrl_dent, 4
smd_ctrl_dent:
	.space	4
	.type	online_clients, %object
	.size	online_clients, 1
online_clients:
	.space	1
	.space	3
	.type	gbam_dent, %object
	.size	gbam_dent, 4
gbam_dent:
	.space	4
	.type	bam2bam_ports, %object
	.size	bam2bam_ports, 12
bam2bam_ports:
	.space	12
	.type	gs_dent, %object
	.size	gs_dent, 4
gs_dent:
	.space	4
	.type	dent_rmnet_mux, %object
	.size	dent_rmnet_mux, 4
dent_rmnet_mux:
	.space	4
	.type	rmnet_mux_sdio_data_ch, %object
	.size	rmnet_mux_sdio_data_ch, 4
rmnet_mux_sdio_data_ch:
	.space	4
	.type	rmnet_mux_sdio_ctl_ch, %object
	.size	rmnet_mux_sdio_ctl_ch, 4
rmnet_mux_sdio_ctl_ch:
	.space	4
	.type	rmnet_sdio_data_ch, %object
	.size	rmnet_sdio_data_ch, 4
rmnet_sdio_data_ch:
	.space	4
	.type	rmnet_sdio_ctl_ch, %object
	.size	rmnet_sdio_ctl_ch, 4
rmnet_sdio_ctl_ch:
	.space	4
	.type	dent_smd, %object
	.size	dent_smd, 4
dent_smd:
	.space	4
	.type	dent_diag, %object
	.size	dent_diag, 4
dent_diag:
	.space	4
	.section	.data.rel,"aw",%progbits
	.align	2
.LANCHOR7 = . + 0
	.type	f_audio_desc, %object
	.size	f_audio_desc, 76
f_audio_desc:
	.word	uac1_ac_interface_desc
	.word	uac1_ac_header_desc
	.word	microphone_input_terminal_desc
	.word	microphone_output_terminal_desc
	.word	speaker_input_terminal_desc
	.word	speaker_output_terminal_desc
	.word	microphone_as_interface_alt_0_desc
	.word	microphone_as_interface_alt_1_desc
	.word	microphone_as_header_desc
	.word	microphone_as_type_i_desc
	.word	microphone_as_ep_in_desc
	.word	microphone_as_iso_in_desc
	.word	speaker_as_interface_alt_0_desc
	.word	speaker_as_interface_alt_1_desc
	.word	speaker_as_header_desc
	.word	speaker_as_type_i_desc
	.word	speaker_as_ep_out_desc
	.word	speaker_as_iso_out_desc
	.word	0
	.type	audio_playback_ops, %object
	.size	audio_playback_ops, 64
audio_playback_ops:
	.word	audio_pcm_open
	.word	audio_pcm_close
	.word	snd_pcm_lib_ioctl
	.space	4
	.word	audio_pcm_hw_params
	.word	audio_pcm_hw_free
	.word	audio_pcm_prepare
	.word	audio_pcm_playback_trigger
	.word	audio_pcm_pointer
	.space	16
	.word	audio_pcm_mmap
	.space	8
	.type	___modver_attr, %object
	.size	___modver_attr, 36
___modver_attr:
	.word	.LC897
	.short	292
	.space	2
	.word	__modver_version_show
	.space	16
	.word	.LC509
	.word	.LC898
	.ident	"GCC: (GNU) 4.9.x 20150123 (prerelease)"
	.section	.note.GNU-stack,"",%progbits
